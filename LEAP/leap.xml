<?xml version="1.0" standalone="yes"?>
<doxygen version="1.8.13"><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1detail_1_1__fixed" kind="struct" language="C++" prot="public">
    <compoundname>icrar::detail::_fixed</compoundname>
    <templateparamlist>
      <param>
        <type>int</type>
        <declname>N</declname>
        <defname>N</defname>
      </param>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1detail_1_1__fixed_1af2ede9dd958780521dddd707de7a96da" prot="public" static="no" mutable="no">
        <type>T</type>
        <definition>T icrar::detail::_fixed&lt; N, T &gt;::_val</definition>
        <argsstring/>
        <name>_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="35" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="34" bodyend="37"/>
    <listofallmembers>
      <member refid="structicrar_1_1detail_1_1__fixed_1af2ede9dd958780521dddd707de7a96da" prot="public" virt="non-virtual"><scope>icrar::detail::_fixed</scope><name>_val</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1detail_1_1__memory__amount" kind="struct" language="C++" prot="public">
    <compoundname>icrar::detail::_memory_amount</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1detail_1_1__memory__amount_1a016b0bcbedb8bab8a424cbc6018629dc" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t icrar::detail::_memory_amount::_val</definition>
        <argsstring/>
        <name>_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="72" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="70" bodyend="73"/>
    <listofallmembers>
      <member refid="structicrar_1_1detail_1_1__memory__amount_1a016b0bcbedb8bab8a424cbc6018629dc" prot="public" virt="non-virtual"><scope>icrar::detail::_memory_amount</scope><name>_val</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1detail_1_1__microseconds__amount" kind="struct" language="C++" prot="public">
    <compoundname>icrar::detail::_microseconds_amount</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1detail_1_1__microseconds__amount_1a056ef4dcba7215235815c68bea3c1bd9" prot="public" static="no" mutable="no">
        <type>std::chrono::microseconds::rep</type>
        <definition>std::chrono::microseconds::rep icrar::detail::_microseconds_amount::_val</definition>
        <argsstring/>
        <name>_val</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="77" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="75" bodyend="78"/>
    <listofallmembers>
      <member refid="structicrar_1_1detail_1_1__microseconds__amount_1a056ef4dcba7215235815c68bea3c1bd9" prot="public" virt="non-virtual"><scope>icrar::detail::_microseconds_amount</scope><name>_val</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1ArgumentsDTO" kind="struct" language="C++" prot="public">
    <compoundname>icrar::ArgumentsDTO</compoundname>
    <includes local="no">Arguments.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a8ced92ce956e70a57c00ff794cd44f6b" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; <ref refid="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509" kindref="member">InputType</ref> &gt;</type>
        <definition>boost::optional&lt;InputType&gt; icrar::ArgumentsDTO::inputType</definition>
        <argsstring/>
        <name>inputType</name>
        <briefdescription>
<para>MeasurementSet source type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="83" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a0e7d2966ffc645ebbd87d34426e06937" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsDTO::filePath</definition>
        <argsstring/>
        <name>filePath</name>
        <briefdescription>
<para>MeasurementSet filepath. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="84" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a00b9fcbc0e7d3d278ed96c17a78a851c" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsDTO::configFilePath</definition>
        <argsstring/>
        <name>configFilePath</name>
        <briefdescription>
<para>Optional config filepath. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="85" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a69ab238c3629b050d217be66e34d5aad" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; <ref refid="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" kindref="member">StreamOutType</ref> &gt;</type>
        <definition>boost::optional&lt;StreamOutType&gt; icrar::ArgumentsDTO::streamOutType</definition>
        <argsstring/>
        <name>streamOutType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="86" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1afed15b3f5b7e00394bae31b3a8628355" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsDTO::outputFilePath</definition>
        <argsstring/>
        <name>outputFilePath</name>
        <briefdescription>
<para>Calibration output file, print to terminal if empty. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="87" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a903dc4d0ce03d4cf5c6b7ccedd266e19" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; int &gt;</type>
        <definition>boost::optional&lt;int&gt; icrar::ArgumentsDTO::stations</definition>
        <argsstring/>
        <name>stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="89" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a456d0ff2cf5eea00bf490bcfbebc3a50" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; unsigned int &gt;</type>
        <definition>boost::optional&lt;unsigned int&gt; icrar::ArgumentsDTO::referenceAntenna</definition>
        <argsstring/>
        <name>referenceAntenna</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="90" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a0820c27fc79ecd809d5c1d75c8660e8d" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::vector&lt; SphericalDirection &gt; &gt;</type>
        <definition>boost::optional&lt;std::vector&lt;SphericalDirection&gt; &gt; icrar::ArgumentsDTO::directions</definition>
        <argsstring/>
        <name>directions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="91" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a16fa8024cf6c09d1df99485e97616ba8" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; <ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref> &gt;</type>
        <definition>boost::optional&lt;ComputeImplementation&gt; icrar::ArgumentsDTO::computeImplementation</definition>
        <argsstring/>
        <name>computeImplementation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="92" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a3d5ad0dbf33ff2bc6b75cb1d51870296" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref> &gt;</type>
        <definition>boost::optional&lt;Slice&gt; icrar::ArgumentsDTO::solutionInterval</definition>
        <argsstring/>
        <name>solutionInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="93" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a2f0ef5825048b247e722bf719dfb96cf" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; double &gt;</type>
        <definition>boost::optional&lt;double&gt; icrar::ArgumentsDTO::minimumBaselineThreshold</definition>
        <argsstring/>
        <name>minimumBaselineThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="94" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1abf875d1a7fed5dac8526ea136fc5a965" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ArgumentsDTO::readAutocorrelations</definition>
        <argsstring/>
        <name>readAutocorrelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="95" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1ae7cca00a91781aa60376449bf4254579" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ArgumentsDTO::mwaSupport</definition>
        <argsstring/>
        <name>mwaSupport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="96" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a955dbd78452babc7d48c309104071d1e" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; <ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">icrar::log::Verbosity</ref> &gt;</type>
        <definition>boost::optional&lt;icrar::log::Verbosity&gt; icrar::ArgumentsDTO::verbosity</definition>
        <argsstring/>
        <name>verbosity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="97" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1af3ebc5ba9b6f9be66aee9425d879dcb8" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ArgumentsDTO::useFileSystemCache</definition>
        <argsstring/>
        <name>useFileSystemCache</name>
        <briefdescription>
<para>Whether to update a file cache for fast inverse matrix loading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="99" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1aaf414485b14c963e7bd083f4f7c61a4d" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ArgumentsDTO::useIntermediateBuffer</definition>
        <argsstring/>
        <name>useIntermediateBuffer</name>
        <briefdescription>
<para>Whether to allocate intermediate buffers for reduced cpu-&gt;gpu copies. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="100" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ArgumentsDTO_1a4475bbab4ef5d91084068b99e2fee466" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ArgumentsDTO::useCusolver</definition>
        <argsstring/>
        <name>useCusolver</name>
        <briefdescription>
<para>Whether to use cusolverDn for matrix inversion. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="101" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1ArgumentsDTO_1ad2271fc2f9cf0f0eaf5b228690c9055e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::ArgumentsDTO::ArgumentsDTO</definition>
        <argsstring>()=default</argsstring>
        <name>ArgumentsDTO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1ArgumentsDTO_1a42b407f3df435fd0c0e928979b6a94b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::ArgumentsDTO::ArgumentsDTO</definition>
        <argsstring>(CLIArgumentsDTO &amp;&amp;args)</argsstring>
        <name>ArgumentsDTO</name>
        <param>
          <type><ref refid="structicrar_1_1CLIArgumentsDTO" kindref="compound">CLIArgumentsDTO</ref> &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="81" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="62" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Typed arguments of <computeroutput>CLIArgumentsDTO</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="79" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="78" bodyend="102"/>
    <listofallmembers>
      <member refid="structicrar_1_1ArgumentsDTO_1ad2271fc2f9cf0f0eaf5b228690c9055e" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>ArgumentsDTO</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a42b407f3df435fd0c0e928979b6a94b3" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>ArgumentsDTO</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a16fa8024cf6c09d1df99485e97616ba8" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>computeImplementation</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a00b9fcbc0e7d3d278ed96c17a78a851c" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>configFilePath</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a0820c27fc79ecd809d5c1d75c8660e8d" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>directions</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a0e7d2966ffc645ebbd87d34426e06937" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>filePath</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a8ced92ce956e70a57c00ff794cd44f6b" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>inputType</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a2f0ef5825048b247e722bf719dfb96cf" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>minimumBaselineThreshold</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1ae7cca00a91781aa60376449bf4254579" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>mwaSupport</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1afed15b3f5b7e00394bae31b3a8628355" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>outputFilePath</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1abf875d1a7fed5dac8526ea136fc5a965" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>readAutocorrelations</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a456d0ff2cf5eea00bf490bcfbebc3a50" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>referenceAntenna</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a3d5ad0dbf33ff2bc6b75cb1d51870296" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>solutionInterval</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a903dc4d0ce03d4cf5c6b7ccedd266e19" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>stations</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a69ab238c3629b050d217be66e34d5aad" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>streamOutType</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a4475bbab4ef5d91084068b99e2fee466" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>useCusolver</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1af3ebc5ba9b6f9be66aee9425d879dcb8" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>useFileSystemCache</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1aaf414485b14c963e7bd083f4f7c61a4d" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>useIntermediateBuffer</name></member>
      <member refid="structicrar_1_1ArgumentsDTO_1a955dbd78452babc7d48c309104071d1e" prot="public" virt="non-virtual"><scope>icrar::ArgumentsDTO</scope><name>verbosity</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1ArgumentsValidated" kind="class" language="C++" prot="public">
    <compoundname>icrar::ArgumentsValidated</compoundname>
    <includes local="no">Arguments.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a433de4bb3b1654d507f2c99091c54646" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509" kindref="member">InputType</ref></type>
        <definition>InputType icrar::ArgumentsValidated::m_inputType</definition>
        <argsstring/>
        <name>m_inputType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constants </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="112" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a7b3ac581ebaebde4b679de78616e7a02" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsValidated::m_filePath</definition>
        <argsstring/>
        <name>m_filePath</name>
        <briefdescription>
<para>MeasurementSet filepath. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="113" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a2aeb968f50ae0e547c5532f48e388dab" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsValidated::m_configFilePath</definition>
        <argsstring/>
        <name>m_configFilePath</name>
        <briefdescription>
<para>Config filepath. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="114" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a20fe2a646f15a35413bcbc17ff30fada" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" kindref="member">StreamOutType</ref></type>
        <definition>StreamOutType icrar::ArgumentsValidated::m_streamOutType</definition>
        <argsstring/>
        <name>m_streamOutType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="115" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a5cdb53ed78216d0525066909aa3f4e6c" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsValidated::m_outputFilePath</definition>
        <argsstring/>
        <name>m_outputFilePath</name>
        <briefdescription>
<para>Calibration output filepath. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="116" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a2a82bc5d219acc81f385ba86f4e813cb" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; unsigned int &gt;</type>
        <definition>boost::optional&lt;unsigned int&gt; icrar::ArgumentsValidated::m_referenceAntenna</definition>
        <argsstring/>
        <name>m_referenceAntenna</name>
        <briefdescription>
<para>Index of the reference antenna. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="118" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a375108d87794450edda113517e3d9772" prot="private" static="no" mutable="no">
        <type>std::vector&lt; SphericalDirection &gt;</type>
        <definition>std::vector&lt;SphericalDirection&gt; icrar::ArgumentsValidated::m_directions</definition>
        <argsstring/>
        <name>m_directions</name>
        <briefdescription>
<para>Calibration directions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="119" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a7d750b234e3c96f91427c9c34365dc97" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
        <definition>ComputeImplementation icrar::ArgumentsValidated::m_computeImplementation</definition>
        <argsstring/>
        <name>m_computeImplementation</name>
        <briefdescription>
<para>Specifies the implementation for calibration computation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="120" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a33f913ab6b7540fc620aa0bbabbf6998" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>Slice icrar::ArgumentsValidated::m_solutionInterval</definition>
        <argsstring/>
        <name>m_solutionInterval</name>
        <briefdescription>
<para>Specifies the interval to calculate solutions for. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="121" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a1ffd50ad82cb6df934f8f088db8318de" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::ArgumentsValidated::m_minimumBaselineThreshold</definition>
        <argsstring/>
        <name>m_minimumBaselineThreshold</name>
        <briefdescription>
<para>Minimum baseline length otherwise flagged at runtime. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="122" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a0a074e0b6a87d5f303391ecf67480962" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::ArgumentsValidated::m_mwaSupport</definition>
        <argsstring/>
        <name>m_mwaSupport</name>
        <briefdescription>
<para>Negates baselines when enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="123" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a188504021a4b4e68f9ac0a8df0db358b" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">icrar::log::Verbosity</ref></type>
        <definition>icrar::log::Verbosity icrar::ArgumentsValidated::m_verbosity</definition>
        <argsstring/>
        <name>m_verbosity</name>
        <briefdescription>
<para>Defines logging level for std::out. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="124" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a3f237f68fe2cee6c89d07a676b481fed" prot="private" static="no" mutable="no">
        <type><ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref></type>
        <definition>ComputeOptionsDTO icrar::ArgumentsValidated::m_computeOptions</definition>
        <argsstring/>
        <name>m_computeOptions</name>
        <briefdescription>
<para>Defines options for compute performance tweaks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="126" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a0ac3b662c3beb1d5ddb83d6025ef6429" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MeasurementSet&gt; icrar::ArgumentsValidated::m_measurementSet</definition>
        <argsstring/>
        <name>m_measurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resources </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="131" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a0e343c80e53f9c499127e6edd3efb45d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::ArgumentsValidated::ArgumentsValidated</definition>
        <argsstring>(ArgumentsDTO &amp;&amp;cliArgs)</argsstring>
        <name>ArgumentsValidated</name>
        <param>
          <type><ref refid="structicrar_1_1ArgumentsDTO" kindref="compound">ArgumentsDTO</ref> &amp;&amp;</type>
          <declname>cliArgs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="134" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="119" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a13bc51d76c00601a6fb83e8d0374d2ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::ArgumentsValidated::ApplyArguments</definition>
        <argsstring>(ArgumentsDTO &amp;&amp;args)</argsstring>
        <name>ApplyArguments</name>
        <param>
          <type><ref refid="structicrar_1_1ArgumentsDTO" kindref="compound">ArgumentsDTO</ref> &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Overwrites the stored set of arguments. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="141" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="167" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a54c621d569eee204bffb1e7cfea9ad2b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::ArgumentsValidated::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="143" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="246" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a10adb687db097c401f2f2d913d0f8a7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt; std::string &gt; icrar::ArgumentsValidated::GetOutputFilePath</definition>
        <argsstring>() const</argsstring>
        <name>GetOutputFilePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="145" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="254" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a76bd0c0beeff3945e3352fc98ffa505f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; std::ostream &gt;</type>
        <definition>std::unique_ptr&lt; std::ostream &gt; icrar::ArgumentsValidated::CreateOutputStream</definition>
        <argsstring>(double startEpoch=0.0) const</argsstring>
        <name>CreateOutputStream</name>
        <param>
          <type>double</type>
          <declname>startEpoch</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="147" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="264" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a8623723a7737559ad06c3ba2bc59222a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" kindref="member">StreamOutType</ref></type>
        <definition>StreamOutType icrar::ArgumentsValidated::GetStreamOutType</definition>
        <argsstring>() const</argsstring>
        <name>GetStreamOutType</name>
        <briefdescription>
<para>Gets the configuration for output stream type. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>StreamOutType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="154" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="259" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1af211a3dffc76a7d4feedc96a6f7bc3fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1MeasurementSet" kindref="compound">MeasurementSet</ref> &amp;</type>
        <definition>MeasurementSet &amp; icrar::ArgumentsValidated::GetMeasurementSet</definition>
        <argsstring>()</argsstring>
        <name>GetMeasurementSet</name>
        <briefdescription>
<para>Gets the user specifified measurement set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>MeasurementSet&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="161" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="290" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a9f90b588a3ebdb50b2c7f70f15d08e51" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; SphericalDirection &gt; &amp;</type>
        <definition>const std::vector&lt; SphericalDirection &gt; &amp; icrar::ArgumentsValidated::GetDirections</definition>
        <argsstring>() const</argsstring>
        <name>GetDirections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="163" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="295" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1aaee2fb19c5dfd8874dfa284d48d62677" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
        <definition>ComputeImplementation icrar::ArgumentsValidated::GetComputeImplementation</definition>
        <argsstring>() const</argsstring>
        <name>GetComputeImplementation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="165" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="300" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1acbb6f6e88a76b01c393995256ebd163f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>Slice icrar::ArgumentsValidated::GetSolutionInterval</definition>
        <argsstring>() const</argsstring>
        <name>GetSolutionInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="167" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="305" bodyend="308"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a530c0fd21bf22c04d908bd6da623da01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>boost::optional&lt; unsigned int &gt;</type>
        <definition>boost::optional&lt; unsigned int &gt; icrar::ArgumentsValidated::GetReferenceAntenna</definition>
        <argsstring>() const</argsstring>
        <name>GetReferenceAntenna</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="169" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="310" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a6cecd521e131336649459971e5db3b64" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double icrar::ArgumentsValidated::GetMinimumBaselineThreshold</definition>
        <argsstring>() const</argsstring>
        <name>GetMinimumBaselineThreshold</name>
        <briefdescription>
<para>Gets the minimum baseline threshold in meteres. Baselines of length beneath the threshold are to be filtered/flagged. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>double baseline threshold length in meters </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="177" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="315" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1ae526fdad8a2b0a8118040a276b0a94f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref></type>
        <definition>ComputeOptionsDTO icrar::ArgumentsValidated::GetComputeOptions</definition>
        <argsstring>() const</argsstring>
        <name>GetComputeOptions</name>
        <briefdescription>
<para>Gets configured options related to compute performance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>ComputeOptionsDTO </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="184" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="320" bodyend="323"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a9bfc6aae05a29d3d8ac1aec85a71d752" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">icrar::log::Verbosity</ref></type>
        <definition>icrar::log::Verbosity icrar::ArgumentsValidated::GetVerbosity</definition>
        <argsstring>() const</argsstring>
        <name>GetVerbosity</name>
        <briefdescription>
<para>Gets the configured logging verbosity. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>icrar::log::Verbosity </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="191" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="325" bodyend="328"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1afcbe7f746b98663acb52bf6708187aa1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicrar_1_1ArgumentsDTO" kindref="compound">ArgumentsDTO</ref></type>
        <definition>ArgumentsDTO icrar::ArgumentsValidated::ParseConfig</definition>
        <argsstring>(const std::string &amp;configFilepath)</argsstring>
        <name>ParseConfig</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>configFilepath</declname>
        </param>
        <briefdescription>
<para>Converts a JSON file to a config. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configFilepath</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Config </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="200" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="330" bodyend="335"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a1bb2fbf92786164aa449576f0da1f666" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::ArgumentsValidated::ParseConfig</definition>
        <argsstring>(const std::string &amp;configFilepath, ArgumentsDTO &amp;args)</argsstring>
        <name>ParseConfig</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>configFilepath</declname>
        </param>
        <param>
          <type><ref refid="structicrar_1_1ArgumentsDTO" kindref="compound">ArgumentsDTO</ref> &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Converts a JSON file to a config. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configFilepath</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>args</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="208" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="350" bodyend="520"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Validated set of command line arguments required to perform leap calibration </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="108" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="107" bodyend="209"/>
    <listofallmembers>
      <member refid="classicrar_1_1ArgumentsValidated_1a13bc51d76c00601a6fb83e8d0374d2ef" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>ApplyArguments</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a0e343c80e53f9c499127e6edd3efb45d" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>ArgumentsValidated</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a76bd0c0beeff3945e3352fc98ffa505f" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>CreateOutputStream</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1aaee2fb19c5dfd8874dfa284d48d62677" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetComputeImplementation</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1ae526fdad8a2b0a8118040a276b0a94f0" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetComputeOptions</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a9f90b588a3ebdb50b2c7f70f15d08e51" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetDirections</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1af211a3dffc76a7d4feedc96a6f7bc3fd" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetMeasurementSet</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a6cecd521e131336649459971e5db3b64" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetMinimumBaselineThreshold</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a10adb687db097c401f2f2d913d0f8a7a" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetOutputFilePath</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a530c0fd21bf22c04d908bd6da623da01" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetReferenceAntenna</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1acbb6f6e88a76b01c393995256ebd163f" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetSolutionInterval</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a8623723a7737559ad06c3ba2bc59222a" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetStreamOutType</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a9bfc6aae05a29d3d8ac1aec85a71d752" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetVerbosity</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a7d750b234e3c96f91427c9c34365dc97" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_computeImplementation</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a3f237f68fe2cee6c89d07a676b481fed" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_computeOptions</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a2aeb968f50ae0e547c5532f48e388dab" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_configFilePath</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a375108d87794450edda113517e3d9772" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_directions</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a7b3ac581ebaebde4b679de78616e7a02" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_filePath</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a433de4bb3b1654d507f2c99091c54646" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_inputType</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a0ac3b662c3beb1d5ddb83d6025ef6429" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_measurementSet</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a1ffd50ad82cb6df934f8f088db8318de" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_minimumBaselineThreshold</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a0a074e0b6a87d5f303391ecf67480962" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_mwaSupport</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a5cdb53ed78216d0525066909aa3f4e6c" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_outputFilePath</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a2a82bc5d219acc81f385ba86f4e813cb" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_referenceAntenna</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a33f913ab6b7540fc620aa0bbabbf6998" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_solutionInterval</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a20fe2a646f15a35413bcbc17ff30fada" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_streamOutType</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a188504021a4b4e68f9ac0a8df0db358b" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_verbosity</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1afcbe7f746b98663acb52bf6708187aa1" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>ParseConfig</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a1bb2fbf92786164aa449576f0da1f666" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>ParseConfig</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a54c621d569eee204bffb1e7cfea9ad2b" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>Validate</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classband__data" kind="class" language="C++" prot="public">
    <compoundname>band_data</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classband__data_1a243cbfc7c1dbc7fad6253d8809ebd653" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t band_data::channelCount</definition>
        <argsstring/>
        <name>channelCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="19" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classband__data_1ae492c0a41e895cd637353b160dccafbe" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double band_data::frequencyStep</definition>
        <argsstring/>
        <name>frequencyStep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="20" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classband__data_1a019579450dc1db16e84d65041d8f1b55" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::unique_ptr&lt;std::vector&lt;double&gt; &gt; band_data::channelFrequencies</definition>
        <argsstring/>
        <name>channelFrequencies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="21" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classband__data_1a0ee4fd86d2a17b4503b7aa79ef3560f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>band_data::band_data</definition>
        <argsstring>()</argsstring>
        <name>band_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="24" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="24" bodyend="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/band_data.h" line="18" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="17" bodyend="29"/>
    <listofallmembers>
      <member refid="classband__data_1a0ee4fd86d2a17b4503b7aa79ef3560f1" prot="public" virt="non-virtual"><scope>band_data</scope><name>band_data</name></member>
      <member refid="classband__data_1a243cbfc7c1dbc7fad6253d8809ebd653" prot="private" virt="non-virtual"><scope>band_data</scope><name>channelCount</name></member>
      <member refid="classband__data_1a019579450dc1db16e84d65041d8f1b55" prot="private" virt="non-virtual"><scope>band_data</scope><name>channelFrequencies</name></member>
      <member refid="classband__data_1ae492c0a41e895cd637353b160dccafbe" prot="private" virt="non-virtual"><scope>band_data</scope><name>frequencyStep</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1BeamCalibration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::BeamCalibration</compoundname>
    <includes local="no">BeamCalibration.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1BeamCalibration_1a109560620baf278c4d49dd54fffbae15" prot="private" static="no" mutable="no">
        <type>SphericalDirection</type>
        <definition>SphericalDirection icrar::cpu::BeamCalibration::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="49" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1BeamCalibration_1af0dfd86c64d759059d504d078015c47a" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::BeamCalibration::m_calibration</definition>
        <argsstring/>
        <name>m_calibration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="50" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1a2c45c76cf11d071c2b3803b755e67cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::BeamCalibration::BeamCalibration</definition>
        <argsstring>(SphericalDirection direction, Eigen::MatrixXd calibration)</argsstring>
        <name>BeamCalibration</name>
        <param>
          <type>SphericalDirection</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>Eigen::MatrixXd</type>
          <declname>calibration</declname>
        </param>
        <briefdescription>
<para>Construct a new Direction Calibration object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>direciton of calibration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>calibration</parametername>
</parameternamelist>
<parameterdescription>
<para>calibration of each antenna for the given direction </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="59" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="29" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1a43e6d44afd264deaa17d78301dbee1eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::BeamCalibration::BeamCalibration</definition>
        <argsstring>(const std::pair&lt; SphericalDirection, Eigen::MatrixXd &gt; &amp;beamCalibration)</argsstring>
        <name>BeamCalibration</name>
        <param>
          <type>const std::pair&lt; SphericalDirection, Eigen::MatrixXd &gt; &amp;</type>
          <declname>beamCalibration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1ad62c8aa2d233c317834908fa4628e1b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::BeamCalibration::IsApprox</definition>
        <argsstring>(const BeamCalibration &amp;beamCalibration, double threshold)</argsstring>
        <name>IsApprox</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">BeamCalibration</ref> &amp;</type>
          <declname>beamCalibration</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="42" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1a0cae346b7156e8199fba0ac2831a9264" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const SphericalDirection &amp;</type>
        <definition>const SphericalDirection &amp; icrar::cpu::BeamCalibration::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
<para>Gets the calibration direction. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const SphericalDirection </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="70" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1a1d85bd4a8d9b3ed806331ed25fd938a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::BeamCalibration::GetPhaseCalibration</definition>
        <argsstring>() const</argsstring>
        <name>GetPhaseCalibration</name>
        <briefdescription>
<para>Get the phase calibration Vector for the antenna array in the specified direction. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const Eigen::MatrixXd </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="77" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="56" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1a378ceea08fbb6807b0b7ee9968110dfe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::BeamCalibration::Serialize</definition>
        <argsstring>(std::ostream &amp;os, bool pretty=false) const</argsstring>
        <name>Serialize</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Serializes the beam calibration to JSON format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>JSON output stream </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="84" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="61" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1ac83d981980c5d0f4b1d71b25c95fdfcc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Writer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::BeamCalibration::Write</definition>
        <argsstring>(Writer &amp;writer) const</argsstring>
        <name>Write</name>
        <param>
          <type>Writer &amp;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="87" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" bodystart="87" bodyend="109"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1BeamCalibration_1ae3c23948f6a2637ce1c081a092f416af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">BeamCalibration</ref></type>
        <definition>BeamCalibration icrar::cpu::BeamCalibration::Parse</definition>
        <argsstring>(const rapidjson::Value &amp;doc)</argsstring>
        <name>Parse</name>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="111" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc" bodystart="82" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains the results of leap calibration for a single direction. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" line="48" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h" bodystart="47" bodyend="112"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1a2c45c76cf11d071c2b3803b755e67cd9" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>BeamCalibration</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1a43e6d44afd264deaa17d78301dbee1eb" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>BeamCalibration</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1a0cae346b7156e8199fba0ac2831a9264" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1a1d85bd4a8d9b3ed806331ed25fd938a7" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>GetPhaseCalibration</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1ad62c8aa2d233c317834908fa4628e1b6" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>IsApprox</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1af0dfd86c64d759059d504d078015c47a" prot="private" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>m_calibration</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1a109560620baf278c4d49dd54fffbae15" prot="private" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1ae3c23948f6a2637ce1c081a092f416af" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>Parse</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1a378ceea08fbb6807b0b7ee9968110dfe" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>Serialize</name></member>
      <member refid="classicrar_1_1cpu_1_1BeamCalibration_1ac83d981980c5d0f4b1d71b25c95fdfcc" prot="public" virt="non-virtual"><scope>icrar::cpu::BeamCalibration</scope><name>Write</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1Calibration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::Calibration</compoundname>
    <includes local="no">Calibration.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Calibration_1a170686b9b7f158b758a4bbcefac50cea" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Calibration::m_startEpoch</definition>
        <argsstring/>
        <name>m_startEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="46" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Calibration_1ad5e65a0e1ade6cf92e153f266c6bb29a" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Calibration::m_endEpoch</definition>
        <argsstring/>
        <name>m_endEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="47" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Calibration_1ad19d4a559c2fb9a48340d7778fa8892a" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">BeamCalibration</ref> &gt;</type>
        <definition>std::vector&lt;BeamCalibration&gt; icrar::cpu::Calibration::m_beamCalibrations</definition>
        <argsstring/>
        <name>m_beamCalibrations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="48" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a5dc74740779a27364fcafd53ecce156f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::Calibration::Calibration</definition>
        <argsstring>(double startEpoch, double endEpoch)</argsstring>
        <name>Calibration</name>
        <param>
          <type>double</type>
          <declname>startEpoch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>endEpoch</declname>
        </param>
        <briefdescription>
<para>Creates an empty calibration. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>endEpoch</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="57" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="29" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a35f8afafa383d562fda44cf3c9a9b5ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::Calibration::Calibration</definition>
        <argsstring>(double startEpoch, double endEpoch, std::vector&lt; cpu::BeamCalibration &gt; &amp;&amp;beamCalibrations)</argsstring>
        <name>Calibration</name>
        <param>
          <type>double</type>
          <declname>startEpoch</declname>
        </param>
        <param>
          <type>double</type>
          <declname>endEpoch</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">cpu::BeamCalibration</ref> &gt; &amp;&amp;</type>
          <declname>beamCalibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="59" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="35" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1ab02ed8dff028aa14987cc278402cfbe9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double icrar::cpu::Calibration::GetStartEpoch</definition>
        <argsstring>() const</argsstring>
        <name>GetStartEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a9def7811696e741a45ca36f14035b217" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double icrar::cpu::Calibration::GetEndEpoch</definition>
        <argsstring>() const</argsstring>
        <name>GetEndEpoch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1af3cd8395b3aee2acacd929c2300a3829" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::Calibration::IsApprox</definition>
        <argsstring>(const Calibration &amp;calibration, double threshold)</argsstring>
        <name>IsApprox</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">Calibration</ref> &amp;</type>
          <declname>calibration</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="65" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="46" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1ac98d9e867f0a2d9436a5a816a484173b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">BeamCalibration</ref> &gt; &amp;</type>
        <definition>const std::vector&lt; BeamCalibration &gt; &amp; icrar::cpu::Calibration::GetBeamCalibrations</definition>
        <argsstring>() const</argsstring>
        <name>GetBeamCalibrations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a401f011c64e808b1e1c5f41b0c9b666e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">BeamCalibration</ref> &gt; &amp;</type>
        <definition>std::vector&lt; BeamCalibration &gt; &amp; icrar::cpu::Calibration::GetBeamCalibrations</definition>
        <argsstring>()</argsstring>
        <name>GetBeamCalibrations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1acbb25d311ad34e4b941cdf32729b8ee9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::Calibration::Serialize</definition>
        <argsstring>(std::ostream &amp;os, bool pretty=false) const</argsstring>
        <name>Serialize</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="75" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a54092192ff66cf7c05e84facc902a087" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Writer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::Calibration::Write</definition>
        <argsstring>(Writer &amp;writer) const</argsstring>
        <name>Write</name>
        <param>
          <type>Writer &amp;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="74" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" bodystart="74" bodyend="88"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a0d43bf1dd4b91e5c010f4c45f7e383a4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">Calibration</ref></type>
        <definition>Calibration icrar::cpu::Calibration::Parse</definition>
        <argsstring>(const std::string &amp;json)</argsstring>
        <name>Parse</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="90" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="96" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Calibration_1a1965e71bfbc337070b846624fb18b3a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">Calibration</ref></type>
        <definition>Calibration icrar::cpu::Calibration::Parse</definition>
        <argsstring>(const rapidjson::Value &amp;doc)</argsstring>
        <name>Parse</name>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="92" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc" bodystart="103" bodyend="137"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains a single calibration solution. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" line="45" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h" bodystart="44" bodyend="93"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a5dc74740779a27364fcafd53ecce156f" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>Calibration</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a35f8afafa383d562fda44cf3c9a9b5ad" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>Calibration</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1ac98d9e867f0a2d9436a5a816a484173b" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>GetBeamCalibrations</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a401f011c64e808b1e1c5f41b0c9b666e" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>GetBeamCalibrations</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a9def7811696e741a45ca36f14035b217" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>GetEndEpoch</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1ab02ed8dff028aa14987cc278402cfbe9" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>GetStartEpoch</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1af3cd8395b3aee2acacd929c2300a3829" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>IsApprox</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1ad19d4a559c2fb9a48340d7778fa8892a" prot="private" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>m_beamCalibrations</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1ad5e65a0e1ade6cf92e153f266c6bb29a" prot="private" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>m_endEpoch</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a170686b9b7f158b758a4bbcefac50cea" prot="private" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>m_startEpoch</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a0d43bf1dd4b91e5c010f4c45f7e383a4" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>Parse</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a1965e71bfbc337070b846624fb18b3a7" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>Parse</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1acbb25d311ad34e4b941cdf32729b8ee9" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>Serialize</name></member>
      <member refid="classicrar_1_1cpu_1_1Calibration_1a54092192ff66cf7c05e84facc902a087" prot="public" virt="non-virtual"><scope>icrar::cpu::Calibration</scope><name>Write</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1CalibrationCollection" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::CalibrationCollection</compoundname>
    <includes local="no">CalibrationCollection.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1CalibrationCollection_1a470e7be4ad44540aea07ac7c43caedb7" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">cpu::Calibration</ref> &gt;</type>
        <definition>std::vector&lt;cpu::Calibration&gt; icrar::cpu::CalibrationCollection::m_calibrations</definition>
        <argsstring/>
        <name>m_calibrations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" line="43" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationCollection_1aace99716dd6034d4f467b99df0ff5e4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::CalibrationCollection::CalibrationCollection</definition>
        <argsstring>(std::vector&lt; cpu::Calibration &gt; &amp;&amp;calibrations)</argsstring>
        <name>CalibrationCollection</name>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">cpu::Calibration</ref> &gt; &amp;&amp;</type>
          <declname>calibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" line="45" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationCollection_1a9338d3a2d14f5675d390c703b68d88c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">cpu::Calibration</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;cpu::Calibration&gt;&amp; icrar::cpu::CalibrationCollection::GetCalibrations</definition>
        <argsstring>() const</argsstring>
        <name>GetCalibrations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" line="50" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationCollection_1a3f3485e016f77f1c153d83bbef03d828" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::CalibrationCollection::Serialize</definition>
        <argsstring>(std::ostream &amp;os, bool pretty=false) const</argsstring>
        <name>Serialize</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pretty</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" line="55" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" bodystart="55" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationCollection_1a98862796b3740fb1fed2abcb370e0fa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::CalibrationCollection::Write</definition>
        <argsstring>(rapidjson::PrettyWriter&lt; rapidjson::StringBuffer &gt; &amp;writer) const</argsstring>
        <name>Write</name>
        <param>
          <type>rapidjson::PrettyWriter&lt; rapidjson::StringBuffer &gt; &amp;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" bodystart="76" bodyend="84"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains a collection of calibrations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h" bodystart="41" bodyend="85"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1CalibrationCollection_1aace99716dd6034d4f467b99df0ff5e4d" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationCollection</scope><name>CalibrationCollection</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationCollection_1a9338d3a2d14f5675d390c703b68d88c6" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationCollection</scope><name>GetCalibrations</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationCollection_1a470e7be4ad44540aea07ac7c43caedb7" prot="private" virt="non-virtual"><scope>icrar::cpu::CalibrationCollection</scope><name>m_calibrations</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationCollection_1a3f3485e016f77f1c153d83bbef03d828" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationCollection</scope><name>Serialize</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationCollection_1a98862796b3740fb1fed2abcb370e0fa4" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationCollection</scope><name>Write</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classCalibrationTests" kind="class" language="C++" prot="public">
    <compoundname>CalibrationTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classCalibrationTests_1a5a6b0b6030beb6a1eb3dde9573bb4a3f" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double CalibrationTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 1e-5</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" line="50" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classCalibrationTests_1abc927f5548fd8463f45bb464bf5fb0c2" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string CalibrationTests::m_simulationDirections</definition>
        <argsstring/>
        <name>m_simulationDirections</name>
        <initializer>= "[\
        [0.0, -0.471238898],\
        [0.017453293, -0.4537856055]\
    ]"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" line="52" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classCalibrationTests_1af81f2924a95374f39dc7a094fd43a08d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void CalibrationTests::TestAA3ClearCalibration</definition>
        <argsstring>(std::string impl, const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;expected)</argsstring>
        <name>TestAA3ClearCalibration</name>
        <param>
          <type>std::string</type>
          <declname>impl</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::pair&lt; double, double &gt;&gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
<para>Tests an AA3 simulated observation with no ionosphere. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>outputPath</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" line="64" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" bodystart="64" bodyend="98"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains system tests. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="18">
        <label>CalibrationTests</label>
        <link refid="classCalibrationTests"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
      <node id="19">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="20">
        <label>CalibrationTests</label>
        <link refid="classCalibrationTests"/>
        <childnode refid="21" relation="public-inheritance">
        </childnode>
      </node>
      <node id="21">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" line="49" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" bodystart="48" bodyend="99"/>
    <listofallmembers>
      <member refid="classCalibrationTests_1abc927f5548fd8463f45bb464bf5fb0c2" prot="private" virt="non-virtual"><scope>CalibrationTests</scope><name>m_simulationDirections</name></member>
      <member refid="classCalibrationTests_1af81f2924a95374f39dc7a094fd43a08d" prot="public" virt="non-virtual"><scope>CalibrationTests</scope><name>TestAA3ClearCalibration</name></member>
      <member refid="classCalibrationTests_1a5a6b0b6030beb6a1eb3dde9573bb4a3f" prot="private" virt="non-virtual"><scope>CalibrationTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classleap__drops_1_1CallLeap_1_1CallLeap" kind="class" language="Python" prot="public">
    <compoundname>leap_drops::CallLeap::CallLeap</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BarrierAppDROP</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classleap__drops_1_1CallLeap_1_1CallLeap_1afad3c4447c14f97ccb8332d6a6121cfe" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.CallLeap.CallLeap::compontent_meta</definition>
        <argsstring/>
        <name>compontent_meta</name>
        <initializer>=  dlg_component('Call Leap', 'Call Leap.',
                                    [dlg_batch_input('binary/*', [])],
                                    [dlg_batch_output('binary/*', [])],
                                    [dlg_streaming_input('binary/*')])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/CallLeap.py" line="39" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classleap__drops_1_1CallLeap_1_1CallLeap_1a1b10b0d67ec4b857c210a38fad5d7514" prot="public" static="yes" mutable="no">
        <type>string</type>
        <definition>string leap_drops.CallLeap.CallLeap::measurementSetFilename</definition>
        <argsstring/>
        <name>measurementSetFilename</name>
        <initializer>=  "/Users/james/working/leap-accelerate/testdata/1197638568-split.ms"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/CallLeap.py" line="46" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classleap__drops_1_1CallLeap_1_1CallLeap_1a191c7217e8d6ceafb4d5d84f8806acc1" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool leap_drops.CallLeap.CallLeap::DEBUG</definition>
        <argsstring/>
        <name>DEBUG</name>
        <initializer>=  True</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/CallLeap.py" line="48" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classleap__drops_1_1CallLeap_1_1CallLeap_1a7aecc9893e76ab23a208517c523be7ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.CallLeap.CallLeap.initialize</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>initialize</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/CallLeap.py" line="51" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classleap__drops_1_1CallLeap_1_1CallLeap_1ae06a4fa650451d99fbcb11ea144f8117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.CallLeap.CallLeap.run</definition>
        <argsstring>(self)</argsstring>
        <name>run</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/CallLeap.py" line="55" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="55" bodyend="86"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classleap__drops_1_1CallLeap_1_1CallLeap_1ad9c510c9dbc6d495684b224b90fb137a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.CallLeap.CallLeap._readConfig</definition>
        <argsstring>(self, inDrop)</argsstring>
        <name>_readConfig</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>inDrop</type>
          <defname>inDrop</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/CallLeap.py" line="87" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="87" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Call Leap. </para>    </briefdescription>
    <detaileddescription>
<para>Call Leap</para><para>A BarrierAppDrop that reads a config file, generates a command line for the LeapAccelerateCLI application, and then executes the application <simplesect kind="par"><title>EAGLE_START</title><para/></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gitrepo</parametername>
</parameternamelist>
<parameterdescription>
<para><ulink url="https://gitlab-ci-token:YuuCJciQ1_ZSyi2xK9M9@gitlab.com/ska-telescope/icrar-leap-accelerate.git">https://gitlab-ci-token:YuuCJciQ1_ZSyi2xK9M9@gitlab.com/ska-telescope/icrar-leap-accelerate.git</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>PythonApp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/measurementSetFilename</parametername>
</parameternamelist>
<parameterdescription>
<para>Measurement Set Filename/""/String/readwrite/ The file from which the input measurement set should be loaded<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/appclass</parametername>
</parameternamelist>
<parameterdescription>
<para>Application Class/leap_nodes.CallLeap.CallLeap/String/readonly/ The path to the class that implements this app<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port/Config</parametername>
</parameternamelist>
<parameterdescription>
<para>The Config file containing JSON specifying how this instance of LeapAccelerateCLI should be run</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port/Result</parametername>
</parameternamelist>
<parameterdescription>
<para>The output of the LeapAccelerateCLI application (JSON)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>EAGLE_END A BarrierAppDrop that reads a config file, generates a command line for the LeapAccelerateCLI application, and then executes the application </title><para/></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="22">
        <label>leap_drops.CallLeap.CallLeap</label>
        <link refid="classleap__drops_1_1CallLeap_1_1CallLeap"/>
        <childnode refid="23" relation="public-inheritance">
        </childnode>
      </node>
      <node id="23">
        <label>BarrierAppDROP</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="24">
        <label>leap_drops.CallLeap.CallLeap</label>
        <link refid="classleap__drops_1_1CallLeap_1_1CallLeap"/>
        <childnode refid="25" relation="public-inheritance">
        </childnode>
      </node>
      <node id="25">
        <label>BarrierAppDROP</label>
      </node>
    </collaborationgraph>
    <location file="leap_drops/CallLeap.py" line="37" column="1" bodyfile="leap_drops/CallLeap.py" bodystart="37" bodyend="91"/>
    <listofallmembers>
      <member refid="classleap__drops_1_1CallLeap_1_1CallLeap_1ad9c510c9dbc6d495684b224b90fb137a" prot="private" virt="non-virtual"><scope>leap_drops::CallLeap::CallLeap</scope><name>_readConfig</name></member>
      <member refid="classleap__drops_1_1CallLeap_1_1CallLeap_1afad3c4447c14f97ccb8332d6a6121cfe" prot="public" virt="non-virtual"><scope>leap_drops::CallLeap::CallLeap</scope><name>compontent_meta</name></member>
      <member refid="classleap__drops_1_1CallLeap_1_1CallLeap_1a191c7217e8d6ceafb4d5d84f8806acc1" prot="public" virt="non-virtual"><scope>leap_drops::CallLeap::CallLeap</scope><name>DEBUG</name></member>
      <member refid="classleap__drops_1_1CallLeap_1_1CallLeap_1a7aecc9893e76ab23a208517c523be7ef" prot="public" virt="non-virtual"><scope>leap_drops::CallLeap::CallLeap</scope><name>initialize</name></member>
      <member refid="classleap__drops_1_1CallLeap_1_1CallLeap_1a1b10b0d67ec4b857c210a38fad5d7514" prot="public" virt="non-virtual"><scope>leap_drops::CallLeap::CallLeap</scope><name>measurementSetFilename</name></member>
      <member refid="classleap__drops_1_1CallLeap_1_1CallLeap_1ae06a4fa650451d99fbcb11ea144f8117" prot="public" virt="non-virtual"><scope>leap_drops::CallLeap::CallLeap</scope><name>run</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classchannel__info" kind="class" language="C++" prot="public">
    <compoundname>channel_info</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classchannel__info_1a16733867dd6e967440681eee4de7ebca" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double channel_info::frequency</definition>
        <argsstring/>
        <name>frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="7" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchannel__info_1a8003570d7a6c86edc4f8d6b5108a0b68" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double channel_info::width</definition>
        <argsstring/>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="8" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classchannel__info_1ad9e513ed581ce4aa3c1c63887b45674f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>channel_info::channel_info</definition>
        <argsstring>(double frequency, double width)</argsstring>
        <name>channel_info</name>
        <param>
          <type>double</type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="11" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="11" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/band_data.h" line="6" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="5" bodyend="15"/>
    <listofallmembers>
      <member refid="classchannel__info_1ad9e513ed581ce4aa3c1c63887b45674f" prot="public" virt="non-virtual"><scope>channel_info</scope><name>channel_info</name></member>
      <member refid="classchannel__info_1a16733867dd6e967440681eee4de7ebca" prot="private" virt="non-virtual"><scope>channel_info</scope><name>frequency</name></member>
      <member refid="classchannel__info_1a8003570d7a6c86edc4f8d6b5108a0b68" prot="private" virt="non-virtual"><scope>channel_info</scope><name>width</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="class_1_1ClangTidyConverter" kind="class" language="Python" prot="public">
    <compoundname>::ClangTidyConverter</compoundname>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a4537164b5732330a50b5c0ac2e8e67df" prot="public" static="yes" mutable="no">
        <type>list</type>
        <definition>list ClangTidyConverter::errors</definition>
        <argsstring/>
        <name>errors</name>
        <initializer>=  []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="48" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a1f2c191a62af087e6b44159e2e401290" prot="public" static="yes" mutable="no">
        <type>list</type>
        <definition>list ClangTidyConverter::failures</definition>
        <argsstring/>
        <name>failures</name>
        <initializer>=  []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="49" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1af7228404fbfc1deb94af7fa6ee5daac7" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::error_regex</definition>
        <argsstring/>
        <name>error_regex</name>
        <initializer>=  re.compile(
        r"^([\w\/\.\-\ ]+):(\d+):(\d+): ([a-z]+): (.+) (\[[\w\-,\.]+\])$"
    )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="58" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a83ea2a08b7f60bc4a5e1d85c81d2468f" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::note_regex</definition>
        <argsstring/>
        <name>note_regex</name>
        <initializer>=  re.compile(
        r"^([\w\/\.\-\ ]+):(\d+):(\d+): ([a-z]+): (.+)$"
    )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="67" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a29b5450cf9edc491fe54de22706397e6" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::iwyu_regex</definition>
        <argsstring/>
        <name>iwyu_regex</name>
        <initializer>=  re.compile(
        r'^(\/[\w\/\.\-]+) ([\w ]+):$'
    )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="73" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a9326ecb41a90b8d1b9b082041c7323f2" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::failure_regex</definition>
        <argsstring/>
        <name>failure_regex</name>
        <initializer>=  re.compile(
        r"^Error while processing ([\w\/\.\-]+).\n$"
    )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="78" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a22d29a2166b1574e84c40dc177a16029" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::main_error_identifier</definition>
        <argsstring/>
        <name>main_error_identifier</name>
        <initializer>=  re.compile(r'\[[\w\-,\.]+\]$')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="84" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a3c691259d0102222ffb968e5cb9c86b4" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::main_note_identifier</definition>
        <argsstring/>
        <name>main_note_identifier</name>
        <initializer>=  re.compile(r'^\/[\w\/\.\-\ ]+:\d+:\d+: [a-z]+: [\w ]+$')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="86" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a3543456f4c81ecfca982181238079d89" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::main_iwyu_identifier</definition>
        <argsstring/>
        <name>main_iwyu_identifier</name>
        <initializer>=  re.compile(r'^\/[\w\/\.\-\ ]+ [\w ]+:$')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="88" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1a1183d4de28c9c532b46d7679133dc627" prot="public" static="yes" mutable="no">
        <type/>
        <definition>ClangTidyConverter::main_failure_identifier</definition>
        <argsstring/>
        <name>main_failure_identifier</name>
        <initializer>=  re.compile(r'^Error while processing ')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="90" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_1_1ClangTidyConverter_1ab3c5219bc7f07a49e4c9f97afe8d49d1" prot="public" static="no" mutable="no">
        <type/>
        <definition>ClangTidyConverter::basename</definition>
        <argsstring/>
        <name>basename</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="93" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_1_1ClangTidyConverter_1a807a627d2d20455f59da5692fee47c66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def ClangTidyConverter.__init__</definition>
        <argsstring>(self, basename)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>basename</type>
          <defname>basename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="92" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="92" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="class_1_1ClangTidyConverter_1af42c6535ff75ba81518f1e20e8068274" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def ClangTidyConverter.print_junit_errors</definition>
        <argsstring>(self, sorted_errors, output_file)</argsstring>
        <name>print_junit_errors</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>sorted_errors</type>
          <defname>sorted_errors</defname>
        </param>
        <param>
          <type>output_file</type>
          <defname>output_file</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Prints errors into test suites
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="95" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="95" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="class_1_1ClangTidyConverter_1add665c7076f56540853933b4736c05d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def ClangTidyConverter.print_junit_failures</definition>
        <argsstring>(self, sorted_failures, output_file)</argsstring>
        <name>print_junit_failures</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>sorted_failures</type>
          <defname>sorted_failures</defname>
        </param>
        <param>
          <type>output_file</type>
          <defname>output_file</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Prints failures into test suites
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="117" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="117" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="class_1_1ClangTidyConverter_1a6e7bf9ac65276458327934eb6ce89ca4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def ClangTidyConverter.print_junit_file</definition>
        <argsstring>(self, output_file, suite_name)</argsstring>
        <name>print_junit_file</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>output_file</type>
          <defname>output_file</defname>
        </param>
        <param>
          <type>suite_name</type>
          <defname>suite_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="135" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="135" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="class_1_1ClangTidyConverter_1ad64e0b57e4425cf25e1115249d36a525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def ClangTidyConverter.process_error</definition>
        <argsstring>(self, error_array)</argsstring>
        <name>process_error</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>error_array</type>
          <defname>error_array</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Processes raw error text into this object's error collection
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="151" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="151" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="class_1_1ClangTidyConverter_1a30be3269bd95dcfc54f1a99961f6c07e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def ClangTidyConverter.convert</definition>
        <argsstring>(self, input_file, output_file, suite_name)</argsstring>
        <name>convert</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>input_file</type>
          <defname>input_file</defname>
        </param>
        <param>
          <type>output_file</type>
          <defname>output_file</defname>
        </param>
        <param>
          <type>suite_name</type>
          <defname>suite_name</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="235" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="235" bodyend="272"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file=".clang-tidy-to-junit.py" line="46" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="46" bodyend="273"/>
    <listofallmembers>
      <member refid="class_1_1ClangTidyConverter_1a807a627d2d20455f59da5692fee47c66" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>__init__</name></member>
      <member refid="class_1_1ClangTidyConverter_1ab3c5219bc7f07a49e4c9f97afe8d49d1" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>basename</name></member>
      <member refid="class_1_1ClangTidyConverter_1a30be3269bd95dcfc54f1a99961f6c07e" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>convert</name></member>
      <member refid="class_1_1ClangTidyConverter_1af7228404fbfc1deb94af7fa6ee5daac7" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>error_regex</name></member>
      <member refid="class_1_1ClangTidyConverter_1a4537164b5732330a50b5c0ac2e8e67df" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>errors</name></member>
      <member refid="class_1_1ClangTidyConverter_1a9326ecb41a90b8d1b9b082041c7323f2" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>failure_regex</name></member>
      <member refid="class_1_1ClangTidyConverter_1a1f2c191a62af087e6b44159e2e401290" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>failures</name></member>
      <member refid="class_1_1ClangTidyConverter_1a29b5450cf9edc491fe54de22706397e6" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>iwyu_regex</name></member>
      <member refid="class_1_1ClangTidyConverter_1a22d29a2166b1574e84c40dc177a16029" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>main_error_identifier</name></member>
      <member refid="class_1_1ClangTidyConverter_1a1183d4de28c9c532b46d7679133dc627" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>main_failure_identifier</name></member>
      <member refid="class_1_1ClangTidyConverter_1a3543456f4c81ecfca982181238079d89" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>main_iwyu_identifier</name></member>
      <member refid="class_1_1ClangTidyConverter_1a3c691259d0102222ffb968e5cb9c86b4" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>main_note_identifier</name></member>
      <member refid="class_1_1ClangTidyConverter_1a83ea2a08b7f60bc4a5e1d85c81d2468f" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>note_regex</name></member>
      <member refid="class_1_1ClangTidyConverter_1af42c6535ff75ba81518f1e20e8068274" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>print_junit_errors</name></member>
      <member refid="class_1_1ClangTidyConverter_1add665c7076f56540853933b4736c05d0" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>print_junit_failures</name></member>
      <member refid="class_1_1ClangTidyConverter_1a6e7bf9ac65276458327934eb6ce89ca4" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>print_junit_file</name></member>
      <member refid="class_1_1ClangTidyConverter_1ad64e0b57e4425cf25e1115249d36a525" prot="public" virt="non-virtual"><scope>::ClangTidyConverter</scope><name>process_error</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1CLIArgumentsDTO" kind="struct" language="C++" prot="public">
    <compoundname>icrar::CLIArgumentsDTO</compoundname>
    <includes local="no">Arguments.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a70d7801e5bd52ad3faadce562d2d14cd" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::inputType</definition>
        <argsstring/>
        <name>inputType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="50" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1accff69a5c34d055bcbb9c4c0dccc32de" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::filePath</definition>
        <argsstring/>
        <name>filePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="51" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a774cbeb35e9fee43b50e1459f55f1db3" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::configFilePath</definition>
        <argsstring/>
        <name>configFilePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a61af0d292ded5d227ff0d59a3b9d22f4" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::streamOutType</definition>
        <argsstring/>
        <name>streamOutType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="54" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a5ef20baf86d3410f5399f7605f7ed5ec" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::outputFilePath</definition>
        <argsstring/>
        <name>outputFilePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="55" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a90520dd813be4823655d22e90e21f281" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; int &gt;</type>
        <definition>boost::optional&lt;int&gt; icrar::CLIArgumentsDTO::stations</definition>
        <argsstring/>
        <name>stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="57" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1af5dbd448b0b8f6e2b876f6a802999334" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; unsigned int &gt;</type>
        <definition>boost::optional&lt;unsigned int&gt; icrar::CLIArgumentsDTO::referenceAntenna</definition>
        <argsstring/>
        <name>referenceAntenna</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="58" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a9a3d06b0b22eae099fd567544b0f0a12" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::directions</definition>
        <argsstring/>
        <name>directions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="59" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1aa5e026b754aa83dccc7a3e453eb65db7" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::computeImplementation</definition>
        <argsstring/>
        <name>computeImplementation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="60" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a933d8647d0fb4eee08ff64bf4b4fdb2a" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::CLIArgumentsDTO::solutionInterval</definition>
        <argsstring/>
        <name>solutionInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a3f594e1ec0531ca9cc7870353466630a" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; double &gt;</type>
        <definition>boost::optional&lt;double&gt; icrar::CLIArgumentsDTO::minimumBaselineThreshold</definition>
        <argsstring/>
        <name>minimumBaselineThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="62" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a7c49e93a5ab79e23c3e88b262c2e6610" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::CLIArgumentsDTO::mwaSupport</definition>
        <argsstring/>
        <name>mwaSupport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a448055f2b3b8604304a5daa1323ca9a7" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::CLIArgumentsDTO::readAutocorrelations</definition>
        <argsstring/>
        <name>readAutocorrelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="64" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a9345212cb6aea6ec6bfbe87bca7fc3ab" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; int &gt;</type>
        <definition>boost::optional&lt;int&gt; icrar::CLIArgumentsDTO::verbosity</definition>
        <argsstring/>
        <name>verbosity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="65" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a9cab5186b1025cb5bb296d218ba377bc" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::CLIArgumentsDTO::useFileSystemCache</definition>
        <argsstring/>
        <name>useFileSystemCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1a541ba4e7055793710efe93e9f2c9a07b" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::CLIArgumentsDTO::useIntermediateBuffer</definition>
        <argsstring/>
        <name>useIntermediateBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="68" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1CLIArgumentsDTO_1af4cfa17391dad2bc58f2e232db46872c" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::CLIArgumentsDTO::useCusolver</definition>
        <argsstring/>
        <name>useCusolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structicrar_1_1CLIArgumentsDTO_1a86d582e32234f36f1f2bbae304dd3fe5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicrar_1_1CLIArgumentsDTO" kindref="compound">CLIArgumentsDTO</ref></type>
        <definition>CLIArgumentsDTO icrar::CLIArgumentsDTO::GetDefaultArguments</definition>
        <argsstring>()</argsstring>
        <name>GetDefaultArguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default set of command line interface arguments </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="38" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Raw arguments received via the command line interface using boost::program_options. Only raw types std::string, bool, int, uint, float and double are allowed here. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/config/Arguments.h" line="49" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.h" bodystart="48" bodyend="72"/>
    <listofallmembers>
      <member refid="structicrar_1_1CLIArgumentsDTO_1aa5e026b754aa83dccc7a3e453eb65db7" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>computeImplementation</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a774cbeb35e9fee43b50e1459f55f1db3" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>configFilePath</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a9a3d06b0b22eae099fd567544b0f0a12" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>directions</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1accff69a5c34d055bcbb9c4c0dccc32de" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>filePath</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a86d582e32234f36f1f2bbae304dd3fe5" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>GetDefaultArguments</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a70d7801e5bd52ad3faadce562d2d14cd" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>inputType</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a3f594e1ec0531ca9cc7870353466630a" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>minimumBaselineThreshold</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a7c49e93a5ab79e23c3e88b262c2e6610" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>mwaSupport</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a5ef20baf86d3410f5399f7605f7ed5ec" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>outputFilePath</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a448055f2b3b8604304a5daa1323ca9a7" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>readAutocorrelations</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1af5dbd448b0b8f6e2b876f6a802999334" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>referenceAntenna</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a933d8647d0fb4eee08ff64bf4b4fdb2a" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>solutionInterval</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a90520dd813be4823655d22e90e21f281" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>stations</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a61af0d292ded5d227ff0d59a3b9d22f4" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>streamOutType</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1af4cfa17391dad2bc58f2e232db46872c" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>useCusolver</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a9cab5186b1025cb5bb296d218ba377bc" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>useFileSystemCache</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a541ba4e7055793710efe93e9f2c9a07b" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>useIntermediateBuffer</name></member>
      <member refid="structicrar_1_1CLIArgumentsDTO_1a9345212cb6aea6ec6bfbe87bca7fc3ab" prot="public" virt="non-virtual"><scope>icrar::CLIArgumentsDTO</scope><name>verbosity</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1CommandLineTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::CommandLineTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1CommandLineTests_1adb7e0543a69025fae2d6357206471ac7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::CommandLineTests::m_binDir</definition>
        <argsstring/>
        <name>m_binDir</name>
        <initializer>= PROJECT_BINARY_DIR</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="43" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CommandLineTests_1a739f5d35b0cbf3750c5be0409ad8ce0c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::CommandLineTests::m_srcDir</definition>
        <argsstring/>
        <name>m_srcDir</name>
        <initializer>= PROJECT_SOURCE_DIR</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="44" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a862d7c6a67fdf70010094e283233a66f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestHelp</definition>
        <argsstring>()</argsstring>
        <name>TestHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="47" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="47" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a135fc011ea35065cbf9fdb37db0a0dcc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestSimpleRun</definition>
        <argsstring>()</argsstring>
        <name>TestSimpleRun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="56" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="56" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a60159e662c53a377801aaedcfa52df28" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestDeprecated</definition>
        <argsstring>()</argsstring>
        <name>TestDeprecated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="67" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="67" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a191d671c53806e6dab2fcd4785a9b739" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestMultipleCpu</definition>
        <argsstring>()</argsstring>
        <name>TestMultipleCpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="90" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="90" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a0d0122858b68b6dd045450d4e8932e86" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestMultipleCuda</definition>
        <argsstring>()</argsstring>
        <name>TestMultipleCuda</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="112" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="112" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1af57d38337d50e45e46337829b21dbfef" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestReferenceAntenna</definition>
        <argsstring>()</argsstring>
        <name>TestReferenceAntenna</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="134" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="134" bodyend="154"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Test suite for executing leap-accelerate from the command line. Note: only </para>    </detaileddescription>
    <inheritancegraph>
      <node id="33">
        <label>Test</label>
      </node>
      <node id="32">
        <label>icrar::CommandLineTests</label>
        <link refid="classicrar_1_1CommandLineTests"/>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="35">
        <label>Test</label>
      </node>
      <node id="34">
        <label>icrar::CommandLineTests</label>
        <link refid="classicrar_1_1CommandLineTests"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="42" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="41" bodyend="155"/>
    <listofallmembers>
      <member refid="classicrar_1_1CommandLineTests_1adb7e0543a69025fae2d6357206471ac7" prot="private" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>m_binDir</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a739f5d35b0cbf3750c5be0409ad8ce0c" prot="private" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>m_srcDir</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a60159e662c53a377801aaedcfa52df28" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestDeprecated</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a862d7c6a67fdf70010094e283233a66f" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestHelp</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a191d671c53806e6dab2fcd4785a9b739" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestMultipleCpu</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a0d0122858b68b6dd045450d4e8932e86" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestMultipleCuda</name></member>
      <member refid="classicrar_1_1CommandLineTests_1af57d38337d50e45e46337829b21dbfef" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestReferenceAntenna</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a135fc011ea35065cbf9fdb37db0a0dcc" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestSimpleRun</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1ComputeDevice" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::ComputeDevice</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ComputeDevice_1a615aded222905bb332e2b8e796e399bf" prot="private" static="no" mutable="no">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t icrar::cuda::ComputeDevice::m_cublasContext</definition>
        <argsstring/>
        <name>m_cublasContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/compute_device.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/cuda/compute_device.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ComputeDevice_1a218a80137f46b73bd52eeeb7dc8806db" prot="private" static="no" mutable="no">
        <type>cublasLtHandle_t</type>
        <definition>cublasLtHandle_t icrar::cuda::ComputeDevice::m_cublasLtContext</definition>
        <argsstring/>
        <name>m_cublasLtContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/compute_device.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/cuda/compute_device.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ComputeDevice_1a18460ea0147f937ca84d51a3e3c77832" prot="private" static="no" mutable="no">
        <type>cusolverDnHandle_t</type>
        <definition>cusolverDnHandle_t icrar::cuda::ComputeDevice::m_cusolverDnContext</definition>
        <argsstring/>
        <name>m_cusolverDnContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/compute_device.h" line="38" column="1" bodyfile="src/icrar/leap-accelerate/cuda/compute_device.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/compute_device.h" line="32" column="1" bodyfile="src/icrar/leap-accelerate/cuda/compute_device.h" bodystart="31" bodyend="39"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1ComputeDevice_1a615aded222905bb332e2b8e796e399bf" prot="private" virt="non-virtual"><scope>icrar::cuda::ComputeDevice</scope><name>m_cublasContext</name></member>
      <member refid="classicrar_1_1cuda_1_1ComputeDevice_1a218a80137f46b73bd52eeeb7dc8806db" prot="private" virt="non-virtual"><scope>icrar::cuda::ComputeDevice</scope><name>m_cublasLtContext</name></member>
      <member refid="classicrar_1_1cuda_1_1ComputeDevice_1a18460ea0147f937ca84d51a3e3c77832" prot="private" virt="non-virtual"><scope>icrar::cuda::ComputeDevice</scope><name>m_cusolverDnContext</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1ComputeOptionsDTO" kind="struct" language="C++" prot="public">
    <compoundname>icrar::ComputeOptionsDTO</compoundname>
    <includes local="no">ComputeOptionsDTO.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1ComputeOptionsDTO_1a887be7ddf4a9607dee6b844510b27866" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ComputeOptionsDTO::isFileSystemCacheEnabled</definition>
        <argsstring/>
        <name>isFileSystemCacheEnabled</name>
        <briefdescription>
<para>Enables caching of expensive calculations to the filesystem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" line="35" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ComputeOptionsDTO_1a6763482924d23467ec6977f663fffd3a" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ComputeOptionsDTO::useIntermediateBuffer</definition>
        <argsstring/>
        <name>useIntermediateBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1ComputeOptionsDTO_1a46fb1dfed5925be5be1c33619e49e8f0" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; bool &gt;</type>
        <definition>boost::optional&lt;bool&gt; icrar::ComputeOptionsDTO::useCusolver</definition>
        <argsstring/>
        <name>useCusolver</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1ComputeOptionsDTO_1a2fd80893ef8d3a151be6dc1c9a241a1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::ComputeOptionsDTO::IsInitialized</definition>
        <argsstring>() const</argsstring>
        <name>IsInitialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" bodystart="39" bodyend="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Options received from I/O that optimizes computation performance based on input data and hardware configuration. Can either be overriden by the user or intelligently determined at runtime if not set. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" bodystart="33" bodyend="45"/>
    <listofallmembers>
      <member refid="structicrar_1_1ComputeOptionsDTO_1a887be7ddf4a9607dee6b844510b27866" prot="public" virt="non-virtual"><scope>icrar::ComputeOptionsDTO</scope><name>isFileSystemCacheEnabled</name></member>
      <member refid="structicrar_1_1ComputeOptionsDTO_1a2fd80893ef8d3a151be6dc1c9a241a1c" prot="public" virt="non-virtual"><scope>icrar::ComputeOptionsDTO</scope><name>IsInitialized</name></member>
      <member refid="structicrar_1_1ComputeOptionsDTO_1a46fb1dfed5925be5be1c33619e49e8f0" prot="public" virt="non-virtual"><scope>icrar::ComputeOptionsDTO</scope><name>useCusolver</name></member>
      <member refid="structicrar_1_1ComputeOptionsDTO_1a6763482924d23467ec6977f663fffd3a" prot="public" virt="non-virtual"><scope>icrar::ComputeOptionsDTO</scope><name>useIntermediateBuffer</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classConfigTests" kind="class" language="C++" prot="public">
    <compoundname>ConfigTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classConfigTests_1a22b6460990076bad0ffe253aa2df02ec" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string ConfigTests::m_mwaDirections</definition>
        <argsstring/>
        <name>m_mwaDirections</name>
        <initializer>= "[\
        [-0.4606549305661674,-0.29719233792392513],\
        [-0.753231018062671,-0.44387635324622354],\
        [-0.6207547100721282,-0.2539086572881469],\
        [-0.41958660604621867,-0.03677626900108552],\
        [-0.41108685258900596,-0.08638012622791202],\
        [-0.7782459495668798,-0.4887860989684432],\
        [-0.17001324965728973,-0.28595644149463484],\
        [-0.7129444556035118,-0.365286407171852],\
        [-0.1512764129166089,-0.21161026349648748]\
    ]"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="51" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classConfigTests_1a48f42db95f0625cb79e2ec6908d99d62" prot="private" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string ConfigTests::m_simulationDirections</definition>
        <argsstring/>
        <name>m_simulationDirections</name>
        <initializer>= "[\
        [0.0, -0.471238898],\
        [0.017453293, -0.4537856055]\
    ]"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="63" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="63" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classConfigTests_1a13f8d138d72e2fe03be95358b6985f96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>ConfigTests::ConfigTests</definition>
        <argsstring>()=default</argsstring>
        <name>ConfigTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1aeb120f08687afb1051859f6268644afd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestDefaultConfig</definition>
        <argsstring>(const boost::filesystem::path &amp;outputPath)</argsstring>
        <name>TestDefaultConfig</name>
        <param>
          <type>const boost::filesystem::path &amp;</type>
          <declname>outputPath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="71" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="71" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1a250151cc4734b457a2d72f7f6f7e1f02" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestConfig</definition>
        <argsstring>(CLIArgumentsDTO &amp;&amp;rawArgs, double threshold)</argsstring>
        <name>TestConfig</name>
        <param>
          <type><ref refid="structicrar_1_1CLIArgumentsDTO" kindref="compound">CLIArgumentsDTO</ref> &amp;&amp;</type>
          <declname>rawArgs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="104" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="104" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1af38c022f502a1ecc52eb034ecc12fae1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestMWACpuConfig</definition>
        <argsstring>()</argsstring>
        <name>TestMWACpuConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="140" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="140" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1a839c141f778f49a4bdca8fbef276f016" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestMWACudaConfig</definition>
        <argsstring>()</argsstring>
        <name>TestMWACudaConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="151" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="151" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1a6068e3bd6f92a47c4b4aba0e8ab75338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestAA3CpuConfig</definition>
        <argsstring>()</argsstring>
        <name>TestAA3CpuConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="163" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="163" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1a97474eb2d8f06cf9cdbe9b68149d6d97" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestAA3CudaConfig</definition>
        <argsstring>()</argsstring>
        <name>TestAA3CudaConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="174" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="174" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1a8728c08ec4f3564e0d9ba7027f857527" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestAA4CpuConfig</definition>
        <argsstring>()</argsstring>
        <name>TestAA4CpuConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="186" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="186" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classConfigTests_1abe89240080dd6dbe41000a8afe769a7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ConfigTests::TestAA4CudaConfig</definition>
        <argsstring>()</argsstring>
        <name>TestAA4CudaConfig</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="209" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="209" bodyend="231"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Contains system tests. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="41">
        <label>Test</label>
      </node>
      <node id="40">
        <label>ConfigTests</label>
        <link refid="classConfigTests"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="43">
        <label>Test</label>
      </node>
      <node id="42">
        <label>ConfigTests</label>
        <link refid="classConfigTests"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="50" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="49" bodyend="232"/>
    <listofallmembers>
      <member refid="classConfigTests_1a13f8d138d72e2fe03be95358b6985f96" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>ConfigTests</name></member>
      <member refid="classConfigTests_1a22b6460990076bad0ffe253aa2df02ec" prot="private" virt="non-virtual"><scope>ConfigTests</scope><name>m_mwaDirections</name></member>
      <member refid="classConfigTests_1a48f42db95f0625cb79e2ec6908d99d62" prot="private" virt="non-virtual"><scope>ConfigTests</scope><name>m_simulationDirections</name></member>
      <member refid="classConfigTests_1a6068e3bd6f92a47c4b4aba0e8ab75338" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestAA3CpuConfig</name></member>
      <member refid="classConfigTests_1a97474eb2d8f06cf9cdbe9b68149d6d97" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestAA3CudaConfig</name></member>
      <member refid="classConfigTests_1a8728c08ec4f3564e0d9ba7027f857527" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestAA4CpuConfig</name></member>
      <member refid="classConfigTests_1abe89240080dd6dbe41000a8afe769a7b" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestAA4CudaConfig</name></member>
      <member refid="classConfigTests_1a250151cc4734b457a2d72f7f6f7e1f02" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestConfig</name></member>
      <member refid="classConfigTests_1aeb120f08687afb1051859f6268644afd" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestDefaultConfig</name></member>
      <member refid="classConfigTests_1af38c022f502a1ecc52eb034ecc12fae1" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestMWACpuConfig</name></member>
      <member refid="classConfigTests_1a839c141f778f49a4bdca8fbef276f016" prot="public" virt="non-virtual"><scope>ConfigTests</scope><name>TestMWACudaConfig</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1ConstantBuffer" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::ConstantBuffer</compoundname>
    <includes local="no">DeviceMetaData.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1ab4907d167ef5edef693aef2079cf3867" prot="private" static="no" mutable="no">
        <type><ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref></type>
        <definition>icrar::cpu::Constants icrar::cuda::ConstantBuffer::m_constants</definition>
        <argsstring/>
        <name>m_constants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="65" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1a8bee95452e1d36890789394bde0bef0e" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt;</type>
        <definition>device_matrix&lt;double&gt; icrar::cuda::ConstantBuffer::m_A</definition>
        <argsstring/>
        <name>m_A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1ae2baf25ccab3f24e41515bfc07a7790b" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt;</type>
        <definition>device_vector&lt;int&gt; icrar::cuda::ConstantBuffer::m_I</definition>
        <argsstring/>
        <name>m_I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="68" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1a05381aa8d43a741bef31789b1fc635ac" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt;</type>
        <definition>device_matrix&lt;double&gt; icrar::cuda::ConstantBuffer::m_Ad</definition>
        <argsstring/>
        <name>m_Ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1a4a3b93a4487cc89654bc38ae138b93a0" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt;</type>
        <definition>device_matrix&lt;double&gt; icrar::cuda::ConstantBuffer::m_A1</definition>
        <argsstring/>
        <name>m_A1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1a688b83b9606fcb4123ea0bb994e16532" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt;</type>
        <definition>device_vector&lt;int&gt; icrar::cuda::ConstantBuffer::m_I1</definition>
        <argsstring/>
        <name>m_I1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="72" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1ConstantBuffer_1ae0165b225c375177534d48525aee2f43" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt;</type>
        <definition>device_matrix&lt;double&gt; icrar::cuda::ConstantBuffer::m_Ad1</definition>
        <argsstring/>
        <name>m_Ad1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="73" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a5c826a4bbdd38ad83b9c9573a1e0d0a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::ConstantBuffer::ConstantBuffer</definition>
        <argsstring>(const icrar::cpu::Constants &amp;constants, device_matrix&lt; double &gt; &amp;&amp;A, device_vector&lt; int &gt; &amp;&amp;I, device_matrix&lt; double &gt; &amp;&amp;Ad, device_matrix&lt; double &gt; &amp;&amp;A1, device_vector&lt; int &gt; &amp;&amp;I1, device_matrix&lt; double &gt; &amp;&amp;Ad1)</argsstring>
        <name>ConstantBuffer</name>
        <param>
          <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref> &amp;</type>
          <declname>constants</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;&amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;&amp;</type>
          <declname>I</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;&amp;</type>
          <declname>Ad</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;&amp;</type>
          <declname>A1</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;&amp;</type>
          <declname>I1</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;&amp;</type>
          <declname>Ad1</declname>
        </param>
        <briefdescription>
<para>Construct a new Constant Buffer object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constants</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ad</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>A1</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>I1</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Ad1</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="87" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="37" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a721c4ce765229a7e57c33c04d19af16a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref> &amp;</type>
        <definition>const icrar::cpu::Constants&amp; icrar::cuda::ConstantBuffer::GetConstants</definition>
        <argsstring>() const</argsstring>
        <name>GetConstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="96" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a09c44feb452ee5c9f6997532a2b1786c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
        <definition>const device_matrix&lt;double&gt;&amp; icrar::cuda::ConstantBuffer::GetA</definition>
        <argsstring>() const</argsstring>
        <name>GetA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="97" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a8d41b6d82433a191f4e2c6f785a01506" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;</type>
        <definition>const device_vector&lt;int&gt;&amp; icrar::cuda::ConstantBuffer::GetI</definition>
        <argsstring>() const</argsstring>
        <name>GetI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="98" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a77858fd80b3efc3575893b626d20509a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
        <definition>const device_matrix&lt;double&gt;&amp; icrar::cuda::ConstantBuffer::GetAd</definition>
        <argsstring>() const</argsstring>
        <name>GetAd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="99" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1addd48d42f7f41ca322fa7d887c8372f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
        <definition>const device_matrix&lt;double&gt;&amp; icrar::cuda::ConstantBuffer::GetA1</definition>
        <argsstring>() const</argsstring>
        <name>GetA1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="100" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a93d562938b530343839499d18bbbb512" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;</type>
        <definition>const device_vector&lt;int&gt;&amp; icrar::cuda::ConstantBuffer::GetI1</definition>
        <argsstring>() const</argsstring>
        <name>GetI1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="101" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a817ac120d3cdfc6e898f8de8fe1a86f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
        <definition>const device_matrix&lt;double&gt;&amp; icrar::cuda::ConstantBuffer::GetAd1</definition>
        <argsstring>() const</argsstring>
        <name>GetAd1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="102" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a32f8e7d726705de77798a21348dd799e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::ConstantBuffer::ToHost</definition>
        <argsstring>(icrar::cpu::MetaData &amp;host) const</argsstring>
        <name>ToHost</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="104" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="54" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1ConstantBuffer_1a0b894eeb6dd4c412eb5f959814d9a020" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::ConstantBuffer::ToHostAsync</definition>
        <argsstring>(icrar::cpu::MetaData &amp;host) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="105" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="66" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Container class of uniform gpu buffers available to all cuda threads that are const/immutable per calibration. </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="64" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="63" bodyend="106"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a5c826a4bbdd38ad83b9c9573a1e0d0a7" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>ConstantBuffer</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a09c44feb452ee5c9f6997532a2b1786c" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetA</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1addd48d42f7f41ca322fa7d887c8372f6" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetA1</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a77858fd80b3efc3575893b626d20509a" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetAd</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a817ac120d3cdfc6e898f8de8fe1a86f4" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetAd1</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a721c4ce765229a7e57c33c04d19af16a" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetConstants</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a8d41b6d82433a191f4e2c6f785a01506" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetI</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a93d562938b530343839499d18bbbb512" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>GetI1</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a8bee95452e1d36890789394bde0bef0e" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_A</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a4a3b93a4487cc89654bc38ae138b93a0" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_A1</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a05381aa8d43a741bef31789b1fc635ac" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_Ad</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1ae0165b225c375177534d48525aee2f43" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_Ad1</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1ab4907d167ef5edef693aef2079cf3867" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_constants</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1ae2baf25ccab3f24e41515bfc07a7790b" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_I</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a688b83b9606fcb4123ea0bb994e16532" prot="private" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>m_I1</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a32f8e7d726705de77798a21348dd799e" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1ConstantBuffer_1a0b894eeb6dd4c412eb5f959814d9a020" prot="public" virt="non-virtual"><scope>icrar::cuda::ConstantBuffer</scope><name>ToHostAsync</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1cpu_1_1Constants" kind="struct" language="C++" prot="public">
    <compoundname>icrar::cpu::Constants</compoundname>
    <includes local="no">MetaData.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a82a0ab11cc4214a2a1abefb097789d8c" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::nbaselines</definition>
        <argsstring/>
        <name>nbaselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="78" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1af40990286aa51aca7bfbb277b3037e29" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::referenceAntenna</definition>
        <argsstring/>
        <name>referenceAntenna</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="80" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a27ddf63afa2643486226f95eb0696aeb" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::channels</definition>
        <argsstring/>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="82" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a333956aa018b2730c062ec61dfcd10a2" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::num_pols</definition>
        <argsstring/>
        <name>num_pols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="83" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a1c5662182030626776fa7208872c5212" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::stations</definition>
        <argsstring/>
        <name>stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="84" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1af1de5c707ce6c09c3d63612c6affb47a" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::timesteps</definition>
        <argsstring/>
        <name>timesteps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="85" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a3a55b79d1400d94926c90201886f9c92" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::cpu::Constants::rows</definition>
        <argsstring/>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="86" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1abf327239959a92a93043639e29c2e0d7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::freq_start_hz</definition>
        <argsstring/>
        <name>freq_start_hz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a3c071ce77d09d634f35274fbf6e9c6de" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::freq_inc_hz</definition>
        <argsstring/>
        <name>freq_inc_hz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="89" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a7568d07d7dbee13c3e0c00a73f46a1ff" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::phase_centre_ra_rad</definition>
        <argsstring/>
        <name>phase_centre_ra_rad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="91" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a9ecd6e70a43be6e199c9ddc6de539b58" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::phase_centre_dec_rad</definition>
        <argsstring/>
        <name>phase_centre_dec_rad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="92" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a2608610236852ecebecd0fd8be8eec2b" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::dlm_ra</definition>
        <argsstring/>
        <name>dlm_ra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="93" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a8c958443119d1388122d3d0daea69f52" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::dlm_dec</definition>
        <argsstring/>
        <name>dlm_dec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="94" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1cpu_1_1Constants_1a041dd5c2ddc5c24aac1434f21e997a10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ double</type>
        <definition>__host__ __device__ double icrar::cpu::Constants::GetChannelWavelength</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetChannelWavelength</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="96" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="96" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1cpu_1_1Constants_1a5d0da2e7ce58cc910c12c0a06d9acf24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::Constants::operator==</definition>
        <argsstring>(const Constants &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">Constants</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="101" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="253" bodyend="266"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Container of variables that do not change throughout calibration. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="77" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="76" bodyend="102"/>
    <listofallmembers>
      <member refid="structicrar_1_1cpu_1_1Constants_1a27ddf63afa2643486226f95eb0696aeb" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>channels</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a8c958443119d1388122d3d0daea69f52" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>dlm_dec</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a2608610236852ecebecd0fd8be8eec2b" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>dlm_ra</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a3c071ce77d09d634f35274fbf6e9c6de" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>freq_inc_hz</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1abf327239959a92a93043639e29c2e0d7" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>freq_start_hz</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a041dd5c2ddc5c24aac1434f21e997a10" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>GetChannelWavelength</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a82a0ab11cc4214a2a1abefb097789d8c" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>nbaselines</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a333956aa018b2730c062ec61dfcd10a2" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>num_pols</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a5d0da2e7ce58cc910c12c0a06d9acf24" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>operator==</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a9ecd6e70a43be6e199c9ddc6de539b58" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>phase_centre_dec_rad</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a7568d07d7dbee13c3e0c00a73f46a1ff" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>phase_centre_ra_rad</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1af40990286aa51aca7bfbb277b3037e29" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>referenceAntenna</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a3a55b79d1400d94926c90201886f9c92" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>rows</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a1c5662182030626776fa7208872c5212" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>stations</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1af1de5c707ce6c09c3d63612c6affb47a" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>timesteps</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1CpuComputeOptions" kind="class" language="C++" prot="public">
    <compoundname>icrar::CpuComputeOptions</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1CpuComputeOptions_1a36059c09b19bcbf716190f67e306b559" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::CpuComputeOptions::m_isFileSystemCacheEnabled</definition>
        <argsstring/>
        <name>m_isFileSystemCacheEnabled</name>
        <briefdescription>
<para>Enables caching of expensive calculations to the filesystem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1CpuComputeOptions_1ae5280449ab9e2fa9a31f96d2ddca99e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::CpuComputeOptions::CpuComputeOptions</definition>
        <argsstring>(const ComputeOptionsDTO &amp;dto, const icrar::MeasurementSet &amp;ms)</argsstring>
        <name>CpuComputeOptions</name>
        <param>
          <type>const <ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref> &amp;</type>
          <declname>dto</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
<para>Determines ideal calibration compute options for a given MeasurementSet. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>computeOptions</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" bodystart="42" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CpuComputeOptions_1a2d804a0305a92d294edd15572c974ba5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::CpuComputeOptions::IsFileSystemCacheEnabled</definition>
        <argsstring>() const</argsstring>
        <name>IsFileSystemCacheEnabled</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" line="54" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" bodystart="54" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" line="32" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h" bodystart="31" bodyend="58"/>
    <listofallmembers>
      <member refid="classicrar_1_1CpuComputeOptions_1ae5280449ab9e2fa9a31f96d2ddca99e8" prot="public" virt="non-virtual"><scope>icrar::CpuComputeOptions</scope><name>CpuComputeOptions</name></member>
      <member refid="classicrar_1_1CpuComputeOptions_1a2d804a0305a92d294edd15572c974ba5" prot="public" virt="non-virtual"><scope>icrar::CpuComputeOptions</scope><name>IsFileSystemCacheEnabled</name></member>
      <member refid="classicrar_1_1CpuComputeOptions_1a36059c09b19bcbf716190f67e306b559" prot="private" virt="non-virtual"><scope>icrar::CpuComputeOptions</scope><name>m_isFileSystemCacheEnabled</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1CpuLeapCalibrator" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::CpuLeapCalibrator</compoundname>
    <basecompoundref refid="classicrar_1_1ILeapCalibrator" prot="public" virt="non-virtual">icrar::ILeapCalibrator</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CpuLeapCalibrator_1ab8fdc1824f3a4995b6763746f609c488" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::CpuLeapCalibrator::Calibrate</definition>
        <argsstring>(std::function&lt; void(const cpu::Calibration &amp;)&gt; outputCallback, const icrar::MeasurementSet &amp;ms, const std::vector&lt; SphericalDirection &gt; &amp;directions, const Slice &amp;solutionInterval, double minimumBaselineThreshold, boost::optional&lt; unsigned int &gt; referenceAntenna, const ComputeOptionsDTO &amp;computeOptions) override</argsstring>
        <name>Calibrate</name>
        <param>
          <type>std::function&lt; void(const <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">cpu::Calibration</ref> &amp;)&gt;</type>
          <declname>outputCallback</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; SphericalDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>solutionInterval</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
        </param>
        <param>
          <type>boost::optional&lt; unsigned int &gt;</type>
          <declname>referenceAntenna</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref> &amp;</type>
          <declname>computeOptions</declname>
        </param>
        <briefdescription>
<para>Interface for Leap calibration implementations. </para>        </briefdescription>
        <detaileddescription>
<para>Calibrates by performing phase rotation for each direction in <computeroutput>directions</computeroutput> by splitting uvws into integration batches per timestep. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h" line="59" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" bodystart="67" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CpuLeapCalibrator_1a01c4a7583607e855665bd54688abdb27" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::CpuLeapCalibrator::PhaseRotate</definition>
        <argsstring>(MetaData &amp;metadata, const SphericalDirection &amp;direction, std::vector&lt; Integration &gt; &amp;input, std::vector&lt; BeamCalibration &gt; &amp;output_calibrations)</argsstring>
        <name>PhaseRotate</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">Integration</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">BeamCalibration</ref> &gt; &amp;</type>
          <declname>output_calibrations</declname>
        </param>
        <briefdescription>
<para>Performs rotation, summing and calibration for <computeroutput>direction</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>metadata object containing data required for calibration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction to calibrate for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para>batches of uvws and visibilities to process </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_calibrations</parametername>
</parameternamelist>
<parameterdescription>
<para>output calibration from summing a function of uvws and visibilities </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" bodystart="162" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CpuLeapCalibrator_1a0fee26edd75b3d469a9c6b157890ce6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::CpuLeapCalibrator::RotateVisibilities</definition>
        <argsstring>(Integration &amp;integration, MetaData &amp;metadata)</argsstring>
        <name>RotateVisibilities</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Performs rotation and averaging over each baseline, channel and polarization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para>The input integration batch of uvws and visibilities </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The metadata object where AverageData is written to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" bodystart="197" bodyend="235"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="52">
        <label>noncopyable</label>
      </node>
      <node id="51">
        <label>icrar::ILeapCalibrator</label>
        <link refid="classicrar_1_1ILeapCalibrator"/>
        <childnode refid="52" relation="private-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>icrar::cpu::CpuLeapCalibrator</label>
        <link refid="classicrar_1_1cpu_1_1CpuLeapCalibrator"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="55">
        <label>noncopyable</label>
      </node>
      <node id="54">
        <label>icrar::ILeapCalibrator</label>
        <link refid="classicrar_1_1ILeapCalibrator"/>
        <childnode refid="55" relation="private-inheritance">
        </childnode>
      </node>
      <node id="53">
        <label>icrar::cpu::CpuLeapCalibrator</label>
        <link refid="classicrar_1_1cpu_1_1CpuLeapCalibrator"/>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h" bodystart="51" bodyend="91"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1CpuLeapCalibrator_1ab8fdc1824f3a4995b6763746f609c488" prot="public" virt="non-virtual"><scope>icrar::cpu::CpuLeapCalibrator</scope><name>Calibrate</name></member>
      <member refid="classicrar_1_1ILeapCalibrator_1a412a647a014b6ff433541bf717fcc591" prot="public" virt="pure-virtual" ambiguityscope="icrar::ILeapCalibrator::"><scope>icrar::cpu::CpuLeapCalibrator</scope><name>Calibrate</name></member>
      <member refid="classicrar_1_1cpu_1_1CpuLeapCalibrator_1a01c4a7583607e855665bd54688abdb27" prot="public" virt="non-virtual"><scope>icrar::cpu::CpuLeapCalibrator</scope><name>PhaseRotate</name></member>
      <member refid="classicrar_1_1cpu_1_1CpuLeapCalibrator_1a0fee26edd75b3d469a9c6b157890ce6e" prot="public" virt="non-virtual"><scope>icrar::cpu::CpuLeapCalibrator</scope><name>RotateVisibilities</name></member>
      <member refid="classicrar_1_1ILeapCalibrator_1af1a6c83536884eff5b4047eddbcef74f" prot="public" virt="virtual"><scope>icrar::cpu::CpuLeapCalibrator</scope><name>~ILeapCalibrator</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1CudaComputeOptions" kind="class" language="C++" prot="public">
    <compoundname>icrar::CudaComputeOptions</compoundname>
    <includes local="no">CudaComputeOptions.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1CudaComputeOptions_1a2ac68d823eee0f5a8deb16d4a1abc2c2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::CudaComputeOptions::isFileSystemCacheEnabled</definition>
        <argsstring/>
        <name>isFileSystemCacheEnabled</name>
        <briefdescription>
<para>Enables caching of expensive calculations to the filesystem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" line="46" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CudaComputeOptions_1af74736569352192a852f2607579bc908" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::CudaComputeOptions::useIntermediateBuffer</definition>
        <argsstring/>
        <name>useIntermediateBuffer</name>
        <briefdescription>
<para>enables an intermediate buffer containing unrotated visibilities to improve per direction performance </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" line="47" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CudaComputeOptions_1aebe1b0563a0309dec47b5e6e666033c2" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::CudaComputeOptions::useCusolver</definition>
        <argsstring/>
        <name>useCusolver</name>
        <briefdescription>
<para>Uses cusolver for Ad calculation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" line="48" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1CudaComputeOptions_1a1fafccbe03b70159c99095688fe1d61f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::CudaComputeOptions::CudaComputeOptions</definition>
        <argsstring>(const ComputeOptionsDTO &amp;computeOptions, const icrar::MeasurementSet &amp;ms, const Rangei &amp;solutionRange)</argsstring>
        <name>CudaComputeOptions</name>
        <param>
          <type>const <ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref> &amp;</type>
          <declname>computeOptions</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Range" kindref="compound">Rangei</ref> &amp;</type>
          <declname>solutionRange</declname>
        </param>
        <briefdescription>
<para>Determines ideal calibration compute options for a given measurementSet. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>computeOptions</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" line="56" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.cc" bodystart="40" bodyend="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Validates and determines the best compute features for calibration depending on measurement set data and hardware configuration. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" line="44" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h" bodystart="43" bodyend="57"/>
    <listofallmembers>
      <member refid="classicrar_1_1CudaComputeOptions_1a1fafccbe03b70159c99095688fe1d61f" prot="public" virt="non-virtual"><scope>icrar::CudaComputeOptions</scope><name>CudaComputeOptions</name></member>
      <member refid="classicrar_1_1CudaComputeOptions_1a2ac68d823eee0f5a8deb16d4a1abc2c2" prot="public" virt="non-virtual"><scope>icrar::CudaComputeOptions</scope><name>isFileSystemCacheEnabled</name></member>
      <member refid="classicrar_1_1CudaComputeOptions_1aebe1b0563a0309dec47b5e6e666033c2" prot="public" virt="non-virtual"><scope>icrar::CudaComputeOptions</scope><name>useCusolver</name></member>
      <member refid="classicrar_1_1CudaComputeOptions_1af74736569352192a852f2607579bc908" prot="public" virt="non-virtual"><scope>icrar::CudaComputeOptions</scope><name>useIntermediateBuffer</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1CudaLeapCalibrator" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::CudaLeapCalibrator</compoundname>
    <basecompoundref refid="classicrar_1_1ILeapCalibrator" prot="public" virt="non-virtual">icrar::ILeapCalibrator</basecompoundref>
    <includes local="no">CudaLeapCalibrator.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a3cfaf50d4b6fa4301223f14e40b8d22b" prot="private" static="no" mutable="no">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t icrar::cuda::CudaLeapCalibrator::m_cublasContext</definition>
        <argsstring/>
        <name>m_cublasContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a2f4f59d87f33d6cd7455819d9a70f8c9" prot="private" static="no" mutable="no">
        <type>cusolverDnHandle_t</type>
        <definition>cusolverDnHandle_t icrar::cuda::CudaLeapCalibrator::m_cusolverDnContext</definition>
        <argsstring/>
        <name>m_cusolverDnContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="77" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1aca0caad9a84074198e609d636ccc801d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::CudaLeapCalibrator::CudaLeapCalibrator</definition>
        <argsstring>()</argsstring>
        <name>CudaLeapCalibrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="80" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="73" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a86b111b4c12b0ad65cedaefb3d142e65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::CudaLeapCalibrator::~CudaLeapCalibrator</definition>
        <argsstring>() override</argsstring>
        <name>~CudaLeapCalibrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="81" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="101" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a310adea81337497e0ccba00658654eab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void icrar::cuda::CudaLeapCalibrator::Calibrate</definition>
        <argsstring>(std::function&lt; void(const cpu::Calibration &amp;)&gt; outputCallback, const icrar::MeasurementSet &amp;ms, const std::vector&lt; SphericalDirection &gt; &amp;directions, const Slice &amp;solutionInterval, double minimumBaselineThreshold, boost::optional&lt; unsigned int &gt; referenceAntenna, const ComputeOptionsDTO &amp;computeOptions) override</argsstring>
        <name>Calibrate</name>
        <reimplements refid="classicrar_1_1ILeapCalibrator_1a412a647a014b6ff433541bf717fcc591">Calibrate</reimplements>
        <param>
          <type>std::function&lt; void(const <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">cpu::Calibration</ref> &amp;)&gt;</type>
          <declname>outputCallback</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; SphericalDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>solutionInterval</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
        </param>
        <param>
          <type>boost::optional&lt; unsigned int &gt;</type>
          <declname>referenceAntenna</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref> &amp;</type>
          <declname>computeOptions</declname>
        </param>
        <briefdescription>
<para>Interface for Leap calibration implementations. </para>        </briefdescription>
        <detaileddescription>
<para>Calibrates by performing phase rotation for each direction in <computeroutput>directions</computeroutput> by splitting uvws and visibilities into integration batches per timestep. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="111" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a470023caa57560a2269d8ca372f43ad5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::CudaLeapCalibrator::CalculateAd</definition>
        <argsstring>(HostMetaData &amp;metadata, device_matrix&lt; double &gt; &amp;deviceA, device_matrix&lt; double &gt; &amp;deviceAd, bool isFileSystemCacheEnabled, bool useCuda)</argsstring>
        <name>CalculateAd</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1HostMetaData" kindref="compound">HostMetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deviceA</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deviceAd</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>isFileSystemCacheEnabled</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCuda</declname>
        </param>
        <briefdescription>
<para>Calculates Ad into deviceAd, writes to cache if <computeroutput>isFileSystemCacheEnabled</computeroutput> is true. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostA</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to invert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceA</parametername>
</parameternamelist>
<parameterdescription>
<para>output device memory of A </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostAd</parametername>
</parameternamelist>
<parameterdescription>
<para>output host memory of Ad (optionally written to) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceAd</parametername>
</parameternamelist>
<parameterdescription>
<para>output device memory of Ad </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isFileSystemCacheEnabled</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use file caching </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCuda</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to use cuda solvers </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="107" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="263" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a99bb1e053ba8b6a470d2079b3abdb627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::CudaLeapCalibrator::CalculateAd1</definition>
        <argsstring>(HostMetaData &amp;metadata, device_matrix&lt; double &gt; &amp;deviceA1, device_matrix&lt; double &gt; &amp;deviceAd1)</argsstring>
        <name>CalculateAd1</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1HostMetaData" kindref="compound">HostMetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deviceA1</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deviceAd1</declname>
        </param>
        <briefdescription>
<para>Calculates Ad1 into deviceAd1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hostA1</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to invert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceA1</parametername>
</parameternamelist>
<parameterdescription>
<para>output device memory of A1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hostAd1</parametername>
</parameternamelist>
<parameterdescription>
<para>output host memory of Ad1 (optionally written to) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceAd1</parametername>
</parameternamelist>
<parameterdescription>
<para>output device memory of Ad1 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="122" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="347" bodyend="366"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1CudaLeapCalibrator_1ad259e9be962cdeae93c7f3eeb6e94515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::CudaLeapCalibrator::PhaseRotate</definition>
        <argsstring>(const HostMetaData &amp;hostMetadata, DeviceMetaData &amp;deviceMetadata, const SphericalDirection &amp;direction, cuda::DeviceIntegration &amp;input, std::vector&lt; cpu::BeamCalibration &gt; &amp;output_calibrations)</argsstring>
        <name>PhaseRotate</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1HostMetaData" kindref="compound">HostMetaData</ref> &amp;</type>
          <declname>hostMetadata</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;</type>
          <declname>deviceMetadata</declname>
        </param>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceIntegration" kindref="compound">cuda::DeviceIntegration</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1BeamCalibration" kindref="compound">cpu::BeamCalibration</ref> &gt; &amp;</type>
          <declname>output_calibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs only visibilities rotation on the GPU </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="130" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="368" bodyend="392"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>LEAP calibration object implemented using CUDA. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="58">
        <label>icrar::cuda::CudaLeapCalibrator</label>
        <link refid="classicrar_1_1cuda_1_1CudaLeapCalibrator"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>noncopyable</label>
      </node>
      <node id="59">
        <label>icrar::ILeapCalibrator</label>
        <link refid="classicrar_1_1ILeapCalibrator"/>
        <childnode refid="60" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="61">
        <label>icrar::cuda::CudaLeapCalibrator</label>
        <link refid="classicrar_1_1cuda_1_1CudaLeapCalibrator"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>noncopyable</label>
      </node>
      <node id="62">
        <label>icrar::ILeapCalibrator</label>
        <link refid="classicrar_1_1ILeapCalibrator"/>
        <childnode refid="63" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" line="75" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h" bodystart="74" bodyend="136"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a470023caa57560a2269d8ca372f43ad5" prot="public" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>CalculateAd</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a99bb1e053ba8b6a470d2079b3abdb627" prot="public" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>CalculateAd1</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a310adea81337497e0ccba00658654eab" prot="public" virt="virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>Calibrate</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1aca0caad9a84074198e609d636ccc801d" prot="public" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>CudaLeapCalibrator</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a3cfaf50d4b6fa4301223f14e40b8d22b" prot="private" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>m_cublasContext</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a2f4f59d87f33d6cd7455819d9a70f8c9" prot="private" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>m_cusolverDnContext</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1ad259e9be962cdeae93c7f3eeb6e94515" prot="public" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>PhaseRotate</name></member>
      <member refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a86b111b4c12b0ad65cedaefb3d142e65" prot="public" virt="non-virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>~CudaLeapCalibrator</name></member>
      <member refid="classicrar_1_1ILeapCalibrator_1af1a6c83536884eff5b4047eddbcef74f" prot="public" virt="virtual"><scope>icrar::cuda::CudaLeapCalibrator</scope><name>~ILeapCalibrator</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1CudaMatrixEigenTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::CudaMatrixEigenTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1CudaMatrixEigenTests_1a15f90dc410e4787b510fa256bcac6a62" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::CudaMatrixEigenTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 1e-10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="56" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CudaMatrixEigenTests_1ac5ecd49cff09d3d228f58b2a36b8e0fb" prot="private" static="no" mutable="no">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t icrar::CudaMatrixEigenTests::m_cublasContext</definition>
        <argsstring/>
        <name>m_cublasContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="57" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CudaMatrixEigenTests_1a0cd94acfa4a1b499d1c5751b02eda900" prot="private" static="no" mutable="no">
        <type>cusolverDnHandle_t</type>
        <definition>cusolverDnHandle_t icrar::CudaMatrixEigenTests::m_cusolverDnContext</definition>
        <argsstring/>
        <name>m_cusolverDnContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="58" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a9bd0921621dd3b00d7e210cea77147a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="61" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="61" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a920b947df8fd7c09886d384da9317200" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="74" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="74" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a9484937b993a4e294ef32d74358e44ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverse23</definition>
        <argsstring>(cuda::JobType jobType)</argsstring>
        <name>TestPseudoInverse23</name>
        <param>
          <type><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">cuda::JobType</ref></type>
          <declname>jobType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="99" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="99" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1abc13eea3c213b6f8b614439cd7adf54c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverse32Degenerate</definition>
        <argsstring>()</argsstring>
        <name>TestPseudoInverse32Degenerate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="114" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="114" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1aa6c5b4f68bfaad192af02b1113693a14" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverse33</definition>
        <argsstring>(cuda::JobType jobType)</argsstring>
        <name>TestPseudoInverse33</name>
        <param>
          <type><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">cuda::JobType</ref></type>
          <declname>jobType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="136" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="136" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a1f0735fd9b3d53c4e2412077865ebe1a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverse32</definition>
        <argsstring>(cuda::JobType jobType)</argsstring>
        <name>TestPseudoInverse32</name>
        <param>
          <type><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">cuda::JobType</ref></type>
          <declname>jobType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="154" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="154" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a3a1d5f938d9c4f6c6b68120b2c6e72b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverse42</definition>
        <argsstring>(cuda::JobType jobType)</argsstring>
        <name>TestPseudoInverse42</name>
        <param>
          <type><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">cuda::JobType</ref></type>
          <declname>jobType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="170" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="170" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a81166d85f1a6553c8eff92ce280421cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverseMWA</definition>
        <argsstring>(cuda::JobType jobType)</argsstring>
        <name>TestPseudoInverseMWA</name>
        <param>
          <type><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">cuda::JobType</ref></type>
          <declname>jobType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="188" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="188" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a5b6dccdd309c7de015e19789bac87aec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverseLarge</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>TestPseudoInverseLarge</name>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="200" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="200" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1acf3e18f5202054ea969c8bed705b7577" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestCudaSVDMatmulAskap</definition>
        <argsstring>()</argsstring>
        <name>TestCudaSVDMatmulAskap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="222" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="222" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a815eae323f60e1d66d897dc99cf9b9cb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverseAskap</definition>
        <argsstring>()</argsstring>
        <name>TestPseudoInverseAskap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="244" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="244" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixEigenTests_1a720db576c57b65f52bcfe6f1c6826c41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixEigenTests::TestPseudoInverseSKA</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>TestPseudoInverseSKA</name>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="263" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="263" bodyend="283"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="65">
        <label>Test</label>
      </node>
      <node id="64">
        <label>icrar::CudaMatrixEigenTests</label>
        <link refid="classicrar_1_1CudaMatrixEigenTests"/>
        <childnode refid="65" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="67">
        <label>Test</label>
      </node>
      <node id="66">
        <label>icrar::CudaMatrixEigenTests</label>
        <link refid="classicrar_1_1CudaMatrixEigenTests"/>
        <childnode refid="67" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="55" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="54" bodyend="284"/>
    <listofallmembers>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1ac5ecd49cff09d3d228f58b2a36b8e0fb" prot="private" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>m_cublasContext</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a0cd94acfa4a1b499d1c5751b02eda900" prot="private" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>m_cusolverDnContext</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a9bd0921621dd3b00d7e210cea77147a6" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a920b947df8fd7c09886d384da9317200" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1acf3e18f5202054ea969c8bed705b7577" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestCudaSVDMatmulAskap</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a9484937b993a4e294ef32d74358e44ac" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverse23</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a1f0735fd9b3d53c4e2412077865ebe1a" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverse32</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1abc13eea3c213b6f8b614439cd7adf54c" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverse32Degenerate</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1aa6c5b4f68bfaad192af02b1113693a14" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverse33</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a3a1d5f938d9c4f6c6b68120b2c6e72b9" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverse42</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a815eae323f60e1d66d897dc99cf9b9cb" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverseAskap</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a5b6dccdd309c7de015e19789bac87aec" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverseLarge</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a81166d85f1a6553c8eff92ce280421cd" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverseMWA</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a720db576c57b65f52bcfe6f1c6826c41" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TestPseudoInverseSKA</name></member>
      <member refid="classicrar_1_1CudaMatrixEigenTests_1a15f90dc410e4787b510fa256bcac6a62" prot="private" virt="non-virtual"><scope>icrar::CudaMatrixEigenTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1CudaMatrixTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::CudaMatrixTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1CudaMatrixTests_1a15fa033874eb46ba5a92c793a7c60d21" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double icrar::CudaMatrixTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="41" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CudaMatrixTests_1a14b98c715970d8d0ee33d2f19878ac11" prot="private" static="no" mutable="no">
        <type>cublasHandle_t</type>
        <definition>cublasHandle_t icrar::CudaMatrixTests::m_cublasContext</definition>
        <argsstring/>
        <name>m_cublasContext</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="42" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1a0300cf4bc04563215181034f9fe996af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="45" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="45" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1ac7ce27596afa96b4a17aeb7618e78225" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="55" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1a4f77dc19a97864e0f2f46151464672e0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TestMatrixMatrixMultiply</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixMatrixMultiply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="62" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="62" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1a783a7839bd0484f4f6515f519b91c91f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TestMatrixMatrixMultiplyTranspose</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixMatrixMultiplyTranspose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="82" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="82" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1a3a36d11f8ea911fb9f00de7efff253f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TestMatrixMatrixMultiplyHermetian</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixMatrixMultiplyHermetian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="108" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="108" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1a6bf29052585e3a4f81ad2045f6c0e6fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TestMatrixMatrixMultiplyAdd</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixMatrixMultiplyAdd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="134" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="134" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1ae567927b9a73e60805dd28e322a225b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TestMatrixMatrixMultiply32</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixMatrixMultiply32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="154" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="154" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CudaMatrixTests_1a309651f9fd983a2e30c21556fa36b84f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::CudaMatrixTests::TestMatrixVectorMultiply33</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixVectorMultiply33</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="179" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="179" bodyend="201"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="68">
        <label>icrar::CudaMatrixTests</label>
        <link refid="classicrar_1_1CudaMatrixTests"/>
        <childnode refid="69" relation="public-inheritance">
        </childnode>
      </node>
      <node id="69">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="70">
        <label>icrar::CudaMatrixTests</label>
        <link refid="classicrar_1_1CudaMatrixTests"/>
        <childnode refid="71" relation="public-inheritance">
        </childnode>
      </node>
      <node id="71">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="40" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="39" bodyend="202"/>
    <listofallmembers>
      <member refid="classicrar_1_1CudaMatrixTests_1a14b98c715970d8d0ee33d2f19878ac11" prot="private" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>m_cublasContext</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a0300cf4bc04563215181034f9fe996af" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1ac7ce27596afa96b4a17aeb7618e78225" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a4f77dc19a97864e0f2f46151464672e0" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TestMatrixMatrixMultiply</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1ae567927b9a73e60805dd28e322a225b1" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TestMatrixMatrixMultiply32</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a6bf29052585e3a4f81ad2045f6c0e6fb" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TestMatrixMatrixMultiplyAdd</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a3a36d11f8ea911fb9f00de7efff253f9" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TestMatrixMatrixMultiplyHermetian</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a783a7839bd0484f4f6515f519b91c91f" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TestMatrixMatrixMultiplyTranspose</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a309651f9fd983a2e30c21556fa36b84f" prot="public" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TestMatrixVectorMultiply33</name></member>
      <member refid="classicrar_1_1CudaMatrixTests_1a15fa033874eb46ba5a92c793a7c60d21" prot="private" virt="non-virtual"><scope>icrar::CudaMatrixTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1device__matrix" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::device_matrix</compoundname>
    <basecompoundref prot="private" virt="non-virtual">noncopyable</basecompoundref>
    <includes local="no">device_matrix.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__matrix_1afd61a9a14dbe5b8a01edb68ae8da86c3" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_matrix&lt; T &gt;::m_rows</definition>
        <argsstring/>
        <name>m_rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__matrix_1a583d40615f7187f6ee341378f5e8a84b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_matrix&lt; T &gt;::m_cols</definition>
        <argsstring/>
        <name>m_cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="53" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__matrix_1a71adbfa11d485ea8e62db1b4510ba4ec" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* icrar::cuda::device_matrix&lt; T &gt;::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="54" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a9b5ca786c7391f2da2e67fe454d0981a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>()</argsstring>
        <name>device_matrix</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="61" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ab6b7a182241e3d262cd16dceaf50d161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(device_matrix &amp;&amp;other) noexcept</argsstring>
        <name>device_matrix</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="72" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="72" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a67ae012415f8f5658f39b3c391856f31" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref> &amp;</type>
        <definition>device_matrix&amp; icrar::cuda::device_matrix&lt; T &gt;::operator=</definition>
        <argsstring>(device_matrix &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Move Assignment Operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device_matrix&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="88" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ab1b4f61cd3d77ffcea38645ca03c08c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(size_t rows, size_t cols, const T *data=nullptr)</argsstring>
        <name>device_matrix</name>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct a new device matrix object of fixed size and initialized asyncronously if data is provided. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para>number of columns </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>constigous column major data of size rows*cols*sizeof(T) to copy to device </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="107" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="107" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ab111526609439828cfbe6bd082b542e8" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;data)</argsstring>
        <name>device_matrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="124" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="124" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a3eaa82c7a1ac38fa658a34578be8a713" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Cols</declname>
            <defname>Cols</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Rows, Cols &gt; &amp;data)</argsstring>
        <name>device_matrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Rows, Cols &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="128" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="128" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ac01ef9262f7d200dc2503f0c2d1aa426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::~device_matrix</definition>
        <argsstring>()</argsstring>
        <name>~device_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="131" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ad83d0dddd345afe7749e19216eceb488" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ T *</type>
        <definition>__host__ T* icrar::cuda::device_matrix&lt; T &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="136" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a0bce5d2f9181cb6dd1d08637505d5222" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ const T *</type>
        <definition>__host__ const T* icrar::cuda::device_matrix&lt; T &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="141" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a70432120f90328025579917adbfc1ae5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetRows</definition>
        <argsstring>() const</argsstring>
        <name>GetRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="146" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a16e6bd503d979ea7b33b7d72eb62cb74" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetCols</definition>
        <argsstring>() const</argsstring>
        <name>GetCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="151" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a63db0f9bff6bb83442919a6fb3340d3f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="156" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1aa81ef86a4bdc6cdf2e9e1093ae7489cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="161" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a96570a2664b86dccbd68554b9690db51" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::SetZeroAsync</definition>
        <argsstring>()</argsstring>
        <name>SetZeroAsync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="166" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="166" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a249a5cc81be23c3677be6f27fcc53833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::SetDataSync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataSync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs a synchronous copy of data into the device buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="178" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="178" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a33447d1eba0413f7e38ba0280e46f5a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::SetDataAsync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Copies data from device to host memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="193" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a0ddef8694b9abafbfb52108b7e2bb67a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="199" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ae8ade7e9e5231ee55f7f2229ac29085b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="205" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1aa3a83a98ab9ca0d06ac5fb4d09ca57f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="211" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1afd845d176fd77049e272bbb8901f1cab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Cols</declname>
            <defname>Cols</defname>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Matrix&lt; T, Rows, Cols &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Matrix&lt; T, Rows, Cols &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="218" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a42c192aa6fbe5aa59044c3a87f78ea51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>__host__ Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>() const</argsstring>
        <name>ToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="224" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="224" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a9254f6c8724a48e4c694a3c9cd5a6c17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHostAsync</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="231" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="231" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a1da77685baa20e1b0bba21f48aa7464e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHostAsync</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;out) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="237" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="237" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a61c4622b36d6fc7e6d77ce8db6dadab5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHostVectorAsync</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;out) const</argsstring>
        <name>ToHostVectorAsync</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="243" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="243" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a52afd37444d0f7ebeddc801e9859b28d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>__host__ Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::cuda::device_matrix&lt; T &gt;::ToHostAsync</definition>
        <argsstring>() const</argsstring>
        <name>ToHostAsync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="253" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="253" bodyend="258"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda device buffer object that represents a memory buffer on a cuda device. Matrix size is fixed at construction and can only be resized using move semantics. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>numeric type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <ulink url="https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/">https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/</ulink> </para></simplesect>
<simplesect kind="note"><para>See <ulink url="https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421">https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="72">
        <label>icrar::cuda::device_matrix&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="73" relation="private-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>noncopyable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="74">
        <label>icrar::cuda::device_matrix&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="75" relation="private-inheritance">
        </childnode>
      </node>
      <node id="75">
        <label>noncopyable</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="51" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="50" bodyend="259"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a9b5ca786c7391f2da2e67fe454d0981a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ab6b7a182241e3d262cd16dceaf50d161" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ab1b4f61cd3d77ffcea38645ca03c08c7" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ab111526609439828cfbe6bd082b542e8" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a3eaa82c7a1ac38fa658a34578be8a713" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ad83d0dddd345afe7749e19216eceb488" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a0bce5d2f9181cb6dd1d08637505d5222" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a16e6bd503d979ea7b33b7d72eb62cb74" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetCols</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a63db0f9bff6bb83442919a6fb3340d3f" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetCount</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a70432120f90328025579917adbfc1ae5" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetRows</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1aa81ef86a4bdc6cdf2e9e1093ae7489cb" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a71adbfa11d485ea8e62db1b4510ba4ec" prot="private" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>m_buffer</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a583d40615f7187f6ee341378f5e8a84b" prot="private" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>m_cols</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1afd61a9a14dbe5b8a01edb68ae8da86c3" prot="private" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>m_rows</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a67ae012415f8f5658f39b3c391856f31" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>operator=</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a33447d1eba0413f7e38ba0280e46f5a6" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a249a5cc81be23c3677be6f27fcc53833" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>SetDataSync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a96570a2664b86dccbd68554b9690db51" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>SetZeroAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a0ddef8694b9abafbfb52108b7e2bb67a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ae8ade7e9e5231ee55f7f2229ac29085b" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1aa3a83a98ab9ca0d06ac5fb4d09ca57f9" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1afd845d176fd77049e272bbb8901f1cab" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a42c192aa6fbe5aa59044c3a87f78ea51" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a9254f6c8724a48e4c694a3c9cd5a6c17" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a1da77685baa20e1b0bba21f48aa7464e" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a52afd37444d0f7ebeddc801e9859b28d" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a61c4622b36d6fc7e6d77ce8db6dadab5" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHostVectorAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ac01ef9262f7d200dc2503f0c2d1aa426" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>~device_matrix</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1device__tensor" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::device_tensor</compoundname>
    <includes local="no">device_tensor.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>uint32_t</type>
        <declname>NumDims</declname>
        <defname>NumDims</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__tensor_1ae1395f4f99f51ee89f76d856b81aaa67" prot="private" static="no" mutable="no">
        <type>Eigen::DSizes&lt; Eigen::DenseIndex, NumDims &gt;</type>
        <definition>Eigen::DSizes&lt;Eigen::DenseIndex, NumDims&gt; icrar::cuda::device_tensor&lt; T, NumDims &gt;::m_sizeDim</definition>
        <argsstring/>
        <name>m_sizeDim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__tensor_1a1d93ee500f7d6d1447bd6dbe6e3a39b0" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* icrar::cuda::device_tensor&lt; T, NumDims &gt;::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="53" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1ad3aa109f1f5ef795a5d2cb0157681522" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor&lt; T, NumDims &gt;::device_tensor</definition>
        <argsstring>(Eigen::DSizes&lt; Eigen::DenseIndex, NumDims &gt; shape, const T *data=nullptr)</argsstring>
        <name>device_tensor</name>
        <param>
          <type>Eigen::DSizes&lt; Eigen::DenseIndex, NumDims &gt;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="56" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="56" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a105a430b5511bd15e90efde0d5522133" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor&lt; T, NumDims &gt;::device_tensor</definition>
        <argsstring>(size_t sizeDim0, size_t sizeDim1, size_t sizeDim2, const T *data=nullptr)</argsstring>
        <name>device_tensor</name>
        <param>
          <type>size_t</type>
          <declname>sizeDim0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim2</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="71" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1ae55028f794654e525d001887ebd94ca1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor&lt; T, NumDims &gt;::device_tensor</definition>
        <argsstring>(size_t sizeDim0, size_t sizeDim1, size_t sizeDim2, size_t sizeDim3, const T *data=nullptr)</argsstring>
        <name>device_tensor</name>
        <param>
          <type>size_t</type>
          <declname>sizeDim0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim2</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim3</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="76" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1ab845dd7fc58720f3a98b59e3be64d4ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor&lt; T, NumDims &gt;::device_tensor</definition>
        <argsstring>(const Eigen::Tensor&lt; T, NumDims &gt; &amp;tensor)</argsstring>
        <name>device_tensor</name>
        <param>
          <type>const Eigen::Tensor&lt; T, NumDims &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="82" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="82" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1add7467b9b84aae623f829edd05d57fab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor&lt; T, NumDims &gt;::device_tensor</definition>
        <argsstring>(device_tensor &amp;&amp;other)</argsstring>
        <name>device_tensor</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="90" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1acc1f3ac53fa47294c97ffeb653170a06" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor</ref> &amp;</type>
        <definition>device_tensor&amp; icrar::cuda::device_tensor&lt; T, NumDims &gt;::operator=</definition>
        <argsstring>(device_tensor &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="98" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="98" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a90796f43edb312a9fe49436d127adab8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor&lt; T, NumDims &gt;::~device_tensor</definition>
        <argsstring>()</argsstring>
        <name>~device_tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="107" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1ac4f563d51515303dd3576f7b7d1bc219" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ T *</type>
        <definition>__host__ T* icrar::cuda::device_tensor&lt; T, NumDims &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Gets the raw pointer to device buffer memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>T* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="117" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1aa2cd6c4c3f12901556e9685f6d29f25c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ const T *</type>
        <definition>__host__ const T* icrar::cuda::device_tensor&lt; T, NumDims &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
<para>Gets the raw pointer to device buffer memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>T const* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="127" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="127" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a8fd0934758676dc3065eb19a0d8c6c35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ Eigen::DenseIndex</type>
        <definition>__host__ Eigen::DenseIndex icrar::cuda::device_tensor&lt; T, NumDims &gt;::GetDimensionSize</definition>
        <argsstring>(int dim) const</argsstring>
        <name>GetDimensionSize</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="132" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a7185c88b6e9302de0ec1221c054d2a91" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ Eigen::DSizes&lt; Eigen::DenseIndex, NumDims &gt;</type>
        <definition>__host__ Eigen::DSizes&lt;Eigen::DenseIndex, NumDims&gt; icrar::cuda::device_tensor&lt; T, NumDims &gt;::GetDimensions</definition>
        <argsstring>() const</argsstring>
        <name>GetDimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="137" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="137" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1ad81e2f5021363d0858e097fe41c9ad1e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_tensor&lt; T, NumDims &gt;::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Gets the total number of elements in the tensor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="147" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a9cadbc8956a6b79e8bbed1fea908fc9a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_tensor&lt; T, NumDims &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Gets the total number of elements in the tensor. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="157" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a85b036f97aa4f125e4e75747ff231749" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ size_t</type>
        <definition>__host__ size_t icrar::cuda::device_tensor&lt; T, NumDims &gt;::GetByteSize</definition>
        <argsstring>() const</argsstring>
        <name>GetByteSize</name>
        <briefdescription>
<para>Gets the total number of bytes in the memory buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="167" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a439618f98265522b884bb403f7124ac4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::SetDataSync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataSync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs a synchronous copy of data into the device buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="178" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="178" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a55888101ebaf454c95fafed8a53c8412" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::SetDataAsync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the Data asyncronously from host memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="193" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a40ce62a6134cae8bca9adeb9f13b058b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::SetDataAsync</definition>
        <argsstring>(const device_tensor&lt; T, NumDims &gt; &amp;data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor</ref>&lt; T, NumDims &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="199" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="199" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a437b14a5f28e5d483977b5d5379aa624" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::ToHost</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="205" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="205" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1aa14deb2ed78b6a4c2dff54cbabbe7454" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::ToHost</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="211" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="211" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1a43b773283694a5755951379a0d0d82b7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::ToHost</definition>
        <argsstring>(Eigen::Tensor&lt; T, NumDims &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Tensor&lt; T, NumDims &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="217" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="217" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor_1ad199603f9d0fa8dcc46fa1efd865ed37" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor&lt; T, NumDims &gt;::ToHostAsync</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="223" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="223" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda device tensor buffer object that references a tensor in cuda device memory buffer for manipulation by the host. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the tensor data type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>NumDims</parametername>
</parameternamelist>
<parameterdescription>
<para>number of tensor dimensions </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <ulink url="https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/">https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/</ulink> </para></simplesect>
<simplesect kind="note"><para>See <ulink url="https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421">https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421</ulink> </para></simplesect>
</para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="51" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="50" bodyend="228"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ad3aa109f1f5ef795a5d2cb0157681522" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>device_tensor</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a105a430b5511bd15e90efde0d5522133" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>device_tensor</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ae55028f794654e525d001887ebd94ca1" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>device_tensor</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ab845dd7fc58720f3a98b59e3be64d4ec" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>device_tensor</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1add7467b9b84aae623f829edd05d57fab" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>device_tensor</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ac4f563d51515303dd3576f7b7d1bc219" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1aa2cd6c4c3f12901556e9685f6d29f25c" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a85b036f97aa4f125e4e75747ff231749" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>GetByteSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ad81e2f5021363d0858e097fe41c9ad1e" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>GetCount</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a7185c88b6e9302de0ec1221c054d2a91" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>GetDimensions</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a8fd0934758676dc3065eb19a0d8c6c35" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>GetDimensionSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a9cadbc8956a6b79e8bbed1fea908fc9a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a1d93ee500f7d6d1447bd6dbe6e3a39b0" prot="private" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>m_buffer</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ae1395f4f99f51ee89f76d856b81aaa67" prot="private" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>m_sizeDim</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1acc1f3ac53fa47294c97ffeb653170a06" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>operator=</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a55888101ebaf454c95fafed8a53c8412" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a40ce62a6134cae8bca9adeb9f13b058b" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a439618f98265522b884bb403f7124ac4" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>SetDataSync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a437b14a5f28e5d483977b5d5379aa624" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1aa14deb2ed78b6a4c2dff54cbabbe7454" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a43b773283694a5755951379a0d0d82b7" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1ad199603f9d0fa8dcc46fa1efd865ed37" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor_1a90796f43edb312a9fe49436d127adab8" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor</scope><name>~device_tensor</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1device__vector" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::device_vector</compoundname>
    <basecompoundref prot="private" virt="non-virtual">noncopyable</basecompoundref>
    <includes local="no">device_vector.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__vector_1ac5f26eb33096723e504d8a51c57f5dc9" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_vector&lt; T &gt;::m_count</definition>
        <argsstring/>
        <name>m_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="55" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__vector_1a7678fd3d5154ef09d6c9375374966dc0" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* icrar::cuda::device_vector&lt; T &gt;::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="56" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ad6c849a8f54665d831c475d7e5b4d861" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>()</argsstring>
        <name>device_vector</name>
        <briefdescription>
<para>Default constructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="66" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1abf9b8bc7262645d5f4a25a192fcb6ce5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__</type>
        <definition>__host__ icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(device_vector &amp;&amp;other) noexcept</argsstring>
        <name>device_vector</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a8d7e235200a90774647b15d1d3140a55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref> &amp;</type>
        <definition>__host__ device_vector&amp; icrar::cuda::device_vector&lt; T &gt;::operator=</definition>
        <argsstring>(device_vector &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="79" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="79" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a34db81889a94a2e0aab54d3d8caa3ba7" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>__host__</type>
        <definition>__host__ icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(size_t count, const T *data=nullptr)</argsstring>
        <name>device_vector</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct a new device buffer object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="94" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="94" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a8ce413f71211e49a34dd77308f4b1ba4" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>__host__</type>
        <definition>__host__ icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;data)</argsstring>
        <name>device_vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="110" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a9324c59eb3ed3dd027da343ede618b1d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>__host__</type>
        <definition>__host__ icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;data)</argsstring>
        <name>device_vector</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="112" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a97b72a6b3118d79546b64b87c35edc0a" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>__host__</type>
        <definition>__host__ icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(const Eigen::Matrix&lt; T, 1, Eigen::Dynamic &gt; &amp;data)</argsstring>
        <name>device_vector</name>
        <param>
          <type>const Eigen::Matrix&lt; T, 1, Eigen::Dynamic &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="114" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1afa0eb0678dbd7432a490a03fbcce2594" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__</type>
        <definition>__host__ icrar::cuda::device_vector&lt; T &gt;::~device_vector</definition>
        <argsstring>()</argsstring>
        <name>~device_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="116" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ab0bc2febcfd47e2d79120a9cee338478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T* icrar::cuda::device_vector&lt; T &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="121" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1aca33746e8d5857f03d840f1583653cd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T* icrar::cuda::device_vector&lt; T &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="126" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a860ffec7b3f2597e93d67b216c9cc7d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_vector&lt; T &gt;::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
<para>Gets the number of elements in the buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="134" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a7bcc048927b7a28b025c6ab4de3b1196" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_vector&lt; T &gt;::GetRows</definition>
        <argsstring>() const</argsstring>
        <name>GetRows</name>
        <briefdescription>
<para>Gets the number of rows in the column vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="142" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="142" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ac546f59763ccf12acf5c19204c3d4a1a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr __host__ __device__ size_t</type>
        <definition>constexpr __host__ __device__ size_t icrar::cuda::device_vector&lt; T &gt;::GetCols</definition>
        <argsstring>() const</argsstring>
        <name>GetCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="147" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ada7479ce94e4eab84cd5c91149f66c20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_vector&lt; T &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Gets the buffer size in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="155" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="155" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ab9bed3fa5b93c5ad07559c88b0737605" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::SetZeroAsync</definition>
        <argsstring>()</argsstring>
        <name>SetZeroAsync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="160" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="160" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1afd61b0d60d9df51baf22522dffbdc124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::SetDataSync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataSync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs a synchronous copy of data into the device buffer. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>data points to a buffer of byte size &gt;= GetSize() </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data buffer for host to device copying </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="171" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="171" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a4472bc9ed3f6d84657554a6259fb2374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::SetDataAsync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Sets buffer data from pinned host memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Heap memory must be pinned using cudaHostRegister(..., cudaHostRegisterPortable) </para></simplesect>
<simplesect kind="pre"><para>data points to a buffer of byte size &gt;= GetSize() </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data buffer for host to device copying </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="186" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="186" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a7a19c8ee1780e6dd895fb15a0382a715" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHost</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="192" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="192" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ae0800dacba95f2f9e230531ae93e0fb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHost</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="198" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a4f9bf9878f9324bf3f2b460bfe0f3996" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="204" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="204" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a44dae8806fe7a37ed5076043a31fe4a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHostAsync</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Sets buffer data from pinned host memory. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="pre"><para>Heap memory must be pinned using cudaHostRegister(..., cudaHostRegisterPortable) </para></simplesect>
<simplesect kind="pre"><para>data points to a buffer of byte size &gt;= GetSize() </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>data buffer for device to host copying </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="216" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ab8b6f95fa87946c2fd8fd705204be153" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHostAsync</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="222" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="222" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a9bdccea169d003ed74683fdb3a0a717b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHostAsync</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;out) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="228" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="228" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1af3b542396ff039dd053996d9c104018e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>__host__ Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; icrar::cuda::device_vector&lt; T &gt;::ToHostAsync</definition>
        <argsstring>() const</argsstring>
        <name>ToHostAsync</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="234" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="234" bodyend="239"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda device buffer object that represents a memory buffer on a cuda device. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>numeric type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <ulink url="https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/">https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/</ulink> </para></simplesect>
<simplesect kind="note"><para>See <ulink url="https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421">https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421</ulink> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="79">
        <label>noncopyable</label>
      </node>
      <node id="78">
        <label>icrar::cuda::device_vector&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="79" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="81">
        <label>noncopyable</label>
      </node>
      <node id="80">
        <label>icrar::cuda::device_vector&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="81" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="54" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="53" bodyend="240"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ad6c849a8f54665d831c475d7e5b4d861" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1abf9b8bc7262645d5f4a25a192fcb6ce5" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a34db81889a94a2e0aab54d3d8caa3ba7" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a8ce413f71211e49a34dd77308f4b1ba4" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a9324c59eb3ed3dd027da343ede618b1d" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a97b72a6b3118d79546b64b87c35edc0a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ab0bc2febcfd47e2d79120a9cee338478" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1aca33746e8d5857f03d840f1583653cd6" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ac546f59763ccf12acf5c19204c3d4a1a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>GetCols</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a860ffec7b3f2597e93d67b216c9cc7d3" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>GetCount</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a7bcc048927b7a28b025c6ab4de3b1196" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>GetRows</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ada7479ce94e4eab84cd5c91149f66c20" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a7678fd3d5154ef09d6c9375374966dc0" prot="private" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>m_buffer</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ac5f26eb33096723e504d8a51c57f5dc9" prot="private" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>m_count</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a8d7e235200a90774647b15d1d3140a55" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>operator=</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a4472bc9ed3f6d84657554a6259fb2374" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1afd61b0d60d9df51baf22522dffbdc124" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>SetDataSync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ab9bed3fa5b93c5ad07559c88b0737605" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>SetZeroAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a7a19c8ee1780e6dd895fb15a0382a715" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ae0800dacba95f2f9e230531ae93e0fb9" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a4f9bf9878f9324bf3f2b460bfe0f3996" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a44dae8806fe7a37ed5076043a31fe4a1" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ab8b6f95fa87946c2fd8fd705204be153" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a9bdccea169d003ed74683fdb3a0a717b" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1af3b542396ff039dd053996d9c104018e" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1afa0eb0678dbd7432a490a03fbcce2594" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>~device_vector</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1DeviceIntegration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::DeviceIntegration</compoundname>
    <includes local="no">DeviceIntegration.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1aa20906ffc8dcef981c64045f855f3161" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cuda::DeviceIntegration::m_integrationNumber</definition>
        <argsstring/>
        <name>m_integrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="66" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1a1c248ce67bcc6c63ff14b0a5e84a61e4" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor3</ref>&lt; double &gt;</type>
        <definition>device_tensor3&lt;double&gt; icrar::cuda::DeviceIntegration::m_uvws</definition>
        <argsstring/>
        <name>m_uvws</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="68" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1a62d60462a454633b120ab11b011bd17c" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor4</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>device_tensor4&lt;std::complex&lt;double&gt; &gt; icrar::cuda::DeviceIntegration::m_visibilities</definition>
        <argsstring/>
        <name>m_visibilities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1ad4d7bb5ce4d998deccbd6bbe34c07f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceIntegration::DeviceIntegration</definition>
        <argsstring>(int integrationNumber, Eigen::DSizes&lt; Eigen::DenseIndex, 3 &gt; uvwShape, Eigen::DSizes&lt; Eigen::DenseIndex, 4 &gt; visShape)</argsstring>
        <name>DeviceIntegration</name>
        <param>
          <type>int</type>
          <declname>integrationNumber</declname>
        </param>
        <param>
          <type>Eigen::DSizes&lt; Eigen::DenseIndex, 3 &gt;</type>
          <declname>uvwShape</declname>
        </param>
        <param>
          <type>Eigen::DSizes&lt; Eigen::DenseIndex, 4 &gt;</type>
          <declname>visShape</declname>
        </param>
        <briefdescription>
<para>Construct a new Device Integration object where visibilities is a zero tensor of . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a8952db3ae6f0e083210d493190dee9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceIntegration::DeviceIntegration</definition>
        <argsstring>(const icrar::cpu::Integration &amp;integration)</argsstring>
        <name>DeviceIntegration</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">icrar::cpu::Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <briefdescription>
<para>Construct a new Device Integration object with a data syncronous copy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a5687b115a6419df7ccc437030b35c764" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::DeviceIntegration::Set</definition>
        <argsstring>(const icrar::cpu::Integration &amp;integration)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">icrar::cpu::Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <briefdescription>
<para>Set the Data object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a647a1e6816efd07fb3e9b606ba89b0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::DeviceIntegration::Set</definition>
        <argsstring>(const icrar::cuda::DeviceIntegration &amp;integration)</argsstring>
        <name>Set</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1DeviceIntegration" kindref="compound">icrar::cuda::DeviceIntegration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <briefdescription>
<para>Set the Data object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a65bae5e2b5bababb3a0f85689767d0a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int icrar::cuda::DeviceIntegration::GetIntegrationNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetIntegrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="100" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a0754c64d2c8f5462bb20848260ccff52" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetNumPolarizations</definition>
        <argsstring>() const</argsstring>
        <name>GetNumPolarizations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="102" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a8aede9d77fcd3f98d0ad75a9459039f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetNumChannels</definition>
        <argsstring>() const</argsstring>
        <name>GetNumChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="103" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1aaa92f3cc8b6466b81dd6e3336a70b717" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetNumBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetNumBaselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="104" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1aabedf7b1799e7c38ea68ea469a4ab0ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetNumTimesteps</definition>
        <argsstring>() const</argsstring>
        <name>GetNumTimesteps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="105" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1aa8134f7bdb665bde6e00084c93236545" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor3</ref>&lt; double &gt; &amp;</type>
        <definition>const device_tensor3&lt;double&gt;&amp; icrar::cuda::DeviceIntegration::GetUVW</definition>
        <argsstring>() const</argsstring>
        <name>GetUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="107" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a3d27759ed689b2fe285218bb13313495" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor4</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>const device_tensor4&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DeviceIntegration::GetVis</definition>
        <argsstring>() const</argsstring>
        <name>GetVis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="109" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a305fee61a6b617f4c0e24aa3a35c5440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor4</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>device_tensor4&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DeviceIntegration::GetVis</definition>
        <argsstring>()</argsstring>
        <name>GetVis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="110" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1aa8e1b407c79d3fe6461beabb7f74614f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::DeviceIntegration::ToHost</definition>
        <argsstring>(cpu::Integration &amp;host) const</argsstring>
        <name>ToHost</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">cpu::Integration</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
<para>Copies device data to a host object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>host</parametername>
</parameternamelist>
<parameterdescription>
<para>object with data on cpu memory </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="117" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Cuda memory buffer instance of visibility data for integration. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="65" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="64" bodyend="118"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1ad4d7bb5ce4d998deccbd6bbe34c07f08" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>DeviceIntegration</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a8952db3ae6f0e083210d493190dee9fb" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>DeviceIntegration</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a65bae5e2b5bababb3a0f85689767d0a1" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetIntegrationNumber</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aaa92f3cc8b6466b81dd6e3336a70b717" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetNumBaselines</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a8aede9d77fcd3f98d0ad75a9459039f4" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetNumChannels</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a0754c64d2c8f5462bb20848260ccff52" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetNumPolarizations</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aabedf7b1799e7c38ea68ea469a4ab0ef" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetNumTimesteps</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aa8134f7bdb665bde6e00084c93236545" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetUVW</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a3d27759ed689b2fe285218bb13313495" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a305fee61a6b617f4c0e24aa3a35c5440" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aa20906ffc8dcef981c64045f855f3161" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>m_integrationNumber</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a1c248ce67bcc6c63ff14b0a5e84a61e4" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>m_uvws</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a62d60462a454633b120ab11b011bd17c" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>m_visibilities</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a5687b115a6419df7ccc437030b35c764" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>Set</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a647a1e6816efd07fb3e9b606ba89b0dc" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>Set</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aa8e1b407c79d3fe6461beabb7f74614f" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>ToHost</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1DeviceMetaData" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::DeviceMetaData</compoundname>
    <includes local="no">DeviceMetaData.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1ae6b103b49a130b577b1ca77651f082ef" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classicrar_1_1cuda_1_1ConstantBuffer" kindref="compound">ConstantBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ConstantBuffer&gt; icrar::cuda::DeviceMetaData::m_constantBuffer</definition>
        <argsstring/>
        <name>m_constantBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="157" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a64c7edf3aa844f75d3b3df3b7f19eed4" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classicrar_1_1cuda_1_1DirectionBuffer" kindref="compound">DirectionBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DirectionBuffer&gt; icrar::cuda::DeviceMetaData::m_directionBuffer</definition>
        <argsstring/>
        <name>m_directionBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="158" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a781a82e078c3738c570e81eb6250d9c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceMetaData::DeviceMetaData</definition>
        <argsstring>(DeviceMetaData &amp;&amp;other) noexcept=default</argsstring>
        <name>DeviceMetaData</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a9cbd7f5f725d021e789da8ed463c4201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;</type>
        <definition>DeviceMetaData&amp; icrar::cuda::DeviceMetaData::operator=</definition>
        <argsstring>(DeviceMetaData &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a734264094a8cd14db2c941c51b51de91" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceMetaData::DeviceMetaData</definition>
        <argsstring>(const icrar::cpu::MetaData &amp;metadata)</argsstring>
        <name>DeviceMetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Construct a new Device MetaData object from the equivalent object on CPU memory. This copies to all device buffers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="170" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="103" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a9729267dd7f899e1de0e939c840becb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceMetaData::DeviceMetaData</definition>
        <argsstring>(std::shared_ptr&lt; ConstantBuffer &gt; constantBuffer, std::shared_ptr&lt; DirectionBuffer &gt; directionBuffer)</argsstring>
        <name>DeviceMetaData</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classicrar_1_1cuda_1_1ConstantBuffer" kindref="compound">ConstantBuffer</ref> &gt;</type>
          <declname>constantBuffer</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classicrar_1_1cuda_1_1DirectionBuffer" kindref="compound">DirectionBuffer</ref> &gt;</type>
          <declname>directionBuffer</declname>
        </param>
        <briefdescription>
<para>Construct a new Device MetaData object from the equivalent object on CPU memory. This copies to all device buffers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>constantBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directionBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="179" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="118" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1af2cdc4c57a6da9325b7e6c832b8aa7c5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref> &amp;</type>
        <definition>const icrar::cpu::Constants &amp; icrar::cuda::DeviceMetaData::GetConstants</definition>
        <argsstring>() const</argsstring>
        <name>GetConstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="183" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a306823b3aaba6bc449c6a848f8514b1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const SphericalDirection &amp;</type>
        <definition>const SphericalDirection&amp; icrar::cuda::DeviceMetaData::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="185" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a5ad7c0f0e92ea140b8d727c0052aaec0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::Matrix3d &amp;</type>
        <definition>const Eigen::Matrix3d&amp; icrar::cuda::DeviceMetaData::GetDD</definition>
        <argsstring>() const</argsstring>
        <name>GetDD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="186" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a1d0d92766f8f60923c9bfb4deb81db49" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1ConstantBuffer" kindref="compound">ConstantBuffer</ref> &amp;</type>
        <definition>const ConstantBuffer&amp; icrar::cuda::DeviceMetaData::GetConstantBuffer</definition>
        <argsstring>() const</argsstring>
        <name>GetConstantBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="188" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a7a85513ee46a297f8c0b9f043fc06781" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>const device_matrix&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DeviceMetaData::GetAvgData</definition>
        <argsstring>() const</argsstring>
        <name>GetAvgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="189" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1acf7b40c6588c8ef9d059360046a6e478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>device_matrix&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DeviceMetaData::GetAvgData</definition>
        <argsstring>()</argsstring>
        <name>GetAvgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="190" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a7ec7359f9dbff48500efb82705ccd0e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DeviceMetaData::SetAvgData</definition>
        <argsstring>(int v)</argsstring>
        <name>SetAvgData</name>
        <param>
          <type>int</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="192" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1ad6a9bae9d5d729b1a169dc1d92457a12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DeviceMetaData::ToHost</definition>
        <argsstring>(icrar::cpu::MetaData &amp;host) const</argsstring>
        <name>ToHost</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="194" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="135" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a9a0573f7cdd1611a0dab5465974a74b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref></type>
        <definition>cpu::MetaData icrar::cuda::DeviceMetaData::ToHost</definition>
        <argsstring>() const</argsstring>
        <name>ToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="195" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="143" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a4faeae1bef55b4b3ae730ae7d932292c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DeviceMetaData::ToHostAsync</definition>
        <argsstring>(icrar::cpu::MetaData &amp;host) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="197" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="150" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Represents the complete collection of MetaData that resides on the GPU for leap-calibration </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="156" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="155" bodyend="198"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a781a82e078c3738c570e81eb6250d9c8" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>DeviceMetaData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a734264094a8cd14db2c941c51b51de91" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>DeviceMetaData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a9729267dd7f899e1de0e939c840becb3" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>DeviceMetaData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a7a85513ee46a297f8c0b9f043fc06781" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1acf7b40c6588c8ef9d059360046a6e478" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a1d0d92766f8f60923c9bfb4deb81db49" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetConstantBuffer</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1af2cdc4c57a6da9325b7e6c832b8aa7c5" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetConstants</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a5ad7c0f0e92ea140b8d727c0052aaec0" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetDD</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a306823b3aaba6bc449c6a848f8514b1c" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1ae6b103b49a130b577b1ca77651f082ef" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>m_constantBuffer</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a64c7edf3aa844f75d3b3df3b7f19eed4" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>m_directionBuffer</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a9cbd7f5f725d021e789da8ed463c4201" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>operator=</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a7ec7359f9dbff48500efb82705ccd0e1" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>SetAvgData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1ad6a9bae9d5d729b1a169dc1d92457a12" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a9a0573f7cdd1611a0dab5465974a74b9" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a4faeae1bef55b4b3ae730ae7d932292c" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>ToHostAsync</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1DirectionBuffer" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::DirectionBuffer</compoundname>
    <includes local="no">DeviceMetaData.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DirectionBuffer_1adb9f36f3e4287255bdfb407b55928633" prot="private" static="no" mutable="no">
        <type>SphericalDirection</type>
        <definition>SphericalDirection icrar::cuda::DirectionBuffer::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="114" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DirectionBuffer_1a6401b3a5d2fdece4c5e5495ec36880c8" prot="private" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d icrar::cuda::DirectionBuffer::m_dd</definition>
        <argsstring/>
        <name>m_dd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="115" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DirectionBuffer_1a60479ea8081fc95716ddd2fe285628a4" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>device_matrix&lt;std::complex&lt;double&gt; &gt; icrar::cuda::DirectionBuffer::m_avgData</definition>
        <argsstring/>
        <name>m_avgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="117" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1af6443106f60ede787b9a6aa9c1d497b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DirectionBuffer::DirectionBuffer</definition>
        <argsstring>(const SphericalDirection &amp;direction, const Eigen::Matrix3d &amp;dd, const Eigen::MatrixXcd &amp;avgData)</argsstring>
        <name>DirectionBuffer</name>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>dd</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>avgData</declname>
        </param>
        <briefdescription>
<para>Constructs a new Direction Buffer object initializing all memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dd</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avgData</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="127" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="78" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1a154dbf8acf62d74b2b153dca2b4f70f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DirectionBuffer::DirectionBuffer</definition>
        <argsstring>(int avgDataRows, int avgDataCols)</argsstring>
        <name>DirectionBuffer</name>
        <param>
          <type>int</type>
          <declname>avgDataRows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>avgDataCols</declname>
        </param>
        <briefdescription>
<para>Constructs a new Direction Buffer object for late initialization. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>avgDataRows</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avgDataCols</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="138" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="87" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1ac002015519189c14671d070cb1be8c69" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const SphericalDirection &amp;</type>
        <definition>const SphericalDirection&amp; icrar::cuda::DirectionBuffer::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="142" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1aad035df563954cd4a409ee6fcb164a87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::Matrix3d &amp;</type>
        <definition>const Eigen::Matrix3d&amp; icrar::cuda::DirectionBuffer::GetDD</definition>
        <argsstring>() const</argsstring>
        <name>GetDD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="143" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1a6c02092dd6e8a70cdd01360abf9fc017" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>device_matrix&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DirectionBuffer::GetAvgData</definition>
        <argsstring>()</argsstring>
        <name>GetAvgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="145" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1a7de50b26ac108b6d1aad8a89ccb1d7ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DirectionBuffer::SetDirection</definition>
        <argsstring>(const SphericalDirection &amp;direction)</argsstring>
        <name>SetDirection</name>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="147" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DirectionBuffer_1a2d141d0b3c1cabe3df09600b290d1fcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DirectionBuffer::SetDD</definition>
        <argsstring>(const Eigen::Matrix3d &amp;dd)</argsstring>
        <name>SetDD</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>dd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="148" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>MetaData Variables allocated per direction. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="113" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="112" bodyend="149"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1af6443106f60ede787b9a6aa9c1d497b3" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>DirectionBuffer</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1a154dbf8acf62d74b2b153dca2b4f70f1" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>DirectionBuffer</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1a6c02092dd6e8a70cdd01360abf9fc017" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1aad035df563954cd4a409ee6fcb164a87" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>GetDD</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1ac002015519189c14671d070cb1be8c69" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1a60479ea8081fc95716ddd2fe285628a4" prot="private" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>m_avgData</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1a6401b3a5d2fdece4c5e5495ec36880c8" prot="private" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>m_dd</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1adb9f36f3e4287255bdfb407b55928633" prot="private" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1a2d141d0b3c1cabe3df09600b290d1fcd" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>SetDD</name></member>
      <member refid="classicrar_1_1cuda_1_1DirectionBuffer_1a7de50b26ac108b6d1aad8a89ccb1d7ad" prot="public" virt="non-virtual"><scope>icrar::cuda::DirectionBuffer</scope><name>SetDirection</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1E2EPerformanceTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::E2EPerformanceTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1E2EPerformanceTests_1a64ca4e5af7c9b3b6dbb3b7e9e00cc4fd" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::E2EPerformanceTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="50" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a93a9045f1137c090c4c10ebbe5b00eba" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::E2EPerformanceTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="53" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a576962cadabca99af54921ba06a65f57" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::E2EPerformanceTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="58" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a1a08464ddf4a49c1b3a072220c3d8ccd" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::E2EPerformanceTests::MultiDirectionTest</definition>
        <argsstring>(ComputeImplementation impl, const std::string &amp;msname)</argsstring>
        <name>MultiDirectionTest</name>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>msname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="63" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="63" bodyend="100"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>End-to-end performance tests. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="88">
        <label>icrar::E2EPerformanceTests</label>
        <link refid="classicrar_1_1E2EPerformanceTests"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="89">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="90">
        <label>icrar::E2EPerformanceTests</label>
        <link refid="classicrar_1_1E2EPerformanceTests"/>
        <childnode refid="91" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="49" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="48" bodyend="101"/>
    <listofallmembers>
      <member refid="classicrar_1_1E2EPerformanceTests_1a64ca4e5af7c9b3b6dbb3b7e9e00cc4fd" prot="private" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a1a08464ddf4a49c1b3a072220c3d8ccd" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>MultiDirectionTest</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a93a9045f1137c090c4c10ebbe5b00eba" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a576962cadabca99af54921ba06a65f57" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>TearDown</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1EigenExtensionsTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::EigenExtensionsTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1EigenExtensionsTests_1a6cd1690cc1672f554e20e846fd77520d" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::EigenExtensionsTests::THRESHOLD</definition>
        <argsstring/>
        <name>THRESHOLD</name>
        <initializer>= 0.00001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="32" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="32" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1EigenExtensionsTests_1a39e9d8a1037f148b561311155061d254" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Index</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::EigenExtensionsTests::TestWrappedRowSelect</definition>
        <argsstring>()</argsstring>
        <name>TestWrappedRowSelect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="35" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="35" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1EigenExtensionsTests_1abb9484303b411b47ee1778d5a4d674e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::EigenExtensionsTests::TestArg</definition>
        <argsstring>()</argsstring>
        <name>TestArg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="67" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="67" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1EigenExtensionsTests_1a8b083d0f0fb84b655cc815c8a8253d43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::EigenExtensionsTests::TestNumpySlice</definition>
        <argsstring>()</argsstring>
        <name>TestNumpySlice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="84" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="84" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="92">
        <label>icrar::EigenExtensionsTests</label>
        <link refid="classicrar_1_1EigenExtensionsTests"/>
        <childnode refid="93" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="94">
        <label>icrar::EigenExtensionsTests</label>
        <link refid="classicrar_1_1EigenExtensionsTests"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="95">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="30" bodyend="100"/>
    <listofallmembers>
      <member refid="classicrar_1_1EigenExtensionsTests_1abb9484303b411b47ee1778d5a4d674e1" prot="public" virt="non-virtual"><scope>icrar::EigenExtensionsTests</scope><name>TestArg</name></member>
      <member refid="classicrar_1_1EigenExtensionsTests_1a8b083d0f0fb84b655cc815c8a8253d43" prot="public" virt="non-virtual"><scope>icrar::EigenExtensionsTests</scope><name>TestNumpySlice</name></member>
      <member refid="classicrar_1_1EigenExtensionsTests_1a39e9d8a1037f148b561311155061d254" prot="public" virt="non-virtual"><scope>icrar::EigenExtensionsTests</scope><name>TestWrappedRowSelect</name></member>
      <member refid="classicrar_1_1EigenExtensionsTests_1a6cd1690cc1672f554e20e846fd77520d" prot="private" virt="non-virtual"><scope>icrar::EigenExtensionsTests</scope><name>THRESHOLD</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1EigenStringUtilsTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::EigenStringUtilsTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1EigenStringUtilsTests_1a42abdcd1801a6b099a8f182d254dfaeb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::EigenStringUtilsTests::TestTallMatrix</definition>
        <argsstring>()</argsstring>
        <name>TestTallMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="32" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="32" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1EigenStringUtilsTests_1a27d149fbcc1a8cd19b12ebf32fcf67d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::EigenStringUtilsTests::TestWideMatrix</definition>
        <argsstring>()</argsstring>
        <name>TestWideMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="48" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="48" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1EigenStringUtilsTests_1a01c3c0aec4d3664ecc21fd411eac098b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::EigenStringUtilsTests::TestLargeMatrix</definition>
        <argsstring>()</argsstring>
        <name>TestLargeMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="61" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="61" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="97">
        <label>Test</label>
      </node>
      <node id="96">
        <label>icrar::EigenStringUtilsTests</label>
        <link refid="classicrar_1_1EigenStringUtilsTests"/>
        <childnode refid="97" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="99">
        <label>Test</label>
      </node>
      <node id="98">
        <label>icrar::EigenStringUtilsTests</label>
        <link refid="classicrar_1_1EigenStringUtilsTests"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="30" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="29" bodyend="76"/>
    <listofallmembers>
      <member refid="classicrar_1_1EigenStringUtilsTests_1a01c3c0aec4d3664ecc21fd411eac098b" prot="public" virt="non-virtual"><scope>icrar::EigenStringUtilsTests</scope><name>TestLargeMatrix</name></member>
      <member refid="classicrar_1_1EigenStringUtilsTests_1a42abdcd1801a6b099a8f182d254dfaeb" prot="public" virt="non-virtual"><scope>icrar::EigenStringUtilsTests</scope><name>TestTallMatrix</name></member>
      <member refid="classicrar_1_1EigenStringUtilsTests_1a27d149fbcc1a8cd19b12ebf32fcf67d5" prot="public" virt="non-virtual"><scope>icrar::EigenStringUtilsTests</scope><name>TestWideMatrix</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::exception</compoundname>
    <basecompoundref prot="public" virt="non-virtual">exception</basecompoundref>
    <derivedcompoundref refid="classicrar_1_1file__exception" prot="public" virt="non-virtual">icrar::file_exception</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1invalid__argument__exception" prot="public" virt="non-virtual">icrar::invalid_argument_exception</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1json__exception" prot="public" virt="non-virtual">icrar::json_exception</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1not__implemented__exception" prot="public" virt="non-virtual">icrar::not_implemented_exception</derivedcompoundref>
    <includes local="no">exception.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1exception_1a89278ed56ba94f8c01df7d88b07aec8d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::exception::m_message</definition>
        <argsstring/>
        <name>m_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1exception_1aac13cb825703105e221261e19b8328fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::exception::exception</definition>
        <argsstring>(const std::string &amp;msg, const std::string &amp;file, int line)</argsstring>
        <name>exception</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
<para>Constructs a new exception object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>exception reason </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para>exception file location </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>line</parametername>
</parameternamelist>
<parameterdescription>
<para>exception line location </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="47" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.cc" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * icrar::exception::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="49" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.cc" bodystart="35" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Generic exception with source tracing. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="105">
        <label>icrar::not_implemented_exception</label>
        <link refid="classicrar_1_1not__implemented__exception"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="102">
        <label>icrar::file_exception</label>
        <link refid="classicrar_1_1file__exception"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="101">
        <label>std::exception</label>
      </node>
      <node id="103">
        <label>icrar::invalid_argument_exception</label>
        <link refid="classicrar_1_1invalid__argument__exception"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="104">
        <label>icrar::json_exception</label>
        <link refid="classicrar_1_1json__exception"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="101" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="107">
        <label>std::exception</label>
      </node>
      <node id="106">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="107" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="35" bodyend="50"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1aac13cb825703105e221261e19b8328fb" prot="public" virt="non-virtual"><scope>icrar::exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1exception_1a89278ed56ba94f8c01df7d88b07aec8d" prot="private" virt="non-virtual"><scope>icrar::exception</scope><name>m_message</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="non-virtual"><scope>icrar::exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1file__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::file_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
    <includes local="no">exception.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1file__exception_1a1fd87d2f40e1c137684ecd732e1a138a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::file_exception::file_exception</definition>
        <argsstring>(const std::string &amp;msg, const std::string &amp;filename, const std::string &amp;file, int line)</argsstring>
        <name>file_exception</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="71" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="71" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception raised when a file system operation fails. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="108">
        <label>icrar::file_exception</label>
        <link refid="classicrar_1_1file__exception"/>
        <childnode refid="109" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>std::exception</label>
      </node>
      <node id="109">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="111">
        <label>icrar::file_exception</label>
        <link refid="classicrar_1_1file__exception"/>
        <childnode refid="112" relation="public-inheritance">
        </childnode>
      </node>
      <node id="113">
        <label>std::exception</label>
      </node>
      <node id="112">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="113" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="68" bodyend="74"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1aac13cb825703105e221261e19b8328fb" prot="public" virt="non-virtual"><scope>icrar::file_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1file__exception_1a1fd87d2f40e1c137684ecd732e1a138a" prot="public" virt="non-virtual"><scope>icrar::file_exception</scope><name>file_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="non-virtual"><scope>icrar::file_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1HostIntegration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::HostIntegration</compoundname>
    <basecompoundref refid="classicrar_1_1cpu_1_1Integration" prot="public" virt="non-virtual">icrar::cpu::Integration</basecompoundref>
    <includes local="no">HostIntegration.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1HostIntegration_1ab82c39bda55da13dc2b465ad60447bb3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::HostIntegration::HostIntegration</definition>
        <argsstring>(int integrationNumber, const icrar::MeasurementSet &amp;ms, uint32_t startTimestep, uint32_t intervalTimesteps)</argsstring>
        <name>HostIntegration</name>
        <param>
          <type>int</type>
          <declname>integrationNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>startTimestep</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intervalTimesteps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/HostIntegration.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostIntegration.h" bodystart="41" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1HostIntegration_1a5eaf3547aaf32b25d028877c4e8e0559" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::HostIntegration::~HostIntegration</definition>
        <argsstring>()</argsstring>
        <name>~HostIntegration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/HostIntegration.h" line="56" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostIntegration.h" bodystart="56" bodyend="60"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda decorator for cpu::Integration. This class stores data on the host using pinned memory to allow for asyncronous read and write with cuda. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="114">
        <label>icrar::cuda::HostIntegration</label>
        <link refid="classicrar_1_1cuda_1_1HostIntegration"/>
        <childnode refid="115" relation="public-inheritance">
        </childnode>
      </node>
      <node id="115">
        <label>icrar::cpu::Integration</label>
        <link refid="classicrar_1_1cpu_1_1Integration"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="116">
        <label>icrar::cuda::HostIntegration</label>
        <link refid="classicrar_1_1cuda_1_1HostIntegration"/>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>icrar::cpu::Integration</label>
        <link refid="classicrar_1_1cpu_1_1Integration"/>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/model/cuda/HostIntegration.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostIntegration.h" bodystart="38" bodyend="61"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1Integration_1a54281133eb3dcb9a611f645bfaa6f3e6" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetIntegrationNumber</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac1deaeb70445347d78cf07309d313211" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetNumBaselines</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a2273a46bf345fedc34d50eeace310a17" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetNumChannels</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a36005ec3ae0413f961fc5e1b9dfe77db" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetNumPolarizations</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac414ca13cce474ee017910f0ed86cd72" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetNumTimesteps</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a56a379a2ca5a92119e2cdc70e339b037" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ab7c91c2f22af3ee43ad3aca99a3083bc" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a4c3b4f66105927955c7f15eb23593fa8" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cuda_1_1HostIntegration_1ab82c39bda55da13dc2b465ad60447bb3" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>HostIntegration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a0285e0c014c6b7d9c5566e1725c9b1e3" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>Integration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a86ed609bc7172abc595b6d3308e6669a" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>m_integrationNumber</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ae67a6862523dc01d3999d183964ef431" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>m_UVW</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a8edd7a0eefebc0a420733f5132a56f42" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>m_visibilities</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac0a4b91b38dabab459bbff42b97bc7e1" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>operator==</name></member>
      <member refid="classicrar_1_1cuda_1_1HostIntegration_1a5eaf3547aaf32b25d028877c4e8e0559" prot="public" virt="non-virtual"><scope>icrar::cuda::HostIntegration</scope><name>~HostIntegration</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1HostMetaData" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::HostMetaData</compoundname>
    <basecompoundref refid="classicrar_1_1cpu_1_1MetaData" prot="public" virt="non-virtual">icrar::cpu::MetaData</basecompoundref>
    <includes local="no">HostMetaData.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1HostMetaData_1aeeccae4f11bb035b12174f4800803ba2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::HostMetaData::HostMetaData</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, boost::optional&lt; unsigned int &gt; refAnt, double minimumBaselineThreshold, bool computeInverse, bool useCache)</argsstring>
        <name>HostMetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>boost::optional&lt; unsigned int &gt;</type>
          <declname>refAnt</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>computeInverse</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCache</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" bodystart="41" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1HostMetaData_1aec22e7a8e72df4016ae7009235aaf45f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::HostMetaData::~HostMetaData</definition>
        <argsstring>()</argsstring>
        <name>~HostMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1HostMetaData_1a0c3b905a4c7a69a2184b2b1b80800db0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void icrar::cuda::HostMetaData::SetAd</definition>
        <argsstring>(Eigen::MatrixXd &amp;&amp;Ad) override</argsstring>
        <name>SetAd</name>
        <reimplements refid="classicrar_1_1cpu_1_1MetaData_1a358a3a57752697a8d3111efdc509138f">SetAd</reimplements>
        <param>
          <type>Eigen::MatrixXd &amp;&amp;</type>
          <declname>Ad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" line="73" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" bodystart="73" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1HostMetaData_1a3ce1358d5ba98bf6808a5b16678ea9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void icrar::cuda::HostMetaData::SetAd1</definition>
        <argsstring>(Eigen::MatrixXd &amp;&amp;Ad1) override</argsstring>
        <name>SetAd1</name>
        <reimplements refid="classicrar_1_1cpu_1_1MetaData_1ae609e9c9c487660ab373b1113be82481">SetAd1</reimplements>
        <param>
          <type>Eigen::MatrixXd &amp;&amp;</type>
          <declname>Ad1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" line="83" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" bodystart="83" bodyend="91"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda decorator for cpu::Integration. This class stores data on the host withs pinned memory calls to allow for asyncronous read and write with cuda. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="118">
        <label>icrar::cuda::HostMetaData</label>
        <link refid="classicrar_1_1cuda_1_1HostMetaData"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>icrar::cpu::MetaData</label>
        <link refid="classicrar_1_1cpu_1_1MetaData"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="120">
        <label>icrar::cuda::HostMetaData</label>
        <link refid="classicrar_1_1cuda_1_1HostMetaData"/>
        <childnode refid="121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="121">
        <label>icrar::cpu::MetaData</label>
        <link refid="classicrar_1_1cpu_1_1MetaData"/>
        <childnode refid="122" relation="usage">
          <edgelabel>m_constants</edgelabel>
        </childnode>
      </node>
      <node id="122">
        <label>icrar::cpu::Constants</label>
        <link refid="structicrar_1_1cpu_1_1Constants"/>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/model/cuda/HostMetaData.h" bodystart="38" bodyend="92"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a2fbcd9b17de6feea8ee9acafb30a2305" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>ComputeInverse</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a7b9ebcdd242939b4b70b52f1e92854ea" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GenerateDDMatrix</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a15f8a7848c548f596a95420fc2111a61" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetA</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1af2e4b0a7490d07cefe24f2a046ba98d8" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetA1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a09b689cefdfb1a452274832597934787" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetAd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae70722d649f173a38cf9ad49d8ed43df" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetAd1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a136929b1b290c34eb6de9c9e8cbecdee" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a070cd3e9c3d957023a7235c7a5fdee8a" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1aa74b711230b7a195dab2272198811031" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetConstants</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a596bf46c7a2a785c273ec156a0647cbd" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetDD</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae65b7f58b143b5a5873e53905abb360a" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a9bb2e3d74bf808d57942469fc480ef0a" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetI</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a90722dff7a6402cafd824728a86a4d9d" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>GetI1</name></member>
      <member refid="classicrar_1_1cuda_1_1HostMetaData_1aeeccae4f11bb035b12174f4800803ba2" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>HostMetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1afa0c084db746a22aba2a74cbb69fd8ab" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_A</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a8fe2debc5e1bacd2edcd427a817a616e" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_A1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1accc9578bf12dd4c5c535f0546f2667d9" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_Ad</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a6e315209235d2b7bd8e56391f65bc5a8" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_Ad1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae2b708be0a6820dbc14cb52c516d5552" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_avgData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4fc1a4b38a3a6b125261e36c86720288" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_constants</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a59f5edce5df28c808e76f0aec9aa449d" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_dd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a169556bd58d8b6d05685a5adeb43ce9d" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4a30dcc55bfed25527c1ffb19fdd08ec" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_I</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1add1f846b9537b59e248789ee032af6e9" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_I1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a77a3b9d6aacf1e1348bcdce7deb3d3cb" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_minimumBaselineThreshold</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1addb966475ae87c079dc19477ded6c0a8" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_useCache</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a18ce3579970cc38f9e3d04b34936e103" prot="protected" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>m_UVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a06fe66dcf3173776521a8845fc64c5a9" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1afc72f274e4a53b19b71f1281ef3f87ea" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a9178133969cc04d079d0139987a51bf2" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>operator!=</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a477bf3bf5429f48c2be84225e4d1466d" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>operator==</name></member>
      <member refid="classicrar_1_1cuda_1_1HostMetaData_1a0c3b905a4c7a69a2184b2b1b80800db0" prot="public" virt="virtual"><scope>icrar::cuda::HostMetaData</scope><name>SetAd</name></member>
      <member refid="classicrar_1_1cuda_1_1HostMetaData_1a3ce1358d5ba98bf6808a5b16678ea9b2" prot="public" virt="virtual"><scope>icrar::cuda::HostMetaData</scope><name>SetAd1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ad53e4a7a725c43c833d27d2f227a19cb" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>SetDirection</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ad775c1df3d4c814694b3b9d5ad1bc459" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>ValidateInverse</name></member>
      <member refid="classicrar_1_1cuda_1_1HostMetaData_1aec22e7a8e72df4016ae7009235aaf45f" prot="public" virt="non-virtual"><scope>icrar::cuda::HostMetaData</scope><name>~HostMetaData</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1ILeapCalibrator" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>icrar::ILeapCalibrator</compoundname>
    <basecompoundref prot="private" virt="non-virtual">noncopyable</basecompoundref>
    <derivedcompoundref refid="classicrar_1_1cpu_1_1CpuLeapCalibrator" prot="public" virt="non-virtual">icrar::cpu::CpuLeapCalibrator</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1cuda_1_1CudaLeapCalibrator" prot="public" virt="non-virtual">icrar::cuda::CudaLeapCalibrator</derivedcompoundref>
    <includes local="no">ILeapCalibrator.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1ILeapCalibrator_1af1a6c83536884eff5b4047eddbcef74f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type/>
        <definition>virtual icrar::ILeapCalibrator::~ILeapCalibrator</definition>
        <argsstring>()=default</argsstring>
        <name>~ILeapCalibrator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/ILeapCalibrator.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ILeapCalibrator_1a412a647a014b6ff433541bf717fcc591" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void icrar::ILeapCalibrator::Calibrate</definition>
        <argsstring>(std::function&lt; void(const cpu::Calibration &amp;)&gt; outputCallback, const icrar::MeasurementSet &amp;ms, const std::vector&lt; SphericalDirection &gt; &amp;directions, const Slice &amp;solutionInterval, double minimumBaselineThreshold, boost::optional&lt; unsigned int &gt; referenceAntenna, const ComputeOptionsDTO &amp;computeOptions)=0</argsstring>
        <name>Calibrate</name>
        <reimplementedby refid="classicrar_1_1cuda_1_1CudaLeapCalibrator_1a310adea81337497e0ccba00658654eab">Calibrate</reimplementedby>
        <param>
          <type>std::function&lt; void(const <ref refid="classicrar_1_1cpu_1_1Calibration" kindref="compound">cpu::Calibration</ref> &amp;)&gt;</type>
          <declname>outputCallback</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; SphericalDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>solutionInterval</declname>
        </param>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
        </param>
        <param>
          <type>boost::optional&lt; unsigned int &gt;</type>
          <declname>referenceAntenna</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref> &amp;</type>
          <declname>computeOptions</declname>
        </param>
        <briefdescription>
<para>Performs Leap calibration for single or multiple solutions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>the mesurement set containing all input measurements </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directions</parametername>
</parameternamelist>
<parameterdescription>
<para>the directions to calibrate for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum baseline length to use in calibrations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>solutionInterval</parametername>
</parameternamelist>
<parameterdescription>
<para>the arbitrary interval to calculate solutions for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>referenceAntenna</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference antenna of metrix A1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>isFileSystemCacheEnabled</parametername>
</parameternamelist>
<parameterdescription>
<para>enable to use the filesystem to cache data between calibration calls </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>CalibrationCollection the calibrationn result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/ILeapCalibrator.h" line="66" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for Leap calibration implementations. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="126">
        <label>icrar::cuda::CudaLeapCalibrator</label>
        <link refid="classicrar_1_1cuda_1_1CudaLeapCalibrator"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
      </node>
      <node id="124">
        <label>noncopyable</label>
      </node>
      <node id="123">
        <label>icrar::ILeapCalibrator</label>
        <link refid="classicrar_1_1ILeapCalibrator"/>
        <childnode refid="124" relation="private-inheritance">
        </childnode>
      </node>
      <node id="125">
        <label>icrar::cpu::CpuLeapCalibrator</label>
        <link refid="classicrar_1_1cpu_1_1CpuLeapCalibrator"/>
        <childnode refid="123" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="128">
        <label>noncopyable</label>
      </node>
      <node id="127">
        <label>icrar::ILeapCalibrator</label>
        <link refid="classicrar_1_1ILeapCalibrator"/>
        <childnode refid="128" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/algorithm/ILeapCalibrator.h" line="51" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/ILeapCalibrator.h" bodystart="50" bodyend="74"/>
    <listofallmembers>
      <member refid="classicrar_1_1ILeapCalibrator_1a412a647a014b6ff433541bf717fcc591" prot="public" virt="pure-virtual"><scope>icrar::ILeapCalibrator</scope><name>Calibrate</name></member>
      <member refid="classicrar_1_1ILeapCalibrator_1af1a6c83536884eff5b4047eddbcef74f" prot="public" virt="virtual"><scope>icrar::ILeapCalibrator</scope><name>~ILeapCalibrator</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1Integration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::Integration</compoundname>
    <derivedcompoundref refid="classicrar_1_1cuda_1_1HostIntegration" prot="public" virt="non-virtual">icrar::cuda::HostIntegration</derivedcompoundref>
    <includes local="no">Integration.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a86ed609bc7172abc595b6d3308e6669a" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Integration::m_integrationNumber</definition>
        <argsstring/>
        <name>m_integrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="65" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1ae67a6862523dc01d3999d183964ef431" prot="protected" static="no" mutable="no">
        <type>Eigen::Tensor&lt; double, 3 &gt;</type>
        <definition>Eigen::Tensor&lt;double, 3&gt; icrar::cpu::Integration::m_UVW</definition>
        <argsstring/>
        <name>m_UVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="66" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a8edd7a0eefebc0a420733f5132a56f42" prot="protected" static="no" mutable="no">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt; icrar::cpu::Integration::m_visibilities</definition>
        <argsstring/>
        <name>m_visibilities</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classicrar_1_1cpu_1_1Integration_1af39131831a89a960e706f5354dc4ed3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class icrar::cuda::DeviceIntegration</definition>
        <argsstring/>
        <name>icrar::cuda::DeviceIntegration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="107" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a0285e0c014c6b7d9c5566e1725c9b1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::Integration::Integration</definition>
        <argsstring>(int integrationNumber, const icrar::MeasurementSet &amp;ms, uint32_t startTimestep, uint32_t intervalTimesteps, const Slice &amp;polarizationSlice=Slice(0, boost::none, 1))</argsstring>
        <name>Integration</name>
        <param>
          <type>int</type>
          <declname>integrationNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>startTimestep</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intervalTimesteps</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref> &amp;</type>
          <declname>polarizationSlice</declname>
          <defval><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref>(0, boost::none, 1)</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="70" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.cc" bodystart="35" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1ac0a4b91b38dabab459bbff42b97bc7e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::Integration::operator==</definition>
        <argsstring>(const Integration &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="77" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.cc" bodystart="56" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a54281133eb3dcb9a611f645bfaa6f3e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int icrar::cpu::Integration::GetIntegrationNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetIntegrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="79" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a36005ec3ae0413f961fc5e1b9dfe77db" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::GetNumPolarizations</definition>
        <argsstring>() const</argsstring>
        <name>GetNumPolarizations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="81" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a2273a46bf345fedc34d50eeace310a17" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::GetNumChannels</definition>
        <argsstring>() const</argsstring>
        <name>GetNumChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="82" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1ac1deaeb70445347d78cf07309d313211" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::GetNumBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetNumBaselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="83" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1ac414ca13cce474ee017910f0ed86cd72" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::GetNumTimesteps</definition>
        <argsstring>() const</argsstring>
        <name>GetNumTimesteps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="84" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a56a379a2ca5a92119e2cdc70e339b037" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::Tensor&lt; double, 3 &gt; &amp;</type>
        <definition>const Eigen::Tensor&lt;double, 3&gt;&amp; icrar::cpu::Integration::GetUVW</definition>
        <argsstring>() const</argsstring>
        <name>GetUVW</name>
        <briefdescription>
<para>Gets the UVW list. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::vector&lt;icrar::MVuvw&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="91" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1ab7c91c2f22af3ee43ad3aca99a3083bc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; &amp;</type>
        <definition>const Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt;&amp; icrar::cpu::Integration::GetVis</definition>
        <argsstring>() const</argsstring>
        <name>GetVis</name>
        <briefdescription>
<para>Get the Visibilities object of size (polarizations, channels, baselines, timesteps) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="98" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a4c3b4f66105927955c7f15eb23593fa8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; &amp;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt;&amp; icrar::cpu::Integration::GetVis</definition>
        <argsstring>()</argsstring>
        <name>GetVis</name>
        <briefdescription>
<para>Get the Visibilities object of size size (polarizations, channels, baselines, timesteps) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt;&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="105" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="105" bodyend="105"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A container for storing a visibilities tensor for accumulation during phase rotating. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="130">
        <label>icrar::cuda::HostIntegration</label>
        <link refid="classicrar_1_1cuda_1_1HostIntegration"/>
        <childnode refid="129" relation="public-inheritance">
        </childnode>
      </node>
      <node id="129">
        <label>icrar::cpu::Integration</label>
        <link refid="classicrar_1_1cpu_1_1Integration"/>
      </node>
    </inheritancegraph>
    <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="62" bodyend="108"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1Integration_1a54281133eb3dcb9a611f645bfaa6f3e6" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetIntegrationNumber</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac1deaeb70445347d78cf07309d313211" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetNumBaselines</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a2273a46bf345fedc34d50eeace310a17" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetNumChannels</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a36005ec3ae0413f961fc5e1b9dfe77db" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetNumPolarizations</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac414ca13cce474ee017910f0ed86cd72" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetNumTimesteps</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a56a379a2ca5a92119e2cdc70e339b037" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ab7c91c2f22af3ee43ad3aca99a3083bc" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a4c3b4f66105927955c7f15eb23593fa8" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1af39131831a89a960e706f5354dc4ed3d" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>icrar::cuda::DeviceIntegration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a0285e0c014c6b7d9c5566e1725c9b1e3" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>Integration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a86ed609bc7172abc595b6d3308e6669a" prot="protected" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>m_integrationNumber</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ae67a6862523dc01d3999d183964ef431" prot="protected" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>m_UVW</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a8edd7a0eefebc0a420733f5132a56f42" prot="protected" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>m_visibilities</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac0a4b91b38dabab459bbff42b97bc7e1" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1IntegrationTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::IntegrationTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1IntegrationTests_1a68859c8b4d66165da46a31a75596516f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::IntegrationTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="42" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1adb23b0a9825735b29d08f95a9c690c0d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="45" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1ae5a5ca79a41ff5eed4b4e0b23a091bdf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="51" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1a5a94a5fb3e98086a7aa6846dd4776a85" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TestMeasurementSet</definition>
        <argsstring>()</argsstring>
        <name>TestMeasurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="56" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="56" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1a229b9b22a879ce56caa15b41fc8e89e3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TestReadFromFile</definition>
        <argsstring>()</argsstring>
        <name>TestReadFromFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="66" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="66" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1ac770942341bd949ce198f6d8cbf94f1c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TestCudaBufferCopy</definition>
        <argsstring>()</argsstring>
        <name>TestCudaBufferCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="158" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="158" bodyend="183"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="132">
        <label>icrar::IntegrationTests</label>
        <link refid="classicrar_1_1IntegrationTests"/>
        <childnode refid="133" relation="public-inheritance">
        </childnode>
      </node>
      <node id="133">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="134">
        <label>icrar::IntegrationTests</label>
        <link refid="classicrar_1_1IntegrationTests"/>
        <childnode refid="135" relation="public-inheritance">
        </childnode>
      </node>
      <node id="135">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="41" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="40" bodyend="184"/>
    <listofallmembers>
      <member refid="classicrar_1_1IntegrationTests_1a68859c8b4d66165da46a31a75596516f" prot="private" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1IntegrationTests_1adb23b0a9825735b29d08f95a9c690c0d" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1IntegrationTests_1ae5a5ca79a41ff5eed4b4e0b23a091bdf" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1IntegrationTests_1ac770942341bd949ce198f6d8cbf94f1c" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TestCudaBufferCopy</name></member>
      <member refid="classicrar_1_1IntegrationTests_1a5a94a5fb3e98086a7aa6846dd4776a85" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TestMeasurementSet</name></member>
      <member refid="classicrar_1_1IntegrationTests_1a229b9b22a879ce56caa15b41fc8e89e3" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TestReadFromFile</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1invalid__argument__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::invalid_argument_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
    <includes local="no">exception.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1invalid__argument__exception_1ab9076315199c0ddbb6176b9bc5be2ea4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::invalid_argument_exception::invalid_argument_exception</definition>
        <argsstring>(const std::string &amp;msg, const std::string &amp;arg, const std::string &amp;file, int line)</argsstring>
        <name>invalid_argument_exception</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="59" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="59" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception raised when an invalid argument is passed into a function. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="138">
        <label>std::exception</label>
      </node>
      <node id="136">
        <label>icrar::invalid_argument_exception</label>
        <link refid="classicrar_1_1invalid__argument__exception"/>
        <childnode refid="137" relation="public-inheritance">
        </childnode>
      </node>
      <node id="137">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="138" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="141">
        <label>std::exception</label>
      </node>
      <node id="139">
        <label>icrar::invalid_argument_exception</label>
        <link refid="classicrar_1_1invalid__argument__exception"/>
        <childnode refid="140" relation="public-inheritance">
        </childnode>
      </node>
      <node id="140">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="141" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="57" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="56" bodyend="62"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1aac13cb825703105e221261e19b8328fb" prot="public" virt="non-virtual"><scope>icrar::invalid_argument_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1invalid__argument__exception_1ab9076315199c0ddbb6176b9bc5be2ea4" prot="public" virt="non-virtual"><scope>icrar::invalid_argument_exception</scope><name>invalid_argument_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="non-virtual"><scope>icrar::invalid_argument_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1json__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::json_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
    <includes local="no">exception.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1json__exception_1aae616bed86845f876a80de2d4cf14b2c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::json_exception::json_exception</definition>
        <argsstring>(const std::string &amp;msg, const std::string &amp;file, int line)</argsstring>
        <name>json_exception</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="83" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="83" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Exception raised when parsing invalid json. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="144">
        <label>std::exception</label>
      </node>
      <node id="142">
        <label>icrar::json_exception</label>
        <link refid="classicrar_1_1json__exception"/>
        <childnode refid="143" relation="public-inheritance">
        </childnode>
      </node>
      <node id="143">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="144" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="147">
        <label>std::exception</label>
      </node>
      <node id="145">
        <label>icrar::json_exception</label>
        <link refid="classicrar_1_1json__exception"/>
        <childnode refid="146" relation="public-inheritance">
        </childnode>
      </node>
      <node id="146">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="147" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="81" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="80" bodyend="86"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1aac13cb825703105e221261e19b8328fb" prot="public" virt="non-virtual"><scope>icrar::json_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1json__exception_1aae616bed86845f876a80de2d4cf14b2c" prot="public" virt="non-virtual"><scope>icrar::json_exception</scope><name>json_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="non-virtual"><scope>icrar::json_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1JSONHelperTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::JSONHelperTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1a8052ea14b318d1c009cd4a8e27098012" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::JSONHelperTests::TestParseDirections</definition>
        <argsstring>(const std::string &amp;input, const std::vector&lt; SphericalDirection &gt; &amp;expected)</argsstring>
        <name>TestParseDirections</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::vector&lt; SphericalDirection &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="47" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="47" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1a673642716d6dfc0a1d6c8cbb57471610" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::JSONHelperTests::TestParseDirectionsException</definition>
        <argsstring>(const std::string &amp;input)</argsstring>
        <name>TestParseDirectionsException</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="53" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="53" bodyend="56"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="149">
        <label>Test</label>
      </node>
      <node id="148">
        <label>icrar::JSONHelperTests</label>
        <link refid="classicrar_1_1JSONHelperTests"/>
        <childnode refid="149" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="151">
        <label>Test</label>
      </node>
      <node id="150">
        <label>icrar::JSONHelperTests</label>
        <link refid="classicrar_1_1JSONHelperTests"/>
        <childnode refid="151" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="45" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="44" bodyend="57"/>
    <listofallmembers>
      <member refid="classicrar_1_1JSONHelperTests_1a8052ea14b318d1c009cd4a8e27098012" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>TestParseDirections</name></member>
      <member refid="classicrar_1_1JSONHelperTests_1a673642716d6dfc0a1d6c8cbb57471610" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>TestParseDirectionsException</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1LeapCalibratorFactory" kind="class" language="C++" prot="public">
    <compoundname>icrar::LeapCalibratorFactory</compoundname>
    <includes local="no">LeapCalibratorFactory.h</includes>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1LeapCalibratorFactory_1a752271072e042f3f8ea6aae25ce9ec6a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::LeapCalibratorFactory::LeapCalibratorFactory</definition>
        <argsstring>()=delete</argsstring>
        <name>LeapCalibratorFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.h" line="38" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classicrar_1_1LeapCalibratorFactory_1a84ea38c843306abc4e2fee03175dff9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1ILeapCalibrator" kindref="compound">ILeapCalibrator</ref> &gt;</type>
        <definition>std::unique_ptr&lt; ILeapCalibrator &gt; icrar::LeapCalibratorFactory::Create</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>Create</name>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <briefdescription>
<para>Creates a calibrator object that performs leap calibration with specified implementation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>impl</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::unique_ptr&lt;ILeapCalibrator&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.h" line="48" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.cc" bodystart="30" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Factory class for creating a specialized LEAP calibrator. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.h" bodystart="36" bodyend="49"/>
    <listofallmembers>
      <member refid="classicrar_1_1LeapCalibratorFactory_1a84ea38c843306abc4e2fee03175dff9a" prot="public" virt="non-virtual"><scope>icrar::LeapCalibratorFactory</scope><name>Create</name></member>
      <member refid="classicrar_1_1LeapCalibratorFactory_1a752271072e042f3f8ea6aae25ce9ec6a" prot="private" virt="non-virtual"><scope>icrar::LeapCalibratorFactory</scope><name>LeapCalibratorFactory</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classleap__drops_1_1LeapGather_1_1LeapGather" kind="class" language="Python" prot="public">
    <compoundname>leap_drops::LeapGather::LeapGather</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BarrierAppDROP</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classleap__drops_1_1LeapGather_1_1LeapGather_1af59e149e184edf0dde9b63e4797e8177" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.LeapGather.LeapGather::compontent_meta</definition>
        <argsstring/>
        <name>compontent_meta</name>
        <initializer>=  dlg_component('Leap Gather', 'Leap Gather.',
                                    [dlg_batch_input('binary/*', [])],
                                    [dlg_batch_output('binary/*', [])],
                                    [dlg_streaming_input('binary/*')])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/LeapGather.py" line="25" column="1" bodyfile="leap_drops/LeapGather.py" bodystart="25" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classleap__drops_1_1LeapGather_1_1LeapGather_1a631a4e5ef1fec1b13402b5b70ba6bd3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.LeapGather.LeapGather.initialize</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>initialize</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/LeapGather.py" line="31" column="1" bodyfile="leap_drops/LeapGather.py" bodystart="31" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classleap__drops_1_1LeapGather_1_1LeapGather_1aee43fb93553c4d672236bf53cc4703b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.LeapGather.LeapGather.run</definition>
        <argsstring>(self)</argsstring>
        <name>run</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/LeapGather.py" line="35" column="1" bodyfile="leap_drops/LeapGather.py" bodystart="35" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Leap Gather. </para>    </briefdescription>
    <detaileddescription>
<para>Leap Gather</para><para>A BarrierAppDrop that gathers output from multiple instances of the LeapAccelerateCLI application, sorts it, and outputs it <simplesect kind="par"><title>EAGLE_START</title><para/></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gitrepo</parametername>
</parameternamelist>
<parameterdescription>
<para><ulink url="https://gitlab-ci-token:YuuCJciQ1_ZSyi2xK9M9@gitlab.com/ska-telescope/icrar-leap-accelerate.git">https://gitlab-ci-token:YuuCJciQ1_ZSyi2xK9M9@gitlab.com/ska-telescope/icrar-leap-accelerate.git</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>PythonApp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/appclass</parametername>
</parameternamelist>
<parameterdescription>
<para>Application Class/leap_nodes.LeapGather.LeapGather/String/readonly/ The path to the class that implements this app<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port/Result</parametername>
</parameternamelist>
<parameterdescription>
<para>The JSON output from an instance of LeapAccelerateCLI </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port/Result</parametername>
</parameternamelist>
<parameterdescription>
<para>The combined output from many instances the LeapAccelerateCLI application (JSON) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>EAGLE_END A BarrierAppDrop that gathers output from multiple instances of the LeapAccelerateCLI application, sorts it, and outputs it </title><para/></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="154">
        <label>leap_drops.LeapGather.LeapGather</label>
        <link refid="classleap__drops_1_1LeapGather_1_1LeapGather"/>
        <childnode refid="155" relation="public-inheritance">
        </childnode>
      </node>
      <node id="155">
        <label>BarrierAppDROP</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="156">
        <label>leap_drops.LeapGather.LeapGather</label>
        <link refid="classleap__drops_1_1LeapGather_1_1LeapGather"/>
        <childnode refid="157" relation="public-inheritance">
        </childnode>
      </node>
      <node id="157">
        <label>BarrierAppDROP</label>
      </node>
    </collaborationgraph>
    <location file="leap_drops/LeapGather.py" line="23" column="1" bodyfile="leap_drops/LeapGather.py" bodystart="23" bodyend="49"/>
    <listofallmembers>
      <member refid="classleap__drops_1_1LeapGather_1_1LeapGather_1af59e149e184edf0dde9b63e4797e8177" prot="public" virt="non-virtual"><scope>leap_drops::LeapGather::LeapGather</scope><name>compontent_meta</name></member>
      <member refid="classleap__drops_1_1LeapGather_1_1LeapGather_1a631a4e5ef1fec1b13402b5b70ba6bd3a" prot="public" virt="non-virtual"><scope>leap_drops::LeapGather::LeapGather</scope><name>initialize</name></member>
      <member refid="classleap__drops_1_1LeapGather_1_1LeapGather_1aee43fb93553c4d672236bf53cc4703b7" prot="public" virt="non-virtual"><scope>leap_drops::LeapGather::LeapGather</scope><name>run</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1MathConversionTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::MathConversionTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a8c01e9e0aa5df5d91328147ca32894dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::MathConversionTests::MathConversionTests</definition>
        <argsstring>()=default</argsstring>
        <name>MathConversionTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a51cc4d5df9693cbaa9dac8e285e0d53a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="38" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a1d8ddfb70264340f23863b1b0f206442" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="40" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a08e5569284e57056b697a2aba5097d08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestMVDirection</definition>
        <argsstring>()</argsstring>
        <name>TestMVDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="42" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="42" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a5b46d914e576066d94f6752286c7f3bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestConvertVector</definition>
        <argsstring>()</argsstring>
        <name>TestConvertVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="66" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="66" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a1838cea93f8b3ed7ca62a5f5e5a39aa5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestConvertMatrix</definition>
        <argsstring>()</argsstring>
        <name>TestConvertMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="80" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a9f9d3332823c73bd70c618a3eac046b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestConvertUVW</definition>
        <argsstring>()</argsstring>
        <name>TestConvertUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="90" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="90" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a32e66d6d59625e39f033efbc5136d7fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestConvertUVWVector</definition>
        <argsstring>()</argsstring>
        <name>TestConvertUVWVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="99" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="99" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a1109a178de89f91443959588a5724644" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestConvertMVDirection</definition>
        <argsstring>()</argsstring>
        <name>TestConvertMVDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="112" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="112" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MathConversionTests_1a051e5d01cbba1b3a12acdc0a076cd565" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MathConversionTests::TestConvertMVDirectionVector</definition>
        <argsstring>()</argsstring>
        <name>TestConvertMVDirectionVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="121" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="121" bodyend="132"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="159">
        <label>Test</label>
      </node>
      <node id="158">
        <label>icrar::MathConversionTests</label>
        <link refid="classicrar_1_1MathConversionTests"/>
        <childnode refid="159" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="161">
        <label>Test</label>
      </node>
      <node id="160">
        <label>icrar::MathConversionTests</label>
        <link refid="classicrar_1_1MathConversionTests"/>
        <childnode refid="161" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="34" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="33" bodyend="133"/>
    <listofallmembers>
      <member refid="classicrar_1_1MathConversionTests_1a8c01e9e0aa5df5d91328147ca32894dc" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>MathConversionTests</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a51cc4d5df9693cbaa9dac8e285e0d53a" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a1d8ddfb70264340f23863b1b0f206442" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a1838cea93f8b3ed7ca62a5f5e5a39aa5" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestConvertMatrix</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a1109a178de89f91443959588a5724644" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestConvertMVDirection</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a051e5d01cbba1b3a12acdc0a076cd565" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestConvertMVDirectionVector</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a9f9d3332823c73bd70c618a3eac046b8" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestConvertUVW</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a32e66d6d59625e39f033efbc5136d7fc" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestConvertUVWVector</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a5b46d914e576066d94f6752286c7f3bb" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestConvertVector</name></member>
      <member refid="classicrar_1_1MathConversionTests_1a08e5569284e57056b697a2aba5097d08" prot="public" virt="non-virtual"><scope>icrar::MathConversionTests</scope><name>TestMVDirection</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classMatrixTests" kind="class" language="C++" prot="public">
    <compoundname>MatrixTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classMatrixTests_1a0d58aab7b32db6193261e97b2a89fc37" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double MatrixTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classMatrixTests_1a6fbae005935d4fcab737be7212be6db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>MatrixTests::MatrixTests</definition>
        <argsstring>()=default</argsstring>
        <name>MatrixTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a9583c5af31d534960fe30b46bad8ab81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="43" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="43" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a787383d2398790314d3d9ae89a8af53b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="52" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1afe8f11a0542bef08fd8cb660b645daee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestMatrixSize</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="57" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="57" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a7f3b64e56080f81f37ee7555785929ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestMatrixEigen</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixEigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="73" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1ad651732bae2dc419a150d34870778f52" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestMatrixMultiply</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixMultiply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="78" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="78" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a882d63a8712b653e24a4f38b6be6806d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestMatrixPretty</definition>
        <argsstring>()</argsstring>
        <name>TestMatrixPretty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="92" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="92" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a933e78f28e5085e6d832d909973238c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestTranspose</definition>
        <argsstring>()</argsstring>
        <name>TestTranspose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="116" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="116" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a3f195390b82f4af9acb641f962684af4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestSquareInvert</definition>
        <argsstring>()</argsstring>
        <name>TestSquareInvert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="135" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="135" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a39a9fb45f95eebedd428a4cdbd1f0814" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestPseudoInverse33</definition>
        <argsstring>()</argsstring>
        <name>TestPseudoInverse33</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="154" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="154" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1a2403800a35a85a79e74ffa71a2e1455b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestPseudoInverse32</definition>
        <argsstring>()</argsstring>
        <name>TestPseudoInverse32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="173" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="173" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1aa8ae327edb1b051cb941be4f4ccdf1a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestSVD42</definition>
        <argsstring>()</argsstring>
        <name>TestSVD42</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="192" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="192" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1addf4baf3d7ed7ab7f6cee51d1b36bebe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestSVDPseudoInverse32Degenerate</definition>
        <argsstring>()</argsstring>
        <name>TestSVDPseudoInverse32Degenerate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="212" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="212" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classMatrixTests_1ab56e3c194506df63b778e37a3cc206c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MatrixTests::TestPseudoInverse42</definition>
        <argsstring>()</argsstring>
        <name>TestPseudoInverse42</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="231" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="231" bodyend="250"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>    </detaileddescription>
    <inheritancegraph>
      <node id="163">
        <label>Test</label>
      </node>
      <node id="162">
        <label>MatrixTests</label>
        <link refid="classMatrixTests"/>
        <childnode refid="163" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="165">
        <label>Test</label>
      </node>
      <node id="164">
        <label>MatrixTests</label>
        <link refid="classMatrixTests"/>
        <childnode refid="165" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="37" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="36" bodyend="251"/>
    <listofallmembers>
      <member refid="classMatrixTests_1a6fbae005935d4fcab737be7212be6db0" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>MatrixTests</name></member>
      <member refid="classMatrixTests_1a9583c5af31d534960fe30b46bad8ab81" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>SetUp</name></member>
      <member refid="classMatrixTests_1a787383d2398790314d3d9ae89a8af53b" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TearDown</name></member>
      <member refid="classMatrixTests_1a7f3b64e56080f81f37ee7555785929ea" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestMatrixEigen</name></member>
      <member refid="classMatrixTests_1ad651732bae2dc419a150d34870778f52" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestMatrixMultiply</name></member>
      <member refid="classMatrixTests_1a882d63a8712b653e24a4f38b6be6806d" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestMatrixPretty</name></member>
      <member refid="classMatrixTests_1afe8f11a0542bef08fd8cb660b645daee" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestMatrixSize</name></member>
      <member refid="classMatrixTests_1a2403800a35a85a79e74ffa71a2e1455b" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestPseudoInverse32</name></member>
      <member refid="classMatrixTests_1a39a9fb45f95eebedd428a4cdbd1f0814" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestPseudoInverse33</name></member>
      <member refid="classMatrixTests_1ab56e3c194506df63b778e37a3cc206c9" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestPseudoInverse42</name></member>
      <member refid="classMatrixTests_1a3f195390b82f4af9acb641f962684af4" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestSquareInvert</name></member>
      <member refid="classMatrixTests_1aa8ae327edb1b051cb941be4f4ccdf1a2" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestSVD42</name></member>
      <member refid="classMatrixTests_1addf4baf3d7ed7ab7f6cee51d1b36bebe" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestSVDPseudoInverse32Degenerate</name></member>
      <member refid="classMatrixTests_1a933e78f28e5085e6d832d909973238c2" prot="public" virt="non-virtual"><scope>MatrixTests</scope><name>TestTranspose</name></member>
      <member refid="classMatrixTests_1a0d58aab7b32db6193261e97b2a89fc37" prot="private" virt="non-virtual"><scope>MatrixTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1MeasurementSet" kind="class" language="C++" prot="public">
    <compoundname>icrar::MeasurementSet</compoundname>
    <includes local="no">MeasurementSet.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a2abf066c6efb7fec8415b5daf92fe2e5" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; casacore::MeasurementSet &gt;</type>
        <definition>std::unique_ptr&lt;casacore::MeasurementSet&gt; icrar::MeasurementSet::m_measurementSet</definition>
        <argsstring/>
        <name>m_measurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="58" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a231b347e84035571dfdeb6825e2b09ac" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; casacore::MSMainColumns &gt;</type>
        <definition>std::unique_ptr&lt;casacore::MSMainColumns&gt; icrar::MeasurementSet::m_msmc</definition>
        <argsstring/>
        <name>m_msmc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="59" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1aa418f4d26123293066026be7ef9e065a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; casacore::MSColumns &gt;</type>
        <definition>std::unique_ptr&lt;casacore::MSColumns&gt; icrar::MeasurementSet::m_msc</definition>
        <argsstring/>
        <name>m_msc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="60" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1ae95b1e3fdde7ad259e86158aa15276d1" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::MeasurementSet::m_filepath</definition>
        <argsstring/>
        <name>m_filepath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="62" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a1617e424a9886a0f4a0962689e84db69" prot="private" static="no" mutable="no">
        <type>std::set&lt; std::int32_t &gt;</type>
        <definition>std::set&lt;std::int32_t&gt; icrar::MeasurementSet::m_antennas</definition>
        <argsstring/>
        <name>m_antennas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1ae61eecb307ddeaf325b4f6ae63102657" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::MeasurementSet::m_stations</definition>
        <argsstring/>
        <name>m_stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="64" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a1e023da44562b8dfc52103a59929d29b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::MeasurementSet::m_readAutocorrelations</definition>
        <argsstring/>
        <name>m_readAutocorrelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="65" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a6fdf4c56b173461d50526980ca294f9e" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::m_numBaselines</definition>
        <argsstring/>
        <name>m_numBaselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="66" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1acf0bf822cd2391755c33cf5439c495f9" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::m_numRows</definition>
        <argsstring/>
        <name>m_numRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1addbd4bba06f1fcbd2c56e04b03c6a444" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::m_numTimesteps</definition>
        <argsstring/>
        <name>m_numTimesteps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="68" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a08f640f2d69b3669f76245b823904a23" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::m_numPols</definition>
        <argsstring/>
        <name>m_numPols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a422e3a0980f0086653d08bbf285acdab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::MeasurementSet::MeasurementSet</definition>
        <argsstring>(const std::string &amp;filepath)</argsstring>
        <name>MeasurementSet</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filepath</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="72" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="32" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a3aa164f6867f52f733b817c0a8940793" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::MeasurementSet::GetFilepath</definition>
        <argsstring>() const</argsstring>
        <name>GetFilepath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="74" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a78fb0ae9a3084b2347b7ca8851bcff06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MeasurementSet *</type>
        <definition>const casacore::MeasurementSet* icrar::MeasurementSet::GetMS</definition>
        <argsstring>() const</argsstring>
        <name>GetMS</name>
        <briefdescription>
<para>Gets a non-null pointer to a casacore::MeasurementSet. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const casacore::MeasurementSet* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="81" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a8b600fd8f16685927134084398b022f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MSMainColumns *</type>
        <definition>const casacore::MSMainColumns* icrar::MeasurementSet::GetMSMainColumns</definition>
        <argsstring>() const</argsstring>
        <name>GetMSMainColumns</name>
        <briefdescription>
<para>Gets a non-null pointer to a casacore::MSMainColumns. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const casacore::MSMainColumns* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a659a41dd7b522999779dc65ed06dea63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MSColumns *</type>
        <definition>const casacore::MSColumns* icrar::MeasurementSet::GetMSColumns</definition>
        <argsstring>() const</argsstring>
        <name>GetMSColumns</name>
        <briefdescription>
<para>Gets a non-null pointer to a casacore::MSColumns. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const casacore::MSColumns* </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="95" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="95" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a799cfb6b0d7c5b3f2b462863a109d4c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetTotalAntennas</definition>
        <argsstring>() const</argsstring>
        <name>GetTotalAntennas</name>
        <briefdescription>
<para>Gets the total number of antennas including flagged antennas. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="101" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="107" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a4aed10f47f73198fedf058eed56d4583" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumStations</definition>
        <argsstring>() const</argsstring>
        <name>GetNumStations</name>
        <briefdescription>
<para>Gets the number of stations excluding flagged stations. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="108" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a9d9c278268523aab39de6959c38ace87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetNumBaselines</name>
        <briefdescription>
<para>Get the number of baselines in the measurement set using the current autocorrelations setting and including stations not recording rows. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>TODO: baselines should always be n*(n-1) / 2 and without autocorrelations </para></simplesect>
<simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="116" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a1e89b1d3db92e615f943d58781a9c035" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumPols</definition>
        <argsstring>() const</argsstring>
        <name>GetNumPols</name>
        <briefdescription>
<para>Get the number of polarizations in the measurement set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="123" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="134" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1aae7e8449eccac1fbbd8761547eff086d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumChannels</definition>
        <argsstring>() const</argsstring>
        <name>GetNumChannels</name>
        <briefdescription>
<para>Gets the number of channels in the measurement set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="130" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="166" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a793ed496ccc0d0a6de98e9438c7ef98e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumRows</definition>
        <argsstring>() const</argsstring>
        <name>GetNumRows</name>
        <briefdescription>
<para>Gets the number of rows in the measurement set (non-flagged baselines * timesteps). </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="137" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a6b4ef52efe40e928f8d81d7baeb84ff6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumTimesteps</definition>
        <argsstring>() const</argsstring>
        <name>GetNumTimesteps</name>
        <briefdescription>
<para>Gets the total number of timesteps in the measurement set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="144" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a019a079bc6554d69b35b44cd41034bd1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt; double &gt; icrar::MeasurementSet::GetEpochs</definition>
        <argsstring>() const</argsstring>
        <name>GetEpochs</name>
        <briefdescription>
<para>Get the Epochs object. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;double&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="151" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="117" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1ae04194d15d8f286f9956c97c8c06c740" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXb</type>
        <definition>Eigen::VectorXb icrar::MeasurementSet::GetFlaggedBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetFlaggedBaselines</name>
        <briefdescription>
<para>Gets a vector of size nBaselines with a true value at the index of flagged baselines. Checks for flagged data on the first channel and polarization. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::VectorXb </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="159" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="178" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1adc19102bb44ac0281d0d8fc66903db00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumFlaggedBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetNumFlaggedBaselines</name>
        <briefdescription>
<para>Get the number of baselines that are flagged by the measurement set. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="166" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="202" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1aa4ec9eec7609723c72b5b96648a34a2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXb</type>
        <definition>Eigen::VectorXb icrar::MeasurementSet::GetShortBaselines</definition>
        <argsstring>(double minimumBaselineThreshold=0.0) const</argsstring>
        <name>GetShortBaselines</name>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Gets a flag vector of short baselines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::VectorXb </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="174" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="208" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a16aa33167797e2c9ac358e460d9c4b99" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumShortBaselines</definition>
        <argsstring>(double minimumBaselineThreshold=0.0) const</argsstring>
        <name>GetNumShortBaselines</name>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Get the number of baselines that below the <computeroutput>minimumBaselineThreshold</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="182" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="233" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a4969b357838f979dc9f90860ea44e816" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::VectorXb</type>
        <definition>Eigen::VectorXb icrar::MeasurementSet::GetFilteredBaselines</definition>
        <argsstring>(double minimumBaselineThreshold=0.0) const</argsstring>
        <name>GetFilteredBaselines</name>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Gets flag vector of filtered baselines that are either flagged or short. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::VectorXb </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="190" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="239" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1acc56d04aada1d01b39a194d03d1ac580" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::GetNumFilteredBaselines</definition>
        <argsstring>(double minimumBaselineThreshold=0.0) const</argsstring>
        <name>GetNumFilteredBaselines</name>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
          <defval>0.0</defval>
        </param>
        <briefdescription>
<para>Gets the number of baselines that are flagged baselines or short baselines. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="198" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="244" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1aac6cd2c0519c4a758eeb3e4f35170f8e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; double, 3 &gt;</type>
        <definition>Eigen::Tensor&lt; double, 3 &gt; icrar::MeasurementSet::ReadCoords</definition>
        <argsstring>() const</argsstring>
        <name>ReadCoords</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="200" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="250" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a6407f088a5473a17d6fa6b0d6434cca4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; double, 3 &gt;</type>
        <definition>Eigen::Tensor&lt; double, 3 &gt; icrar::MeasurementSet::ReadCoords</definition>
        <argsstring>(uint32_t startTimestep, uint32_t intervalTimesteps) const</argsstring>
        <name>ReadCoords</name>
        <param>
          <type>uint32_t</type>
          <declname>startTimestep</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intervalTimesteps</declname>
        </param>
        <briefdescription>
<para>Gets the Coords/UVWs of a specified time interval. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startTimestep</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intervalTimesteps</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Tensor&lt;double, 3&gt; of dimensions (3, baselines, timesteps) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="209" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="255" bodyend="284"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a31b900a5fbcd41cea771c07b0d9cd7b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt;</type>
        <definition>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; icrar::MeasurementSet::ReadVis</definition>
        <argsstring>() const</argsstring>
        <name>ReadVis</name>
        <briefdescription>
<para>Gets the visibilities from all baselines, channels and polarizations for the first timestep. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt; of dimensions (polarizations, channels, baselines, timesteps) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="219" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="286" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a134330e41e8d71f9fada75571e114b13" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt; icrar::MeasurementSet::ReadVis</definition>
        <argsstring>(std::uint32_t startTimestep, std::uint32_t intervalTimesteps, Slice polarizationSlice=Slice(0, boost::none, 1)) const</argsstring>
        <name>ReadVis</name>
        <param>
          <type>std::uint32_t</type>
          <declname>startTimestep</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>intervalTimesteps</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
          <declname>polarizationSlice</declname>
          <defval><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref>(0, boost::none, 1)</defval>
        </param>
        <briefdescription>
<para>Gets visibilities from the specificed dimension slices of a specified timestep slice. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startTimestep</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intervalTimesteps</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt; of dimensions (polarizations, channels, baselines, timesteps) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a6d67d8f9d59c079663295dad49fcbb27" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt;</type>
        <definition>Eigen::Tensor&lt; std::complex&lt; double &gt;, 4 &gt; icrar::MeasurementSet::ReadVis</definition>
        <argsstring>(uint32_t startTimestep, uint32_t intervalTimesteps, Range&lt; int32_t &gt; polarizationRange, const char *column) const</argsstring>
        <name>ReadVis</name>
        <param>
          <type>uint32_t</type>
          <declname>startTimestep</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>intervalTimesteps</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1Range" kindref="compound">Range</ref>&lt; int32_t &gt;</type>
          <declname>polarizationRange</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Reads from file visibilities using specified dimension slices. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>startTimestep</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>intervalTimesteps</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarizationRange</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 4&gt; of dimensions (polarizations, channels, baselines, timesteps) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="243" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="303" bodyend="363"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a26537ba4db42d79d98d9d45119352e05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; int32_t &gt;</type>
        <definition>std::set&lt; int32_t &gt; icrar::MeasurementSet::GetMissingAntennas</definition>
        <argsstring>() const</argsstring>
        <name>GetMissingAntennas</name>
        <briefdescription>
<para>Gets the antennas that are not present in any baselines. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::set&lt;int32_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="254" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="365" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a80a8eb77805e6a24d66a00629f209e76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::set&lt; int32_t &gt;</type>
        <definition>std::set&lt; int32_t &gt; icrar::MeasurementSet::GetFlaggedAntennas</definition>
        <argsstring>() const</argsstring>
        <name>GetFlaggedAntennas</name>
        <briefdescription>
<para>Gets the antenna indexes that are either not present in any baselines or are flagged in all of it's baselines. </para>        </briefdescription>
        <detaileddescription>
<para>Indexes are out of the total antennas</para><para><simplesect kind="return"><para>std::set&lt;int32_t&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="264" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="378" bodyend="404"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1aeaaf45a8f11b86c06389919c215bc254" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MeasurementSet::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="268" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="61" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1ab66b3197526a4ae66bd6e7a1deab4b1b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t icrar::MeasurementSet::CalculateNumBaselines</definition>
        <argsstring>(bool useAutocorrelations) const</argsstring>
        <name>CalculateNumBaselines</name>
        <param>
          <type>bool</type>
          <declname>useAutocorrelations</declname>
        </param>
        <briefdescription>
<para>Calculates the number of baselines in the measurement set (e.g. (0,0), (1,1), (2,2)) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="275" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="151" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a9461d46294155116134fffe14bdd2541" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; std::set&lt; int32_t &gt;, bool &gt;</type>
        <definition>std::tuple&lt; std::set&lt; int32_t &gt;, bool &gt; icrar::MeasurementSet::CalculateUniqueAntennas</definition>
        <argsstring>() const</argsstring>
        <name>CalculateUniqueAntennas</name>
        <briefdescription>
<para>Calculates the set of unique antenna present in baselines. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>uint32_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="282" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="411" bodyend="422"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Provides an abstraction layer around a casacore MeasurementSet that provides all data required for leap calibration. This class additionally stores runtime user specificed variables and cached variabled calculated from the underlying measurement set. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="57" column="1" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="56" bodyend="284"/>
    <listofallmembers>
      <member refid="classicrar_1_1MeasurementSet_1ab66b3197526a4ae66bd6e7a1deab4b1b" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>CalculateNumBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a9461d46294155116134fffe14bdd2541" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>CalculateUniqueAntennas</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a019a079bc6554d69b35b44cd41034bd1" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetEpochs</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a3aa164f6867f52f733b817c0a8940793" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetFilepath</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a4969b357838f979dc9f90860ea44e816" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetFilteredBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a80a8eb77805e6a24d66a00629f209e76" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetFlaggedAntennas</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ae04194d15d8f286f9956c97c8c06c740" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetFlaggedBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a26537ba4db42d79d98d9d45119352e05" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMissingAntennas</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a78fb0ae9a3084b2347b7ca8851bcff06" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMS</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a659a41dd7b522999779dc65ed06dea63" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMSColumns</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a8b600fd8f16685927134084398b022f5" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMSMainColumns</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a9d9c278268523aab39de6959c38ace87" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1aae7e8449eccac1fbbd8761547eff086d" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumChannels</name></member>
      <member refid="classicrar_1_1MeasurementSet_1acc56d04aada1d01b39a194d03d1ac580" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumFilteredBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1adc19102bb44ac0281d0d8fc66903db00" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumFlaggedBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a1e89b1d3db92e615f943d58781a9c035" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumPols</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a793ed496ccc0d0a6de98e9438c7ef98e" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumRows</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a16aa33167797e2c9ac358e460d9c4b99" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumShortBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a4aed10f47f73198fedf058eed56d4583" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumStations</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a6b4ef52efe40e928f8d81d7baeb84ff6" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumTimesteps</name></member>
      <member refid="classicrar_1_1MeasurementSet_1aa4ec9eec7609723c72b5b96648a34a2d" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetShortBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a799cfb6b0d7c5b3f2b462863a109d4c8" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetTotalAntennas</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a1617e424a9886a0f4a0962689e84db69" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_antennas</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ae95b1e3fdde7ad259e86158aa15276d1" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_filepath</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a2abf066c6efb7fec8415b5daf92fe2e5" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_measurementSet</name></member>
      <member refid="classicrar_1_1MeasurementSet_1aa418f4d26123293066026be7ef9e065a" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_msc</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a231b347e84035571dfdeb6825e2b09ac" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_msmc</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a6fdf4c56b173461d50526980ca294f9e" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_numBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a08f640f2d69b3669f76245b823904a23" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_numPols</name></member>
      <member refid="classicrar_1_1MeasurementSet_1acf0bf822cd2391755c33cf5439c495f9" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_numRows</name></member>
      <member refid="classicrar_1_1MeasurementSet_1addbd4bba06f1fcbd2c56e04b03c6a444" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_numTimesteps</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a1e023da44562b8dfc52103a59929d29b" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_readAutocorrelations</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ae61eecb307ddeaf325b4f6ae63102657" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_stations</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a422e3a0980f0086653d08bbf285acdab" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>MeasurementSet</name></member>
      <member refid="classicrar_1_1MeasurementSet_1aac6cd2c0519c4a758eeb3e4f35170f8e" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>ReadCoords</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a6407f088a5473a17d6fa6b0d6434cca4" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>ReadCoords</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a31b900a5fbcd41cea771c07b0d9cd7b2" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>ReadVis</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a134330e41e8d71f9fada75571e114b13" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>ReadVis</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a6d67d8f9d59c079663295dad49fcbb27" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>ReadVis</name></member>
      <member refid="classicrar_1_1MeasurementSet_1aeaaf45a8f11b86c06389919c215bc254" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>Validate</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classMeasurementSetTests" kind="class" language="C++" prot="public">
    <compoundname>MeasurementSetTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classMeasurementSetTests_1abcf52b78d4b2bdaf6344af5f111bf615" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double MeasurementSetTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="36" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMeasurementSetTests_1abc11a2f35f5ea0bbef14b31d0dd3566b" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref></type>
        <definition>icrar::MeasurementSet MeasurementSetTests::msMwa</definition>
        <argsstring/>
        <name>msMwa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classMeasurementSetTests_1a4be9d7d53e3e5e19fbe9fa26826fec0c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>MeasurementSetTests::MeasurementSetTests</definition>
        <argsstring>()</argsstring>
        <name>MeasurementSetTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="41" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1a9210eced8498e1814559b08827798725" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementSetTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="46" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1aa4d47aa51ed25001e30a4129799d0f6d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementSetTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="51" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1a1a51da808e193a656a10f97aafb620de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MeasurementSetTests::TestReadCoords</definition>
        <argsstring>()</argsstring>
        <name>TestReadCoords</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="56" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="56" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1a105e1f67c78eefee6e0a1547ebc106c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void MeasurementSetTests::TestReadVis</definition>
        <argsstring>()</argsstring>
        <name>TestReadVis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="91" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="91" bodyend="131"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classMeasurementSetTests_1ac2b4c429b37b54e28bbea99c2d985931" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; MeasurementSetTests::GetExpectedUU</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedUU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="134" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="134" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1aa71e0daa5cba48fd65042d54335a507c" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; MeasurementSetTests::GetExpectedVV</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedVV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="165" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="165" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1af8c5e1a3cdbb343c593227c10a524695" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; MeasurementSetTests::GetExpectedWW</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedWW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="195" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="195" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classMeasurementSetTests_1a4a6e8c2bfe0bc9fcc216e3b5b9f9fc0b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; float &gt;, 3 &gt;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;float&gt;, 3&gt; MeasurementSetTests::GetExpectedVis</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedVis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="230" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="230" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>    </detaileddescription>
    <inheritancegraph>
      <node id="169">
        <label>Test</label>
      </node>
      <node id="168">
        <label>MeasurementSetTests</label>
        <link refid="classMeasurementSetTests"/>
        <childnode refid="169" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="171">
        <label>Test</label>
      </node>
      <node id="170">
        <label>MeasurementSetTests</label>
        <link refid="classMeasurementSetTests"/>
        <childnode refid="171" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="35" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="34" bodyend="248"/>
    <listofallmembers>
      <member refid="classMeasurementSetTests_1ac2b4c429b37b54e28bbea99c2d985931" prot="private" virt="non-virtual"><scope>MeasurementSetTests</scope><name>GetExpectedUU</name></member>
      <member refid="classMeasurementSetTests_1a4a6e8c2bfe0bc9fcc216e3b5b9f9fc0b" prot="private" virt="non-virtual"><scope>MeasurementSetTests</scope><name>GetExpectedVis</name></member>
      <member refid="classMeasurementSetTests_1aa71e0daa5cba48fd65042d54335a507c" prot="private" virt="non-virtual"><scope>MeasurementSetTests</scope><name>GetExpectedVV</name></member>
      <member refid="classMeasurementSetTests_1af8c5e1a3cdbb343c593227c10a524695" prot="private" virt="non-virtual"><scope>MeasurementSetTests</scope><name>GetExpectedWW</name></member>
      <member refid="classMeasurementSetTests_1a4be9d7d53e3e5e19fbe9fa26826fec0c" prot="public" virt="non-virtual"><scope>MeasurementSetTests</scope><name>MeasurementSetTests</name></member>
      <member refid="classMeasurementSetTests_1abc11a2f35f5ea0bbef14b31d0dd3566b" prot="private" virt="non-virtual"><scope>MeasurementSetTests</scope><name>msMwa</name></member>
      <member refid="classMeasurementSetTests_1a9210eced8498e1814559b08827798725" prot="public" virt="non-virtual"><scope>MeasurementSetTests</scope><name>SetUp</name></member>
      <member refid="classMeasurementSetTests_1aa4d47aa51ed25001e30a4129799d0f6d" prot="public" virt="non-virtual"><scope>MeasurementSetTests</scope><name>TearDown</name></member>
      <member refid="classMeasurementSetTests_1a1a51da808e193a656a10f97aafb620de" prot="public" virt="non-virtual"><scope>MeasurementSetTests</scope><name>TestReadCoords</name></member>
      <member refid="classMeasurementSetTests_1a105e1f67c78eefee6e0a1547ebc106c3" prot="public" virt="non-virtual"><scope>MeasurementSetTests</scope><name>TestReadVis</name></member>
      <member refid="classMeasurementSetTests_1abcf52b78d4b2bdaf6344af5f111bf615" prot="private" virt="non-virtual"><scope>MeasurementSetTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1MetaData" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::MetaData</compoundname>
    <derivedcompoundref refid="classicrar_1_1cuda_1_1HostMetaData" prot="public" virt="non-virtual">icrar::cuda::HostMetaData</derivedcompoundref>
    <includes local="no">MetaData.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a4fc1a4b38a3a6b125261e36c86720288" prot="protected" static="no" mutable="no">
        <type><ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">Constants</ref></type>
        <definition>Constants icrar::cpu::MetaData::m_constants</definition>
        <argsstring/>
        <name>m_constants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="113" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a77a3b9d6aacf1e1348bcdce7deb3d3cb" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::MetaData::m_minimumBaselineThreshold</definition>
        <argsstring/>
        <name>m_minimumBaselineThreshold</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="114" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1addb966475ae87c079dc19477ded6c0a8" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::cpu::MetaData::m_useCache</definition>
        <argsstring/>
        <name>m_useCache</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="115" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1afa0c084db746a22aba2a74cbb69fd8ab" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_A</definition>
        <argsstring/>
        <name>m_A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="117" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a4a30dcc55bfed25527c1ffb19fdd08ec" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXi</type>
        <definition>Eigen::VectorXi icrar::cpu::MetaData::m_I</definition>
        <argsstring/>
        <name>m_I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="118" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a8fe2debc5e1bacd2edcd427a817a616e" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_A1</definition>
        <argsstring/>
        <name>m_A1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="119" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1add1f846b9537b59e248789ee032af6e9" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXi</type>
        <definition>Eigen::VectorXi icrar::cpu::MetaData::m_I1</definition>
        <argsstring/>
        <name>m_I1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="120" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1accc9578bf12dd4c5c535f0546f2667d9" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_Ad</definition>
        <argsstring/>
        <name>m_Ad</name>
        <briefdescription>
<para>The pseudo-inverse of m_A, late intitialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="121" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a6e315209235d2b7bd8e56391f65bc5a8" prot="protected" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_Ad1</definition>
        <argsstring/>
        <name>m_Ad1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="122" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="122" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a18ce3579970cc38f9e3d04b34936e103" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt;icrar::MVuvw&gt; icrar::cpu::MetaData::m_UVW</definition>
        <argsstring/>
        <name>m_UVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="124" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a169556bd58d8b6d05685a5adeb43ce9d" prot="protected" static="no" mutable="no">
        <type>SphericalDirection</type>
        <definition>SphericalDirection icrar::cpu::MetaData::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="126" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a59f5edce5df28c808e76f0aec9aa449d" prot="protected" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d icrar::cpu::MetaData::m_dd</definition>
        <argsstring/>
        <name>m_dd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="127" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="127" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1ae2b708be0a6820dbc14cb52c516d5552" prot="protected" static="no" mutable="no">
        <type>Eigen::VectorXcd</type>
        <definition>Eigen::VectorXcd icrar::cpu::MetaData::m_avgData</definition>
        <argsstring/>
        <name>m_avgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="128" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classicrar_1_1cpu_1_1MetaData_1a5e194a7def73c50b3e42257bf2923573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class icrar::cuda::DeviceMetaData</definition>
        <argsstring/>
        <name>icrar::cuda::DeviceMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="229" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classicrar_1_1cpu_1_1MetaData_1a6b669c66d2daaef62f2d5a74879a22b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class icrar::cuda::ConstantBuffer</definition>
        <argsstring/>
        <name>icrar::cuda::ConstantBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="230" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a4a0d807e3811135038a537d9dec3136f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>()=default</argsstring>
        <name>MetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="110" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a06fe66dcf3173776521a8845fc64c5a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, boost::optional&lt; unsigned int &gt; refAnt=boost::none, double minimumBaselineThreshold=0.0, bool computeInverse=true, bool useCache=true)</argsstring>
        <name>MetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>boost::optional&lt; unsigned int &gt;</type>
          <declname>refAnt</declname>
          <defval>boost::none</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>computeInverse</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCache</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct a new MetaData object. SetDirection() must be called after construction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>measurement set to read observations from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refAnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference antenna index, default is the last index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>baseline lengths less that the minimum in meters are flagged </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCache</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to load Ad matrix from cache </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="139" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="44" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1afc72f274e4a53b19b71f1281ef3f87ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, const SphericalDirection &amp;direction, boost::optional&lt; unsigned int &gt; refAnt=boost::none, double minimumBaselineThreshold=0.0, bool computeInverse=true, bool useCache=true)</argsstring>
        <name>MetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>boost::optional&lt; unsigned int &gt;</type>
          <declname>refAnt</declname>
          <defval>boost::none</defval>
        </param>
        <param>
          <type>double</type>
          <declname>minimumBaselineThreshold</declname>
          <defval>0.0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>computeInverse</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>useCache</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Construct a new MetaData object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para>measurement set to read observations from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>the direction of the beam to calibrate for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refAnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference antenna index, default is the last index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>minimumBaselineThreshold</parametername>
</parameternamelist>
<parameterdescription>
<para>baseline lengths less that the minimum in meters are flagged </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>useCache</parametername>
</parameternamelist>
<parameterdescription>
<para>whether to load Ad matrix from cache </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="155" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="117" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1aa74b711230b7a195dab2272198811031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">Constants</ref> &amp;</type>
        <definition>const Constants &amp; icrar::cpu::MetaData::GetConstants</definition>
        <argsstring>() const</argsstring>
        <name>GetConstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="163" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="177" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a15f8a7848c548f596a95420fc2111a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetA</definition>
        <argsstring>() const</argsstring>
        <name>GetA</name>
        <briefdescription>
<para>Matrix of baseline pairs of shape [baselines, stations]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="168" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a9bb2e3d74bf808d57942469fc480ef0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::VectorXi &amp;</type>
        <definition>const Eigen::VectorXi &amp; icrar::cpu::MetaData::GetI</definition>
        <argsstring>() const</argsstring>
        <name>GetI</name>
        <briefdescription>
<para>Vector of indexes of the stations that are not flagged in A of shape [baselines]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="173" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a09b689cefdfb1a452274832597934787" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetAd</definition>
        <argsstring>() const</argsstring>
        <name>GetAd</name>
        <briefdescription>
<para>The pseudoinverse of A with shape [stations, baselines]. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="178" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a358a3a57752697a8d3111efdc509138f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void icrar::cpu::MetaData::SetAd</definition>
        <argsstring>(Eigen::MatrixXd &amp;&amp;Ad)</argsstring>
        <name>SetAd</name>
        <reimplementedby refid="classicrar_1_1cuda_1_1HostMetaData_1a0c3b905a4c7a69a2184b2b1b80800db0">SetAd</reimplementedby>
        <param>
          <type>Eigen::MatrixXd &amp;&amp;</type>
          <declname>Ad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="179" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1af2e4b0a7490d07cefe24f2a046ba98d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetA1</definition>
        <argsstring>() const</argsstring>
        <name>GetA1</name>
        <briefdescription>
<para>Matrix of baselines using the reference antenna of shape [stations+1, stations] where the last row represents the reference antenna. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="185" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a90722dff7a6402cafd824728a86a4d9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::VectorXi &amp;</type>
        <definition>const Eigen::VectorXi &amp; icrar::cpu::MetaData::GetI1</definition>
        <argsstring>() const</argsstring>
        <name>GetI1</name>
        <briefdescription>
<para>Vector of indexes of the stations that are not flagged in A1 of shape [stations]. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const Eigen::VectorXi&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="192" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ae70722d649f173a38cf9ad49d8ed43df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetAd1</definition>
        <argsstring>() const</argsstring>
        <name>GetAd1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="194" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ae609e9c9c487660ab373b1113be82481" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void icrar::cpu::MetaData::SetAd1</definition>
        <argsstring>(Eigen::MatrixXd &amp;&amp;ad1)</argsstring>
        <name>SetAd1</name>
        <reimplementedby refid="classicrar_1_1cuda_1_1HostMetaData_1a3ce1358d5ba98bf6808a5b16678ea9b2">SetAd1</reimplementedby>
        <param>
          <type>Eigen::MatrixXd &amp;&amp;</type>
          <declname>ad1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="195" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ae65b7f58b143b5a5873e53905abb360a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const SphericalDirection &amp;</type>
        <definition>const SphericalDirection&amp; icrar::cpu::MetaData::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="197" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a596bf46c7a2a785c273ec156a0647cbd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::Matrix3d &amp;</type>
        <definition>const Eigen::Matrix3d&amp; icrar::cpu::MetaData::GetDD</definition>
        <argsstring>() const</argsstring>
        <name>GetDD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="198" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="198" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ad53e4a7a725c43c833d27d2f227a19cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::MetaData::SetDirection</definition>
        <argsstring>(const SphericalDirection &amp;direction)</argsstring>
        <name>SetDirection</name>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="199" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="229" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a2fbcd9b17de6feea8ee9acafb30a2305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::MetaData::ComputeInverse</definition>
        <argsstring>()</argsstring>
        <name>ComputeInverse</name>
        <briefdescription>
<para>Computes the A and A1 inverse matrices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="206" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="129" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ad775c1df3d4c814694b3b9d5ad1bc459" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::MetaData::ValidateInverse</definition>
        <argsstring>() const</argsstring>
        <name>ValidateInverse</name>
        <briefdescription>
<para>Output logs on the validity of inverse matrices. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="212" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="164" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a7b9ebcdd242939b4b70b52f1e92854ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d icrar::cpu::MetaData::GenerateDDMatrix</definition>
        <argsstring>(const SphericalDirection &amp;direction) const</argsstring>
        <name>GenerateDDMatrix</name>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
<para>Utility method to generate a direction matrix using the configured zenith direction. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Matrix3d </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="221" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="190" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a136929b1b290c34eb6de9c9e8cbecdee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::VectorXcd &amp;</type>
        <definition>const Eigen::VectorXcd&amp; icrar::cpu::MetaData::GetAvgData</definition>
        <argsstring>() const</argsstring>
        <name>GetAvgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="223" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a070cd3e9c3d957023a7235c7a5fdee8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::VectorXcd &amp;</type>
        <definition>Eigen::VectorXcd&amp; icrar::cpu::MetaData::GetAvgData</definition>
        <argsstring>()</argsstring>
        <name>GetAvgData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="224" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="224" bodyend="224"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a477bf3bf5429f48c2be84225e4d1466d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::MetaData::operator==</definition>
        <argsstring>(const MetaData &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="226" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="239" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a9178133969cc04d079d0139987a51bf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::MetaData::operator!=</definition>
        <argsstring>(const MetaData &amp;rhs) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="227" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="227" bodyend="227"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>container of phaserotation constants and variables for calibrating a single beam. Can be mutated to calibrate for multiple directions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="173">
        <label>icrar::cuda::HostMetaData</label>
        <link refid="classicrar_1_1cuda_1_1HostMetaData"/>
        <childnode refid="172" relation="public-inheritance">
        </childnode>
      </node>
      <node id="172">
        <label>icrar::cpu::MetaData</label>
        <link refid="classicrar_1_1cpu_1_1MetaData"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="174">
        <label>icrar::cpu::MetaData</label>
        <link refid="classicrar_1_1cpu_1_1MetaData"/>
        <childnode refid="175" relation="usage">
          <edgelabel>m_constants</edgelabel>
        </childnode>
      </node>
      <node id="175">
        <label>icrar::cpu::Constants</label>
        <link refid="structicrar_1_1cpu_1_1Constants"/>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="109" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="108" bodyend="231"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a2fbcd9b17de6feea8ee9acafb30a2305" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>ComputeInverse</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a7b9ebcdd242939b4b70b52f1e92854ea" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GenerateDDMatrix</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a15f8a7848c548f596a95420fc2111a61" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetA</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1af2e4b0a7490d07cefe24f2a046ba98d8" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetA1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a09b689cefdfb1a452274832597934787" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetAd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae70722d649f173a38cf9ad49d8ed43df" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetAd1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a136929b1b290c34eb6de9c9e8cbecdee" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a070cd3e9c3d957023a7235c7a5fdee8a" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetAvgData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1aa74b711230b7a195dab2272198811031" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetConstants</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a596bf46c7a2a785c273ec156a0647cbd" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetDD</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae65b7f58b143b5a5873e53905abb360a" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a9bb2e3d74bf808d57942469fc480ef0a" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetI</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a90722dff7a6402cafd824728a86a4d9d" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetI1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a6b669c66d2daaef62f2d5a74879a22b2" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>icrar::cuda::ConstantBuffer</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a5e194a7def73c50b3e42257bf2923573" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>icrar::cuda::DeviceMetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1afa0c084db746a22aba2a74cbb69fd8ab" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_A</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a8fe2debc5e1bacd2edcd427a817a616e" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_A1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1accc9578bf12dd4c5c535f0546f2667d9" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_Ad</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a6e315209235d2b7bd8e56391f65bc5a8" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_Ad1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae2b708be0a6820dbc14cb52c516d5552" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_avgData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4fc1a4b38a3a6b125261e36c86720288" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_constants</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a59f5edce5df28c808e76f0aec9aa449d" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_dd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a169556bd58d8b6d05685a5adeb43ce9d" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4a30dcc55bfed25527c1ffb19fdd08ec" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_I</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1add1f846b9537b59e248789ee032af6e9" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_I1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a77a3b9d6aacf1e1348bcdce7deb3d3cb" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_minimumBaselineThreshold</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1addb966475ae87c079dc19477ded6c0a8" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_useCache</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a18ce3579970cc38f9e3d04b34936e103" prot="protected" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_UVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4a0d807e3811135038a537d9dec3136f" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a06fe66dcf3173776521a8845fc64c5a9" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1afc72f274e4a53b19b71f1281ef3f87ea" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a9178133969cc04d079d0139987a51bf2" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>operator!=</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a477bf3bf5429f48c2be84225e4d1466d" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>operator==</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a358a3a57752697a8d3111efdc509138f" prot="public" virt="virtual"><scope>icrar::cpu::MetaData</scope><name>SetAd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae609e9c9c487660ab373b1113be82481" prot="public" virt="virtual"><scope>icrar::cpu::MetaData</scope><name>SetAd1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ad53e4a7a725c43c833d27d2f227a19cb" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>SetDirection</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ad775c1df3d4c814694b3b9d5ad1bc459" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>ValidateInverse</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1MetaDataTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::MetaDataTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1MetaDataTests_1a1a984944f81c754b49bda48ccbe89ee4" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double icrar::MetaDataTests::PRECISION</definition>
        <argsstring/>
        <name>PRECISION</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="47" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MetaDataTests_1a8abbde3e004616baaaf6ebc2868dc640" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::MetaDataTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="48" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="48" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ad06aeeee3ffd0813a0a771dff628d74b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="51" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="51" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ac3e7b5c4402454e2129e25da3f78fe6e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="57" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ab7d6595b30c2f2b972a0f2b728a52ba6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestMeasurementSet</definition>
        <argsstring>()</argsstring>
        <name>TestMeasurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="62" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="62" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a199a7b3e77b7610c6ecc51b63765e3e4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestRawReadFromFile</definition>
        <argsstring>()</argsstring>
        <name>TestRawReadFromFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="72" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="72" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a33332c26bdc7a43178dc32c61890625c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestReadFromFileOverrideStations</definition>
        <argsstring>()</argsstring>
        <name>TestReadFromFileOverrideStations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="108" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="108" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a58f2efa13558b8197fb1b18fe03b8183" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestDD</definition>
        <argsstring>()</argsstring>
        <name>TestDD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="147" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="147" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a32470880d29747cfd7ecf7c33a8554ac" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestChannelWavelengths</definition>
        <argsstring>()</argsstring>
        <name>TestChannelWavelengths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="182" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="182" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a3b6662bcd2e60f2f99d1730236651ec2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestReferenceAntenna</definition>
        <argsstring>()</argsstring>
        <name>TestReferenceAntenna</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="190" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="190" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a2a625885ce8394adcfb355debaa7d7e0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestCudaBufferCopy</definition>
        <argsstring>()</argsstring>
        <name>TestCudaBufferCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="216" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="216" bodyend="248"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="176">
        <label>icrar::MetaDataTests</label>
        <link refid="classicrar_1_1MetaDataTests"/>
        <childnode refid="177" relation="public-inheritance">
        </childnode>
      </node>
      <node id="177">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="178">
        <label>icrar::MetaDataTests</label>
        <link refid="classicrar_1_1MetaDataTests"/>
        <childnode refid="179" relation="public-inheritance">
        </childnode>
      </node>
      <node id="179">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="46" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="45" bodyend="250"/>
    <listofallmembers>
      <member refid="classicrar_1_1MetaDataTests_1a8abbde3e004616baaaf6ebc2868dc640" prot="private" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a1a984944f81c754b49bda48ccbe89ee4" prot="private" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>PRECISION</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ad06aeeee3ffd0813a0a771dff628d74b" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ac3e7b5c4402454e2129e25da3f78fe6e" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a32470880d29747cfd7ecf7c33a8554ac" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestChannelWavelengths</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a2a625885ce8394adcfb355debaa7d7e0" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestCudaBufferCopy</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a58f2efa13558b8197fb1b18fe03b8183" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestDD</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ab7d6595b30c2f2b972a0f2b728a52ba6" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestMeasurementSet</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a199a7b3e77b7610c6ecc51b63765e3e4" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestRawReadFromFile</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a33332c26bdc7a43178dc32c61890625c" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestReadFromFileOverrideStations</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a3b6662bcd2e60f2f99d1730236651ec2" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestReferenceAntenna</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1MVuvwTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::MVuvwTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1MVuvwTests_1a4298176062a5c99c1f1309226b77b9f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MVuvwTests::TestToMatrix</definition>
        <argsstring>()</argsstring>
        <name>TestToMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc" line="32" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc" bodystart="32" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="180">
        <label>icrar::MVuvwTests</label>
        <link refid="classicrar_1_1MVuvwTests"/>
        <childnode refid="181" relation="public-inheritance">
        </childnode>
      </node>
      <node id="181">
        <label>testing::Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="182">
        <label>icrar::MVuvwTests</label>
        <link refid="classicrar_1_1MVuvwTests"/>
        <childnode refid="183" relation="public-inheritance">
        </childnode>
      </node>
      <node id="183">
        <label>testing::Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc" line="30" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc" bodystart="29" bodyend="39"/>
    <listofallmembers>
      <member refid="classicrar_1_1MVuvwTests_1a4298176062a5c99c1f1309226b77b9f4" prot="public" virt="non-virtual"><scope>icrar::MVuvwTests</scope><name>TestToMatrix</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1not__implemented__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::not_implemented_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1not__implemented__exception_1a3252eeaf354bebf85b8854ca8bcf4c50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::not_implemented_exception::not_implemented_exception</definition>
        <argsstring>(const std::string &amp;file, int line)</argsstring>
        <name>not_implemented_exception</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="91" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.cc" bodystart="40" bodyend="42"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="184">
        <label>icrar::not_implemented_exception</label>
        <link refid="classicrar_1_1not__implemented__exception"/>
        <childnode refid="185" relation="public-inheritance">
        </childnode>
      </node>
      <node id="186">
        <label>std::exception</label>
      </node>
      <node id="185">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="186" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="187">
        <label>icrar::not_implemented_exception</label>
        <link refid="classicrar_1_1not__implemented__exception"/>
        <childnode refid="188" relation="public-inheritance">
        </childnode>
      </node>
      <node id="189">
        <label>std::exception</label>
      </node>
      <node id="188">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="189" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="89" column="1" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="88" bodyend="92"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1aac13cb825703105e221261e19b8328fb" prot="public" virt="non-virtual"><scope>icrar::not_implemented_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1not__implemented__exception_1a3252eeaf354bebf85b8854ca8bcf4c50" prot="public" virt="non-virtual"><scope>icrar::not_implemented_exception</scope><name>not_implemented_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="non-virtual"><scope>icrar::not_implemented_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1PhaseRotateTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::PhaseRotateTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1PhaseRotateTests_1aba6348f10a99fe85607e091f025741a9" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double icrar::PhaseRotateTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 1e-11</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="74" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1PhaseRotateTests_1a85ea95f9d13406cf5abac0d0b9d5ac65" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::PhaseRotateTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="75" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a85447be2b88144833b81393d74c75d43" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="78" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="78" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a7cc37d5b574ee31f908f48640fed23b4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="85" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1adba9062f9fd5ff1e10365a529e2bef69" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::PhaseMatrixFunction0Test</definition>
        <argsstring>(const ComputeImplementation impl)</argsstring>
        <name>PhaseMatrixFunction0Test</name>
        <param>
          <type>const <ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="90" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="90" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a6e5dd6b1fc4d030416bf5a36a858b4bf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::PhaseMatrixFunctionDataTest</definition>
        <argsstring>(const ComputeImplementation impl)</argsstring>
        <name>PhaseMatrixFunctionDataTest</name>
        <param>
          <type>const <ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="118" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="118" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1ae0836c9bb1c1a496cec7932ea5e500a8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::RotateVisibilitiesTest</definition>
        <argsstring>(const ComputeImplementation impl)</argsstring>
        <name>RotateVisibilitiesTest</name>
        <param>
          <type>const <ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="252" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="252" bodyend="333"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1aa7e1253893ca19907b3529b7bf9d1b7e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::CalibrateTest</definition>
        <argsstring>(ComputeImplementation impl, const ComputeOptionsDTO computeOptions, const Slice solutionInterval, std::function&lt; cpu::CalibrationCollection()&gt; getExpected)</argsstring>
        <name>CalibrateTest</name>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1ComputeOptionsDTO" kindref="compound">ComputeOptionsDTO</ref></type>
          <declname>computeOptions</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
          <declname>solutionInterval</declname>
        </param>
        <param>
          <type>std::function&lt; <ref refid="classicrar_1_1cpu_1_1CalibrationCollection" kindref="compound">cpu::CalibrationCollection</ref>()&gt;</type>
          <declname>getExpected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="335" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="335" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a46c4ecd939b5c6877e0a8c53592d01ec" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::ReferenceAntennaTest</definition>
        <argsstring>(const ComputeImplementation impl, std::vector&lt; int &gt; referenceAntennas, const Slice solutionInterval)</argsstring>
        <name>ReferenceAntennaTest</name>
        <param>
          <type>const <ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>impl</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>referenceAntennas</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
          <declname>solutionInterval</declname>
        </param>
        <briefdescription>
<para>Tests that the reference antenna calibrates to 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>impl</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="430" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="430" bodyend="471"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Test suite for PhaseRotate.cc functionality. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="191">
        <label>Test</label>
      </node>
      <node id="190">
        <label>icrar::PhaseRotateTests</label>
        <link refid="classicrar_1_1PhaseRotateTests"/>
        <childnode refid="191" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="193">
        <label>Test</label>
      </node>
      <node id="192">
        <label>icrar::PhaseRotateTests</label>
        <link refid="classicrar_1_1PhaseRotateTests"/>
        <childnode refid="193" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="73" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="72" bodyend="472"/>
    <listofallmembers>
      <member refid="classicrar_1_1PhaseRotateTests_1aa7e1253893ca19907b3529b7bf9d1b7e" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>CalibrateTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a85ea95f9d13406cf5abac0d0b9d5ac65" prot="private" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1adba9062f9fd5ff1e10365a529e2bef69" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>PhaseMatrixFunction0Test</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a6e5dd6b1fc4d030416bf5a36a858b4bf" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>PhaseMatrixFunctionDataTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a46c4ecd939b5c6877e0a8c53592d01ec" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>ReferenceAntennaTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1ae0836c9bb1c1a496cec7932ea5e500a8" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>RotateVisibilitiesTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a85447be2b88144833b81393d74c75d43" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a7cc37d5b574ee31f908f48640fed23b4" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1aba6348f10a99fe85607e091f025741a9" prot="private" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig" kind="class" language="Python" prot="public">
    <compoundname>leap_drops::ProduceConfig::ProduceConfig</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BarrierAppDROP</basecompoundref>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1ad6542bc352d20fa98e2885b80cc2727e" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.ProduceConfig.ProduceConfig::compontent_meta</definition>
        <argsstring/>
        <name>compontent_meta</name>
        <initializer>=  dlg_component('<ref refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig" kindref="compound">ProduceConfig</ref>', 'Produce Config.',
                                    [dlg_batch_input('binary/*', [])],
                                    [dlg_batch_output('binary/*', [])],
                                    [dlg_streaming_input('binary/*')])</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="37" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a7fff82661b08126980ce81cd54c1fced" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.ProduceConfig.ProduceConfig::filePath</definition>
        <argsstring/>
        <name>filePath</name>
        <initializer>=  dlg_string_param('filePath', '')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="43" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a7d26ea7457b042f4b5be2e37e84dc522" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.ProduceConfig.ProduceConfig::outputFilePath</definition>
        <argsstring/>
        <name>outputFilePath</name>
        <initializer>=  dlg_string_param('outputFilePath', '')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="44" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1af50733cbbf2adced28b8100e16b26769" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.ProduceConfig.ProduceConfig::implementation</definition>
        <argsstring/>
        <name>implementation</name>
        <initializer>=  dlg_string_param('implementation', 'cpu')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="45" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1adedeba2a050dd799f715400d82f58067" prot="public" static="yes" mutable="no">
        <type/>
        <definition>leap_drops.ProduceConfig.ProduceConfig::verbosity</definition>
        <argsstring/>
        <name>verbosity</name>
        <initializer>=  dlg_string_param('verbosity', 'info')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="46" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a57a777e7192f8a2a9e929783577318d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.ProduceConfig.ProduceConfig.initialize</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>initialize</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="49" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a41ed116f5dda6692d5d17766c7d39391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.ProduceConfig.ProduceConfig.run</definition>
        <argsstring>(self)</argsstring>
        <name>run</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="53" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="53" bodyend="86"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a12d4b70f6fabca1a97090b8bb95c7dcb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.ProduceConfig.ProduceConfig._readDirections</definition>
        <argsstring>(self, inDrop)</argsstring>
        <name>_readDirections</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>inDrop</type>
          <defname>inDrop</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="87" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="87" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1afd177f42167f2b64660eba15baa4ddf1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def leap_drops.ProduceConfig.ProduceConfig._createConfig</definition>
        <argsstring>(self, directions)</argsstring>
        <name>_createConfig</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>directions</type>
          <defname>directions</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="leap_drops/ProduceConfig.py" line="110" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="110" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Produce Config. </para>    </briefdescription>
    <detaileddescription>
<para>Produce Config</para><para>A BarrierAppDrop that produces multiple config files suitable for the CallLeap BarrierAppDrop <simplesect kind="par"><title>EAGLE_START</title><para/></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>gitrepo</parametername>
</parameternamelist>
<parameterdescription>
<para><ulink url="https://gitlab-ci-token:YuuCJciQ1_ZSyi2xK9M9@gitlab.com/ska-telescope/icrar-leap-accelerate.git">https://gitlab-ci-token:YuuCJciQ1_ZSyi2xK9M9@gitlab.com/ska-telescope/icrar-leap-accelerate.git</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>version</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>category</parametername>
</parameternamelist>
<parameterdescription>
<para>PythonApp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/filePath</parametername>
</parameternamelist>
<parameterdescription>
<para>File Path//String/readwrite/ Path to the MS<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/outputFilePath</parametername>
</parameternamelist>
<parameterdescription>
<para>Output File Path//String/readwrite/ Path for output file<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/implementation</parametername>
</parameternamelist>
<parameterdescription>
<para>Implementation/cpu/String/readwrite/ The implementation of the LEAP algorithm to use (cpu, cuda)<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/verbosity</parametername>
</parameternamelist>
<parameterdescription>
<para>verbosity/info/String/readwrite/ The verbosity of the LEAP logging output (info|debug)<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">param/appclass</parametername>
</parameternamelist>
<parameterdescription>
<para>Application Class/leap_nodes.ProduceConfig.ProduceConfig/String/readonly/ The path to the class that implements this app<linebreak/>
 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port/Directions</parametername>
</parameternamelist>
<parameterdescription>
<para>A CSV file containing directions for calibration </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">port/Config</parametername>
</parameternamelist>
<parameterdescription>
<para>A JSON config containing the specification for running an instance of LeapAccelerateCLI </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>EAGLE_END A BarrierAppDrop that produces multiple config files suitable for the CallLeap BarrierAppDrop </title><para/></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="195">
        <label>BarrierAppDROP</label>
      </node>
      <node id="194">
        <label>leap_drops.ProduceConfig.ProduceConfig</label>
        <link refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig"/>
        <childnode refid="195" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="197">
        <label>BarrierAppDROP</label>
      </node>
      <node id="196">
        <label>leap_drops.ProduceConfig.ProduceConfig</label>
        <link refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig"/>
        <childnode refid="197" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="leap_drops/ProduceConfig.py" line="35" column="1" bodyfile="leap_drops/ProduceConfig.py" bodystart="35" bodyend="118"/>
    <listofallmembers>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1afd177f42167f2b64660eba15baa4ddf1" prot="private" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>_createConfig</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a12d4b70f6fabca1a97090b8bb95c7dcb" prot="private" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>_readDirections</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1ad6542bc352d20fa98e2885b80cc2727e" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>compontent_meta</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a7fff82661b08126980ce81cd54c1fced" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>filePath</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1af50733cbbf2adced28b8100e16b26769" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>implementation</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a57a777e7192f8a2a9e929783577318d1" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>initialize</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a7d26ea7457b042f4b5be2e37e84dc522" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>outputFilePath</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1a41ed116f5dda6692d5d17766c7d39391" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>run</name></member>
      <member refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig_1adedeba2a050dd799f715400d82f58067" prot="public" virt="non-virtual"><scope>leap_drops::ProduceConfig::ProduceConfig</scope><name>verbosity</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1Range" kind="class" language="C++" prot="public">
    <compoundname>icrar::Range</compoundname>
    <includes local="no">Range.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1Range_1a9d8c4e41e8f6162e9c1886a1be4d856f" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::m_start</definition>
        <argsstring/>
        <name>m_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Range_1ab6fd39e42e96e1fb3ae2fa186812a772" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::m_interval</definition>
        <argsstring/>
        <name>m_interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="40" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Range_1a140b5bce71f9dc20dddbe3fcf7536662" prot="private" static="no" mutable="no">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::m_end</definition>
        <argsstring/>
        <name>m_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1Range_1a836e25d24a502ac8dbe50eab32535df9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::Range&lt; T &gt;::Range</definition>
        <argsstring>(T start, T end, T interval)</argsstring>
        <name>Range</name>
        <param>
          <type>T</type>
          <declname>start</declname>
        </param>
        <param>
          <type>T</type>
          <declname>end</declname>
        </param>
        <param>
          <type>T</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="44" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="44" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Range_1a32ee37b1b4ce1629effba6e9439ad99d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::GetStart</definition>
        <argsstring>() const</argsstring>
        <name>GetStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Range_1acb2b3e7732c5b89bdf738e8793b2da5f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::GetEnd</definition>
        <argsstring>() const</argsstring>
        <name>GetEnd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="62" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Range_1a91ce3285685f92134fd38103d60d7470" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::GetInterval</definition>
        <argsstring>() const</argsstring>
        <name>GetInterval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="63" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Range_1a8c39cf2046ae339950c9e764db496bed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T</type>
        <definition>T icrar::Range&lt; T &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
<para>Gets the number of elements in the range. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="70" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Range_1a7ceb876b9eb78877f91fc4671f4500eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::ArithmeticSequence&lt; Eigen::Index, Eigen::Index, Eigen::Index &gt;</type>
        <definition>Eigen::ArithmeticSequence&lt;Eigen::Index, Eigen::Index, Eigen::Index&gt; icrar::Range&lt; T &gt;::ToSeq</definition>
        <argsstring>()</argsstring>
        <name>ToSeq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="78" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="78" bodyend="81"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a forwards linear sequence of indexes for some finite collection. (Indexes are always positive and can be converted to Eigen ArithmeticSequence) </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Range.h" line="38" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="37" bodyend="82"/>
    <listofallmembers>
      <member refid="classicrar_1_1Range_1acb2b3e7732c5b89bdf738e8793b2da5f" prot="public" virt="non-virtual"><scope>icrar::Range</scope><name>GetEnd</name></member>
      <member refid="classicrar_1_1Range_1a91ce3285685f92134fd38103d60d7470" prot="public" virt="non-virtual"><scope>icrar::Range</scope><name>GetInterval</name></member>
      <member refid="classicrar_1_1Range_1a8c39cf2046ae339950c9e764db496bed" prot="public" virt="non-virtual"><scope>icrar::Range</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1Range_1a32ee37b1b4ce1629effba6e9439ad99d" prot="public" virt="non-virtual"><scope>icrar::Range</scope><name>GetStart</name></member>
      <member refid="classicrar_1_1Range_1a140b5bce71f9dc20dddbe3fcf7536662" prot="private" virt="non-virtual"><scope>icrar::Range</scope><name>m_end</name></member>
      <member refid="classicrar_1_1Range_1ab6fd39e42e96e1fb3ae2fa186812a772" prot="private" virt="non-virtual"><scope>icrar::Range</scope><name>m_interval</name></member>
      <member refid="classicrar_1_1Range_1a9d8c4e41e8f6162e9c1886a1be4d856f" prot="private" virt="non-virtual"><scope>icrar::Range</scope><name>m_start</name></member>
      <member refid="classicrar_1_1Range_1a836e25d24a502ac8dbe50eab32535df9" prot="public" virt="non-virtual"><scope>icrar::Range</scope><name>Range</name></member>
      <member refid="classicrar_1_1Range_1a7ceb876b9eb78877f91fc4671f4500eb" prot="public" virt="non-virtual"><scope>icrar::Range</scope><name>ToSeq</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1RangeTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::RangeTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1RangeTests_1a9417b0666e19d58bad33b57b118a9933" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::RangeTests::TestConstructors</definition>
        <argsstring>()</argsstring>
        <name>TestConstructors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/RangeTests.cc" line="33" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/RangeTests.cc" bodystart="33" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="201">
        <label>Test</label>
      </node>
      <node id="200">
        <label>icrar::RangeTests</label>
        <link refid="classicrar_1_1RangeTests"/>
        <childnode refid="201" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="203">
        <label>Test</label>
      </node>
      <node id="202">
        <label>icrar::RangeTests</label>
        <link refid="classicrar_1_1RangeTests"/>
        <childnode refid="203" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/common/RangeTests.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/RangeTests.cc" bodystart="30" bodyend="74"/>
    <listofallmembers>
      <member refid="classicrar_1_1RangeTests_1a9417b0666e19d58bad33b57b118a9933" prot="public" virt="non-virtual"><scope>icrar::RangeTests</scope><name>TestConstructors</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1profiling_1_1ResourceUsage" kind="struct" language="C++" prot="public">
    <compoundname>icrar::profiling::ResourceUsage</compoundname>
    <includes local="no">resource_usage.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1profiling_1_1ResourceUsage_1a5fa83bb7c0558f815fa10c0ea8fa6b7a" prot="public" static="no" mutable="no">
        <type>usec_t</type>
        <definition>usec_t icrar::profiling::ResourceUsage::utime</definition>
        <argsstring/>
        <name>utime</name>
        <briefdescription>
<para>Time spent in user mode, in microseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1profiling_1_1ResourceUsage_1adfb1ec284602efd5073f2eddc5e90083" prot="public" static="no" mutable="no">
        <type>usec_t</type>
        <definition>usec_t icrar::profiling::ResourceUsage::stime</definition>
        <argsstring/>
        <name>stime</name>
        <briefdescription>
<para>Time spent in kernel mode, in microseconds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1profiling_1_1ResourceUsage_1a5118ca22e47acab60693a8c17b4b3a97" prot="public" static="no" mutable="no">
        <type>usec_t</type>
        <definition>usec_t icrar::profiling::ResourceUsage::wtime</definition>
        <argsstring/>
        <name>wtime</name>
        <briefdescription>
<para>Total walltime spent since program started. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h" line="43" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1profiling_1_1ResourceUsage_1a31402964ee86513d65f55267b132b8df" prot="public" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t icrar::profiling::ResourceUsage::peak_rss</definition>
        <argsstring/>
        <name>peak_rss</name>
        <briefdescription>
<para>Maximum amount of memory used, in bytes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h" line="45" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A collection of resource-related statistics. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.h" bodystart="36" bodyend="46"/>
    <listofallmembers>
      <member refid="structicrar_1_1profiling_1_1ResourceUsage_1a31402964ee86513d65f55267b132b8df" prot="public" virt="non-virtual"><scope>icrar::profiling::ResourceUsage</scope><name>peak_rss</name></member>
      <member refid="structicrar_1_1profiling_1_1ResourceUsage_1adfb1ec284602efd5073f2eddc5e90083" prot="public" virt="non-virtual"><scope>icrar::profiling::ResourceUsage</scope><name>stime</name></member>
      <member refid="structicrar_1_1profiling_1_1ResourceUsage_1a5fa83bb7c0558f815fa10c0ea8fa6b7a" prot="public" virt="non-virtual"><scope>icrar::profiling::ResourceUsage</scope><name>utime</name></member>
      <member refid="structicrar_1_1profiling_1_1ResourceUsage_1a5118ca22e47acab60693a8c17b4b3a97" prot="public" virt="non-virtual"><scope>icrar::profiling::ResourceUsage</scope><name>wtime</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1Slice" kind="class" language="C++" prot="public">
    <compoundname>icrar::Slice</compoundname>
    <includes local="no">Slice.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1Slice_1a02915571fef7ac2ea60aaa216839ed9d" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::Slice::m_start</definition>
        <argsstring/>
        <name>m_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="45" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Slice_1a5c85900d40808e152f95431dc046b2f8" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::Slice::m_end</definition>
        <argsstring/>
        <name>m_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="46" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Slice_1a85bd8308b35878d19c60edf655f26041" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::Slice::m_interval</definition>
        <argsstring/>
        <name>m_interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="47" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1Slice_1a6ccc8785aaa338caa2f74935d0229efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::Slice::Slice</definition>
        <argsstring>()=default</argsstring>
        <name>Slice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1aeb09e99490c2a2d464d373b4d42fd7a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::Slice::Slice</definition>
        <argsstring>(boost::optional&lt; int64_t &gt; interval)</argsstring>
        <name>Slice</name>
        <param>
          <type>boost::optional&lt; int64_t &gt;</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="51" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.cc" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1add1be69b49cdef9710f7f6de00384365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::Slice::Slice</definition>
        <argsstring>(boost::optional&lt; int64_t &gt; start, boost::optional&lt; int64_t &gt; end)</argsstring>
        <name>Slice</name>
        <param>
          <type>boost::optional&lt; int64_t &gt;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>boost::optional&lt; int64_t &gt;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.cc" bodystart="32" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1a28e9864c70ec24e02ab3bb3c176dee8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::Slice::Slice</definition>
        <argsstring>(boost::optional&lt; int64_t &gt; start, boost::optional&lt; int64_t &gt; end, boost::optional&lt; int64_t &gt; interval)</argsstring>
        <name>Slice</name>
        <param>
          <type>boost::optional&lt; int64_t &gt;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>boost::optional&lt; int64_t &gt;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>boost::optional&lt; int64_t &gt;</type>
          <declname>interval</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="53" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.cc" bodystart="36" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1ade0329bf2f7d198d2c8d5acae780bb92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::Slice::GetStart</definition>
        <argsstring>() const</argsstring>
        <name>GetStart</name>
        <briefdescription>
<para>Gets the starting index of an arbitrary collection slice. -1 represents the end of the collection. none represents the element after the end of the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="60" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1a078e30ecc7c56585d0c8f1470447a8a3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::Slice::GetEnd</definition>
        <argsstring>() const</argsstring>
        <name>GetEnd</name>
        <briefdescription>
<para>Gets the end exclusive index of an arbitrary collection slice. -1 represents the end of the collection. none represents the element after the end of the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="67" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1a20a7482db2b8f5b4e9f0ababf1c55550" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::Slice::GetInterval</definition>
        <argsstring>() const</argsstring>
        <name>GetInterval</name>
        <briefdescription>
<para>Gets the interval betweeen indices of an arbitrary collection slice. none represents the length of the collection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="73" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1af8c50805a67c48639f5b58b2c59159a2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classicrar_1_1Range" kindref="compound">Range</ref>&lt; T &gt;</type>
        <definition>Range&lt;T&gt; icrar::Slice::Evaluate</definition>
        <argsstring>(T collectionSize) const</argsstring>
        <name>Evaluate</name>
        <param>
          <type>T</type>
          <declname>collectionSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="76" bodyend="84"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classicrar_1_1Slice_1a55786c32beb9b83c674f08325b7caff2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>static Slice icrar::Slice::First</definition>
        <argsstring>()</argsstring>
        <name>First</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="86" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1aaf9e26c197a086a393717f39fe2b4a71" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>static Slice icrar::Slice::Last</definition>
        <argsstring>()</argsstring>
        <name>Last</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="87" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1ab13798b6094ee44d80f6a25720dd7573" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>static Slice icrar::Slice::Each</definition>
        <argsstring>()</argsstring>
        <name>Each</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Slice_1a723ca2db42a30b910024915e91cc139f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>static Slice icrar::Slice::All</definition>
        <argsstring>()</argsstring>
        <name>All</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.h" line="89" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="89" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a forwards linear sequence of indexes for some arbitrary collection. Python equivalent is the slice operator [start:end:interval]. Eigen equivalent is Eigen::seq(start, end, interval). Matlab equivalent is slice operator (start:interval:end) TODO(cgray) no support for reverse order, e.g. (end:0:-1) TODO(calgray): swap end &lt;-&gt; interval. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Slice.h" line="44" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.h" bodystart="43" bodyend="90"/>
    <listofallmembers>
      <member refid="classicrar_1_1Slice_1a723ca2db42a30b910024915e91cc139f" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>All</name></member>
      <member refid="classicrar_1_1Slice_1ab13798b6094ee44d80f6a25720dd7573" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Each</name></member>
      <member refid="classicrar_1_1Slice_1af8c50805a67c48639f5b58b2c59159a2" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Evaluate</name></member>
      <member refid="classicrar_1_1Slice_1a55786c32beb9b83c674f08325b7caff2" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>First</name></member>
      <member refid="classicrar_1_1Slice_1a078e30ecc7c56585d0c8f1470447a8a3" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>GetEnd</name></member>
      <member refid="classicrar_1_1Slice_1a20a7482db2b8f5b4e9f0ababf1c55550" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>GetInterval</name></member>
      <member refid="classicrar_1_1Slice_1ade0329bf2f7d198d2c8d5acae780bb92" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>GetStart</name></member>
      <member refid="classicrar_1_1Slice_1aaf9e26c197a086a393717f39fe2b4a71" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Last</name></member>
      <member refid="classicrar_1_1Slice_1a5c85900d40808e152f95431dc046b2f8" prot="private" virt="non-virtual"><scope>icrar::Slice</scope><name>m_end</name></member>
      <member refid="classicrar_1_1Slice_1a85bd8308b35878d19c60edf655f26041" prot="private" virt="non-virtual"><scope>icrar::Slice</scope><name>m_interval</name></member>
      <member refid="classicrar_1_1Slice_1a02915571fef7ac2ea60aaa216839ed9d" prot="private" virt="non-virtual"><scope>icrar::Slice</scope><name>m_start</name></member>
      <member refid="classicrar_1_1Slice_1a6ccc8785aaa338caa2f74935d0229efa" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Slice</name></member>
      <member refid="classicrar_1_1Slice_1aeb09e99490c2a2d464d373b4d42fd7a5" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Slice</name></member>
      <member refid="classicrar_1_1Slice_1add1be69b49cdef9710f7f6de00384365" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Slice</name></member>
      <member refid="classicrar_1_1Slice_1a28e9864c70ec24e02ab3bb3c176dee8e" prot="public" virt="non-virtual"><scope>icrar::Slice</scope><name>Slice</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1SliceTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::SliceTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1SliceTests_1ad3a1f0d39008200d35617cb28c68c009" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::SliceTests::TestConstructors</definition>
        <argsstring>()</argsstring>
        <name>TestConstructors</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/SliceTests.cc" line="33" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SliceTests.cc" bodystart="33" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1SliceTests_1af6fce51b94f861e9e2f56a750c632c94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::SliceTests::TestToSeq</definition>
        <argsstring>()</argsstring>
        <name>TestToSeq</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/SliceTests.cc" line="75" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SliceTests.cc" bodystart="75" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="208">
        <label>icrar::SliceTests</label>
        <link refid="classicrar_1_1SliceTests"/>
        <childnode refid="209" relation="public-inheritance">
        </childnode>
      </node>
      <node id="209">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="210">
        <label>icrar::SliceTests</label>
        <link refid="classicrar_1_1SliceTests"/>
        <childnode refid="211" relation="public-inheritance">
        </childnode>
      </node>
      <node id="211">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/common/SliceTests.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SliceTests.cc" bodystart="30" bodyend="96"/>
    <listofallmembers>
      <member refid="classicrar_1_1SliceTests_1ad3a1f0d39008200d35617cb28c68c009" prot="public" virt="non-virtual"><scope>icrar::SliceTests</scope><name>TestConstructors</name></member>
      <member refid="classicrar_1_1SliceTests_1af6fce51b94f861e9e2f56a750c632c94" prot="public" virt="non-virtual"><scope>icrar::SliceTests</scope><name>TestToSeq</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1SphericalDirectionTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::SphericalDirectionTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1SphericalDirectionTests_1a4ff6b99b5df2f551f3ae498db3cc882d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::SphericalDirectionTests::TestParseDirections</definition>
        <argsstring>()</argsstring>
        <name>TestParseDirections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc" line="33" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc" bodystart="33" bodyend="41"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="213">
        <label>Test</label>
      </node>
      <node id="212">
        <label>icrar::SphericalDirectionTests</label>
        <link refid="classicrar_1_1SphericalDirectionTests"/>
        <childnode refid="213" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="215">
        <label>Test</label>
      </node>
      <node id="214">
        <label>icrar::SphericalDirectionTests</label>
        <link refid="classicrar_1_1SphericalDirectionTests"/>
        <childnode refid="215" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc" bodystart="30" bodyend="42"/>
    <listofallmembers>
      <member refid="classicrar_1_1SphericalDirectionTests_1a4ff6b99b5df2f551f3ae498db3cc882d" prot="public" virt="non-virtual"><scope>icrar::SphericalDirectionTests</scope><name>TestParseDirections</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1StreamOutTypeTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::StreamOutTypeTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1StreamOutTypeTests_1a72bf9cc708dc700dbbc7901e45d4a1c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::StreamOutTypeTests::TestParseStreamOutType</definition>
        <argsstring>()</argsstring>
        <name>TestParseStreamOutType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc" line="32" column="1" bodyfile="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc" bodystart="32" bodyend="40"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="216">
        <label>icrar::StreamOutTypeTests</label>
        <link refid="classicrar_1_1StreamOutTypeTests"/>
        <childnode refid="217" relation="public-inheritance">
        </childnode>
      </node>
      <node id="217">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="218">
        <label>icrar::StreamOutTypeTests</label>
        <link refid="classicrar_1_1StreamOutTypeTests"/>
        <childnode refid="219" relation="public-inheritance">
        </childnode>
      </node>
      <node id="219">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc" line="30" column="1" bodyfile="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc" bodystart="29" bodyend="41"/>
    <listofallmembers>
      <member refid="classicrar_1_1StreamOutTypeTests_1a72bf9cc708dc700dbbc7901e45d4a1c9" prot="public" virt="non-virtual"><scope>icrar::StreamOutTypeTests</scope><name>TestParseStreamOutType</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1profiling_1_1timer" kind="class" language="C++" prot="public">
    <compoundname>icrar::profiling::timer</compoundname>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classicrar_1_1profiling_1_1timer_1af1fa2554a6d505b48c26498e3cc64f10" prot="public" static="no">
        <type>std::chrono::high_resolution_clock</type>
        <definition>using icrar::profiling::timer::clock =  std::chrono::high_resolution_clock</definition>
        <argsstring/>
        <name>clock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/timer.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/timer.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classicrar_1_1profiling_1_1timer_1a6b1fbe2bd0064a8faff4e19b0bf200e7" prot="public" static="no">
        <type>typename clock::duration</type>
        <definition>using icrar::profiling::timer::duration =  typename clock::duration</definition>
        <argsstring/>
        <name>duration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/timer.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/timer.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1profiling_1_1timer_1a0b920b2f01ec7b8948b2015218f8520d" prot="private" static="no" mutable="no">
        <type>clock::time_point</type>
        <definition>clock::time_point icrar::profiling::timer::m_start</definition>
        <argsstring/>
        <name>m_start</name>
        <initializer>{clock::now()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/timer.h" line="45" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/timer.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1profiling_1_1timer_1aa8eb3d41351c6fdb946ea9b4aa04df24" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>duration</type>
        <definition>duration icrar::profiling::timer::get</definition>
        <argsstring>() const</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/timer.h" line="48" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/timer.h" bodystart="48" bodyend="51"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/timer.h" line="38" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/timer.h" bodystart="37" bodyend="52"/>
    <listofallmembers>
      <member refid="classicrar_1_1profiling_1_1timer_1af1fa2554a6d505b48c26498e3cc64f10" prot="public" virt="non-virtual"><scope>icrar::profiling::timer</scope><name>clock</name></member>
      <member refid="classicrar_1_1profiling_1_1timer_1a6b1fbe2bd0064a8faff4e19b0bf200e7" prot="public" virt="non-virtual"><scope>icrar::profiling::timer</scope><name>duration</name></member>
      <member refid="classicrar_1_1profiling_1_1timer_1aa8eb3d41351c6fdb946ea9b4aa04df24" prot="public" virt="non-virtual"><scope>icrar::profiling::timer</scope><name>get</name></member>
      <member refid="classicrar_1_1profiling_1_1timer_1a0b920b2f01ec7b8948b2015218f8520d" prot="private" virt="non-virtual"><scope>icrar::profiling::timer</scope><name>m_start</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1profiling_1_1UsageReporter" kind="class" language="C++" prot="public">
    <compoundname>icrar::profiling::UsageReporter</compoundname>
    <includes local="no">UsageReporter.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1profiling_1_1UsageReporter_1afbfa29793795ab460961f9d276be78c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::profiling::UsageReporter::UsageReporter</definition>
        <argsstring>()=default</argsstring>
        <name>UsageReporter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling_1_1UsageReporter_1a2b7b84f498af55deb4d41ccc57cdda0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::profiling::UsageReporter::UsageReporter</definition>
        <argsstring>(UsageReporter &amp;&amp;)=default</argsstring>
        <name>UsageReporter</name>
        <param>
          <type><ref refid="classicrar_1_1profiling_1_1UsageReporter" kindref="compound">UsageReporter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling_1_1UsageReporter_1a78d31939aa6777ee74bb06e9ac7686e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::profiling::UsageReporter::UsageReporter</definition>
        <argsstring>(const UsageReporter &amp;)=default</argsstring>
        <name>UsageReporter</name>
        <param>
          <type>const <ref refid="classicrar_1_1profiling_1_1UsageReporter" kindref="compound">UsageReporter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling_1_1UsageReporter_1a8f4a257ee4f83a2fa4dbf414f42ee172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1profiling_1_1UsageReporter" kindref="compound">UsageReporter</ref> &amp;</type>
        <definition>UsageReporter&amp; icrar::profiling::UsageReporter::operator=</definition>
        <argsstring>(const UsageReporter &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classicrar_1_1profiling_1_1UsageReporter" kindref="compound">UsageReporter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling_1_1UsageReporter_1af67e80726ea80f8a1e41cd69f71aea75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1profiling_1_1UsageReporter" kindref="compound">UsageReporter</ref> &amp;</type>
        <definition>UsageReporter&amp; icrar::profiling::UsageReporter::operator=</definition>
        <argsstring>(UsageReporter &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classicrar_1_1profiling_1_1UsageReporter" kindref="compound">UsageReporter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling_1_1UsageReporter_1a170f5e412849a669041ebeecf07ef360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::profiling::UsageReporter::~UsageReporter</definition>
        <argsstring>() noexcept</argsstring>
        <name>~UsageReporter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/UsageReporter.cc" bodystart="35" bodyend="45"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reports high-level, process-wide resource usage values on destruction. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" line="32" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/UsageReporter.h" bodystart="31" bodyend="40"/>
    <listofallmembers>
      <member refid="classicrar_1_1profiling_1_1UsageReporter_1a8f4a257ee4f83a2fa4dbf414f42ee172" prot="public" virt="non-virtual"><scope>icrar::profiling::UsageReporter</scope><name>operator=</name></member>
      <member refid="classicrar_1_1profiling_1_1UsageReporter_1af67e80726ea80f8a1e41cd69f71aea75" prot="public" virt="non-virtual"><scope>icrar::profiling::UsageReporter</scope><name>operator=</name></member>
      <member refid="classicrar_1_1profiling_1_1UsageReporter_1afbfa29793795ab460961f9d276be78c8" prot="public" virt="non-virtual"><scope>icrar::profiling::UsageReporter</scope><name>UsageReporter</name></member>
      <member refid="classicrar_1_1profiling_1_1UsageReporter_1a2b7b84f498af55deb4d41ccc57cdda0a" prot="public" virt="non-virtual"><scope>icrar::profiling::UsageReporter</scope><name>UsageReporter</name></member>
      <member refid="classicrar_1_1profiling_1_1UsageReporter_1a78d31939aa6777ee74bb06e9ac7686e4" prot="public" virt="non-virtual"><scope>icrar::profiling::UsageReporter</scope><name>UsageReporter</name></member>
      <member refid="classicrar_1_1profiling_1_1UsageReporter_1a170f5e412849a669041ebeecf07ef360" prot="public" virt="non-virtual"><scope>icrar::profiling::UsageReporter</scope><name>~UsageReporter</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1VerbosityTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::VerbosityTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1VerbosityTests_1abee331c0da535fd6ef20418ce9b7afa3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::VerbosityTests::TestParseVerbosity</definition>
        <argsstring>()</argsstring>
        <name>TestParseVerbosity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc" line="32" column="1" bodyfile="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc" bodystart="32" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="225">
        <label>Test</label>
      </node>
      <node id="224">
        <label>icrar::VerbosityTests</label>
        <link refid="classicrar_1_1VerbosityTests"/>
        <childnode refid="225" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="227">
        <label>Test</label>
      </node>
      <node id="226">
        <label>icrar::VerbosityTests</label>
        <link refid="classicrar_1_1VerbosityTests"/>
        <childnode refid="227" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc" line="30" column="1" bodyfile="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc" bodystart="29" bodyend="44"/>
    <listofallmembers>
      <member refid="classicrar_1_1VerbosityTests_1abee331c0da535fd6ef20418ce9b7afa3" prot="public" virt="non-virtual"><scope>icrar::VerbosityTests</scope><name>TestParseVerbosity</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1visibility" kind="struct" language="C++" prot="public">
    <compoundname>icrar::visibility</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1visibility_1af72b57f8712e447b4c20379626094c2d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::frequency</definition>
        <argsstring/>
        <name>frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="30" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1afd7ecadb3fb2fac66d25c349d2b0c6f9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::time</definition>
        <argsstring/>
        <name>time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="31" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a4bc15f93894e409717c9e35d72bb64b7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::u</definition>
        <argsstring/>
        <name>u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="32" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1acceabd4158c4e8fccc2abdc04b5908ee" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::v</definition>
        <argsstring/>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a2ecfaae81e5563ba6f577586f5a0cf60" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::w</definition>
        <argsstring/>
        <name>w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a098754613ada86438b0b6d8cdb896044" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::r</definition>
        <argsstring/>
        <name>r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="35" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1aaf60c41e16c5e71dfe1e4e3391115e97" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::i</definition>
        <argsstring/>
        <name>i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1aa275071c79dd305a593205b51a24098d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::weight</definition>
        <argsstring/>
        <name>weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1adffbf3933fab6f52da0a150fff955980" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::visibility::a1</definition>
        <argsstring/>
        <name>a1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="38" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a54fcbaa38dab9fbaffdaa2039f641f9b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::visibility::a2</definition>
        <argsstring/>
        <name>a2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1ae5b696405fc41d3d0d4bd33923c9f2f1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::visibility::gcfinx</definition>
        <argsstring/>
        <name>gcfinx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="40" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1visibility_1a10b3507c4396fa87815f9119781273f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; icrar::visibility::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const visibility &amp;vis)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1visibility" kindref="compound">visibility</ref> &amp;</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="42" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/visibility.h" line="29" column="1" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="28" bodyend="49"/>
    <listofallmembers>
      <member refid="structicrar_1_1visibility_1adffbf3933fab6f52da0a150fff955980" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>a1</name></member>
      <member refid="structicrar_1_1visibility_1a54fcbaa38dab9fbaffdaa2039f641f9b" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>a2</name></member>
      <member refid="structicrar_1_1visibility_1af72b57f8712e447b4c20379626094c2d" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>frequency</name></member>
      <member refid="structicrar_1_1visibility_1ae5b696405fc41d3d0d4bd33923c9f2f1" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>gcfinx</name></member>
      <member refid="structicrar_1_1visibility_1aaf60c41e16c5e71dfe1e4e3391115e97" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>i</name></member>
      <member refid="structicrar_1_1visibility_1a10b3507c4396fa87815f9119781273f5" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>operator&lt;&lt;</name></member>
      <member refid="structicrar_1_1visibility_1a098754613ada86438b0b6d8cdb896044" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>r</name></member>
      <member refid="structicrar_1_1visibility_1afd7ecadb3fb2fac66d25c349d2b0c6f9" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>time</name></member>
      <member refid="structicrar_1_1visibility_1a4bc15f93894e409717c9e35d72bb64b7" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>u</name></member>
      <member refid="structicrar_1_1visibility_1acceabd4158c4e8fccc2abdc04b5908ee" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>v</name></member>
      <member refid="structicrar_1_1visibility_1a2ecfaae81e5563ba6f577586f5a0cf60" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>w</name></member>
      <member refid="structicrar_1_1visibility_1aa275071c79dd305a593205b51a24098d" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>weight</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceboost_1_1math_1_1constants" kind="namespace" language="C++">
    <compoundname>boost::math::constants</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" line="61" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceconf" kind="namespace" language="Python">
    <compoundname>conf</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="conf_8py_1a45653c983098153b78e33600e39230eb" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.project</definition>
        <argsstring/>
        <name>project</name>
        <initializer>=  'Leap Accelerate'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="38" column="1" bodyfile="docs/src/conf.py" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a33fa97cf51dcb25970fbf53f10159589" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.copyright</definition>
        <argsstring/>
        <name>copyright</name>
        <initializer>=  ' ICRAR/UWA - SKA Organization'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="39" column="1" bodyfile="docs/src/conf.py" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a637c239d256432248aa8d9f3ab0b8c52" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.author</definition>
        <argsstring/>
        <name>author</name>
        <initializer>=  'Callan Gray'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="40" column="1" bodyfile="docs/src/conf.py" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1af51f21968ea73bb4391b0d4aed1f7ad2" prot="public" static="no" mutable="no">
        <type/>
        <definition>conf.version</definition>
        <argsstring/>
        <name>version</name>
        <initializer>=  f.read().strip()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="44" column="1" bodyfile="docs/src/conf.py" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1aee93453546a31f4e76999ebaadf6e356" prot="public" static="no" mutable="no">
        <type/>
        <definition>conf.release</definition>
        <argsstring/>
        <name>release</name>
        <initializer>=  version</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="45" column="1" bodyfile="docs/src/conf.py" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1add613ecd679055ab674d2ee479c80dbe" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.read_the_docs_build</definition>
        <argsstring/>
        <name>read_the_docs_build</name>
        <initializer>=  'True'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="51" column="1" bodyfile="docs/src/conf.py" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1acb47d2c0c2904fa7d36b63142533f383" prot="public" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary conf.breathe_projects</definition>
        <argsstring/>
        <name>breathe_projects</name>
        <initializer>=  {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="53" column="1" bodyfile="docs/src/conf.py" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a1714a4d47ba3c29e7f0cc61cbe0f35df" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf::doxygen_xml</definition>
        <argsstring/>
        <name>doxygen_xml</name>
        <initializer>=  ""</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="54" column="1" bodyfile="docs/src/conf.py" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1abd54669315ecf2942f588532d1a24ae1" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.source_dir</definition>
        <argsstring/>
        <name>source_dir</name>
        <initializer>=  "../../src/icrar"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="55" column="1" bodyfile="docs/src/conf.py" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a4276a0b605d8625bcf976c023473d555" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.input_dir</definition>
        <argsstring/>
        <name>input_dir</name>
        <initializer>=  '../src'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="60" column="1" bodyfile="docs/src/conf.py" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1ac25408a98a5927a7648e1139fe0cc7f0" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>conf.output_dir</definition>
        <argsstring/>
        <name>output_dir</name>
        <initializer>=  'build/doxygen'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="61" column="1" bodyfile="docs/src/conf.py" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a314adaee9fd2eb7d5ac8f929f97d3347" prot="public" static="no" mutable="no">
        <type/>
        <definition>conf.cwd</definition>
        <argsstring/>
        <name>cwd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="63" column="1" bodyfile="docs/src/conf.py" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a332f430461432dc465213f884a1e4967" prot="public" static="no" mutable="no">
        <type/>
        <definition>conf.shell</definition>
        <argsstring/>
        <name>shell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="63" column="1" bodyfile="docs/src/conf.py" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1ae475e080536acb271a0a0efe56c3ba42" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list conf.extensions</definition>
        <argsstring/>
        <name>extensions</name>
        <initializer>=  [
    'breathe',
    'exhale',
    'recommonmark'
]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="75" column="1" bodyfile="docs/src/conf.py" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a3cb6867401ccd3f25a28d4270f4703c1" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list conf.source_suffix</definition>
        <argsstring/>
        <name>source_suffix</name>
        <initializer>=  [".rst", '.md']</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="81" column="1" bodyfile="docs/src/conf.py" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1ab9036d32a6cd8e8c3933751acf58da42" prot="public" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary conf.source_parsers</definition>
        <argsstring/>
        <name>source_parsers</name>
        <initializer>=  {".md": CommonMarkParser }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="84" column="1" bodyfile="docs/src/conf.py" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1aad1fe7669bcae16063c77543f4fbcce8" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list conf.autodoc_default_flags</definition>
        <argsstring/>
        <name>autodoc_default_flags</name>
        <initializer>=  ['members']</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="87" column="1" bodyfile="docs/src/conf.py" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a528dc91894a51b0d2627dde71effb81a" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list conf.cpp_id_attributes</definition>
        <argsstring/>
        <name>cpp_id_attributes</name>
        <initializer>=  ["__host__", "__device__", "EIGEN_DEVICE_FUNC"]</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="92" column="1" bodyfile="docs/src/conf.py" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a6eba2d2c7ae923054b1c49e686ec89b9" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.breathe_default_project</definition>
        <argsstring/>
        <name>breathe_default_project</name>
        <initializer>=  "LeapAccelerate"</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="96" column="1" bodyfile="docs/src/conf.py" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a54585428ce84441199d9dfd7087e2243" prot="public" static="no" mutable="no">
        <type>tuple</type>
        <definition>tuple conf.breathe_default_members</definition>
        <argsstring/>
        <name>breathe_default_members</name>
        <initializer>=  ("members", "undoc-members")</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="97" column="1" bodyfile="docs/src/conf.py" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a8832ad68e217abf87235857030b4e117" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool conf.breathe_separate_member_pages</definition>
        <argsstring/>
        <name>breathe_separate_member_pages</name>
        <initializer>=  True</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="98" column="1" bodyfile="docs/src/conf.py" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a55b6f943346f1b21f833b276f8375160" prot="public" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary conf.breathe_projects_source</definition>
        <argsstring/>
        <name>breathe_projects_source</name>
        <initializer>=  {
    "LeapAccelerate": (source_dir, [
        "leap-accelerate/core/stream_out_type.h",
        "leap-accelerate/core/compute_implementation.h",
        "leap-accelerate/algorithm/ILeapCalibrator.h",
        "leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h",
        "leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h",
        "leap-accelerate/math/math_conversion.h",
        "leap-accelerate/math/complex_extensions.h",
        "leap-accelerate/math/vector_extensions.h"
    ])
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="101" column="1" bodyfile="docs/src/conf.py" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a78c82b85611935623d20170538ca124a" prot="public" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary conf.breathe_domain_extension</definition>
        <argsstring/>
        <name>breathe_domain_extension</name>
        <initializer>=  {
    "h": "cpp",
    "cc": "cpp",
    "cu": "cpp"
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="116" column="1" bodyfile="docs/src/conf.py" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a160404b83fa0b5b708e09a9d1e52f294" prot="public" static="no" mutable="no">
        <type>dictionary</type>
        <definition>dictionary conf.exhale_args</definition>
        <argsstring/>
        <name>exhale_args</name>
        <initializer>=  {
    "containmentFolder":     "./api",
    "rootFileName":          "library_root.rst",
    "rootFileTitle":         "Leap Accelerate API Reference",
    "afterTitleDescription": textwrap.dedent(),
    "doxygenStripFromPath":  "../", #"/home/calgray/Code/icrar/leap-accelerate/src", # use src dir
    # Suggested optional arguments
    "createTreeView":        True,
    # TIP: if using the sphinx-bootstrap-theme, you need
    # "treeViewIsBootstrap": True,
    "exhaleExecutesDoxygen": False,
    #"exhaleDoxygenStdin":    "INPUT = ../../src",
    "lexerMapping": {
        r".*\.h": "cpp",
        r".*\.cc": "cpp",
        r".*\.cuh": "cuda",
        r".*\.cu": "cuda",
        r".*\.txt": "cmake"
    },
    #"verboseBuild": True,
    "generateBreatheFileDirectives": False
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="124" column="1" bodyfile="docs/src/conf.py" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1ae850ae634911b713e036b43894fdd525" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list conf.templates_path</definition>
        <argsstring/>
        <name>templates_path</name>
        <initializer>=  ['_templates']</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="158" column="1" bodyfile="docs/src/conf.py" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a7ad48fb6f3e9b129c02346ea0d3527c1" prot="public" static="no" mutable="no">
        <type>list</type>
        <definition>list conf.exclude_patterns</definition>
        <argsstring/>
        <name>exclude_patterns</name>
        <initializer>=  []</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="163" column="1" bodyfile="docs/src/conf.py" bodystart="163" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="conf_8py_1a6c3bfcc1a44546c1c75ce20f55bd0fd6" prot="public" static="no" mutable="no">
        <type>string</type>
        <definition>string conf.html_theme</definition>
        <argsstring/>
        <name>html_theme</name>
        <initializer>=  'sphinx_rtd_theme'</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="171" column="1" bodyfile="docs/src/conf.py" bodystart="171" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="conf_8py_1a999bc31458cfe0d76d1216bb8e77a17f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def conf.configureDoxyfile</definition>
        <argsstring/>
        <name>configureDoxyfile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="docs/src/conf.py" line="26" column="1" bodyfile="docs/src/conf.py" bodystart="26" bodyend="37"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/conf.py" line="1" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceEigen" kind="namespace" language="C++">
    <compoundname>Eigen</compoundname>
    <innernamespace refid="namespaceEigen_1_1internal">Eigen::internal</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="eigen__extensions_8h_1a14b922f2f5145528d33f5e5af8aa2ec9" prot="public" static="no">
        <type>Eigen::Matrix&lt; bool, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>using Eigen::MatrixXb = typedef Eigen::Matrix&lt;bool, Eigen::Dynamic, Eigen::Dynamic&gt;</definition>
        <argsstring/>
        <name>MatrixXb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="eigen__extensions_8h_1a00fbc59db4f2ebc3fda339c64b9c00d9" prot="public" static="no">
        <type>Eigen::Vector&lt; bool, Eigen::Dynamic &gt;</type>
        <definition>using Eigen::VectorXb = typedef Eigen::Vector&lt;bool, Eigen::Dynamic&gt;</definition>
        <argsstring/>
        <name>VectorXb</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="43" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="eigen__extensions_8h_1a0af44b8a2569391b57d854c725813b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Eigen::ToMatrix</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;tensor)</argsstring>
        <name>ToMatrix</name>
        <param>
          <type>const Eigen::Tensor&lt; Scalar, 2 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="46" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" bodystart="46" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="eigen__extensions_8h_1a328768a80a69e6442755d6610813dda0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Scalar</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto Eigen::ToVector</definition>
        <argsstring>(const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;tensor)</argsstring>
        <name>ToVector</name>
        <param>
          <type>const Eigen::Tensor&lt; Scalar, 1 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="56" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" bodystart="56" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="41" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceEigen_1_1internal" kind="namespace" language="C++">
    <compoundname>Eigen::internal</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="eigen__extensions_8h_1a4e24af10e1444ddcad966dda89710a2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>EIGEN_DEVICE_FUNC std::complex&lt; double &gt;</type>
        <definition>EIGEN_DEVICE_FUNC std::complex&lt;double&gt; Eigen::internal::cast</definition>
        <argsstring>(const std::complex&lt; float &gt; &amp;x)</argsstring>
        <name>cast</name>
        <param>
          <type>const std::complex&lt; float &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="67" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" bodystart="67" bodyend="70"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="65" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar" kind="namespace" language="C++">
    <compoundname>icrar</compoundname>
    <innerclass refid="structicrar_1_1ArgumentsDTO" prot="public">icrar::ArgumentsDTO</innerclass>
    <innerclass refid="classicrar_1_1ArgumentsValidated" prot="public">icrar::ArgumentsValidated</innerclass>
    <innerclass refid="structicrar_1_1CLIArgumentsDTO" prot="public">icrar::CLIArgumentsDTO</innerclass>
    <innerclass refid="classicrar_1_1CommandLineTests" prot="public">icrar::CommandLineTests</innerclass>
    <innerclass refid="structicrar_1_1ComputeOptionsDTO" prot="public">icrar::ComputeOptionsDTO</innerclass>
    <innerclass refid="classicrar_1_1CpuComputeOptions" prot="public">icrar::CpuComputeOptions</innerclass>
    <innerclass refid="classicrar_1_1CudaComputeOptions" prot="public">icrar::CudaComputeOptions</innerclass>
    <innerclass refid="classicrar_1_1CudaMatrixEigenTests" prot="public">icrar::CudaMatrixEigenTests</innerclass>
    <innerclass refid="classicrar_1_1CudaMatrixTests" prot="public">icrar::CudaMatrixTests</innerclass>
    <innerclass refid="classicrar_1_1E2EPerformanceTests" prot="public">icrar::E2EPerformanceTests</innerclass>
    <innerclass refid="classicrar_1_1EigenExtensionsTests" prot="public">icrar::EigenExtensionsTests</innerclass>
    <innerclass refid="classicrar_1_1EigenStringUtilsTests" prot="public">icrar::EigenStringUtilsTests</innerclass>
    <innerclass refid="classicrar_1_1exception" prot="public">icrar::exception</innerclass>
    <innerclass refid="classicrar_1_1file__exception" prot="public">icrar::file_exception</innerclass>
    <innerclass refid="classicrar_1_1ILeapCalibrator" prot="public">icrar::ILeapCalibrator</innerclass>
    <innerclass refid="classicrar_1_1IntegrationTests" prot="public">icrar::IntegrationTests</innerclass>
    <innerclass refid="classicrar_1_1invalid__argument__exception" prot="public">icrar::invalid_argument_exception</innerclass>
    <innerclass refid="classicrar_1_1json__exception" prot="public">icrar::json_exception</innerclass>
    <innerclass refid="classicrar_1_1JSONHelperTests" prot="public">icrar::JSONHelperTests</innerclass>
    <innerclass refid="classicrar_1_1LeapCalibratorFactory" prot="public">icrar::LeapCalibratorFactory</innerclass>
    <innerclass refid="classicrar_1_1MathConversionTests" prot="public">icrar::MathConversionTests</innerclass>
    <innerclass refid="classicrar_1_1MeasurementSet" prot="public">icrar::MeasurementSet</innerclass>
    <innerclass refid="classicrar_1_1MetaDataTests" prot="public">icrar::MetaDataTests</innerclass>
    <innerclass refid="classicrar_1_1MVuvwTests" prot="public">icrar::MVuvwTests</innerclass>
    <innerclass refid="classicrar_1_1not__implemented__exception" prot="public">icrar::not_implemented_exception</innerclass>
    <innerclass refid="classicrar_1_1PhaseRotateTests" prot="public">icrar::PhaseRotateTests</innerclass>
    <innerclass refid="classicrar_1_1Range" prot="public">icrar::Range</innerclass>
    <innerclass refid="classicrar_1_1RangeTests" prot="public">icrar::RangeTests</innerclass>
    <innerclass refid="classicrar_1_1Slice" prot="public">icrar::Slice</innerclass>
    <innerclass refid="classicrar_1_1SliceTests" prot="public">icrar::SliceTests</innerclass>
    <innerclass refid="classicrar_1_1SphericalDirectionTests" prot="public">icrar::SphericalDirectionTests</innerclass>
    <innerclass refid="classicrar_1_1StreamOutTypeTests" prot="public">icrar::StreamOutTypeTests</innerclass>
    <innerclass refid="classicrar_1_1VerbosityTests" prot="public">icrar::VerbosityTests</innerclass>
    <innerclass refid="structicrar_1_1visibility" prot="public">icrar::visibility</innerclass>
    <innernamespace refid="namespaceicrar_1_1constants">icrar::constants</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <innernamespace refid="namespaceicrar_1_1detail">icrar::detail</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <innernamespace refid="namespaceicrar_1_1profiling">icrar::profiling</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceicrar_1adef48186ce90b62c8d5113a075786528" prot="public" static="no">
        <name>ComputeImplementation</name>
        <enumvalue id="namespaceicrar_1adef48186ce90b62c8d5113a075786528ad9747e2da342bdb995f6389533ad1a3d" prot="public">
          <name>cpu</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1adef48186ce90b62c8d5113a075786528a39466fe22b062a34cfe09f3cc8c24868" prot="public">
          <name>cuda</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Specifier for the compute implementation of a LeapCalibrator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/compute_implementation.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/core/compute_implementation.h" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509" prot="public" static="no">
        <name>InputType</name>
        <enumvalue id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509a8c7dd922ad47494fc02c388e12c00eac" prot="public">
          <name>file</name>
          <briefdescription>
<para>Read from a casacore table file. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509af7b44cfafd5c52223d5498196c8a2e7b" prot="public">
          <name>stream</name>
          <briefdescription>
<para>Read from a spead2 stream (unsupported) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/InputType.h" line="29" column="1" bodyfile="src/icrar/leap-accelerate/core/InputType.h" bodystart="28" bodyend="32"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" prot="public" static="no">
        <name>StreamOutType</name>
        <enumvalue id="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895adb6d9b451b818ccc9a449383f2f0c450" prot="public">
          <name>collection</name>
          <briefdescription>
<para>Calibrations are written to a collection in a single file. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895a9d1e6fcfe4c1b338f1c5008fe0d84069" prot="public">
          <name>singleFile</name>
          <briefdescription>
<para>Calibrations are continously rewritten to a single file as computed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895aee7dbb206d2095d6f41d13ac8e7755ba" prot="public">
          <name>multipleFiles</name>
          <briefdescription>
<para>Calibrations are continously written to multiple files as computed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>A configurable enumaration type that can be used for specifying how calibrations are streamed to the output during computation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/stream_out_type.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/core/stream_out_type.h" bodystart="32" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceicrar_1abd8e05d74297bcfcff720024d41bcff4" prot="public" static="no">
        <type><ref refid="classicrar_1_1Range" kindref="compound">Range</ref>&lt; int32_t &gt;</type>
        <definition>using icrar::Rangei = typedef Range&lt;int32_t&gt;</definition>
        <argsstring/>
        <name>Rangei</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="84" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1a4363aca015c71162ab697d946718f2ee" prot="public" static="no">
        <type><ref refid="classicrar_1_1Range" kindref="compound">Range</ref>&lt; int64_t &gt;</type>
        <definition>using icrar::Rangel = typedef Range&lt;int64_t&gt;</definition>
        <argsstring/>
        <name>Rangel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Range.h" line="85" column="1" bodyfile="src/icrar/leap-accelerate/common/Range.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1aa980f2f3d97bee5ecd87b45d3cb26a93" prot="public" static="no">
        <type>Eigen::Vector2d</type>
        <definition>using icrar::SphericalDirection = typedef Eigen::Vector2d</definition>
        <argsstring/>
        <name>SphericalDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/SphericalDirection.h" line="32" column="1" bodyfile="src/icrar/leap-accelerate/common/SphericalDirection.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1ae1be3d6c5e85d786b22e755cff03ee3a" prot="public" static="no">
        <type>Eigen::Tensor&lt; T, 3 &gt;</type>
        <definition>using icrar::Tensor3X = typedef Eigen::Tensor&lt;T, 3&gt;</definition>
        <argsstring/>
        <name>Tensor3X</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Tensor3X.h" line="31" column="1" bodyfile="src/icrar/leap-accelerate/common/Tensor3X.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1a5bd2b25dcc3471f64ff3f1b765aec50b" prot="public" static="no">
        <type>Eigen::Vector3d</type>
        <definition>using icrar::MVuvw = typedef Eigen::Vector3d</definition>
        <argsstring/>
        <name>MVuvw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MVuvw.h" line="31" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MVuvw.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceicrar_1a53d243bf87d101185fe139b8b1d8b6a4" prot="public" static="no" mutable="no">
        <type>struct sysinfo</type>
        <definition>struct sysinfo icrar::memInfo</definition>
        <argsstring/>
        <name>memInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc" line="184" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/system_memory.cc" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceicrar_1a553243b3d278e15d5ef5e3bcf98f308e" prot="public" static="yes" mutable="no">
        <type>const std::string</type>
        <definition>const std::string icrar::_version</definition>
        <argsstring/>
        <name>_version</name>
        <initializer>= std::to_string(LEAP_ACCELERATE_VERSION_MAJOR) + "." +
                                    std::to_string(LEAP_ACCELERATE_VERSION_MINOR) + "." +
                                    std::to_string(LEAP_ACCELERATE_VERSION_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/version.cc" line="37" column="1" bodyfile="src/icrar/leap-accelerate/core/version.cc" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceicrar_1af9568c5cb2993f59191f63c4a6fed515" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::SafeGetBoolean</definition>
        <argsstring>(const T &amp;object, const std::string &amp;message, const std::string &amp;file, int line)</argsstring>
        <name>SafeGetBoolean</name>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>message</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/config/Arguments.cc" line="338" column="1" bodyfile="src/icrar/leap-accelerate/common/config/Arguments.cc" bodystart="338" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1addaaaaa16620972225b45678d6258833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::exists</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="40" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a78fed7d2638edd345c1ca41430bdad4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::size_t</type>
        <definition>std::size_t icrar::matrix_hash</definition>
        <argsstring>(const T &amp;matrix)</argsstring>
        <name>matrix_hash</name>
        <param>
          <type>const T &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Hash function for Eigen matrix and vector. The code is from <computeroutput>hash_combine</computeroutput> function of the Boost library. See <ulink url="http://www.boost.org/doc/libs/1_55_0/doc/html/hash/reference.html#boost.hash_combine">http://www.boost.org/doc/libs/1_55_0/doc/html/hash/reference.html#boost.hash_combine</ulink> . </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen Dense Matrix type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="54" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="54" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8159a342d605fe070bdd07536b7dddaf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Matrix</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::write_binary</definition>
        <argsstring>(const char *filepath, const Matrix &amp;matrix)</argsstring>
        <name>write_binary</name>
        <param>
          <type>const char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>const Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Writes <computeroutput>matrix</computeroutput> to a file overwriting existing content (throws if fails) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen Matrix type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>filepath to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="76" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1a63149e5d92d1021eb94c81108e2154" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Matrix</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::write_binary</definition>
        <argsstring>(std::ofstream &amp;stream, const Matrix &amp;matrix)</argsstring>
        <name>write_binary</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>const Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="88" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2bc794da1b26b631a3d8999cc235c38d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Matrix</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::read_binary</definition>
        <argsstring>(const char *filepath, Matrix &amp;matrix)</argsstring>
        <name>read_binary</name>
        <param>
          <type>const char *</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
<para>Reads <computeroutput>matrix</computeroutput> from a file by resizing and overwriting the existing matrix (throws if fails) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen Matrix type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filepath</parametername>
</parameternamelist>
<parameterdescription>
<para>filepath to read from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to read </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="106" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="106" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2e94e4cadd61cfaf5fa6eea12f1ce6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Matrix</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::read_binary</definition>
        <argsstring>(std::ifstream &amp;in, Matrix &amp;matrix)</argsstring>
        <name>read_binary</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="121" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="121" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a23794bb4c81d1de4f5fd4961cb0a6d60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::read_hash</definition>
        <argsstring>(const char *filename, T &amp;hash)</argsstring>
        <name>read_hash</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Reads a file containing a binary hash at <computeroutput>filename</computeroutput> and outputs to <computeroutput>hash</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash file to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>output parameter </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="140" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="140" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad3601af8b03191eed918ab8bd13380ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::read_hash</definition>
        <argsstring>(std::ifstream &amp;stream, T &amp;hash)</argsstring>
        <name>read_hash</name>
        <param>
          <type>std::ifstream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>T &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="155" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="155" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a01e412c86c93cbea0d3521d5766d1505" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::write_hash</definition>
        <argsstring>(const char *filename, T hash)</argsstring>
        <name>write_hash</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Writes a hash value to a specified file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash value </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash file to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash value </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="176" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="176" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8ba5eb7a6b97e3264aeab2b3b646134e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::write_hash</definition>
        <argsstring>(std::ofstream &amp;stream, T hash)</argsstring>
        <name>write_hash</name>
        <param>
          <type>std::ofstream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>T</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="191" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="191" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af14f04c7022dad9f3cd0c0483d241b1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename In</type>
          </param>
          <param>
            <type>typename Out</type>
          </param>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::ProcessCache</definition>
        <argsstring>(size_t hash, const In &amp;in, Out &amp;out, const std::string &amp;hashFile, const std::string &amp;cacheFile, Lambda transform)</argsstring>
        <name>ProcessCache</name>
        <param>
          <type>size_t</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const In &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>Out &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>hashFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cacheFile</declname>
        </param>
        <param>
          <type>Lambda</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
<para>Reads the hash file and writes to cache if the hash file is different, else reads the cache file if hash file is the same. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>In</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Out</parametername>
</parameternamelist>
<parameterdescription>
<para>Matrix type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Lambda</parametername>
</parameternamelist>
<parameterdescription>
<para>lambda type of signature Out(const In&amp;) called if hashes do not match </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>in</parametername>
</parameternamelist>
<parameterdescription>
<para>The input matrix to hash and transform </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>out</parametername>
</parameternamelist>
<parameterdescription>
<para>The transformed output </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transform</parametername>
</parameternamelist>
<parameterdescription>
<para>the transform lambda </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cacheFile</parametername>
</parameternamelist>
<parameterdescription>
<para>the transformed out cache file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hashFile</parametername>
</parameternamelist>
<parameterdescription>
<para>the in hash file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="218" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="218" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a0109c609a949d83eac9f0f176acb8801" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename In</type>
          </param>
          <param>
            <type>typename Out</type>
          </param>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>Out</type>
        <definition>Out icrar::ProcessCache</definition>
        <argsstring>(size_t hash, const In &amp;in, const std::string &amp;hashFile, const std::string &amp;cacheFile, Lambda transform)</argsstring>
        <name>ProcessCache</name>
        <param>
          <type>size_t</type>
          <declname>hash</declname>
        </param>
        <param>
          <type>const In &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>hashFile</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cacheFile</declname>
        </param>
        <param>
          <type>Lambda</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="255" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="255" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a91a0e28a05f65c4489f9a761d3ac574d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename In</type>
          </param>
          <param>
            <type>typename Out</type>
          </param>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::ProcessCache</definition>
        <argsstring>(const In &amp;in, const std::string &amp;cacheFile, Lambda transform, Out &amp;out)</argsstring>
        <name>ProcessCache</name>
        <param>
          <type>const In &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cacheFile</declname>
        </param>
        <param>
          <type>Lambda</type>
          <declname>transform</declname>
        </param>
        <param>
          <type>Out &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="265" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="265" bodyend="313"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6505eae802df935bc62d06c699874617" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename In</type>
          </param>
          <param>
            <type>typename Out</type>
          </param>
          <param>
            <type>typename Lambda</type>
          </param>
        </templateparamlist>
        <type>Out</type>
        <definition>Out icrar::ProcessCache</definition>
        <argsstring>(const In &amp;in, const std::string &amp;cacheFile, Lambda transform)</argsstring>
        <name>ProcessCache</name>
        <param>
          <type>const In &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>cacheFile</declname>
        </param>
        <param>
          <type>Lambda</type>
          <declname>transform</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_cache.h" line="316" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_cache.h" bodystart="316" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad4c0f9f43fb3b2e13b244bc109271f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RowVector</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::pretty_row</definition>
        <argsstring>(const RowVector &amp;row, std::stringstream &amp;ss)</argsstring>
        <name>pretty_row</name>
        <param>
          <type>const RowVector &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::stringstream &amp;</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
<para>Prints a formatted displaying up to 6 elements. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>RowVector</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen RowVector type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>row</parametername>
</parameternamelist>
<parameterdescription>
<para>the row to print </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ss</parametername>
</parameternamelist>
<parameterdescription>
<para>the stream to print to </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_stringutils.h" line="49" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_stringutils.h" bodystart="49" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a3bd3b661f93199353e5a763add0e4fd2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string icrar::pretty_matrix</definition>
        <argsstring>(const Eigen::MatrixBase&lt; Matrix &gt; &amp;value)</argsstring>
        <name>pretty_matrix</name>
        <param>
          <type>const Eigen::MatrixBase&lt; Matrix &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Prints a formatted matrix to a string with a maximum of 6 rows and columns displayed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen Matrix type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the matrix to print </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string the formatted string result </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_stringutils.h" line="86" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_stringutils.h" bodystart="86" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a88a797e89c5f62d62855c2eb6b9e6a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::trace_matrix</definition>
        <argsstring>(const Matrix &amp;value, const std::string &amp;name)</argsstring>
        <name>trace_matrix</name>
        <param>
          <type>const Matrix &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Dumps a matrix to file <computeroutput>name</computeroutput> .txt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>Eigen Matrix type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>matrix to dump to file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the matrix to dump </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_stringutils.h" line="134" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_stringutils.h" bodystart="134" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9624494cebd94b667a8a3c072bad10fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::underlying_type_t&lt; T &gt;</type>
        <definition>std::underlying_type_t&lt;T&gt; icrar::to_underlying_type</definition>
        <argsstring>(T e)</argsstring>
        <name>to_underlying_type</name>
        <param>
          <type>T</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Safely casts an enum to its underlying type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>enum with underlying type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>enum value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::underlying_type_t&lt;T&gt; the cast value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/enumutils.h" line="38" column="1" bodyfile="src/icrar/leap-accelerate/common/enumutils.h" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2d778f7807d4bd916f00324d605edf41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>Slice icrar::ParseSlice</definition>
        <argsstring>(const std::string &amp;json)</argsstring>
        <name>ParseSlice</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.cc" line="70" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.cc" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a06f1441c37ef148952a6775a9022defc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::optional&lt; int64_t &gt;</type>
        <definition>boost::optional&lt;int64_t&gt; icrar::GetOptionalInt</definition>
        <argsstring>(const rapidjson::Value &amp;v)</argsstring>
        <name>GetOptionalInt</name>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.cc" line="77" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.cc" bodystart="77" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a18dc0f40672d80e74ebc003cf485e239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1Slice" kindref="compound">Slice</ref></type>
        <definition>Slice icrar::ParseSlice</definition>
        <argsstring>(const rapidjson::Value &amp;doc)</argsstring>
        <name>ParseSlice</name>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Slice.cc" line="90" column="1" bodyfile="src/icrar/leap-accelerate/common/Slice.cc" bodystart="90" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae2a2729f1b817f43fff9317680241499" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; SphericalDirection &gt;</type>
        <definition>std::vector&lt; SphericalDirection &gt; icrar::ParseDirections</definition>
        <argsstring>(const std::string &amp;json)</argsstring>
        <name>ParseDirections</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Parses a json string to a collection of MVDirections. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>json</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;SphericalDirection&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/SphericalDirection.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/common/SphericalDirection.cc" bodystart="31" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a5ce34d55aa849aed808f5826f9f2903b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; SphericalDirection &gt;</type>
        <definition>std::vector&lt; SphericalDirection &gt; icrar::ParseDirections</definition>
        <argsstring>(const rapidjson::Value &amp;doc)</argsstring>
        <name>ParseDirections</name>
        <param>
          <type>const rapidjson::Value &amp;</type>
          <declname>doc</declname>
        </param>
        <briefdescription>
<para>Parses a json object to a collection of MVDirections. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/SphericalDirection.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/common/SphericalDirection.cc" bodystart="38" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abafcd056cc821b1f860efdba6a07451b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::isApprox</definition>
        <argsstring>(const Tensor3X&lt; T &gt; &amp;lhs, const Tensor3X&lt; T &gt; &amp;rhs, double tolerance)</argsstring>
        <name>isApprox</name>
        <param>
          <type>const Tensor3X&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Tensor3X&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Tensor3X.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/common/Tensor3X.h" bodystart="34" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a58c7054202311785f9fb91de5c7199e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::ComputeImplementationToString</definition>
        <argsstring>(ComputeImplementation value)</argsstring>
        <name>ComputeImplementationToString</name>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts an enum <computeroutput>value</computeroutput> to a string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/compute_implementation.cc" line="29" column="1" bodyfile="src/icrar/leap-accelerate/core/compute_implementation.cc" bodystart="29" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad4b6b3880e55057a4f54267243bac34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref></type>
        <definition>ComputeImplementation icrar::ParseComputeImplementation</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>ParseComputeImplementation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parses string argument into an enum, throws an exception otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ComputeImplementation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/compute_implementation.cc" line="43" column="1" bodyfile="src/icrar/leap-accelerate/core/compute_implementation.cc" bodystart="43" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aee180103f48917b30bbe4841e2bd6775" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::TryParseComputeImplementation</definition>
        <argsstring>(const std::string &amp;value, ComputeImplementation &amp;out)</argsstring>
        <name>TryParseComputeImplementation</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespaceicrar_1adef48186ce90b62c8d5113a075786528" kindref="member">ComputeImplementation</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if value was converted succesfully, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/compute_implementation.cc" line="53" column="1" bodyfile="src/icrar/leap-accelerate/core/compute_implementation.cc" bodystart="53" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae7f3597714639e7e96bf179724df2f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::git_sha1</definition>
        <argsstring>()</argsstring>
        <name>git_sha1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The git SHA1 value for the current source code commit. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/git_revision.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a70a86cd3af244f05dc34984adf556ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::git_has_local_changes</definition>
        <argsstring>()</argsstring>
        <name>git_has_local_changes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the local clone of the repository has uncommitted changes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/git_revision.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abdb0ec537dfcb16b0592ce29feecf1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509" kindref="member">InputType</ref></type>
        <definition>InputType icrar::ParseInputType</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>ParseInputType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parses string argument into an enum, throws an exception otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>StreamOutType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/InputType.cc" line="28" column="1" bodyfile="src/icrar/leap-accelerate/core/InputType.cc" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a31a218ec7d81a46898e883a5fb83ba0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::TryParseInputType</definition>
        <argsstring>(const std::string &amp;value, InputType &amp;out)</argsstring>
        <name>TryParseInputType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509" kindref="member">InputType</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if value was converted succesfully, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/InputType.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/core/InputType.cc" bodystart="38" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a0f52e8540b2d45d21a24785551f4c000" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structicrar_1_1detail_1_1__fixed" kindref="compound">detail::_fixed</ref>&lt; N, T &gt;</type>
        <definition>detail::_fixed&lt;N, T&gt; icrar::fixed</definition>
        <argsstring>(T v)</argsstring>
        <name>fixed</name>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Sent to a stream object, this manipulator will print the given value with a precision of N decimal places. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>N</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to send to the stream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>detail::_fixed&lt;N, T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="60" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a551877a832f3bc1d7e68f7e436bdf166" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structicrar_1_1detail_1_1__memory__amount" kindref="compound">detail::_memory_amount</ref></type>
        <definition>detail::_memory_amount icrar::memory_amount</definition>
        <argsstring>(std::size_t amount)</argsstring>
        <name>memory_amount</name>
        <param>
          <type>std::size_t</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Sent to a stream object, this manipulator will print the given amount of memory using the correct suffix and 3 decimal places. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to send to the stream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>detail::_memory_amount </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="172" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad4c80779a6e612ea1b0b075ad2a2b9b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structicrar_1_1detail_1_1__microseconds__amount" kindref="compound">detail::_microseconds_amount</ref></type>
        <definition>detail::_microseconds_amount icrar::us_time</definition>
        <argsstring>(std::chrono::microseconds::rep amount)</argsstring>
        <name>us_time</name>
        <param>
          <type>std::chrono::microseconds::rep</type>
          <declname>amount</declname>
        </param>
        <briefdescription>
<para>Sent to a stream object, this manipulator will print the given amount of nanoseconds using the correct suffix and 3 decimal places. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>amount</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to send to the stream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>detail::_microseconds_amount </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="184" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="184" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4f130b258e1bd10fb2c7db55823bfed1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::GetTotalSystemVirtualMemory</definition>
        <argsstring>()</argsstring>
        <name>GetTotalSystemVirtualMemory</name>
        <briefdescription>
<para>Gets the total amount system virtual memory. This includes the system's dynamic RAM plus swap space. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc" line="40" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/system_memory.cc" bodystart="40" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aa9244812ced4d897a9269abf643f9d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::GetTotalUsedSystemVirtualMemory</definition>
        <argsstring>()</argsstring>
        <name>GetTotalUsedSystemVirtualMemory</name>
        <briefdescription>
<para>Gets the total amount of used system virtual memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc" line="50" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/system_memory.cc" bodystart="50" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aaa0a1a7dc7dd9414fe8819639db90184" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::GetTotalAvailableSystemVirtualMemory</definition>
        <argsstring>()</argsstring>
        <name>GetTotalAvailableSystemVirtualMemory</name>
        <briefdescription>
<para>Gets the currently available/free virtual system memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc" line="60" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/system_memory.cc" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a98e159566e1edf4e5fbb4a7b50805b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::GetTotalCudaPhysicalMemory</definition>
        <argsstring>()</argsstring>
        <name>GetTotalCudaPhysicalMemory</name>
        <briefdescription>
<para>Gets the total physical cuda memory on the current cuda device. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc" line="70" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/system_memory.cc" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afa0c9dd5d57d56e5e0f36c972aac1d87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::GetAvailableCudaPhysicalMemory</definition>
        <argsstring>()</argsstring>
        <name>GetAvailableCudaPhysicalMemory</name>
        <briefdescription>
<para>Gets the currently available/free physical cuda memory of the current cuda device. This excludes the memory used by the current process. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc" line="85" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/system_memory.cc" bodystart="85" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a708925e8058ea771c6ad68d513ea70d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" kindref="member">StreamOutType</ref></type>
        <definition>StreamOutType icrar::ParseStreamOutType</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>ParseStreamOutType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parses string argument into an enum, throws an exception otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>StreamOutType </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/stream_out_type.cc" line="28" column="1" bodyfile="src/icrar/leap-accelerate/core/stream_out_type.cc" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af6ee394916b505bc91b843b72dba64b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::TryParseStreamOutType</definition>
        <argsstring>(const std::string &amp;value, StreamOutType &amp;out)</argsstring>
        <name>TryParseStreamOutType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" kindref="member">StreamOutType</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if value was converted succesfully, false otherwise </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/stream_out_type.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/core/stream_out_type.cc" bodystart="38" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af4bb30024b5606f3a9d57beed363039f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::IsImmediateMode</definition>
        <argsstring>(StreamOutType streamOutType)</argsstring>
        <name>IsImmediateMode</name>
        <param>
          <type><ref refid="namespaceicrar_1ac976ffc5e5d48e6018840875dd116895" kindref="member">StreamOutType</ref></type>
          <declname>streamOutType</declname>
        </param>
        <briefdescription>
<para>True if solutions should be written to IO as soon as they are computed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/stream_out_type.cc" line="58" column="1" bodyfile="src/icrar/leap-accelerate/core/stream_out_type.cc" bodystart="58" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aee0f98e30d249baa41d1a0a8effeedfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the version of this library as a single string <simplesect kind="return"><para>The version of this library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/version.cc" line="41" column="1" bodyfile="src/icrar/leap-accelerate/core/version.cc" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae6a4c624a95442ecdb6ff69a1ec1d7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::Transpose</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; matrix)</argsstring>
        <name>Transpose</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="41" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab2d583f91f60b824db7a478694dfbb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>icrar::MVuvw</type>
        <definition>icrar::MVuvw icrar::Dot</definition>
        <argsstring>(const icrar::MVuvw &amp;left, const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;right)</argsstring>
        <name>Dot</name>
        <param>
          <type>const icrar::MVuvw &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="48" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="48" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a63482801324ebcc5f3766ce000ef1d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::MVuvw</type>
        <definition>casacore::MVuvw icrar::Dot</definition>
        <argsstring>(const casacore::MVuvw &amp;v1, const casacore::Matrix&lt; T &gt; &amp;v2)</argsstring>
        <name>Dot</name>
        <param>
          <type>const casacore::MVuvw &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="54" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad9a7b4a0a5b042085d3399ca7eaa2fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::Equal</definition>
        <argsstring>(const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;l, const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;r)</argsstring>
        <name>Equal</name>
        <param>
          <type>const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="62" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="62" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4102a32244ae19e5033be361a15b3f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::Equal</definition>
        <argsstring>(const casacore::Array&lt; T &gt; &amp;l, const casacore::Array&lt; T &gt; &amp;r)</argsstring>
        <name>Equal</name>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="76" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="76" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad3e4eb9fe34268f6ed72e48828971afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; std::result_of_t&lt; Op(const T &amp;)&gt; &gt;</type>
        <definition>casacore::Matrix&lt;std::result_of_t&lt;Op(const T&amp;)&gt; &gt; icrar::casa_matrix_map</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;matrix, Op lambda)</argsstring>
        <name>casa_matrix_map</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>Op</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Performs a std::transform on a newly allocated casacore::Matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector template type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>of signature R(const T&amp;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;R&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="95" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="95" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adb2ae4e6bc5195fedf6fbd6c02b0609d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>casacore::Vector&lt; std::result_of_t&lt; Op(const T &amp;)&gt; &gt;</type>
        <definition>casacore::Vector&lt;std::result_of_t&lt;Op(const T&amp;)&gt; &gt; icrar::casa_vector_map</definition>
        <argsstring>(const casacore::Vector&lt; T &gt; &amp;vector, Op lambda)</argsstring>
        <name>casa_vector_map</name>
        <param>
          <type>const casacore::Vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>Op</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Performs a std::transform on a newly allocated casacore::Vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector template type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>of signature R(const T&amp;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;R&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="114" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="114" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a650cd5523400d2c1c47603ca421c4c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::ArrayFill</definition>
        <argsstring>(casacore::Array&lt; T &gt; &amp;value, T v)</argsstring>
        <name>ArrayFill</name>
        <param>
          <type>casacore::Array&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="125" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a338e5d333e2266f60892d83462dcb471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T icrar::ArrayMax</definition>
        <argsstring>(const casacore::Array&lt; T &gt; &amp;value)</argsstring>
        <name>ArrayMax</name>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns the largest value within the array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="141" column="1" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="141" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac8217259a5f6b4591c3dd522d950655b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::isApprox</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;lhs, const std::complex&lt; T &gt; &amp;rhs, T threshold)</argsstring>
        <name>isApprox</name>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>returns true if the magnitude of the difference between two values are approximately equal (within the specified threshold) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if left value approximately equals right value </para></simplesect>
<simplesect kind="return"><para>false if left value does not approximately equals right value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/complex_extensions.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/math/complex_extensions.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a398aa4a16dc41a88e4d65011497415b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>icrar::MVuvw</type>
        <definition>icrar::MVuvw icrar::ToUVW</definition>
        <argsstring>(const casacore::MVuvw &amp;value)</argsstring>
        <name>ToUVW</name>
        <param>
          <type>const casacore::MVuvw &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a casacore UVW value to an icrar UVW value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>icrar::MVuvw </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="30" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="30" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abd90be3713302554e46ea4bac4915534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt; icrar::MVuvw &gt; icrar::ToUVWVector</definition>
        <argsstring>(const std::vector&lt; casacore::MVuvw &gt; &amp;value)</argsstring>
        <name>ToUVWVector</name>
        <param>
          <type>const std::vector&lt; casacore::MVuvw &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="35" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="35" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a44f7f8e9f06f178d898c006dde31a949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt; icrar::MVuvw &gt; icrar::ToUVWVector</definition>
        <argsstring>(const Eigen::MatrixXd &amp;value)</argsstring>
        <name>ToUVWVector</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a column-major matrix of size Nx3 into a vector of UVWs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="40" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="40" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af512f8326e0e9ba057292cac052abfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::MVuvw</type>
        <definition>casacore::MVuvw icrar::ToCasaUVW</definition>
        <argsstring>(const icrar::MVuvw &amp;value)</argsstring>
        <name>ToCasaUVW</name>
        <param>
          <type>const icrar::MVuvw &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="52" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac2e5f08691b422b6e082caf4b5935a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; casacore::MVuvw &gt;</type>
        <definition>std::vector&lt; casacore::MVuvw &gt; icrar::ToCasaUVWVector</definition>
        <argsstring>(const std::vector&lt; icrar::MVuvw &gt; &amp;value)</argsstring>
        <name>ToCasaUVWVector</name>
        <param>
          <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="57" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adf7d4f90445beb9e99231bdda44ad614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; casacore::MVuvw &gt;</type>
        <definition>std::vector&lt; casacore::MVuvw &gt; icrar::ToCasaUVWVector</definition>
        <argsstring>(const Eigen::MatrixX3d &amp;value)</argsstring>
        <name>ToCasaUVWVector</name>
        <param>
          <type>const Eigen::MatrixX3d &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="62" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="62" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aae9bd91e8baeb01733dbff9da5468822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SphericalDirection</type>
        <definition>SphericalDirection icrar::ToDirection</definition>
        <argsstring>(const casacore::MVDirection &amp;value)</argsstring>
        <name>ToDirection</name>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a casacore direction to an icrar sperical direction. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="74" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="74" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1b5b63ba3e3adda4f64638e85ea119bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; SphericalDirection &gt;</type>
        <definition>std::vector&lt; SphericalDirection &gt; icrar::ToDirectionVector</definition>
        <argsstring>(const std::vector&lt; casacore::MVDirection &gt; &amp;value)</argsstring>
        <name>ToDirectionVector</name>
        <param>
          <type>const std::vector&lt; casacore::MVDirection &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="80" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a21fb4aed172a361cc6e3753f78b982f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::MVDirection</type>
        <definition>casacore::MVDirection icrar::ToCasaDirection</definition>
        <argsstring>(const SphericalDirection &amp;value)</argsstring>
        <name>ToCasaDirection</name>
        <param>
          <type>const SphericalDirection &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="85" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="85" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6254d0026b47c7b4f22197ca64f04f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; casacore::MVDirection &gt;</type>
        <definition>std::vector&lt; casacore::MVDirection &gt; icrar::ToCasaDirectionVector</definition>
        <argsstring>(const std::vector&lt; SphericalDirection &gt; &amp;value)</argsstring>
        <name>ToCasaDirectionVector</name>
        <param>
          <type>const std::vector&lt; SphericalDirection &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="90" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae45f8d2929d66cc349fd096d30607436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::ToMatrix</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;value)</argsstring>
        <name>ToMatrix</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Converts a casacore matrix to the equivalent eigen3 matrix </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="43" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="43" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abe75c0e599bf99e7f37537d72de532d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>int</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, R, C &gt;</type>
        <definition>Eigen::Matrix&lt;T, R, C&gt; icrar::ToFixedMatrix</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;value)</argsstring>
        <name>ToFixedMatrix</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="52" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae948c353f03c65a4b25a58dc5334ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>int</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::ConvertMatrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, R, C &gt; &amp;value)</argsstring>
        <name>ConvertMatrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, R, C &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts an Eigen3 matrix to the equivalent casacore matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="69" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a23cb07a6c4eeecc78136f336e7b21752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::ConvertMatrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;value)</argsstring>
        <name>ConvertMatrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts an Eigen3 matrix to the equivalent casacore matrix. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="78" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aeb314815760be75a3e7428e74ee8ed16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; icrar::ToVector</definition>
        <argsstring>(casacore::Vector&lt; T &gt; value)</argsstring>
        <name>ToVector</name>
        <param>
          <type>casacore::Vector&lt; T &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a casacore vector to the equivalent Eigen3 vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="87" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2e39265e36d08949ef4d234d31073e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; icrar::ToVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;value)</argsstring>
        <name>ToVector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a std vector to the equivalent Eigen3 vector. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="98" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="98" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8c09159712e8acc6e3c177451d3092a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Vector&lt; T &gt;</type>
        <definition>casacore::Vector&lt;T&gt; icrar::ConvertVector</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;value)</argsstring>
        <name>ConvertVector</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts an Eigen3 column-vector into a casacore Array. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>casacore::Array&lt;T&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="113" column="1" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9869fd4122f44fabacefc846c9387136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; IntType &gt;</type>
        <definition>std::vector&lt;IntType&gt; icrar::range</definition>
        <argsstring>(IntType start, IntType stop, IntType step)</argsstring>
        <name>range</name>
        <param>
          <type>IntType</type>
          <declname>start</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>returns a linear sequence of values from start at step sized intervals to the stop value inclusive </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IntType&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/vector_extensions.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/math/vector_extensions.h" bodystart="61" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af5b1bcaacdb936a2755b9734a0f163c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; IntType &gt;</type>
        <definition>std::vector&lt;IntType&gt; icrar::range</definition>
        <argsstring>(IntType start, IntType stop)</argsstring>
        <name>range</name>
        <param>
          <type>IntType</type>
          <declname>start</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
<para>returns a linear sequence of values from start to stop </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IntType&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/vector_extensions.h" line="88" column="1" bodyfile="src/icrar/leap-accelerate/math/vector_extensions.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1acbf5224cf69bece7c2027c2b1ea877bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; IntType &gt;</type>
        <definition>std::vector&lt;IntType&gt; icrar::range</definition>
        <argsstring>(IntType stop)</argsstring>
        <name>range</name>
        <param>
          <type>IntType</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
<para>returns a linear sequence of values from 0 to stop </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IntType&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/vector_extensions.h" line="101" column="1" bodyfile="src/icrar/leap-accelerate/math/vector_extensions.h" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a74a5975b4d84b93aecb3dceac4fc81ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::isApprox</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;lhs, const std::vector&lt; T &gt; &amp;rhs, T tolerance)</argsstring>
        <name>isApprox</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Returns true if all vector elements of. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>are within the tolerance threshold to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>numeric type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>left hand side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>right hand side </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para>tolerance threshold </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/vector_extensions.h" line="116" column="1" bodyfile="src/icrar/leap-accelerate/math/vector_extensions.h" bodystart="116" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a33bcc78f06ba68cb6edadf55cc67e1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::result_of_t&lt; Op(const T &amp;)&gt; &gt;</type>
        <definition>std::vector&lt;std::result_of_t&lt;Op(const T&amp;)&gt; &gt; icrar::vector_map</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vector, Op lambda)</argsstring>
        <name>vector_map</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>Op</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Performs a std::transform on a newly allocated std::vector. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector template type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>of signature R(const T&amp;) </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;R&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/vector_extensions.h" line="141" column="1" bodyfile="src/icrar/leap-accelerate/math/vector_extensions.h" bodystart="141" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aff70b46489237d0b66d8f4d5ed15a0bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, 3 &gt;</type>
        <definition>Eigen::Matrix&lt; double, Eigen::Dynamic, 3 &gt; icrar::ToMatrix</definition>
        <argsstring>(const std::vector&lt; MVuvw &gt; &amp;uvws)</argsstring>
        <name>ToMatrix</name>
        <param>
          <type>const std::vector&lt; MVuvw &gt; &amp;</type>
          <declname>uvws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MVuvw.cc" line="29" column="1" bodyfile="src/icrar/leap-accelerate/model/cpu/MVuvw.cc" bodystart="29" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a491ba1a24a9626711c8809a27b16ca47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1CalibrationCollection" kindref="compound">cpu::CalibrationCollection</ref></type>
        <definition>cpu::CalibrationCollection icrar::GetEachTimestepMWACalibration</definition>
        <argsstring>()</argsstring>
        <name>GetEachTimestepMWACalibration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h" line="35" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h" bodystart="35" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9a3ae7ac40185d0ec28f6db32544e6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1CalibrationCollection" kindref="compound">cpu::CalibrationCollection</ref></type>
        <definition>cpu::CalibrationCollection icrar::GetAllTimestepsMWACalibration</definition>
        <argsstring>()</argsstring>
        <name>GetAllTimestepsMWACalibration</name>
        <briefdescription>
<para>Gets the expected calibration output averaging over all timesteps. From LEAP-Cal:ported. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of direction and antenna calibration pairs </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h" line="598" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h" bodystart="598" bodyend="870"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a78c42c85423d5a04ae46c11f1a235034" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1CalibrationCollection" kindref="compound">cpu::CalibrationCollection</ref></type>
        <definition>cpu::CalibrationCollection icrar::GetFirstTimestepMWACalibration</definition>
        <argsstring>()</argsstring>
        <name>GetFirstTimestepMWACalibration</name>
        <briefdescription>
<para>Gets the expected calibration output averaging over the first timestep. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::vector&lt;std::pair&lt;SphericalDirection, std::vector&lt;double&gt;&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h" line="877" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h" bodystart="877" bodyend="1150"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abb5587af2d8b58354502cb7ca1314abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunction0TestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunction0TestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="474" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="474" bodyend="474"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1acc8dc48694ef2309caf8d64f75acb1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunctionDataTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunctionDataTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="475" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="475" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac5034cf6f84076364bc3b45ad3557dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, RotateVisibilitiesTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>RotateVisibilitiesTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="477" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="477" bodyend="477"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a3fe8cbe82c166be77132bef308150947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, ReferenceAntennaTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>ReferenceAntennaTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="478" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="478" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a542365ebf16e3ea0bb8a1553ce6ecb6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateFirstTimestepTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateFirstTimestepTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="480" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="480" bodyend="480"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abfcea3401ca104d140a13d031ccaf40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateAllTimesteps0TestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateAllTimesteps0TestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="481" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="481" bodyend="481"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adc1ad44361d724016aecdd3e5a35fcb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateAllTimesteps1TestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateAllTimesteps1TestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="482" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="482" bodyend="482"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a59cc3a05534a70ced6b163ddf11469a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateEachTimestepTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateEachTimestepTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="483" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="483" bodyend="483"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aa54ff5b24e14dcc4a386ea9bf65abea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, RotateVisibilitiesTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>RotateVisibilitiesTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="486" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="486" bodyend="486"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a57816ff6c69ffa21bd91e1c490b7f993" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, ReferenceAntennaTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>ReferenceAntennaTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="487" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="487" bodyend="487"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afafd0d2e395d8b9dc9e526cd4717597f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateCacheTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateCacheTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="489" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="489" bodyend="489"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7fb04b9f2c6f3308701caa2328745b53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateIntermediateBufferTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateIntermediateBufferTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="490" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="490" bodyend="490"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac10544c0dabf285b3336478dda75a538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateCusolverTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateCusolverTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="491" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="491" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afb355f530bd368d5d5f287a2ebca1a64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateFastTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateFastTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="492" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="492" bodyend="492"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aa98606fe55da347b5fbc20cd0faf3db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateFirstTimestepsTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateFirstTimestepsTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="494" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="494" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a69b0181c1dcdad9a0f7dd7c33767ec16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateTimestepsTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateTimestepsTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="495" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="495" bodyend="495"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aeb8fede5ebd1c92117131064ecb26a36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateAllTimestepsTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateAllTimestepsTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="496" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="496" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a0fcaedcb4fbdcf0b4658ab410418c245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, DISABLED_PhaseRotateEachTimestepTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>DISABLED_PhaseRotateEachTimestepTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="497" column="1" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="497" bodyend="497"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a5ffc3f1691c1cfc9b8203eec2a4cc2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenStringUtilsTests, TestTallMatrix)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenStringUtilsTests" kindref="compound">EigenStringUtilsTests</ref></type>
        </param>
        <param>
          <type>TestTallMatrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="78" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="78" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a03bdf7fb381a413c822b653141297166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenStringUtilsTests, TestWideMatrix)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenStringUtilsTests" kindref="compound">EigenStringUtilsTests</ref></type>
        </param>
        <param>
          <type>TestWideMatrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="79" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a00820123e4d2b0baa2d5ad9fe63847b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenStringUtilsTests, TestLargeMatrix)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenStringUtilsTests" kindref="compound">EigenStringUtilsTests</ref></type>
        </param>
        <param>
          <type>TestLargeMatrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" line="80" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1acc22292eb4727c1c8b8bc695ac26adab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(RangeTests, TestConstructors)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1RangeTests" kindref="compound">RangeTests</ref></type>
        </param>
        <param>
          <type>TestConstructors</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/RangeTests.cc" line="76" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/RangeTests.cc" bodystart="76" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7c2f37540d1339e205926ead0fa7e32e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(SliceTests, TestConstructors)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1SliceTests" kindref="compound">SliceTests</ref></type>
        </param>
        <param>
          <type>TestConstructors</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/SliceTests.cc" line="98" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SliceTests.cc" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae81ccd24bfdadf4e5177cf5e80ef00e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(SliceTests, TestToSeq)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1SliceTests" kindref="compound">SliceTests</ref></type>
        </param>
        <param>
          <type>TestToSeq</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/SliceTests.cc" line="99" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SliceTests.cc" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7666922c5bf0baafea7dabc47b1f2765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(SphericalDirectionTests, TestParseDirections)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1SphericalDirectionTests" kindref="compound">SphericalDirectionTests</ref></type>
        </param>
        <param>
          <type>TestParseDirections</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc" line="44" column="1" bodyfile="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc" bodystart="44" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a118efcaee21d38b9116e3d3f55cca9c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(StreamOutTypeTests, TestParseStreamOutType)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1StreamOutTypeTests" kindref="compound">StreamOutTypeTests</ref></type>
        </param>
        <param>
          <type>TestParseStreamOutType</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc" line="43" column="1" bodyfile="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac5057707dd300babf25ef9e07fca2b1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(VerbosityTests, TestParseVerbosity)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1VerbosityTests" kindref="compound">VerbosityTests</ref></type>
        </param>
        <param>
          <type>TestParseVerbosity</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc" line="46" column="1" bodyfile="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7cad7c942a8500043e8d93abf7ee306e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>::testing::AssertionResult</type>
        <definition>::testing::AssertionResult icrar::AttributeEquals</definition>
        <argsstring>(MyObject const &amp;obj, T value)</argsstring>
        <name>AttributeEquals</name>
        <param>
          <type>MyObject const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/gtest_helper.h" line="9" column="1" bodyfile="src/icrar/leap-accelerate/tests/gtest_helper.h" bodystart="9" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab92be304c09ae8e3a8912d1cfa85e0ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, DISABLED_TestCudaPseudoInverse23A)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaPseudoInverse23A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="287" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="287" bodyend="287"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a986a4a251c5d799f5bb6949d0f72d2f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, DISABLED_TestCudaPseudoInverse23S)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaPseudoInverse23S</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="288" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="288" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af2d17fa216ffafb0bfd8ece57623f49e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse32Degenerate)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse32Degenerate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="289" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="289" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1f884030fe8f17848daa8caed1e7497b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse32A)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse32A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="290" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7fb758766965bb82f8ccebdecc9ad032" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse32S)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse32S</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="291" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="291" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac7d9d163743e9928bd9241f10c0e5241" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse33A)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse33A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="292" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7fcdc5473c71456d9e69cc4a307e9f17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse33S)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse33S</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="293" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="293" bodyend="293"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7d8d08750e0d89c3b083aadb05d8bf11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse42A)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse42A</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="294" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="294" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6ccd42293463f4a6a333125c2ef0926b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverse42S)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverse42S</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="295" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="295" bodyend="295"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a273d13c80ad6380d6d1cca656dd4fdb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverseMWA)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverseMWA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="296" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae0ea0a21b1e54e28e9ecdc60ff30e281" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaSVDMatmulAskap)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaSVDMatmulAskap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="297" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="297" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adb7624ebb2dcfe32bdb13285d6148251" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, TestCudaPseudoInverseAskap)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>TestCudaPseudoInverseAskap</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="298" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="298" bodyend="298"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a660fdf4c42e4a3647d4340ffc825aeea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, DISABLED_TestPseudoInverseLarge)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestPseudoInverseLarge</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="299" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="299" bodyend="299"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afe466b3425fd4ff2c8aecd4a38da8f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, DISABLED_TestCudaPseudoInverseLarge)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaPseudoInverseLarge</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="300" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a56c06268da098001db5a506f5b545079" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, DISABLED_TestPseudoInverseSKA)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestPseudoInverseSKA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="301" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aa82386d72ca13d22d13183199fe5516f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixEigenTests, DISABLED_TestCudaPseudoInverseSKA)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixEigenTests" kindref="compound">CudaMatrixEigenTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaPseudoInverseSKA</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" line="302" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a5c396f9e88019040240d81baa73a79da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixTests, TestMatrixMatrixMultiply)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixTests" kindref="compound">CudaMatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixMatrixMultiply</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="204" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="204" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae8312432ff9237f9b22b5f114e82c58b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixTests, TestMatrixMatrixMultiplyTranspose)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixTests" kindref="compound">CudaMatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixMatrixMultiplyTranspose</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="205" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a54dbd1c996820420e2c450bacde04876" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixTests, TestMatrixMatrixMultiplyHermetian)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixTests" kindref="compound">CudaMatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixMatrixMultiplyHermetian</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="206" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="206" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a807c9f254294cda0ac5f677b51c7bdf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixTests, TestMatrixMatrixMultiplyAdd)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixTests" kindref="compound">CudaMatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixMatrixMultiplyAdd</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="207" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="207" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a09089f232e68ec71dbc0f5f831420cc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixTests, TestMatrixMatrixMultiply32)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixTests" kindref="compound">CudaMatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixMatrixMultiply32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="208" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="208" bodyend="208"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac5dc497820cb15ef21fb3faad68c5a17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CudaMatrixTests, TestMatrixVectorMultiply33)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CudaMatrixTests" kindref="compound">CudaMatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixVectorMultiply33</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" line="209" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc" bodystart="209" bodyend="209"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a97f88580682f3262b5f7d1d77e5b3d84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenExtensionsTests, TestWrappedRowSelect32)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenExtensionsTests" kindref="compound">EigenExtensionsTests</ref></type>
        </param>
        <param>
          <type>TestWrappedRowSelect32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="102" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9f2ccb6dc2fcc73d6c2d8223af8a22d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenExtensionsTests, TestWrappedRowSelect64)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenExtensionsTests" kindref="compound">EigenExtensionsTests</ref></type>
        </param>
        <param>
          <type>TestWrappedRowSelect64</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="103" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afbc591105ad7705f0be2329746204c4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenExtensionsTests, TestArg)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenExtensionsTests" kindref="compound">EigenExtensionsTests</ref></type>
        </param>
        <param>
          <type>TestArg</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="104" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7d1bf0afb32531da556dccdecf11a485" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(EigenExtensionsTests, TestNumpySlice)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1EigenExtensionsTests" kindref="compound">EigenExtensionsTests</ref></type>
        </param>
        <param>
          <type>TestNumpySlice</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" line="105" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab18b4a275a9acfc928c926ebcef7531b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestMVDirection)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestMVDirection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="135" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="135" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aef304a26c9f45c5aeab8ececacf69bc7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestConvertVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestConvertVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="137" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="137" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af480fe1114b1ecfc95b054f5631a02e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestConvertMatrix)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestConvertMatrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="138" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab2987690b7f2291671198f627572b212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestConvertUVW)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestConvertUVW</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="140" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad51041c31beba1d6600a8c99c9e0d329" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestConvertUVWVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestConvertUVWVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="141" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a49d44f788861f5877a0ee654211fa729" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestConvertMVDirection)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestConvertMVDirection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="143" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae75cbed06008d44d4d6b23973f1b8898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MathConversionTests, TestConvertMVDirectionVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MathConversionTests" kindref="compound">MathConversionTests</ref></type>
        </param>
        <param>
          <type>TestConvertMVDirectionVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" line="144" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af90d5e7b0ca681c1012c4faab79fc4b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MVuvwTests, TestToMatrix)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MVuvwTests" kindref="compound">MVuvwTests</ref></type>
        </param>
        <param>
          <type>TestToMatrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc" line="41" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6093379b5220727ab9e6bc9d4972e453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(IntegrationTests, DISABLED_TestMeasurementSet)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1IntegrationTests" kindref="compound">IntegrationTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestMeasurementSet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="186" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="186" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7b81a6083cbe182b2acd4ba8c9dd4917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(IntegrationTests, TestReadFromFile)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1IntegrationTests" kindref="compound">IntegrationTests</ref></type>
        </param>
        <param>
          <type>TestReadFromFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="187" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1add1f936b3c8f5901e82e5ac1c780dd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(IntegrationTests, DISABLED_TestCudaBufferCopy)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1IntegrationTests" kindref="compound">IntegrationTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaBufferCopy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="188" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8b1d34169c11f9994d030e8c0010603b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestMeasurementSet)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestMeasurementSet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="252" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab4177a8b51c718471ec81e42a8e3a293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestRawReadFromFile)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestRawReadFromFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="253" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2d81a6a3c0e0c69f86a33d8f370d03f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestReadFromFileOverrideStations)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestReadFromFileOverrideStations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="254" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1a5ca601c33411ceaf8372ca49517a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestChannelWavelengths)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestChannelWavelengths</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="255" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7d4cbcb0430553389207206e2e1027a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestDD)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestDD</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="256" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aa93108e8696cb3e0330ca111e63fbf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestReferenceAntenna)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestReferenceAntenna</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="257" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9d0cb27c7de950a162038124960b482f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, DISABLED_TestCudaBufferCopy)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaBufferCopy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="260" column="1" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1049d4a91985db6b5cd9389a7bd0f748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestHelp)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestHelp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="157" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="157" bodyend="157"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a82880c1c3b9520de6463538036f89cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestSimpleRun)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestSimpleRun</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="158" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="158" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad4aeb1bd5e291ae200b04676d3863b5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestDeprecated)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestDeprecated</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="159" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="159" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a03fe8ebc853b595edd86c653f3ebe7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestReferenceAntenna)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestReferenceAntenna</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="160" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a15f7e7b3eee48841dec7fb333b306b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestMultipleCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestMultipleCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="161" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="161" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af63b08b1971f4f0edd90c2799fa41818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestMultipleCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestMultipleCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="164" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="164" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abad9aae65807f85e222d244e70c116bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, MWACleanTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>MWACleanTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="104" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="104" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a0e983d119994c9721bca36141548d61d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, DISABLED_MWACleanTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>DISABLED_MWACleanTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="106" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a04d39e1d6afa9a4aac443a981ccd650e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, DISABLED_SKACleanTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>DISABLED_SKACleanTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="110" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aba3ddfe382193ae309c4b730b113b4b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, DISABLED_SKACleanTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>DISABLED_SKACleanTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="112" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afab62ec4f75aa22f74c7dd57c3db8307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(JSONHelperTests, TestParseDirectionsEmpty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1JSONHelperTests" kindref="compound">JSONHelperTests</ref></type>
        </param>
        <param>
          <type>TestParseDirectionsEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="59" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="59" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a25f6436e423287b545a6f77fb9979467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(JSONHelperTests, TestParseDirectionsOne)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1JSONHelperTests" kindref="compound">JSONHelperTests</ref></type>
        </param>
        <param>
          <type>TestParseDirectionsOne</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="66" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="66" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a83f098ce1cec79554b52e1567b399c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(JSONHelperTests, TestParseDirectionsFive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1JSONHelperTests" kindref="compound">JSONHelperTests</ref></type>
        </param>
        <param>
          <type>TestParseDirectionsFive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="78" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="78" bodyend="90"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para><para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h" line="28" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1constants" kind="namespace" language="C++">
    <compoundname>icrar::constants</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="constants_8h_1af41ca5d7961c9a134022258ceb11f524" prot="public" static="no" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double icrar::constants::speed_of_light</definition>
        <argsstring/>
        <name>speed_of_light</name>
        <initializer>= 299792458.0</initializer>
        <briefdescription>
<para>Speed of light in meters per second. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/constants.h" line="35" column="1" bodyfile="src/icrar/leap-accelerate/common/constants.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/constants.h" line="30" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1cpu" kind="namespace" language="C++">
    <compoundname>icrar::cpu</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1BeamCalibration" prot="public">icrar::cpu::BeamCalibration</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1Calibration" prot="public">icrar::cpu::Calibration</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1CalibrationCollection" prot="public">icrar::cpu::CalibrationCollection</innerclass>
    <innerclass refid="structicrar_1_1cpu_1_1Constants" prot="public">icrar::cpu::Constants</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1CpuLeapCalibrator" prot="public">icrar::cpu::CpuLeapCalibrator</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1Integration" prot="public">icrar::cpu::Integration</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1MetaData" prot="public">icrar::cpu::MetaData</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="PhaseMatrixFunction_8cc_1aa6fd89b299f64257d57c051198e82ef1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXi &gt;</type>
        <definition>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXi &gt; icrar::cpu::PhaseMatrixFunction</definition>
        <argsstring>(const Eigen::VectorXi &amp;a1, const Eigen::VectorXi &amp;a2, const Eigen::VectorXb &amp;fg, uint32_t refAnt, bool allBaselines)</argsstring>
        <name>PhaseMatrixFunction</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>const Eigen::VectorXb &amp;</type>
          <declname>fg</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>refAnt</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>allBaselines</declname>
        </param>
        <briefdescription>
<para>Form Phase Matrix Given the antenna lists from MS and (optionally) RefAnt &amp; Map: If non-negative RefAnt is provided it only forms the matrix for baselines with that antenna. If True Map is provided it returns the index map for the matrix (only useful if RefAnt set). </para>        </briefdescription>
        <detaileddescription>
<para>This function generates and returns the linear matrix for the phase calibration (only) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a1</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes of 1st antenna of each baselines </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes of 2nd antenna of each baselines </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refAnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference antenna (0, 1), -1 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fg</parametername>
</parameternamelist>
<parameterdescription>
<para>a flag map of flagged stations to ignore when true </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;Matrixd, Matrixi&gt; for refAnt = none: first matrix is of size [baselines,stations] and seconds of size[baselines,1] for 0 &lt;= refAnt &lt; stations: first matrix is of size [stations,stations] and seconds of size[stations,1] </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseMatrixFunction.cc" line="37" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseMatrixFunction.cc" bodystart="37" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="math_8h_1a2abfeb2896333719ab5a8538a9c9ca8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>constexpr T</type>
        <definition>constexpr T icrar::cpu::ceil_div</definition>
        <argsstring>(T x, T y)</argsstring>
        <name>ceil_div</name>
        <param>
          <type>T</type>
          <declname>x</declname>
        </param>
        <param>
          <type>T</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Performs integer division but rounds up if there is a remainder. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>integer type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>numerator </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>denominator </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/math.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/math.h" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2matrix__invert_8h_1a485c627d6f71d1b7dddf68f1a8529c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix_T</type>
          </param>
        </templateparamlist>
        <type>Matrix_T</type>
        <definition>Matrix_T icrar::cpu::SVDPseudoInverse</definition>
        <argsstring>(const Matrix_T &amp;a, double epsilon=std::numeric_limits&lt; typename Matrix_T::Scalar &gt;::epsilon())</argsstring>
        <name>SVDPseudoInverse</name>
        <param>
          <type>const Matrix_T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>std::numeric_limits&lt; typename Matrix_T::Scalar &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Calculates the pseudo_inverse matrix of size N * M for a given M * N matrix. Satisfies the equation A = A * Ah * A. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix_T </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" line="51" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" bodystart="51" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2matrix__invert_8h_1a71daa0717b214b8d6d0d90f641a26643" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::cpu::pseudo_inverse</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;a)</argsstring>
        <name>pseudo_inverse</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Invert as a function If non-negative RefAnt is provided it only forms the matrix for baselines with that antenna. </para>        </briefdescription>
        <detaileddescription>
<para>This function generates and returns the inverse of the linear matrix to solve for the phase calibration (only) given a MS. The MS is used to fill the columns of the matrix, based on the baselines in the MS (and RefAnt if given)</para><para>The output will be the inverse matrix to cross with the observation vector.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" line="72" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" bodystart="72" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" line="66" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1cuda" kind="namespace" language="C++">
    <compoundname>icrar::cuda</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1ComputeDevice" prot="public">icrar::cuda::ComputeDevice</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1ConstantBuffer" prot="public">icrar::cuda::ConstantBuffer</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1CudaLeapCalibrator" prot="public">icrar::cuda::CudaLeapCalibrator</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1device__matrix" prot="public">icrar::cuda::device_matrix</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1device__tensor" prot="public">icrar::cuda::device_tensor</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1device__vector" prot="public">icrar::cuda::device_vector</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceIntegration" prot="public">icrar::cuda::DeviceIntegration</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceMetaData" prot="public">icrar::cuda::DeviceMetaData</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DirectionBuffer" prot="public">icrar::cuda::DirectionBuffer</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1HostIntegration" prot="public">icrar::cuda::HostIntegration</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1HostMetaData" prot="public">icrar::cuda::HostMetaData</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" prot="public" static="no">
        <name>JobType</name>
        <enumvalue id="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149a7fc56270e7a70fa81a5935b72eacbe29" prot="public">
          <name>A</name>
          <initializer>= 'A'</initializer>
          <briefdescription>
<para>All - Entire dense matrix is used. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149a5dbc98dcc983a70728bd082d1a47546e" prot="public">
          <name>S</name>
          <initializer>= 'S'</initializer>
          <briefdescription>
<para>Slim/Thin - Minimal matrix dimensions. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Corresponds to job types of CusolverDn API (e.g. cusolverDnDgesvd) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_invert.h" line="42" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_invert.h" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceicrar_1_1cuda_1a25db84df545724bfa1db295cc7e0cd91" prot="public" static="no">
        <name>MatrixOp</name>
        <enumvalue id="namespaceicrar_1_1cuda_1a25db84df545724bfa1db295cc7e0cd91afea087517c26fadd409bd4b9dc642555" prot="public">
          <name>normal</name>
          <initializer>= CUBLAS_OP_N</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1cuda_1a25db84df545724bfa1db295cc7e0cd91a382eb179a7d78f25d89c085988b37e95" prot="public">
          <name>transpose</name>
          <initializer>= CUBLAS_OP_T</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1cuda_1a25db84df545724bfa1db295cc7e0cd91aaf6a1e12d9ef31476ad40f4770976e0f" prot="public">
          <name>hermitian</name>
          <initializer>= CUBLAS_OP_C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1cuda_1a25db84df545724bfa1db295cc7e0cd91a9dbd3dc34d5da4e6d158a3240f6d6a2e" prot="public">
          <name>conjugate</name>
          <initializer>= CUBLAS_OP_T | CUBLAS_OP_C</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_op.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_op.h" bodystart="33" bodyend="39"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceicrar_1_1cuda_1a1c6320a12b2160935ecd68e4f0403d5e" prot="public" static="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor</ref>&lt; T, 3 &gt;</type>
        <definition>using icrar::cuda::device_tensor3 = typedef device_tensor&lt;T, 3&gt;</definition>
        <argsstring/>
        <name>device_tensor3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="231" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1_1cuda_1ab3bcb459af29b4401773eed66d39029e" prot="public" static="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor" kindref="compound">device_tensor</ref>&lt; T, 4 &gt;</type>
        <definition>using icrar::cuda::device_tensor4 = typedef device_tensor&lt;T, 4&gt;</definition>
        <argsstring/>
        <name>device_tensor4</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="233" column="1" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1a085268604c58e14f6902f8fa5e83cdd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cuda::IsDegenerate</definition>
        <argsstring>(const Eigen::MatrixXd &amp;identity, double tolerance)</argsstring>
        <name>IsDegenerate</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>identity</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" line="258" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" bodystart="258" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1a45587c9d4553720ae0ed166586e33c99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::CalcDeltaPhase</definition>
        <argsstring>(const device_matrix&lt; double &gt; &amp;A, const device_vector&lt; double &gt; &amp;cal1, const device_matrix&lt; std::complex&lt; double &gt;&gt; &amp;avgData, device_matrix&lt; double &gt; &amp;deltaPhase)</argsstring>
        <name>CalcDeltaPhase</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>A</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt; &amp;</type>
          <declname>cal1</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>avgData</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deltaPhase</declname>
        </param>
        <briefdescription>
<para>Computes the phase delta vector for the first polarization of avgData. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para>Antenna matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cal1</parametername>
</parameternamelist>
<parameterdescription>
<para>cal1 matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avgData</parametername>
</parameternamelist>
<parameterdescription>
<para>averaged visibilities </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaPhase</parametername>
</parameternamelist>
<parameterdescription>
<para>output deltaPhase vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/ComputePhaseDeltaKernel.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1a37252f2d393bf203d44e2e34e845e5fe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::GenerateDeltaPhaseColumn</definition>
        <argsstring>(const device_matrix&lt; double &gt; &amp;deltaPhase, device_vector&lt; double &gt; &amp;deltaPhaseColumn)</argsstring>
        <name>GenerateDeltaPhaseColumn</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deltaPhase</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt; &amp;</type>
          <declname>deltaPhaseColumn</declname>
        </param>
        <briefdescription>
<para>Copies the first column of deltaPhase into deltaPhaseColumn. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>deltaPhase</parametername>
</parameternamelist>
<parameterdescription>
<para>The delta phase matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deltaPhaseColumn</parametername>
</parameternamelist>
<parameterdescription>
<para>The output delta phase vector/column </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/CopyPhaseDeltaKernel.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1a629e6912c6d1c8b6193b78522b5e09ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::Empty</definition>
        <argsstring>()</argsstring>
        <name>Empty</name>
        <briefdescription>
<para>An empty kernel for testing cuda configurations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/EmptyKernel.h" line="35" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1ae82cf880bbdf7139d57f3ddb63a68668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::AvgDataToPhaseAngles</definition>
        <argsstring>(const device_vector&lt; int &gt; &amp;I1, const device_matrix&lt; std::complex&lt; double &gt;&gt; &amp;avgData, device_vector&lt; double &gt; &amp;phaseAnglesI1)</argsstring>
        <name>AvgDataToPhaseAngles</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;</type>
          <declname>I1</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; std::complex&lt; double &gt;&gt; &amp;</type>
          <declname>avgData</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt; &amp;</type>
          <declname>phaseAnglesI1</declname>
        </param>
        <briefdescription>
<para>Copies the argument of the 1st column/polarization in avgData to phaseAnglesI1. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>I1</parametername>
</parameternamelist>
<parameterdescription>
<para>the index vector for unflagged antennas </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>avgData</parametername>
</parameternamelist>
<parameterdescription>
<para>the averaged data matrix </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>phaseAnglesI1</parametername>
</parameternamelist>
<parameterdescription>
<para>the output phaseAngles vector </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/PolarizationsToPhaseAnglesKernel.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1aaf51381d25cede8e027ce1b8f23dc601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::RotateVisibilities</definition>
        <argsstring>(DeviceIntegration &amp;integration, DeviceMetaData &amp;metadata)</argsstring>
        <name>RotateVisibilities</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceIntegration" kindref="compound">DeviceIntegration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Calculates avgData in metadata. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para>the input visibilities to integrate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>the metadata container </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/RotateVisibilitiesKernel.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1af9a39de04fb4be5cfe9d58713b135f71" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::cuda::pseudo_inverse</definition>
        <argsstring>(cusolverDnHandle_t cusolverHandle, cublasHandle_t cublasHandle, const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;a, const JobType jobtype=JobType::S)</argsstring>
        <name>pseudo_inverse</name>
        <param>
          <type>cusolverDnHandle_t</type>
          <declname>cusolverHandle</declname>
        </param>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublasHandle</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; double, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">JobType</ref></type>
          <declname>jobtype</declname>
          <defval><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149a5dbc98dcc983a70728bd082d1a47546e" kindref="member">JobType::S</ref></defval>
        </param>
        <briefdescription>
<para>Computes the moore penrose pseudo inverse where A'A = I (left inverse) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cusolverHandle</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cublasHandle</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jobtype</parametername>
</parameternamelist>
<parameterdescription>
<para>SVD matrix dimension type </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Matrix&lt;double, Eigen::Dynamic, Eigen::Dynamic&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_invert.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1ae9e3639c84eadaec4e19936ca24c01e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::tuple&lt; <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt;, <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt;, <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &gt;</type>
        <definition>std::tuple&lt;device_matrix&lt;double&gt;, device_vector&lt;double&gt;, device_matrix&lt;double&gt; &gt; icrar::cuda::svd</definition>
        <argsstring>(cusolverDnHandle_t cusolverHandle, const device_matrix&lt; double &gt; &amp;deviceA, const JobType jobType)</argsstring>
        <name>svd</name>
        <param>
          <type>cusolverDnHandle_t</type>
          <declname>cusolverHandle</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>deviceA</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">JobType</ref></type>
          <declname>jobType</declname>
        </param>
        <briefdescription>
<para>Computes the U, S and Vt values of matrix singular value decomposition. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cusolverHandle</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>deviceA</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jobType</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::tuple&lt;device_matrix&lt;double&gt;, device_vector&lt;double&gt;, device_matrix&lt;double&gt;&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_invert.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1af97f4e9b50dc97d3a165a09484ebfa5e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt;</type>
        <definition>device_matrix&lt;double&gt; icrar::cuda::pseudo_inverse</definition>
        <argsstring>(cusolverDnHandle_t cusolverHandle, cublasHandle_t cublasHandle, const device_matrix&lt; double &gt; &amp;matrix, const JobType jobType=JobType::S)</argsstring>
        <name>pseudo_inverse</name>
        <param>
          <type>cusolverDnHandle_t</type>
          <declname>cusolverHandle</declname>
        </param>
        <param>
          <type>cublasHandle_t</type>
          <declname>cublasHandle</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref>&lt; double &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149" kindref="member">JobType</ref></type>
          <declname>jobType</declname>
          <defval><ref refid="namespaceicrar_1_1cuda_1aaa770f7d3a8e055617130d04fca2b149a5dbc98dcc983a70728bd082d1a47546e" kindref="member">JobType::S</ref></defval>
        </param>
        <briefdescription>
<para>Performs matrix inversion using cusolver and cublas. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cusolverHandle</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cublasHandle</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>jobType</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>device_matrix&lt;double&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_invert.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1cuda_1af7150cd2733207cfeeb05af47e857835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cublasOperation_t</type>
        <definition>cublasOperation_t icrar::cuda::ToCublasOp</definition>
        <argsstring>(MatrixOp op)</argsstring>
        <name>ToCublasOp</name>
        <param>
          <type>MatrixOp</type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Converts a matrix operation to a cublas operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>op</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cublasOperation_t </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_op.h" line="47" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>cuda </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc" line="72" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1detail" kind="namespace" language="C++">
    <compoundname>icrar::detail</compoundname>
    <innerclass refid="structicrar_1_1detail_1_1__fixed" prot="public">icrar::detail::_fixed</innerclass>
    <innerclass refid="structicrar_1_1detail_1_1__memory__amount" prot="public">icrar::detail::_memory_amount</innerclass>
    <innerclass refid="structicrar_1_1detail_1_1__microseconds__amount" prot="public">icrar::detail::_microseconds_amount</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="ioutils_8h_1af8877e48b78c4314232534cec724bdb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
          <param>
            <type>typename VT</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; T &gt; &amp;</type>
        <definition>std::basic_ostream&lt;T&gt;&amp; icrar::detail::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; T &gt; &amp;os, detail::_fixed&lt; N, VT &gt; v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; T &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="structicrar_1_1detail_1_1__fixed" kindref="compound">detail::_fixed</ref>&lt; N, VT &gt;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="56" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="ioutils_8h_1a66533bb13d5ffb609e0def99b1a2ddef" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; T &gt; &amp;</type>
        <definition>std::basic_ostream&lt;T&gt;&amp; icrar::detail::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; T &gt; &amp;os, const detail::_memory_amount &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; T &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1detail_1_1__memory__amount" kindref="compound">detail::_memory_amount</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="60" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="81" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="ioutils_8h_1a232976902d3e250f9ba442fde9856331" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; T &gt; &amp;</type>
        <definition>std::basic_ostream&lt;T&gt;&amp; icrar::detail::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; T &gt; &amp;os, const detail::_microseconds_amount &amp;t)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; T &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1detail_1_1__microseconds__amount" kindref="compound">detail::_microseconds_amount</ref> &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="60" column="1" bodyfile="src/icrar/leap-accelerate/core/memory/ioutils.h" bodystart="120" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/ioutils.h" line="32" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1log" kind="namespace" language="C++">
    <compoundname>icrar::log</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" prot="public" static="no">
        <name>Verbosity</name>
        <enumvalue id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5adf6402fd9ecc60f5a2159fdf45711cd4" prot="public">
          <name>fatal</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>brief Unexpected execution path, report issue to repo owner </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5acb5e100e5a9a3e7f6d1fd97512215282" prot="public">
          <name>error</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Knwon execution error, address exception message before reporting. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5a1ea4c3ab05ee0c6d4de30740443769cb" prot="public">
          <name>warn</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Automatically resolved user exception. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5acaf9b6b99962bf5c2264824231d7a40c" prot="public">
          <name>info</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Regular execution reporting. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5aad42f6697b035b7580e4fef93be20b4d" prot="public">
          <name>debug</name>
          <initializer>= 4</initializer>
          <briefdescription>
<para>Debug mode reporting. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5a04a75036e9d520bb983c5ed03b8d0182" prot="public">
          <name>trace</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>Developer targeted reporting. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Selects the reporting level filter for log messages. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/Verbosity.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/core/log/Verbosity.h" bodystart="35" bodyend="43"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceicrar_1_1log_1adec6ca6f08fc557062202fa64d6bdf7d" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool icrar::log::logging_initialized</definition>
        <argsstring/>
        <name>logging_initialized</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/logging.cc" line="43" column="1" bodyfile="src/icrar/leap-accelerate/core/log/logging.cc" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceicrar_1_1log_1a089e64ba9821c1e5713cadf9f58eeb16" prot="public" static="no" mutable="no">
        <type>::boost::log::trivial::severity_level</type>
        <definition>extern::boost::log::trivial::severity_level icrar::log::logging_level</definition>
        <argsstring/>
        <name>logging_level</name>
        <briefdescription>
<para>The logging level set on the application. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/logging.cc" line="44" column="1" bodyfile="src/icrar/leap-accelerate/core/log/logging.cc" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceicrar_1_1log_1a24e42d3e44d553099fc1da92438469bc" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">Verbosity</ref></type>
        <definition>constexpr Verbosity icrar::log::DEFAULT_VERBOSITY</definition>
        <argsstring/>
        <name>DEFAULT_VERBOSITY</name>
        <initializer>= <ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5acaf9b6b99962bf5c2264824231d7a40c" kindref="member">Verbosity::info</ref></initializer>
        <briefdescription>
<para>The default verbosity level with which the logging system is initialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/logging.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/core/log/logging.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceicrar_1_1log_1a4d6481e00ac09a87b0c07ac22d8b8027" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::log::Initialize</definition>
        <argsstring>(Verbosity verbosity)</argsstring>
        <name>Initialize</name>
        <param>
          <type><ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">Verbosity</ref></type>
          <declname>verbosity</declname>
          <defval><ref refid="namespaceicrar_1_1log_1a24e42d3e44d553099fc1da92438469bc" kindref="member">DEFAULT_VERBOSITY</ref></defval>
        </param>
        <briefdescription>
<para>Initializes logging. </para>        </briefdescription>
        <detaileddescription>
<para>Initializes logging singletons.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>verbosity</parametername>
</parameternamelist>
<parameterdescription>
<para>The verbosity to initialize the library with, higher values yield more verbose output. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/logging.cc" line="50" column="1" bodyfile="src/icrar/leap-accelerate/core/log/logging.cc" bodystart="50" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1log_1a9a67ff58395bd2bd5d80e470765ab3fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">Verbosity</ref></type>
        <definition>Verbosity icrar::log::ParseVerbosity</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>ParseVerbosity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parses string argument into an enum, throws an exception otherwise. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ComputeImplementation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/Verbosity.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/core/log/Verbosity.cc" bodystart="31" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1_1log_1a0d6d373b4aba0e95c2dc1a9dd2e8be6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::log::TryParseVerbosity</definition>
        <argsstring>(const std::string &amp;value, Verbosity &amp;out)</argsstring>
        <name>TryParseVerbosity</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespaceicrar_1_1log_1a64937c40dab8544fb3da61818022d9d5" kindref="member">Verbosity</ref> &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if value was converted succesfully, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/log/Verbosity.cc" line="41" column="1" bodyfile="src/icrar/leap-accelerate/core/log/Verbosity.cc" bodystart="41" bodyend="79"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>log </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/log/logging.cc" line="42" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1profiling" kind="namespace" language="C++">
    <compoundname>icrar::profiling</compoundname>
    <innerclass refid="structicrar_1_1profiling_1_1ResourceUsage" prot="public">icrar::profiling::ResourceUsage</innerclass>
    <innerclass refid="classicrar_1_1profiling_1_1timer" prot="public">icrar::profiling::timer</innerclass>
    <innerclass refid="classicrar_1_1profiling_1_1UsageReporter" prot="public">icrar::profiling::UsageReporter</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="resource__usage_8h_1aee5d4431075ce2212f2ea2b1fce9fdb6" prot="public" static="no">
        <type>std::uint64_t</type>
        <definition>using icrar::profiling::usec_t = typedef std::uint64_t</definition>
        <argsstring/>
        <name>usec_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="resource__usage_8cc_1a0e1f848e731492445bb90f134e26d5ad" prot="public" static="yes" mutable="no">
        <type><ref refid="classicrar_1_1profiling_1_1timer" kindref="compound">profiling::timer</ref></type>
        <definition>profiling::timer icrar::profiling::walltime_timer</definition>
        <argsstring/>
        <name>walltime_timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="36" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="resource__usage_8cc_1aa4501526427bb88373f0bb4b2af1ae16" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>usec_t</type>
        <definition>static usec_t icrar::profiling::to_usecs</definition>
        <argsstring>(const struct timeval &amp;t)</argsstring>
        <name>to_usecs</name>
        <param>
          <type>const struct timeval &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="38" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="resource__usage_8cc_1a7321c066dbd289d3a1fb8ff08f3b088b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structicrar_1_1profiling_1_1ResourceUsage" kindref="compound">ResourceUsage</ref></type>
        <definition>ResourceUsage icrar::profiling::get_resource_usage</definition>
        <argsstring>()</argsstring>
        <name>get_resource_usage</name>
        <briefdescription>
<para>Returns the maximum Resident Storage Size of this process. </para>        </briefdescription>
        <detaileddescription>
<para>Returns the maximum Resident Storage Size of this process (i.e., the maximum amountof memory used). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="46" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" bodystart="46" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="resource__usage_8cc_1a200d7f31dac38808c16b708c684be951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
        <definition>std::basic_ostream&lt; CharT &gt; &amp; icrar::profiling::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharT &gt; &amp;os, const ResourceUsage &amp;ru)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; CharT &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1profiling_1_1ResourceUsage" kindref="compound">ResourceUsage</ref> &amp;</type>
          <declname>ru</declname>
        </param>
        <briefdescription>
<para>Stream output operator for instances of ResourceUsage. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="46" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" bodystart="66" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="resource__usage_8cc_1a5a77f1c4f240d13c3da6bf22eec4e202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::basic_ostream&lt; char &gt; &amp;</type>
        <definition>template std::basic_ostream&lt;char&gt;&amp; icrar::profiling::operator&lt;&lt;&lt;char &gt;</definition>
        <argsstring>(std::basic_ostream&lt; char &gt; &amp;os, const ResourceUsage &amp;ru)</argsstring>
        <name>operator&lt;&lt;&lt;char &gt;</name>
        <param>
          <type>std::basic_ostream&lt; char &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1profiling_1_1ResourceUsage" kindref="compound">ResourceUsage</ref> &amp;</type>
          <declname>ru</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="resource__usage_8cc_1ab145d3c90798818d4ae52e4b3b91aaf4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>template std::basic_ostream&lt; wchar_t &gt; &amp;</type>
        <definition>template std::basic_ostream&lt;wchar_t&gt;&amp; icrar::profiling::operator&lt;&lt;&lt;wchar_t &gt;</definition>
        <argsstring>(std::basic_ostream&lt; wchar_t &gt; &amp;os, const ResourceUsage &amp;ru)</argsstring>
        <name>operator&lt;&lt;&lt;wchar_t &gt;</name>
        <param>
          <type>std::basic_ostream&lt; wchar_t &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1profiling_1_1ResourceUsage" kindref="compound">ResourceUsage</ref> &amp;</type>
          <declname>ru</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="timer_8h_1a94cd5961f0ec1c9ceed31a45812bf266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename CharT</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; CharT, Traits &gt; &amp;</type>
        <definition>std::basic_ostream&lt;CharT, Traits&gt;&amp; icrar::profiling::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; CharT, Traits &gt; &amp;os, const timer &amp;timer)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; CharT, Traits &gt; &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1profiling_1_1timer" kindref="compound">timer</ref> &amp;</type>
          <declname>timer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling/timer.h" line="45" column="1" bodyfile="src/icrar/leap-accelerate/core/profiling/timer.h" bodystart="56" bodyend="63"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc" line="35" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceleap__drops" kind="namespace" language="Python">
    <compoundname>leap_drops</compoundname>
    <innernamespace refid="namespaceleap__drops_1_1CallLeap">leap_drops::CallLeap</innernamespace>
    <innernamespace refid="namespaceleap__drops_1_1LeapGather">leap_drops::LeapGather</innernamespace>
    <innernamespace refid="namespaceleap__drops_1_1ProduceConfig">leap_drops::ProduceConfig</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/__init__.py" line="1" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceleap__drops_1_1CallLeap" kind="namespace" language="Python">
    <compoundname>leap_drops::CallLeap</compoundname>
    <innerclass refid="classleap__drops_1_1CallLeap_1_1CallLeap" prot="public">leap_drops::CallLeap::CallLeap</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/CallLeap.py" line="1" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceleap__drops_1_1LeapGather" kind="namespace" language="Python">
    <compoundname>leap_drops::LeapGather</compoundname>
    <innerclass refid="classleap__drops_1_1LeapGather_1_1LeapGather" prot="public">leap_drops::LeapGather::LeapGather</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/LeapGather.py" line="1" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceleap__drops_1_1ProduceConfig" kind="namespace" language="Python">
    <compoundname>leap_drops::ProduceConfig</compoundname>
    <innerclass refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig" prot="public">leap_drops::ProduceConfig::ProduceConfig</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/ProduceConfig.py" line="1" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacestd_1_1literals_1_1complex__literals" kind="namespace" language="C++">
    <compoundname>std::literals::complex_literals</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="64" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacethrust" kind="namespace" language="C++">
    <compoundname>thrust</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacethrust_1aa234baf56acf0b323a3002f8a78c7d4d" prot="public" static="no">
        <type>std::complex&lt; Scalar &gt;</type>
        <definition>using thrust::complex = typedef std::complex&lt;Scalar&gt;</definition>
        <argsstring/>
        <name>complex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="36" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h" line="34" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="_8clang-tidy-to-junit_8py" kind="file" language="Python">
    <compoundname>.clang-tidy-to-junit.py</compoundname>
    <innerclass refid="class_1_1ClangTidyConverter" prot="public">::ClangTidyConverter</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_8clang-tidy-to-junit_8py_1ac63f8261b413e2bc198a0d125dddc8d7" prot="public" static="no" mutable="no">
        <type/>
        <definition>ErrorDescription</definition>
        <argsstring/>
        <name>ErrorDescription</name>
        <initializer>=  collections.namedtuple(
    'ErrorDescription', 'file line column severity error error_identifier description')</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="43" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_8clang-tidy-to-junit_8py_1a19a7b3cd609ad62e14a361b54bbad262" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def main</definition>
        <argsstring>()</argsstring>
        <name>main</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file=".clang-tidy-to-junit.py" line="32" column="1" bodyfile=".clang-tidy-to-junit.py" bodystart="32" bodyend="42"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file=".clang-tidy-to-junit.py"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="deploy_2ReadMe_8md" kind="file" language="Markdown">
    <compoundname>ReadMe.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="deploy/ReadMe.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="docker_2build_2ReadMe_8md" kind="file" language="Markdown">
    <compoundname>ReadMe.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docker/build/ReadMe.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate_2math_2cuda_2ReadMe_8md" kind="file" language="Markdown">
    <compoundname>ReadMe.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/ReadMe.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate_2ReadMe_8md" kind="file" language="Markdown">
    <compoundname>ReadMe.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ReadMe.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="conf_8py" kind="file" language="Python">
    <compoundname>conf.py</compoundname>
    <innernamespace refid="namespaceconf">conf</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/conf.py"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Build_8md" kind="file" language="Markdown">
    <compoundname>Build.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/Build.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Docker_8md" kind="file" language="Markdown">
    <compoundname>Docker.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/Docker.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LeapAccelerateCLI_8md" kind="file" language="Markdown">
    <compoundname>LeapAccelerateCLI.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/LeapAccelerateCLI.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CMakeStyleGuide_8md" kind="file" language="Markdown">
    <compoundname>CMakeStyleGuide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/specs/CMakeStyleGuide.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CPlusPlusStyleGuide_8md" kind="file" language="Markdown">
    <compoundname>CPlusPlusStyleGuide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/specs/CPlusPlusStyleGuide.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaStyleGuide_8md" kind="file" language="Markdown">
    <compoundname>CudaStyleGuide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/specs/CudaStyleGuide.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Submodules_8md" kind="file" language="Markdown">
    <compoundname>Submodules.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/md/Submodules.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="____init_____8py" kind="file" language="Python">
    <compoundname>__init__.py</compoundname>
    <innernamespace refid="namespaceleap__drops">leap_drops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/__init__.py"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CallLeap_8py" kind="file" language="Python">
    <compoundname>CallLeap.py</compoundname>
    <innerclass refid="classleap__drops_1_1CallLeap_1_1CallLeap" prot="public">leap_drops::CallLeap::CallLeap</innerclass>
    <innernamespace refid="namespaceleap__drops_1_1CallLeap">leap_drops::CallLeap</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/CallLeap.py"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LeapGather_8py" kind="file" language="Python">
    <compoundname>LeapGather.py</compoundname>
    <innerclass refid="classleap__drops_1_1LeapGather_1_1LeapGather" prot="public">leap_drops::LeapGather::LeapGather</innerclass>
    <innernamespace refid="namespaceleap__drops_1_1LeapGather">leap_drops::LeapGather</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/LeapGather.py"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ProduceConfig_8py" kind="file" language="Python">
    <compoundname>ProduceConfig.py</compoundname>
    <innerclass refid="classleap__drops_1_1ProduceConfig_1_1ProduceConfig" prot="public">leap_drops::ProduceConfig::ProduceConfig</innerclass>
    <innernamespace refid="namespaceleap__drops_1_1ProduceConfig">leap_drops::ProduceConfig</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/ProduceConfig.py"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap__drops_2README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="testdata_2README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="testdata/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CommandLineTests_8cc" kind="file" language="C++">
    <compoundname>CommandLineTests.cc</compoundname>
    <innerclass refid="classicrar_1_1CommandLineTests" prot="public">icrar::CommandLineTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="E2EPerformanceTests_8cc" kind="file" language="C++">
    <compoundname>E2EPerformanceTests.cc</compoundname>
    <innerclass refid="classicrar_1_1E2EPerformanceTests" prot="public">icrar::E2EPerformanceTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="JSONHelperTests_8cc" kind="file" language="C++">
    <compoundname>JSONHelperTests.cc</compoundname>
    <innerclass refid="classicrar_1_1JSONHelperTests" prot="public">icrar::JSONHelperTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ComputeOptionsDTO_8h" kind="file" language="C++">
    <compoundname>ComputeOptionsDTO.h</compoundname>
    <innerclass refid="structicrar_1_1ComputeOptionsDTO" prot="public">icrar::ComputeOptionsDTO</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/ComputeOptionsDTO.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CpuComputeOptions_8h" kind="file" language="C++">
    <compoundname>CpuComputeOptions.h</compoundname>
    <innerclass refid="classicrar_1_1CpuComputeOptions" prot="public">icrar::CpuComputeOptions</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuComputeOptions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CpuLeapCalibrator_8cc" kind="file" language="C++">
    <compoundname>CpuLeapCalibrator.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceboost_1_1math_1_1constants">boost::math::constants</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="CpuLeapCalibrator_8cc_1a818c17a987f81357f2a8e03f9e3e736b" prot="public" static="no">
        <type>double</type>
        <definition>using Radians =  double</definition>
        <argsstring/>
        <name>Radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" line="60" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CpuLeapCalibrator_8h" kind="file" language="C++">
    <compoundname>CpuLeapCalibrator.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1CpuLeapCalibrator" prot="public">icrar::cpu::CpuLeapCalibrator</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/CpuLeapCalibrator.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PhaseMatrixFunction_8cc" kind="file" language="C++">
    <compoundname>PhaseMatrixFunction.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseMatrixFunction.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PhaseMatrixFunction_8h" kind="file" language="C++">
    <compoundname>PhaseMatrixFunction.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseMatrixFunction.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaComputeOptions_8cc" kind="file" language="C++">
    <compoundname>CudaComputeOptions.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaComputeOptions_8h" kind="file" language="C++">
    <compoundname>CudaComputeOptions.h</compoundname>
    <innerclass refid="classicrar_1_1CudaComputeOptions" prot="public">icrar::CudaComputeOptions</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaComputeOptions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaLeapCalibrator_8cc" kind="file" language="C++">
    <compoundname>CudaLeapCalibrator.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaLeapCalibrator_8h" kind="file" language="C++">
    <compoundname>CudaLeapCalibrator.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1CudaLeapCalibrator" prot="public">icrar::cuda::CudaLeapCalibrator</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/CudaLeapCalibrator.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ComputePhaseDeltaKernel_8h" kind="file" language="C++">
    <compoundname>ComputePhaseDeltaKernel.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/ComputePhaseDeltaKernel.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CopyPhaseDeltaKernel_8h" kind="file" language="C++">
    <compoundname>CopyPhaseDeltaKernel.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/CopyPhaseDeltaKernel.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EmptyKernel_8h" kind="file" language="C++">
    <compoundname>EmptyKernel.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/EmptyKernel.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PolarizationsToPhaseAnglesKernel_8h" kind="file" language="C++">
    <compoundname>PolarizationsToPhaseAnglesKernel.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/PolarizationsToPhaseAnglesKernel.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="RotateVisibilitiesKernel_8h" kind="file" language="C++">
    <compoundname>RotateVisibilitiesKernel.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/RotateVisibilitiesKernel.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ILeapCalibrator_8h" kind="file" language="C++">
    <compoundname>ILeapCalibrator.h</compoundname>
    <innerclass refid="classicrar_1_1ILeapCalibrator" prot="public">icrar::ILeapCalibrator</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/ILeapCalibrator.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LeapCalibratorFactory_8cc" kind="file" language="C++">
    <compoundname>LeapCalibratorFactory.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LeapCalibratorFactory_8h" kind="file" language="C++">
    <compoundname>LeapCalibratorFactory.h</compoundname>
    <innerclass refid="classicrar_1_1LeapCalibratorFactory" prot="public">icrar::LeapCalibratorFactory</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/LeapCalibratorFactory.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Arguments_8cc" kind="file" language="C++">
    <compoundname>Arguments.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/config/Arguments.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Arguments_8h" kind="file" language="C++">
    <compoundname>Arguments.h</compoundname>
    <innerclass refid="structicrar_1_1CLIArgumentsDTO" prot="public">icrar::CLIArgumentsDTO</innerclass>
    <innerclass refid="structicrar_1_1ArgumentsDTO" prot="public">icrar::ArgumentsDTO</innerclass>
    <innerclass refid="classicrar_1_1ArgumentsValidated" prot="public">icrar::ArgumentsValidated</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/config/Arguments.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="constants_8h" kind="file" language="C++">
    <compoundname>constants.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1constants">icrar::constants</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/constants.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__cache_8h" kind="file" language="C++">
    <compoundname>eigen_cache.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/eigen_cache.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__stringutils_8h" kind="file" language="C++">
    <compoundname>eigen_stringutils.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="eigen__stringutils_8h_1aa5a9e0efb03c0d10ffe1e331a148389e" prot="public" static="no" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int pretty_width</definition>
        <argsstring/>
        <name>pretty_width</name>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_stringutils.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/common/eigen_stringutils.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/eigen_stringutils.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="enumutils_8h" kind="file" language="C++">
    <compoundname>enumutils.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/enumutils.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Range_8h" kind="file" language="C++">
    <compoundname>Range.h</compoundname>
    <innerclass refid="classicrar_1_1Range" prot="public">icrar::Range</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Range.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Slice_8cc" kind="file" language="C++">
    <compoundname>Slice.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Slice.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Slice_8h" kind="file" language="C++">
    <compoundname>Slice.h</compoundname>
    <innerclass refid="classicrar_1_1Slice" prot="public">icrar::Slice</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Slice.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SphericalDirection_8cc" kind="file" language="C++">
    <compoundname>SphericalDirection.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/SphericalDirection.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SphericalDirection_8h" kind="file" language="C++">
    <compoundname>SphericalDirection.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/SphericalDirection.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="stream__extensions_8h" kind="file" language="C++">
    <compoundname>stream_extensions.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="stream__extensions_8h_1a4248026e7d2c0f6a4ea723b16668531e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::set&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Prints a set of streamable values. </para>        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA <parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>streamable type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>set </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::ostream&amp; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/stream_extensions.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/common/stream_extensions.h" bodystart="41" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="stream__extensions_8h_1a1692251d6c5e09454d461d180413cfd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::map&lt; T, S &gt; &amp;m)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::map&lt; T, S &gt; &amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/stream_extensions.h" line="53" column="1" bodyfile="src/icrar/leap-accelerate/common/stream_extensions.h" bodystart="53" bodyend="61"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/stream_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Tensor3X_8h" kind="file" language="C++">
    <compoundname>Tensor3X.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Tensor3X.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="compute__implementation_8cc" kind="file" language="C++">
    <compoundname>compute_implementation.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/compute_implementation.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="compute__implementation_8h" kind="file" language="C++">
    <compoundname>compute_implementation.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/compute_implementation.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="git__revision_8h" kind="file" language="C++">
    <compoundname>git_revision.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para><para>Stores the version information of leap-accelerate </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/git_revision.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="InputType_8cc" kind="file" language="C++">
    <compoundname>InputType.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/InputType.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="InputType_8h" kind="file" language="C++">
    <compoundname>InputType.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/InputType.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="logging_8cc" kind="file" language="C++">
    <compoundname>logging.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/log/logging.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="logging_8h" kind="file" language="C++">
    <compoundname>logging.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/log/logging.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Verbosity_8cc" kind="file" language="C++">
    <compoundname>Verbosity.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/log/Verbosity.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Verbosity_8h" kind="file" language="C++">
    <compoundname>Verbosity.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/log/Verbosity.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ioutils_8h" kind="file" language="C++">
    <compoundname>ioutils.h</compoundname>
    <innerclass refid="structicrar_1_1detail_1_1__fixed" prot="public">icrar::detail::_fixed</innerclass>
    <innerclass refid="structicrar_1_1detail_1_1__memory__amount" prot="public">icrar::detail::_memory_amount</innerclass>
    <innerclass refid="structicrar_1_1detail_1_1__microseconds__amount" prot="public">icrar::detail::_microseconds_amount</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1detail">icrar::detail</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/ioutils.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="system__memory_8cc" kind="file" language="C++">
    <compoundname>system_memory.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/system_memory.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="system__memory_8h" kind="file" language="C++">
    <compoundname>system_memory.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/system_memory.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="resource__usage_8cc" kind="file" language="C++">
    <compoundname>resource_usage.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1profiling">icrar::profiling</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="resource__usage_8h" kind="file" language="C++">
    <compoundname>resource_usage.h</compoundname>
    <innerclass refid="structicrar_1_1profiling_1_1ResourceUsage" prot="public">icrar::profiling::ResourceUsage</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1profiling">icrar::profiling</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/resource_usage.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="timer_8h" kind="file" language="C++">
    <compoundname>timer.h</compoundname>
    <innerclass refid="classicrar_1_1profiling_1_1timer" prot="public">icrar::profiling::timer</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1profiling">icrar::profiling</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/timer.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="UsageReporter_8cc" kind="file" language="C++">
    <compoundname>UsageReporter.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1profiling">icrar::profiling</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="UsageReporter_8h" kind="file" language="C++">
    <compoundname>UsageReporter.h</compoundname>
    <innerclass refid="classicrar_1_1profiling_1_1UsageReporter" prot="public">icrar::profiling::UsageReporter</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1profiling">icrar::profiling</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/UsageReporter.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="stream__out__type_8cc" kind="file" language="C++">
    <compoundname>stream_out_type.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/stream_out_type.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="stream__out__type_8h" kind="file" language="C++">
    <compoundname>stream_out_type.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/stream_out_type.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="version_8cc" kind="file" language="C++">
    <compoundname>version.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para><para>Stores the version information of leap-accelerate </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/version.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="version_8h" kind="file" language="C++">
    <compoundname>version.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para><para>Stores the version information of leap-accelerate </para>    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/version.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="compute__device_8h" kind="file" language="C++">
    <compoundname>compute_device.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1ComputeDevice" prot="public">icrar::cuda::ComputeDevice</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/compute_device.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cuda__info_8h" kind="file" language="C++">
    <compoundname>cuda_info.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="cuda__info_8h_1a039eafcb10fbb53e90d756f31d504312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetCudaDeviceCount</definition>
        <argsstring>()</argsstring>
        <name>GetCudaDeviceCount</name>
        <briefdescription>
<para>Gets the number of available Cuda Devices. </para>        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA <simplesect kind="return"><para>int </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/cuda_info.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="cuda__info_8h_1a1c5a24b76656425742bd0d7a833c7f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printCudaVersion</definition>
        <argsstring>()</argsstring>
        <name>printCudaVersion</name>
        <briefdescription>
<para>Prints running cuda device info to the output log. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/cuda_info.h" line="37" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/cuda_info.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="device__matrix_8h" kind="file" language="C++">
    <compoundname>device_matrix.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__matrix" prot="public">icrar::cuda::device_matrix</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_matrix.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="device__tensor_8h" kind="file" language="C++">
    <compoundname>device_tensor.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__tensor" prot="public">icrar::cuda::device_tensor</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_tensor.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="device__vector_8h" kind="file" language="C++">
    <compoundname>device_vector.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__vector" prot="public">icrar::cuda::device_vector</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_vector.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="exception_8cc" kind="file" language="C++">
    <compoundname>exception.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/exception/exception.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="exception_8h" kind="file" language="C++">
    <compoundname>exception.h</compoundname>
    <innerclass refid="classicrar_1_1exception" prot="public">icrar::exception</innerclass>
    <innerclass refid="classicrar_1_1invalid__argument__exception" prot="public">icrar::invalid_argument_exception</innerclass>
    <innerclass refid="classicrar_1_1file__exception" prot="public">icrar::file_exception</innerclass>
    <innerclass refid="classicrar_1_1json__exception" prot="public">icrar::json_exception</innerclass>
    <innerclass refid="classicrar_1_1not__implemented__exception" prot="public">icrar::not_implemented_exception</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/exception/exception.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casacore__helper_8h" kind="file" language="C++">
    <compoundname>casacore_helper.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casacore_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="complex__extensions_8h" kind="file" language="C++">
    <compoundname>complex_extensions.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/complex_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__extensions_8cc" kind="file" language="C++">
    <compoundname>eigen_extensions.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__extensions_8h" kind="file" language="C++">
    <compoundname>eigen_extensions.h</compoundname>
    <innernamespace refid="namespacethrust">thrust</innernamespace>
    <innernamespace refid="namespaceEigen">Eigen</innernamespace>
    <innernamespace refid="namespaceEigen_1_1internal">Eigen::internal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/eigen_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math_8h" kind="file" language="C++">
    <compoundname>math.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/math.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2matrix__invert_8h" kind="file" language="C++">
    <compoundname>matrix_invert.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/matrix_invert.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cuda_2matrix__invert_8h" kind="file" language="C++">
    <compoundname>matrix_invert.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_invert.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MatrixBaseAddons_8h" kind="file" language="C++">
    <compoundname>MatrixBaseAddons.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="MatrixBaseAddons_8h_1a00cf543f085bbbe7b413cfe8ac6f6c2b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto numpy</definition>
        <argsstring>(Index start, Index end, Index step)</argsstring>
        <name>numpy</name>
        <param>
          <type>Index</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>Provides numpy behaviour slicing. </para>        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USASee <ulink url="http://eigen.tuxfamily.org/dox-3.2/TopicCustomizingEigen.html">http://eigen.tuxfamily.org/dox-3.2/TopicCustomizingEigen.html</ulink> for details on extending Eigen3. <simplesect kind="note"><para>Eigen does not allow the increment to be a symbolic expression but numpy can</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Index</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>ArithmaticSequence </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="39" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="39" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1a1eedb6fffb4622395781cedb1403b224" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto numpy_rows</definition>
        <argsstring>(Index start, Index end, Index step)</argsstring>
        <name>numpy_rows</name>
        <param>
          <type>Index</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="61" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1ac43d3416f60157ec734e28ced0f0ca9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto numpy_cols</definition>
        <argsstring>(Index start, Index end, Index step)</argsstring>
        <name>numpy_cols</name>
        <param>
          <type>Index</type>
          <declname>start</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>end</declname>
        </param>
        <param>
          <type>Index</type>
          <declname>step</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="69" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="69" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1a63acead3ad455178c61cce1ab5c3876c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto numpy</definition>
        <argsstring>(std::initializer_list&lt; std::initializer_list&lt; Index &gt;&gt; slice)</argsstring>
        <name>numpy</name>
        <param>
          <type>std::initializer_list&lt; std::initializer_list&lt; Index &gt;&gt;</type>
          <declname>slice</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="77" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="77" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1a4bd186484973012ef7be4ff8070d0f0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherIndex</type>
          </param>
        </templateparamlist>
        <type>Matrix&lt; OtherIndex, Dynamic, 1 &gt;</type>
        <definition>Matrix&lt;OtherIndex, Dynamic, 1&gt; wrap_indices</definition>
        <argsstring>(const Matrix&lt; OtherIndex, Dynamic, 1 &gt; &amp;indices) const</argsstring>
        <name>wrap_indices</name>
        <param>
          <type>const Matrix&lt; OtherIndex, Dynamic, 1 &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
<para>Wraps around negative indices for slicing an eigen matrix. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Vector</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of row indices to select </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowIndices</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="95" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="95" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1ad61fdac62ed74e5f9a33b3a452bd9ddc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherIndex</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto wrapped_row_select</definition>
        <argsstring>(const Matrix&lt; OtherIndex, Dynamic, 1 &gt; &amp;rowIndices) const</argsstring>
        <name>wrapped_row_select</name>
        <param>
          <type>const Matrix&lt; OtherIndex, Dynamic, 1 &gt; &amp;</type>
          <declname>rowIndices</declname>
        </param>
        <briefdescription>
<para>A pythonic row selection operation that selects the rows of a matrix using index wrap around. Negative indexes select from the bottom of the matrix with -1 representing the last row. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OtherIndex</parametername>
</parameternamelist>
<parameterdescription>
<para>a signed integer type </para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rowIndices</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>auto </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="122" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1a2f7f5fce2a2ffe91be19eb67bb53d57c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double standard_deviation</definition>
        <argsstring>() const</argsstring>
        <name>standard_deviation</name>
        <briefdescription>
<para>Computes the element-wise standard deviation. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Scalar </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="137" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="137" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1ac95700f055ceb916261944f05d85dccb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherDerived</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool near</definition>
        <argsstring>(const MatrixBase&lt; OtherDerived &gt; &amp;other, double tolerance) const</argsstring>
        <name>near</name>
        <param>
          <type>const MatrixBase&lt; OtherDerived &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
<para>Performs elementwise comparison of matrix elements to determine near equality within the specified threshold. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>OtherDerived</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tolerance</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para></simplesect>
<simplesect kind="return"><para>false </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="159" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="159" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="MatrixBaseAddons_8h_1aea62362f49bb4b85811873512ca9dcff" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>auto</type>
        <definition>auto arg</definition>
        <argsstring>() const</argsstring>
        <name>arg</name>
        <briefdescription>
<para>Computes a matrix of the component-wise angles/args from the respective complex values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" line="181" column="1" bodyfile="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h" bodystart="181" bodyend="181"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/MatrixBaseAddons.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix_8h" kind="file" language="C++">
    <compoundname>matrix.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__add_8h" kind="file" language="C++">
    <compoundname>matrix_add.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_add.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__multiply_8h" kind="file" language="C++">
    <compoundname>matrix_multiply.h</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="matrix__multiply_8h_1ad3877150eefcca80d8dd7e762d9ce64e" prot="public" static="no">
        <type>int #endif namespace icrar { namespace cuda { __host__ void mat_mul(cublasHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const double *a, const double *b, double *out)</type>
        <definition>using cublasLtHandle_t =  int #endif namespace icrar { namespace cuda { __host__ void mat_mul(cublasHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const double* a, const double* b, double* out)</definition>
        <argsstring/>
        <name>cublasLtHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="matrix__multiply_8h_1a033ec6e32fd2245ba556c79f4839c862" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul</definition>
        <argsstring>(cublasHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const float *a, const float *b, float *out)</argsstring>
        <name>mat_mul</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a7c91ed2d3f22975e7982bd7b242fa959" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul</definition>
        <argsstring>(cublasHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const int *a, const int *b, int *out)</argsstring>
        <name>mat_mul</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a7a72ba8d6a0fb2413cc22d7aecaf0c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul</definition>
        <argsstring>(cublasLtHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const double *a, const double *b, double *out)</argsstring>
        <name>mat_mul</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1aa1a06cf7238974cc2814f67956b61f2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul</definition>
        <argsstring>(cublasLtHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const float *a, const float *b, float *out)</argsstring>
        <name>mat_mul</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1ab320badd2dc6bd70a011ce60cc07ec9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul</definition>
        <argsstring>(cublasLtHandle_t handle, MatrixOp transa, MatrixOp transb, const size_t m, const size_t n, const size_t k, const int *a, const int *b, int *out)</argsstring>
        <name>mat_mul</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a3a078a44d4cd338e0704db2644ff579e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply</definition>
        <argsstring>(cublasHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_vector&lt; T &gt; &amp;b, device_vector&lt; T &gt; &amp;c, MatrixOp transa=MatrixOp::normal, MatrixOp transb=MatrixOp::normal)</argsstring>
        <name>multiply</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>device_vector&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <briefdescription>
<para>Performs matrix-vector multiplication where C = A * B. The transpose and hermetian of A and B can be used instead. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handle</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>c</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transa</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>transb</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="74" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="74" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1adcd4d32b5076cd6d57530bfc9ae19daf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply</definition>
        <argsstring>(cublasHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_matrix&lt; T &gt; &amp;b, device_matrix&lt; T &gt; &amp;c, MatrixOp transa=MatrixOp::normal, MatrixOp transb=MatrixOp::normal)</argsstring>
        <name>multiply</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>device_matrix&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="100" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="100" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a609fb3d4962d85f5092974bb59f9d8d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply</definition>
        <argsstring>(cublasLtHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_vector&lt; T &gt; &amp;b, device_vector&lt; T &gt; &amp;c, MatrixOp transa=MatrixOp::normal, MatrixOp transb=MatrixOp::normal)</argsstring>
        <name>multiply</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>device_vector&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="122" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="122" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1acbd1e2189a47b2a0ba89f9fc9ab05d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply</definition>
        <argsstring>(cublasLtHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_matrix&lt; T &gt; &amp;b, device_matrix&lt; T &gt; &amp;c, MatrixOp transa=MatrixOp::normal, MatrixOp transb=MatrixOp::normal)</argsstring>
        <name>multiply</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>device_matrix&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transa</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <param>
          <type>MatrixOp</type>
          <declname>transb</declname>
          <defval>MatrixOp::normal</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="137" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="137" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a8a61c6bacf0be8e8884f93eeb331c3ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul_add</definition>
        <argsstring>(cublasHandle_t handle, const size_t m, const size_t n, const size_t k, const double *a, const double *b, double *c)</argsstring>
        <name>mat_mul_add</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a3c032666b3f777020d7fabff71ffdae6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul_add</definition>
        <argsstring>(cublasHandle_t handle, const size_t m, const size_t n, const size_t k, const float *a, const float *b, float *c)</argsstring>
        <name>mat_mul_add</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1aace3757c3fabc7ac22582eaadb78033e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul_add</definition>
        <argsstring>(cublasHandle_t handle, const size_t m, const size_t n, const size_t k, const int *a, const int *b, int *c)</argsstring>
        <name>mat_mul_add</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a198523072cd4d166ce4245b78aefd723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul_add</definition>
        <argsstring>(cublasLtHandle_t handle, const size_t m, const size_t n, const size_t k, const double *a, const double *b, const double *c, double *d)</argsstring>
        <name>mat_mul_add</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a4241fb797c6e08705a9ed9c0bf76e7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul_add</definition>
        <argsstring>(cublasLtHandle_t handle, const size_t m, const size_t n, const size_t k, const float *a, const float *b, const float *c, float *d)</argsstring>
        <name>mat_mul_add</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a0dda5fecb696a33c9310fcc7bb551a95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void mat_mul_add</definition>
        <argsstring>(cublasLtHandle_t handle, const size_t m, const size_t n, const size_t k, const int *a, const int *b, const int *c, int *d)</argsstring>
        <name>mat_mul_add</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const size_t</type>
          <declname>k</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1ae52f176d564e47a8c5709e59c640b667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply_add</definition>
        <argsstring>(cublasLtHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_vector&lt; T &gt; &amp;b, const device_vector&lt; T &gt; &amp;c, device_vector&lt; T &gt; &amp;d)</argsstring>
        <name>multiply_add</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const device_vector&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>device_vector&lt; T &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="171" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="171" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1ab763053cdd1f8d94d2dd8dc7dd7ca97a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply_add</definition>
        <argsstring>(cublasHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_matrix&lt; T &gt; &amp;b, device_matrix&lt; T &gt; &amp;c)</argsstring>
        <name>multiply_add</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>device_matrix&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="191" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="191" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1aec3fa15d7f2778b8195b66a05364f556" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply_add</definition>
        <argsstring>(cublasHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_vector&lt; T &gt; &amp;b, device_vector&lt; T &gt; &amp;c)</argsstring>
        <name>multiply_add</name>
        <param>
          <type>cublasHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>device_vector&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="207" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="207" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a5c2edecb714e64ba442a9d41fb876459" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void multiply_add</definition>
        <argsstring>(cublasLtHandle_t handle, const device_matrix&lt; T &gt; &amp;a, const device_matrix&lt; T &gt; &amp;b, const device_matrix&lt; T &gt; &amp;c, device_matrix&lt; T &gt; &amp;d)</argsstring>
        <name>multiply_add</name>
        <param>
          <type>cublasLtHandle_t</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>const device_matrix&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>device_matrix&lt; T &gt; &amp;</type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="224" column="1" bodyfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" bodystart="224" bodyend="241"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__op_8h" kind="file" language="C++">
    <compoundname>matrix_op.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_op.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__transpose_8h" kind="file" language="C++">
    <compoundname>matrix_transpose.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_transpose.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math__conversion_8cc" kind="file" language="C++">
    <compoundname>math_conversion.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/math_conversion.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math__conversion_8h" kind="file" language="C++">
    <compoundname>math_conversion.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/math_conversion.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="vector__extensions_8h" kind="file" language="C++">
    <compoundname>vector_extensions.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector__extensions_8h_1a4b8db62a17e01a839e499a4c59112df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/vector_extensions.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/math/vector_extensions.h" bodystart="33" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/vector_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="band__data_8h" kind="file" language="C++">
    <compoundname>band_data.h</compoundname>
    <innerclass refid="classchannel__info" prot="public">channel_info</innerclass>
    <innerclass refid="classband__data" prot="public">band_data</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/band_data.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="BeamCalibration_8cc" kind="file" language="C++">
    <compoundname>BeamCalibration.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="BeamCalibration_8h" kind="file" language="C++">
    <compoundname>BeamCalibration.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1BeamCalibration" prot="public">icrar::cpu::BeamCalibration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/BeamCalibration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Calibration_8cc" kind="file" language="C++">
    <compoundname>Calibration.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Calibration_8h" kind="file" language="C++">
    <compoundname>Calibration.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1Calibration" prot="public">icrar::cpu::Calibration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/Calibration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CalibrationCollection_8h" kind="file" language="C++">
    <compoundname>CalibrationCollection.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1CalibrationCollection" prot="public">icrar::cpu::CalibrationCollection</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/CalibrationCollection.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Integration_8cc" kind="file" language="C++">
    <compoundname>Integration.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/Integration.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Integration_8h" kind="file" language="C++">
    <compoundname>Integration.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1Integration" prot="public">icrar::cpu::Integration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/Integration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MetaData_8cc" kind="file" language="C++">
    <compoundname>MetaData.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MetaData_8h" kind="file" language="C++">
    <compoundname>MetaData.h</compoundname>
    <innerclass refid="structicrar_1_1cpu_1_1Constants" prot="public">icrar::cpu::Constants</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1MetaData" prot="public">icrar::cpu::MetaData</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MVuvw_8cc" kind="file" language="C++">
    <compoundname>MVuvw.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MVuvw.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MVuvw_8h" kind="file" language="C++">
    <compoundname>MVuvw.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MVuvw.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="DeviceIntegration_8h" kind="file" language="C++">
    <compoundname>DeviceIntegration.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceIntegration" prot="public">icrar::cuda::DeviceIntegration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="DeviceMetaData_8cc" kind="file" language="C++">
    <compoundname>DeviceMetaData.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="DeviceMetaData_8h" kind="file" language="C++">
    <compoundname>DeviceMetaData.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1ConstantBuffer" prot="public">icrar::cuda::ConstantBuffer</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DirectionBuffer" prot="public">icrar::cuda::DirectionBuffer</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceMetaData" prot="public">icrar::cuda::DeviceMetaData</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="HostIntegration_8h" kind="file" language="C++">
    <compoundname>HostIntegration.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1HostIntegration" prot="public">icrar::cuda::HostIntegration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/HostIntegration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="HostMetaData_8h" kind="file" language="C++">
    <compoundname>HostMetaData.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1HostMetaData" prot="public">icrar::cuda::HostMetaData</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/HostMetaData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="visibility_8h" kind="file" language="C++">
    <compoundname>visibility.h</compoundname>
    <innerclass refid="structicrar_1_1visibility" prot="public">icrar::visibility</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/visibility.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MeasurementSet_8cc" kind="file" language="C++">
    <compoundname>MeasurementSet.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/MeasurementSet.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MeasurementSet_8h" kind="file" language="C++">
    <compoundname>MeasurementSet.h</compoundname>
    <innerclass refid="classicrar_1_1MeasurementSet" prot="public">icrar::MeasurementSet</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="pch_8h" kind="file" language="C++">
    <compoundname>pch.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/pch.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="tests_2pch_8h" kind="file" language="C++">
    <compoundname>pch.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/pch.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cli_2tests_2pch_8h" kind="file" language="C++">
    <compoundname>pch.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/pch.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PhaseRotateTestCaseData_8h" kind="file" language="C++">
    <compoundname>PhaseRotateTestCaseData.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTestCaseData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PhaseRotateTests_8cc" kind="file" language="C++">
    <compoundname>PhaseRotateTests.cc</compoundname>
    <innerclass refid="classicrar_1_1PhaseRotateTests" prot="public">icrar::PhaseRotateTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespacestd_1_1literals_1_1complex__literals">std::literals::complex_literals</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EigenStringUtilsTests_8cc" kind="file" language="C++">
    <compoundname>EigenStringUtilsTests.cc</compoundname>
    <innerclass refid="classicrar_1_1EigenStringUtilsTests" prot="public">icrar::EigenStringUtilsTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/common/EigenStringUtilsTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="RangeTests_8cc" kind="file" language="C++">
    <compoundname>RangeTests.cc</compoundname>
    <innerclass refid="classicrar_1_1RangeTests" prot="public">icrar::RangeTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/common/RangeTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SliceTests_8cc" kind="file" language="C++">
    <compoundname>SliceTests.cc</compoundname>
    <innerclass refid="classicrar_1_1SliceTests" prot="public">icrar::SliceTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/common/SliceTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="SphericalDirectionTests_8cc" kind="file" language="C++">
    <compoundname>SphericalDirectionTests.cc</compoundname>
    <innerclass refid="classicrar_1_1SphericalDirectionTests" prot="public">icrar::SphericalDirectionTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/common/SphericalDirectionTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="StreamOutTypeTests_8cc" kind="file" language="C++">
    <compoundname>StreamOutTypeTests.cc</compoundname>
    <innerclass refid="classicrar_1_1StreamOutTypeTests" prot="public">icrar::StreamOutTypeTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/core/StreamOutTypeTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="VerbosityTests_8cc" kind="file" language="C++">
    <compoundname>VerbosityTests.cc</compoundname>
    <innerclass refid="classicrar_1_1VerbosityTests" prot="public">icrar::VerbosityTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/core/VerbosityTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="gtest__helper_8h" kind="file" language="C++">
    <compoundname>gtest_helper.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/gtest_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="model__helper_8h" kind="file" language="C++">
    <compoundname>model_helper.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/helper/model_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="tests_2main_8cc" kind="file" language="C++">
    <compoundname>main.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="tests_2main_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/main.cc" line="26" column="1" bodyfile="src/icrar/leap-accelerate/tests/main.cc" bodystart="26" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/main.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cli_2main_8cc" kind="file" language="C++">
    <compoundname>main.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="cli_2main_8cc_1af607e1cb5cb8dfdc972ade85d822d63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arg_string</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>arg_string</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
<para>Combines command line arguments into a formatted string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="58" column="1" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="58" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="cli_2main_8cc_1aa77dd4d43882ebc7b4a8680e7621d335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string version_information</definition>
        <argsstring>(const char *name)</argsstring>
        <name>version_information</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Displays project version information including git info. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para/></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="74" column="1" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="74" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="cli_2main_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="83" column="1" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="83" bodyend="180"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/main.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cli_2tests_2main_8cc" kind="file" language="C++">
    <compoundname>main.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="cli_2tests_2main_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/main.cc" line="26" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/main.cc" bodystart="26" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/main.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaMatrixEigenTests_8cc" kind="file" language="C++">
    <compoundname>CudaMatrixEigenTests.cc</compoundname>
    <innerclass refid="classicrar_1_1CudaMatrixEigenTests" prot="public">icrar::CudaMatrixEigenTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixEigenTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CudaMatrixTests_8cc" kind="file" language="C++">
    <compoundname>CudaMatrixTests.cc</compoundname>
    <innerclass refid="classicrar_1_1CudaMatrixTests" prot="public">icrar::CudaMatrixTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/cuda/CudaMatrixTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__helper_8cc" kind="file" language="C++">
    <compoundname>eigen_helper.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="eigen__helper_8cc_1a82c5dc51ac5df33c6cd5c2eba647f957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_cd</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;expected, const std::complex&lt; double &gt; &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_cd</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="28" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="28" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a4dacd491dd7782639431841cc9b13273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_near_matrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;expected, const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;actual, T tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="42" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="42" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a7f80adccc24e8bd16d9f69f02cc3e7b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_near_matrix</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;expected, const Eigen::MatrixXcd &amp;actual, std::complex&lt; double &gt; tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>std::complex&lt; double &gt;</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="68" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="68" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1aacc88ff0431f52adaaf2f3d47fb9ab46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix_i</definition>
        <argsstring>(const Eigen::MatrixXi &amp;expected, const Eigen::MatrixXi &amp;actual, int tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix_i</name>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="93" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a29752d3ed9efdd1700d139c0603cd0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix_d</definition>
        <argsstring>(const Eigen::MatrixXd &amp;expected, const Eigen::MatrixXd &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix_d</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="98" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a7191be29c74609b6675837d1a9af9eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix3_d</definition>
        <argsstring>(const Eigen::Matrix3d &amp;expected, const Eigen::Matrix3d &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix3_d</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="103" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="103" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a2abf63b096294c3d4c5a38747d33cfe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix_cd</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;expected, const Eigen::MatrixXcd &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix_cd</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="128" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a60fd4f8d2727545f86b839fd658edf1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_near_vector</definition>
        <argsstring>(const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;expected, const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;actual, T tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector</name>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="134" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="134" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1ac4208c0c11c5957b4eddfa0fcf3d7f22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_vector_i</definition>
        <argsstring>(const Eigen::VectorXi &amp;expected, const Eigen::VectorXi &amp;actual, int tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector_i</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="156" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="156" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a66ca9c46b70447415f3624e23005a2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_vector_d</definition>
        <argsstring>(const Eigen::VectorXd &amp;expected, const Eigen::VectorXd &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector_d</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="161" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a5346973fcea08505e00f14172c95f272" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_near_vector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;expected, const std::vector&lt; T &gt; &amp;actual, T tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="167" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="167" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8cc_1a03cf09980cf03efd60f3bb216cc62b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_vector_d</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;expected, const std::vector&lt; double &gt; &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector_d</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" line="188" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="188" bodyend="191"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__helper_8h" kind="file" language="C++">
    <compoundname>eigen_helper.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="eigen__helper_8h_1a82c5dc51ac5df33c6cd5c2eba647f957" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_cd</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;expected, const std::complex&lt; double &gt; &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_cd</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="34" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="28" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1aacc88ff0431f52adaaf2f3d47fb9ab46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix_i</definition>
        <argsstring>(const Eigen::MatrixXi &amp;expected, const Eigen::MatrixXi &amp;actual, int tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix_i</name>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>int</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="37" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="93" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1a29752d3ed9efdd1700d139c0603cd0f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix_d</definition>
        <argsstring>(const Eigen::MatrixXd &amp;expected, const Eigen::MatrixXd &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix_d</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="40" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="98" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1a7191be29c74609b6675837d1a9af9eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix3_d</definition>
        <argsstring>(const Eigen::Matrix3d &amp;expected, const Eigen::Matrix3d &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix3_d</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="41" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="103" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1a2abf63b096294c3d4c5a38747d33cfe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_matrix_cd</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;expected, const Eigen::MatrixXcd &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_matrix_cd</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="44" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1a59172cd04c8a8d2612752921d4a1c6b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_vector_i</definition>
        <argsstring>(const Eigen::VectorXi &amp;expected, const Eigen::VectorXi &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector_i</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1a66ca9c46b70447415f3624e23005a2c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_vector_d</definition>
        <argsstring>(const Eigen::VectorXd &amp;expected, const Eigen::VectorXd &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector_d</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="50" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1a03cf09980cf03efd60f3bb216cc62b05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_vector_d</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;expected, const std::vector&lt; double &gt; &amp;actual, double tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_vector_d</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="52" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.cc" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="eigen__helper_8h_1aafc456f8d269cafde00daf532089f78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_near_tensor</definition>
        <argsstring>(const Eigen::Tensor&lt; T, 3 &gt; &amp;expected, const Eigen::Tensor&lt; T, 3 &gt; &amp;actual, T tolerance, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_tensor</name>
        <param>
          <type>const Eigen::Tensor&lt; T, 3 &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; T, 3 &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>T</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h" line="55" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_helper.h" bodystart="55" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/eigen_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="EigenExtensionsTests_8cc" kind="file" language="C++">
    <compoundname>EigenExtensionsTests.cc</compoundname>
    <innerclass refid="classicrar_1_1EigenExtensionsTests" prot="public">icrar::EigenExtensionsTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/EigenExtensionsTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MathConversionTests_8cc" kind="file" language="C++">
    <compoundname>MathConversionTests.cc</compoundname>
    <innerclass refid="classicrar_1_1MathConversionTests" prot="public">icrar::MathConversionTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/MathConversionTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MatrixTests_8cc" kind="file" language="C++">
    <compoundname>MatrixTests.cc</compoundname>
    <innerclass refid="classMatrixTests" prot="public">MatrixTests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="MatrixTests_8cc_1a53230fb99d51f7864c8556b4ce6f63aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestMatrixSize)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixSize</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="253" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="253" bodyend="253"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1acb3509d255f74d64e8441005ea613858" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestMatrixEigen)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixEigen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="254" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1abc59c58816773453fd632b0e19ad0770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestMatrixMultiply)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixMultiply</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="255" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="255" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1af49ae78c1db2bfa345c54f7ecbe5811f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestMatrixPretty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestMatrixPretty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="256" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="256" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1a7e52a57f121d410ece6ee466baa9995d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestTranspose)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestTranspose</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="258" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="258" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1a6e51b7da73ee447faa1c300dbc9fc194" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestSquareInvert)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestSquareInvert</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="259" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="259" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1aea2b1597ce51a9edff4aaf7ccf33dce6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestPseudoInverse33)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestPseudoInverse33</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="260" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1a67ccaebdbaabce82454d334ff0f2174d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestPseudoInverse32)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestPseudoInverse32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="261" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="261" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1a229bc682097a227ab7a7a6e4a72ccf1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestSVD42)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestSVD42</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="262" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="262" bodyend="262"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1a315fdfcd4ba382fcebefeaf6da7d3e27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestPseudoInverse42)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestPseudoInverse42</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="264" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="264" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="MatrixTests_8cc_1aa92f36d023ea24fe479fab1aad8932bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MatrixTests, TestSVDPseudoInverse32Degenerate)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMatrixTests" kindref="compound">MatrixTests</ref></type>
        </param>
        <param>
          <type>TestSVDPseudoInverse32Degenerate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" line="265" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/MatrixTests.cc" bodystart="265" bodyend="265"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/MatrixTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MVuvwTests_8cc" kind="file" language="C++">
    <compoundname>MVuvwTests.cc</compoundname>
    <innerclass refid="classicrar_1_1MVuvwTests" prot="public">icrar::MVuvwTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/cpu/MVuvwTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="IntegrationTests_8cc" kind="file" language="C++">
    <compoundname>IntegrationTests.cc</compoundname>
    <innerclass refid="classicrar_1_1IntegrationTests" prot="public">icrar::IntegrationTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MetaDataTests_8cc" kind="file" language="C++">
    <compoundname>MetaDataTests.cc</compoundname>
    <innerclass refid="classicrar_1_1MetaDataTests" prot="public">icrar::MetaDataTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MeasurementSetTests_8cc" kind="file" language="C++">
    <compoundname>MeasurementSetTests.cc</compoundname>
    <innerclass refid="classMeasurementSetTests" prot="public">MeasurementSetTests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="MeasurementSetTests_8cc_1af778ce0676b676bb4e87b931035a5caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MeasurementSetTests, TestReadCoords)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMeasurementSetTests" kindref="compound">MeasurementSetTests</ref></type>
        </param>
        <param>
          <type>TestReadCoords</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="250" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="MeasurementSetTests_8cc_1a71804a1df4d0baedcb13da89a3fb5481" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MeasurementSetTests, TestReadVis)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMeasurementSetTests" kindref="compound">MeasurementSetTests</ref></type>
        </param>
        <param>
          <type>TestReadVis</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" line="251" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc" bodystart="251" bodyend="251"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/ms/MeasurementSetTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CalibrationTests_8cc" kind="file" language="C++">
    <compoundname>CalibrationTests.cc</compoundname>
    <innerclass refid="classCalibrationTests" prot="public">CalibrationTests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="CalibrationTests_8cc_1ab49b08d031de1f2baadb1bb3ca82dbe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(CalibrationTests, TestAA3ClearCpuCalibration)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classCalibrationTests" kindref="compound">CalibrationTests</ref></type>
        </param>
        <param>
          <type>TestAA3ClearCpuCalibration</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" line="101" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="CalibrationTests_8cc_1a2bc37827996a52ab55f900477e8dbe44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(CalibrationTests, TestAA3ClearCudaCalibration)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classCalibrationTests" kindref="compound">CalibrationTests</ref></type>
        </param>
        <param>
          <type>TestAA3ClearCudaCalibration</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" line="110" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc" bodystart="110" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/system/CalibrationTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ConfigTests_8cc" kind="file" language="C++">
    <compoundname>ConfigTests.cc</compoundname>
    <innerclass refid="classConfigTests" prot="public">ConfigTests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="ConfigTests_8cc_1ac1a9257091864813146754666c77bad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, TestDefaultConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>TestDefaultConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="234" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="ConfigTests_8cc_1a17ae5f60b1caff1df95075243d2b4cde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, TestMWACpuConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>TestMWACpuConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="235" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="235" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="ConfigTests_8cc_1abdf0f87da393f79382a71986a11cf279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, DISABLED_TestAA3CpuConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestAA3CpuConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="236" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="ConfigTests_8cc_1a4f2235ea76547e0ff49095d4a8b8c1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, DISABLED_TestAA4CpuConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestAA4CpuConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="237" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="ConfigTests_8cc_1a59e0d3aff707e29bc5a00ad69601a7b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, TestMWACudaConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>TestMWACudaConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="240" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="240" bodyend="240"/>
      </memberdef>
      <memberdef kind="function" id="ConfigTests_8cc_1a61073b4206182730d346ddacf9e9cf88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, DISABLED_TestAA3CudaConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestAA3CudaConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="241" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="241" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="ConfigTests_8cc_1a7543d89caefb7a72cdc9520680857ccb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(ConfigTests, DISABLED_TestAA4CudaConfig)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classConfigTests" kindref="compound">ConfigTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestAA4CudaConfig</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" line="242" column="1" bodyfile="src/icrar/leap-accelerate/tests/system/ConfigTests.cc" bodystart="242" bodyend="242"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/system/ConfigTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="test__helper_8cc" kind="file" language="C++">
    <compoundname>test_helper.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__helper_8cc_1ac6b243ee4e3e987686396a6600283a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_metadata</definition>
        <argsstring>(const icrar::cpu::MetaData &amp;expected, const icrar::cpu::MetaData &amp;actual, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_metadata</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="28" column="1" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="28" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/test_helper.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="test__helper_8h" kind="file" language="C++">
    <compoundname>test_helper.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__helper_8h_1ac6b243ee4e3e987686396a6600283a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_metadata</definition>
        <argsstring>(const icrar::cpu::MetaData &amp;expected, const icrar::cpu::MetaData &amp;actual, const std::string &amp;ln, const std::string &amp;rn, const std::string &amp;file, int line)</argsstring>
        <name>assert_near_metadata</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para><para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para><para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para><para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="28" column="1" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="28" bodyend="68"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/test_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_deploy_ReadMe" kind="page">
    <compoundname>md_deploy_ReadMe</compoundname>
    <title>Linux Cluster Deployment</title>
    <detaileddescription>
<para><heading level="2">Build</heading>
</para><para>ICRAR environment setup command:</para><para><programlisting><codeline><highlight class="normal">module<sp/>load<sp/>cmake/3.15.1<sp/>gcc/6.3.0<sp/>boost/1.66.0<sp/>casacore/3.1.2</highlight></codeline>
<codeline><highlight class="normal">module<sp/>unload<sp/>gfortran/default</highlight></codeline>
<codeline><highlight class="normal">module<sp/>load<sp/>isl/default</highlight></codeline>
<codeline><highlight class="normal">export<sp/>CUDA_HOME=/usr/local/cuda</highlight></codeline>
<codeline><highlight class="normal">export<sp/>LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64</highlight></codeline>
<codeline><highlight class="normal">export<sp/>PATH=$PATH:$CUDA_HOME/bin</highlight></codeline>
</programlisting></para><para>Build command:</para><para><programlisting><codeline><highlight class="normal">mkdir<sp/>-p<sp/>build<sp/>&amp;&amp;<sp/>cd<sp/>build</highlight></codeline>
<codeline><highlight class="normal">cmake<sp/>..<sp/>-DCMAKE_C_COMPILER=gcc<sp/>-DCMAKE_CXX_COMPILER=g++<sp/>-DCUDA_TOOLKIT_ROOT_DIR=$CUDA_HOME<sp/>-DCUDA_ENABLED=TRUE<sp/>-DCUDA_HOST_COMPILER=g++<sp/>-DCASACORE_ROOT_DIR=$BLDR_CASACORE_BASE_PATH<sp/>-DCMAKE_BUILD_TYPE=Release</highlight></codeline>
<codeline><highlight class="normal">make<sp/>LeapAccelerateCLI<sp/>-j2</highlight></codeline>
</programlisting></para><para><heading level="2">Deploy Script</heading>
</para><para>Alternatively, deploy to hyades03 with the following command:</para><para><programlisting><codeline><highlight class="normal">cd<sp/>deploy</highlight></codeline>
<codeline><highlight class="normal">./build.sh<sp/>-s<sp/>hyades<sp/>-c<sp/>/usr/local/cuda-11.0/<sp/>-D<sp/>"-DCUDA_ENABLED=TRUE"</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docker_build_ReadMe" kind="page">
    <compoundname>md_docker_build_ReadMe</compoundname>
    <title>Leap Accelerate CI Build Image</title>
    <detaileddescription>
<para>This image contains all required resources to build icrar-leap-accelerate from scratch. Use this image for faster CI builds. The build image can be rebuilt by manually triggering the <computeroutput>docker_ci_build_deploy</computeroutput> job in a gitlab pipeline. </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_Build" kind="page">
    <compoundname>md_docs_src_md_Build</compoundname>
    <title>Compiling from Source</title>
    <detaileddescription>
<para>leap-accelerate compilation is compatible with g++ and clang++ on debian or ubuntu. Support for compiling on other operating systems is currently experimental.</para><para><heading level="3">Dependencies</heading>
</para><para><heading level="4">Recommended Versions Compatibility</heading>
</para><para><itemizedlist>
<listitem><para>g++ 9.3.0</para></listitem><listitem><para>cuda 10.1</para></listitem><listitem><para>boost 1.71.0</para></listitem><listitem><para>casacore 3.1.2</para></listitem></itemizedlist>
</para><para><heading level="4">Minimum Versions Compatibility</heading>
</para><para><itemizedlist>
<listitem><para>g++ 6.3.0</para></listitem><listitem><para>cuda 9.0</para></listitem><listitem><para>boost 1.63.0</para></listitem><listitem><para>cmake 3.15.1</para></listitem><listitem><para>casacore 3.1.2</para></listitem></itemizedlist>
</para><para><heading level="4">Ubuntu/Debian Dependencies</heading>
</para><para><heading level="5">20.04 LTS</heading>
</para><para><itemizedlist>
<listitem><para>sudo apt-get install gcc g++ gdb doxygen cmake casacore-dev clang-tidy-10 libboost1.71-all-dev libgsl-dev</para></listitem><listitem><para><ulink url="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=2004&amp;target_type=deblocal">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=2004&amp;target_type=deblocal</ulink></para></listitem></itemizedlist>
</para><para><heading level="5">18.04 LTS</heading>
</para><para><itemizedlist>
<listitem><para>sudo apt-get install gcc g++ gdb doxygen cmake casacore-dev clang-tidy-10 libboost1.65-all-dev libgsl-dev</para></listitem><listitem><para><ulink url="https://developer.nvidia.com/cuda-10.1-download-archive-update2?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=deblocal">https://developer.nvidia.com/cuda-10.1-download-archive-update2?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=deblocal</ulink></para></listitem></itemizedlist>
</para><para><heading level="5">16.04 LTS</heading>
</para><para><itemizedlist>
<listitem><para><ulink url="https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line">https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line</ulink></para></listitem><listitem><para>sudo apt-get install gcc-6 g++-6 gdb doxygen casacore-dev libboost1.58-all-dev libgsl-dev</para></listitem><listitem><para><ulink url="https://developer.nvidia.com/cuda-92-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=deblocal">https://developer.nvidia.com/cuda-92-download-archive?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1604&amp;target_type=deblocal</ulink></para></listitem></itemizedlist>
</para><para><heading level="4">CMake Options</heading>
</para><para>Use <computeroutput>cmake .. -D&lt;OPTION&gt;=&lt;VALUE&gt; ...</computeroutput> or <computeroutput>ccmake ..</computeroutput> to set cmake options.</para><para>Setting an environment variable of the same name will also override these cmake options:</para><para><computeroutput>CUDA_ENABLED</computeroutput> - Enables building with cuda support</para><para><computeroutput>CMAKE_CUDA_ARCHITECTURES</computeroutput> - Selects the target cuda streaming multiprocessor and compute levels (default is all)</para><para><computeroutput>WERROR</computeroutput> - Enables warnings as Errors</para><para><computeroutput>WCONVERSION</computeroutput> - Enables warnings on implicit numeric conversions</para><para><computeroutput>TRACE</computeroutput> - Traces data to the local directory</para><para><computeroutput>CMAKE_RUN_CLANG_TIDY</computeroutput> - Enables running clang-tidy with the compiler</para><para><computeroutput>USE_PCH</computeroutput> - Use pre-compile headers internally, if possible (defaults to <computeroutput>ON</computeroutput>)</para><para><heading level="4">Compile Commands</heading>
</para><para>From the repository root folder run:</para><para><computeroutput>git submodule update --init --recursive</computeroutput></para><para>NOTE: pulling exernal submodules is now automated by CMake. When downloading the source files via tools other than git the folder <computeroutput>external/</computeroutput> will need to be copied manually.</para><para><heading level="5">Linux</heading>
</para><para><computeroutput>export CUDA_HOME=/usr/local/cuda</computeroutput></para><para><computeroutput>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64</computeroutput></para><para><computeroutput>export PATH=$PATH:$CUDA_HOME/bin</computeroutput></para><para><heading level="6">Debug</heading>
</para><para><computeroutput>mkdir -p build/Debug &amp;&amp; cd build/Debug</computeroutput></para><para><computeroutput>cmake ../../ -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCUDA_ENABLED=TRUE -DCMAKE_BUILD_TYPE=Debug</computeroutput></para><para>With tracing to file:</para><para><computeroutput>cmake ../../ -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCUDA_ENABLED=TRUE -DTRACE=ON -DCMAKE_BUILD_TYPE=Debug</computeroutput></para><para>With gcovr analysis:</para><para><computeroutput>cmake ../.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"</computeroutput></para><para><heading level="4">Release</heading>
</para><para><computeroutput>mkdir -p build/Release &amp;&amp; cd build/Release</computeroutput></para><para><computeroutput>cmake ../../ -DCUDA_ENABLED=TRUE -DCMAKE_BUILD_TYPE=Release</computeroutput></para><para><heading level="2">Testing</heading>
</para><para>Testing provided via googletest. To test using the google test runner, test binaries can be executed directly using the following commands:</para><para><computeroutput>./src/icrar/leap-accelerate/tests/LeapAccelerate.Tests</computeroutput> <computeroutput>./src/icrar/leap-accelerate-cli/tests/LeapAccelerateCLI.Tests</computeroutput></para><para>To test using CTest use the following command in build/linux:</para><para><computeroutput>make test</computeroutput> or <computeroutput>ctest</computeroutput></para><para>for verbose output use:</para><para><computeroutput>ctest --verbose</computeroutput> or <computeroutput>ctest --output-on-failure</computeroutput></para><para><heading level="2">Documentation</heading>
</para><para>Generated documentation is available locally at the following file location:</para><para><computeroutput>docs/sphinx/index.html</computeroutput></para><para>Once deployed to a branch the docs will be available here:</para><para><ulink url="https://icrar-leap-accelerate.readthedocs.io/">https://icrar-leap-accelerate.readthedocs.io/</ulink></para><para><heading level="2">Test Coverage (Debug Only)</heading>
</para><para><computeroutput>cmake ../.. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCMAKE_CXX_FLAGS="-coverage" -DCMAKE_EXE_LINKER_FLAGS="-coverage"</computeroutput></para><para><computeroutput>make coverage</computeroutput></para><para><heading level="3">Building from Source</heading>
</para><para>Doxygen documentation is generated for all C++ and cuda files with the following target:</para><para><computeroutput>make doxygen</computeroutput></para><para>Sphinx/Breath/Exhale docs is a dependent target generated with the following command:</para><para><computeroutput>make sphinx</computeroutput> </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_Docker" kind="page">
    <compoundname>md_docs_src_md_Docker</compoundname>
    <title>Docker image build and usage</title>
    <detaileddescription>
<para>The following procedure will generate a small docker image containing just the bare minimum binary and libraries to run LeapAccelerateCLI. Start with cloning out the repository: <verbatim>git clone https://gitlab.com/ska-telescope/icrar-leap-accelerate.git
</verbatim></para><para>and then change into the directory: <verbatim>cd icrar-leap-accelerate
</verbatim></para><para>All the following commands assume that you are in the root directory of the repository.</para><para><heading level="2">Docker image build</heading>
</para><para>The Dockerfile builds the image from scratch, but that takes pretty long. Depending on the network connection this build can take a long time. It is downloading the CUDA tool chain which is about 2.7 GB. After the download the unpacking and installation takes significant time in addition. <verbatim>docker build . --tag icrar/leap_cli:big
</verbatim></para><para>Typically, after the first build, subsequent builds are much faster.</para><para><heading level="3">Stripping the image</heading>
</para><para>Due to the size of the CUDA tool chain the initial image created by the initial build is very large (˜ 6GB). In order to strip this down to a reasonable size another step is recommended, which reduces the docker image size by more than a factor of 100.</para><para>In order to clean this up, it is highly recommended to run the tool from <ulink url="https://github.com/mvanholsteijn/strip-docker-image.git">https://github.com/mvanholsteijn/strip-docker-image.git</ulink> <verbatim>cd .. ; git clone https://github.com/mvanholsteijn/strip-docker-image.git; cd icrar-leap-accelerate
</verbatim></para><para>and then <verbatim>../strip-docker-image/bin/strip-docker-image -i icrar/leap_cli:big -t icrar/leap_cli:`cat version.txt` -f /usr/local/bin/LeapAccelerateCLI -f /bin/bash -f /usr/bin/cat -f /usr/bin/ls -f /etc/passwd -f /home/ray
</verbatim></para><para>The resulting image is less than 50MB and contains just the required binary.</para><para><heading level="3">Testing the image</heading>
</para><para>From the main directory of the leap_accelarate checkout run install.sh in the testdata directory: <verbatim>cd testdata; ./install.sh; cd ..
</verbatim></para><para>and then in the main directory of leap_accelarate: <verbatim>docker run -w /testdata --user ray -v "$(pwd)"/testdata:/testdata icrar/leap_cli:`cat version.txt` LeapAccelerateCLI -f /testdata/mwa/1197638568-split.ms -i cpu -d "[[-0.4606549305661674,-0.29719233792392513]]"
</verbatim></para><para>The output should be a JSON data structure.</para><para>You can also use a configuration file to run the same test run: <verbatim>docker run -w /testdata --user ray -v "$(pwd)"/testdata:/testdata icrar/leap_cli:`cat version.txt` LeapAccelerateCLI --config /testdata/mwa_test.json
</verbatim></para><para>In this case the output will be generated in a file called testdata/mwa_cal.out. NOTE: The tests above are using the CPU implementation of the algorithm.</para><para><heading level="2">Pulling and testing the docker image</heading>
</para><para>NOTE: This part of the guide still assumes that you have cloned the repository and are located in the root directory of the repo, but that is only required if you want to run the test, else the docker pull is sufficient.</para><para>The leap-accelerate docker image is also available on dockerhub. Using that is very straight forward: <verbatim>docker pull icrar/leap_cli:`cat version.txt`
</verbatim></para><para>The testing procedure is still the same. Download and unpack the testdata <verbatim>cd testdata; ./install.sh; cd ..
</verbatim></para><para>and then execute the actual test: <verbatim>docker run -w /testdata --user ray -v "$(pwd)"/testdata:/testdata icrar/leap_cli:`cat version.txt` LeapAccelerateCLI -f /testdata/mwa/1197638568-split.ms -i cpu -d "[[-0.4606549305661674,-0.29719233792392513]]"</verbatim> </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_LeapAccelerateCLI" kind="page">
    <compoundname>md_docs_src_md_LeapAccelerateCLI</compoundname>
    <title>Leap Accelerate CLI</title>
    <detaileddescription>
<para>leap-accelerate-cli is a command line interface to performing leap calibration that requires at least a measurement set and a set of directions to produce an antenna array calibration.</para><para><heading level="2">Arguments</heading>
</para><para><itemizedlist>
<listitem><para><computeroutput>--config &lt;path&gt;</computeroutput> - config file path</para></listitem><listitem><para><computeroutput>--filepath &lt;path&gt;</computeroutput> - measurement set file path</para></listitem><listitem><para><computeroutput>--directions &lt;array&gt;</computeroutput> - directions for calibration in polar coordinates, e.g. <computeroutput>"[[1.2,0.8],[0.5,0.7]]"</computeroutput></para></listitem><listitem><para><computeroutput>--output &lt;path&gt;</computeroutput> - Calibration output file path</para></listitem><listitem><para><computeroutput>--stations</computeroutput> - Overrides number of stations to use in the specified measurement set</para></listitem><listitem><para><computeroutput>--solutionInterval &lt;[start,end,interval]&gt;</computeroutput> - Sets the interval to generate solutions using numpy syntax. Additionally supports a single interval integer argument.</para></listitem><listitem><para><computeroutput>--referenceAntenna &lt;integer&gt;</computeroutput> - Selects the reference antenna index, default is the last antenna</para></listitem><listitem><para><computeroutput>--implementation &lt;type&gt;</computeroutput> - compute implementation type (cpu or cuda)</para></listitem><listitem><para><computeroutput>--useFileSystemCache &lt;boolean&gt;</computeroutput> - Whether filesystem caching is used between system calls</para></listitem><listitem><para><computeroutput>--autoCorrelations &lt;boolean&gt;</computeroutput> - Set to true if measurement set rows contain autocorrelations</para></listitem><listitem><para><computeroutput>--minimumBaselineThreshold &lt;double&gt;</computeroutput> - Minimum antenna baeline length in meters in the range 0.0 -&gt; inf</para></listitem><listitem><para><computeroutput>--verbosity &lt;integer&gt;</computeroutput> - Logging verbosity (0=fatal, 1=error, 2=warn, 3=info, 4=debug, 5=trace), defaults to info</para></listitem></itemizedlist>
</para><para><heading level="3">Examples:</heading>
</para><para><computeroutput>LeapAccelerateCLI --help</computeroutput></para><para><computeroutput>LeapAccelerateCLI --config testdata/mwa_test.json</computeroutput></para><para><heading level="2">Logging</heading>
</para><para>Log files are produced in the current working directory at ./log/leap_YYYY_MM_dd_{number}.log Log files rotate per day and store a maximum of 10MiB.</para><para>Logging is controlled by the verbosity setting.</para><para><heading level="2">Config File</heading>
</para><para>Config files can be specified via the <ndash/>config argument to specify runtime arguments as an alternative to command line arguments.</para><para>Config files currently must be written in coformant JSON format.</para><para><heading level="3">Schema</heading>
</para><para><programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"$schema":<sp/>"http://json-schema.org/draft-07/schema#",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"title":<sp/>"Arguments",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"definitions":<sp/>{},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"type":<sp/>"object",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"properties":<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"filePath":<sp/>{<sp/>"type":<sp/>"string"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"outputFilePath":<sp/>{<sp/>"type":<sp/>"string"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"autoCorrelations":<sp/>{<sp/>"type":<sp/>"boolean"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"useFileSystemCache":<sp/>{<sp/>"type":<sp/>"boolean"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"minimumBaselineTheshold":<sp/>{<sp/>"type":<sp/>"integer"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"solutionInterval":<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"type":<sp/>["integer",<sp/>"array"],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"items":<sp/>{<sp/>"type":<sp/>["number",<sp/>"null"]<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"minItems":<sp/>3,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"maxItems":<sp/>3</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"referenceAntenna":<sp/>{<sp/>"type":<sp/>"integer"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"computeImplementation":<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"type":<sp/>"string",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"enum":<sp/>["cpu",<sp/>"cuda"]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"verbosity":<sp/>{<sp/>"type":<sp/>"string"<sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"directions":<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"type":<sp/>"array",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"items":<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"type":<sp/>"array",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>"items":<sp/>{<sp/>"type":<sp/>"number"<sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>},</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"required":<sp/>[<sp/>"filePath",<sp/>"directions"<sp/>]</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para>Note: Properties are not required when specified in as CLI arguments with a config file.</para><para><heading level="3">Config File Example</heading>
</para><para><programlisting><codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"filePath":<sp/>"/testdata/ska/SKA_LOW_SIM_short_EoR0_ionosphere_off_GLEAM.ms",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"outputFilePath":<sp/>"ska_low_cal",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"computeImplementation":<sp/>"cpu",</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"directions":<sp/>[</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[-0.4606549305661674,-0.29719233792392513],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[-0.4606549305661674,-0.29719233792392513]</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"solutionInterval":<sp/>[0,<sp/>None,<sp/>1],</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>"verbosity":<sp/>"info"</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_specs_CMakeStyleGuide" kind="page">
    <compoundname>md_docs_src_md_specs_CMakeStyleGuide</compoundname>
    <title>CMake Style Guide</title>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>See <ulink url="https://cliutils.gitlab.io/modern-cmake/">https://cliutils.gitlab.io/modern-cmake/</ulink> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_specs_CPlusPlusStyleGuide" kind="page">
    <compoundname>md_docs_src_md_specs_CPlusPlusStyleGuide</compoundname>
    <title>C++ Style Guide</title>
    <detaileddescription>
<para>Refer to:<itemizedlist>
<listitem><para><ulink url="https://github.com/ska-telescope/developer.skatelescope.org/blob/master/src/development/cplusplus-codeguide.rst">https://github.com/ska-telescope/developer.skatelescope.org/blob/master/src/development/cplusplus-codeguide.rst</ulink></para></listitem></itemizedlist>
</para><para><heading level="2">Extra</heading>
</para><para>Refer to:</para><para><itemizedlist>
<listitem><para><ulink url="https://github.com/isocpp/CppCoreGuidelines">https://github.com/isocpp/CppCoreGuidelines</ulink></para></listitem><listitem><para><ulink url="https://google.github.io/styleguide/cppguide.html">https://google.github.io/styleguide/cppguide.html</ulink> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_specs_CudaStyleGuide" kind="page">
    <compoundname>md_docs_src_md_specs_CudaStyleGuide</compoundname>
    <title>CUDA/C++ Style Guide</title>
    <detaileddescription>
<para><heading level="2">File Structure</heading>
</para><para><itemizedlist>
<listitem><para>All C++ headers (.h, .hpp) must be includable in sources built without cuda support</para></listitem><listitem><para>Use C++ source files (.cc, .cpp) where possible for improved compilation speed</para></listitem><listitem><para>Use Cuda source files (.cu) only for code blocks containing device code (at least 1 __device__ or __global__ definition)</para></listitem><listitem><para>Use empty __host__ and __device__ definition guards in function headers to make them portable for builds without cuda support</para></listitem><listitem><para>Do not declare __global__ functions in C++ header or source file (.h, .hpp, .cc, .cpp)</para></listitem><listitem><para>Declare kernel calling functions in C++ headers (.h, .hpp) and encapsulate pointers to device and host memory locations</para></listitem></itemizedlist>
</para><para><heading level="2">Naming Conventions</heading>
</para><para><itemizedlist>
<listitem><para>Use <computeroutput>g_</computeroutput> prefix for __global__ functions to signify a cuda kernel entry point </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_src_md_Submodules" kind="page">
    <compoundname>md_docs_src_md_Submodules</compoundname>
    <title>Pull Submodules</title>
    <detaileddescription>
<para>git submodule update <ndash/>init <ndash/>recursive</para><para><heading level="1">Add Submodules</heading>
</para><para>git submodule add <ndash/>name gtest-1.8.1 <ulink url="https://github.com/google/googletest.git">https://github.com/google/googletest.git</ulink> external/gtest-1.8.1 git submodule add <ndash/>name cmake-modules <ulink url="https://gitlab.com/ska-telescope/cmake-modules.git">https://gitlab.com/ska-telescope/cmake-modules.git</ulink> external/cmake-modules git submodule add <ndash/>name eigen-3.3.90 <ulink url="https://gitlab.com/libeigen/eigen.git">https://gitlab.com/libeigen/eigen.git</ulink> external/eigen-3.3.90 git submodule add <ndash/>name rapidjson-1.1.0 <ulink url="https://github.com/Tencent/rapidjson.git">https://github.com/Tencent/rapidjson.git</ulink> external/rapidjson-1.1.0 </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_leap_drops_README" kind="page">
    <compoundname>md_leap_drops_README</compoundname>
    <title>Leap Drops</title>
    <detaileddescription>
<para>This directory contains a number of Python classes that expose LEAP functionality to the DALiuGE workflow execution environment. The classes extend the DALiuGE BarrierDropApp class, making them executable as PythonApp drops within the DALiuGE system.</para><para>The classes contain custom Doxygen comments that describe the interface to these components through DALiuGE ports and parameters. When changes to the source are pushed to this repository, a Travis CI step generates Doxygen XML for these classes and transforms the XML into an DALiuGE/EAGLE palette file. The palette file can be opened in the EAGLE editor to provide ready-made components for use in DALiuGE workflows.</para><para><heading level="2">ProduceConfig</heading>
</para><para><itemizedlist>
<listitem><para>Intended for use in a DALiuGE Scatter component</para></listitem><listitem><para>Loads a CSV file containing directions</para></listitem><listitem><para>Splits the directions into N groups, where N is the multiplicity of the DALiuGE scatter component</para></listitem><listitem><para>Produces a JSON config file for each group</para></listitem></itemizedlist>
</para><para><heading level="2">CallLeap</heading>
</para><para><itemizedlist>
<listitem><para>Loads a JSON config file</para></listitem><listitem><para>Builds a command line based on the contents of the config file</para></listitem><listitem><para>Executes LeapAccelerateCLI (or if DEBUG==True, calls Sleep for a short random time)</para></listitem><listitem><para>Collects the output from LeapAccelerateCLI and writes it to the single output DALiuGE port</para></listitem></itemizedlist>
</para><para><heading level="2">LeapGather</heading>
</para><para><itemizedlist>
<listitem><para>Intended for use in a DALiuGE Gather component</para></listitem><listitem><para>Loads the JSON from N instances of CallLeap, where N is the multiplicity of the DALiuGE gather component</para></listitem><listitem><para>Trivially combines the JSON into a single JSON object</para></listitem><listitem><para>Sends the combined JSON to the single output DALiuGE port</para></listitem></itemizedlist>
</para><para><heading level="2">Links</heading>
</para><para><itemizedlist>
<listitem><para><ulink url="https://daliuge.readthedocs.io/en/latest/writing_an_application.html">DALiuGE Application Development</ulink></para></listitem><listitem><para><ulink url="http://eagle.icrar.org">EAGLE</ulink> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_README" kind="page">
    <compoundname>md_README</compoundname>
    <title>LEAP Accelerate</title>
    <detaileddescription>
<para><image type="html" name="license-LGPL_2.1-blue"/>
</para><para>LEAP-Accelerate is a calibration tool implementing Low-frequency Excision of the Atmosphere in Parallel (<ulink url="https://arxiv.org/abs/1807.04685">LEAP</ulink>) for low-frequency radio antenna arrays. Leap utilizes GPGPU acceleration for parallel computation across baselines, channels and polarizations and is freely available on <ulink url="https://gitlab.com/ska-telescope/icrar-leap-accelerate">GitLab</ulink> under the LGPLv2 [License](LICENSE).</para><para>LEAP-Accelerate includes:</para><para><itemizedlist>
<listitem><para><ref refid="md_src_icrar_leap-accelerate_ReadMe" kindref="compound">leap-accelerate-lib</ref>: a shared library for gpu accelerated direction centering and phase calibration.</para></listitem><listitem><para>leap-accelerate-cli: a CLI interface for I/O datastream or plasma data access.</para></listitem></itemizedlist>
</para><para>See the <ulink url="https://developer.skatelescope.org/projects/icrar-leap-accelerate/en/latest/">online documentation</ulink> for more information.</para><para><heading level="2">Installation</heading>
</para><para>The latest leap release is published as a debian a docker image available at the following location:</para><para><computeroutput>nexus.engageska-portugal.pt/ska-docker/icrar-leap-accelerate:latest</computeroutput></para><para>This image can be run locally using the following command:</para><para><computeroutput>docker run -it --rm nexus.engageska-portugal.pt/ska-docker/icrar-leap-accelerate:latest LeapAccelerateCLI --help</computeroutput></para><para>See the <ref refid="md_docs_src_md_Docker" kindref="compound">docker</ref> documentation for instructions about how to create a docker image.</para><para>See the <ref refid="md_docs_src_md_Build" kindref="compound">build</ref> documentation for instructions on platform specific compilation.</para><para><heading level="2">Usage</heading>
</para><para>See <ref refid="md_docs_src_md_LeapAccelerateCLI" kindref="compound">leap-accelerate-cli</ref> for instructions on command line arguments and configuration files.</para><para>Examples:</para><para><computeroutput>LeapAccelerateCLI --help</computeroutput></para><para><computeroutput>LeapAccelerateCLI --config "./askap.json"</computeroutput></para><para><heading level="2">Contributions</heading>
</para><para>Refer to the following style guides for making repository contributions</para><para><itemizedlist>
<listitem><para><ref refid="md_docs_src_md_specs_CMakeStyleGuide" kindref="compound">CMake Style Guide</ref></para></listitem><listitem><para><ref refid="md_docs_src_md_specs_CPlusPlusStyleGuide" kindref="compound">C++ Style Guide</ref> </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_src_icrar_leap-accelerate_math_cuda_ReadMe" kind="page">
    <compoundname>md_src_icrar_leap-accelerate_math_cuda_ReadMe</compoundname>
    <title>leap-accelerate cuda</title>
    <detaileddescription>
<para>This module within leap-accelerate provides cuda acceleration for common math and algorithmic operations.</para><para>Cuda files here are compiled by nvcc for linking with leap-accelerate.</para><para><heading level="2">File types</heading>
</para><para><itemizedlist>
<listitem><para>*.cu - Cuda C++ source file targetted by nvcc.</para></listitem><listitem><para>*.cuh - Cuda C++ header containing cuda-compiler-only code. To access functions via an API here they must be exposed via a *.h file.</para></listitem><listitem><para>*.h - C++ compatible Cuda header. These headers may be included by both C++ and CUDA source files </para></listitem></itemizedlist>
</para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_src_icrar_leap-accelerate_ReadMe" kind="page">
    <compoundname>md_src_icrar_leap-accelerate_ReadMe</compoundname>
    <title>ReadMe</title>
    <detaileddescription>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_testdata_README" kind="page">
    <compoundname>md_testdata_README</compoundname>
    <title>leap-accelerate test data</title>
    <detaileddescription>
<para>This folder is hosted on CloudStor and can be retrieved via running the install.sh script. </para>    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_aa2834aa82004298034bf6213bcf1d9c" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm</compoundname>
    <innerdir refid="dir_fff48974e8bcd8fd2eb2a194743508e4">src/icrar/leap-accelerate/algorithm/cpu</innerdir>
    <innerdir refid="dir_e692bd0fe16eb358a9e42d8cc9465ef5">src/icrar/leap-accelerate/algorithm/cuda</innerdir>
    <innerfile refid="ComputeOptionsDTO_8h">ComputeOptionsDTO.h</innerfile>
    <innerfile refid="ILeapCalibrator_8h">ILeapCalibrator.h</innerfile>
    <innerfile refid="LeapCalibratorFactory_8cc">LeapCalibratorFactory.cc</innerfile>
    <innerfile refid="LeapCalibratorFactory_8h">LeapCalibratorFactory.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_51874acfb9fb847bec886c1bd064b075" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/algorithm</compoundname>
    <innerfile refid="PhaseRotateTestCaseData_8h">PhaseRotateTestCaseData.h</innerfile>
    <innerfile refid="PhaseRotateTests_8cc">PhaseRotateTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_f22a1cd137aaab58ee6dd9934c3a6697" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model/cpu/calibration</compoundname>
    <innerfile refid="BeamCalibration_8cc">BeamCalibration.cc</innerfile>
    <innerfile refid="BeamCalibration_8h">BeamCalibration.h</innerfile>
    <innerfile refid="Calibration_8cc">Calibration.cc</innerfile>
    <innerfile refid="Calibration_8h">Calibration.h</innerfile>
    <innerfile refid="CalibrationCollection_8h">CalibrationCollection.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/calibration/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_55f26c15f81c6b0da5ac2cc7bf53d955" kind="dir">
    <compoundname>src/icrar/leap-accelerate/common</compoundname>
    <innerdir refid="dir_b2d39bc6724934c6a802bd5d74270a8b">src/icrar/leap-accelerate/common/config</innerdir>
    <innerfile refid="constants_8h">constants.h</innerfile>
    <innerfile refid="eigen__cache_8h">eigen_cache.h</innerfile>
    <innerfile refid="eigen__stringutils_8h">eigen_stringutils.h</innerfile>
    <innerfile refid="enumutils_8h">enumutils.h</innerfile>
    <innerfile refid="Range_8h">Range.h</innerfile>
    <innerfile refid="Slice_8cc">Slice.cc</innerfile>
    <innerfile refid="Slice_8h">Slice.h</innerfile>
    <innerfile refid="SphericalDirection_8cc">SphericalDirection.cc</innerfile>
    <innerfile refid="SphericalDirection_8h">SphericalDirection.h</innerfile>
    <innerfile refid="stream__extensions_8h">stream_extensions.h</innerfile>
    <innerfile refid="Tensor3X_8h">Tensor3X.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_a4741d49ecbb127240e6bceaca6f134e" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/common</compoundname>
    <innerfile refid="EigenStringUtilsTests_8cc">EigenStringUtilsTests.cc</innerfile>
    <innerfile refid="RangeTests_8cc">RangeTests.cc</innerfile>
    <innerfile refid="SliceTests_8cc">SliceTests.cc</innerfile>
    <innerfile refid="SphericalDirectionTests_8cc">SphericalDirectionTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/common/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_b2d39bc6724934c6a802bd5d74270a8b" kind="dir">
    <compoundname>src/icrar/leap-accelerate/common/config</compoundname>
    <innerfile refid="Arguments_8cc">Arguments.cc</innerfile>
    <innerfile refid="Arguments_8h">Arguments.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/config/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_00bde1c4f662f0faba7bdd57964f5b60" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/core</compoundname>
    <innerfile refid="StreamOutTypeTests_8cc">StreamOutTypeTests.cc</innerfile>
    <innerfile refid="VerbosityTests_8cc">VerbosityTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/core/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_ee674cc579a6f82bd2447608147ad2b6" kind="dir">
    <compoundname>src/icrar/leap-accelerate/core</compoundname>
    <innerdir refid="dir_495e22a886fc380c78b66e16c7857bd8">src/icrar/leap-accelerate/core/log</innerdir>
    <innerdir refid="dir_aa021c1e9c5dddecbfefdc0fc92521fc">src/icrar/leap-accelerate/core/memory</innerdir>
    <innerdir refid="dir_b0cd4f726ab18784c27310578b56d895">src/icrar/leap-accelerate/core/profiling</innerdir>
    <innerfile refid="compute__implementation_8cc">compute_implementation.cc</innerfile>
    <innerfile refid="compute__implementation_8h">compute_implementation.h</innerfile>
    <innerfile refid="git__revision_8h">git_revision.h</innerfile>
    <innerfile refid="InputType_8cc">InputType.cc</innerfile>
    <innerfile refid="InputType_8h">InputType.h</innerfile>
    <innerfile refid="stream__out__type_8cc">stream_out_type.cc</innerfile>
    <innerfile refid="stream__out__type_8h">stream_out_type.h</innerfile>
    <innerfile refid="version_8cc">version.cc</innerfile>
    <innerfile refid="version_8h">version.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_fff48974e8bcd8fd2eb2a194743508e4" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm/cpu</compoundname>
    <innerfile refid="CpuComputeOptions_8h">CpuComputeOptions.h</innerfile>
    <innerfile refid="CpuLeapCalibrator_8cc">CpuLeapCalibrator.cc</innerfile>
    <innerfile refid="CpuLeapCalibrator_8h">CpuLeapCalibrator.h</innerfile>
    <innerfile refid="PhaseMatrixFunction_8cc">PhaseMatrixFunction.cc</innerfile>
    <innerfile refid="PhaseMatrixFunction_8h">PhaseMatrixFunction.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_64aa0feff8f48b3d707b28ed7d5dfd66" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/model/cpu</compoundname>
    <innerfile refid="MVuvwTests_8cc">MVuvwTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7229c8e8eacb0bb51ad1ee28332f16d0" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math/cpu</compoundname>
    <innerfile refid="eigen__extensions_8cc">eigen_extensions.cc</innerfile>
    <innerfile refid="eigen__extensions_8h">eigen_extensions.h</innerfile>
    <innerfile refid="math_8h">math.h</innerfile>
    <innerfile refid="cpu_2matrix__invert_8h">matrix_invert.h</innerfile>
    <innerfile refid="MatrixBaseAddons_8h">MatrixBaseAddons.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_0a4b09224a839f8b9117516e3ea32ac2" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model/cpu</compoundname>
    <innerdir refid="dir_f22a1cd137aaab58ee6dd9934c3a6697">src/icrar/leap-accelerate/model/cpu/calibration</innerdir>
    <innerfile refid="Integration_8cc">Integration.cc</innerfile>
    <innerfile refid="Integration_8h">Integration.h</innerfile>
    <innerfile refid="MetaData_8cc">MetaData.cc</innerfile>
    <innerfile refid="MetaData_8h">MetaData.h</innerfile>
    <innerfile refid="MVuvw_8cc">MVuvw.cc</innerfile>
    <innerfile refid="MVuvw_8h">MVuvw.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_453eee146edd9e4714fb536e9601f4b1" kind="dir">
    <compoundname>src/icrar/leap-accelerate/cuda</compoundname>
    <innerfile refid="compute__device_8h">compute_device.h</innerfile>
    <innerfile refid="cuda__info_8h">cuda_info.h</innerfile>
    <innerfile refid="device__matrix_8h">device_matrix.h</innerfile>
    <innerfile refid="device__tensor_8h">device_tensor.h</innerfile>
    <innerfile refid="device__vector_8h">device_vector.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_96c95bf6b07e809698decd0a311dda15" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/math/cuda</compoundname>
    <innerfile refid="CudaMatrixEigenTests_8cc">CudaMatrixEigenTests.cc</innerfile>
    <innerfile refid="CudaMatrixTests_8cc">CudaMatrixTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_e692bd0fe16eb358a9e42d8cc9465ef5" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm/cuda</compoundname>
    <innerdir refid="dir_1880433a9c6ddfe7ee325297be953faa">src/icrar/leap-accelerate/algorithm/cuda/kernel</innerdir>
    <innerfile refid="CudaComputeOptions_8cc">CudaComputeOptions.cc</innerfile>
    <innerfile refid="CudaComputeOptions_8h">CudaComputeOptions.h</innerfile>
    <innerfile refid="CudaLeapCalibrator_8cc">CudaLeapCalibrator.cc</innerfile>
    <innerfile refid="CudaLeapCalibrator_8h">CudaLeapCalibrator.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_5f8ec6869d7787d3967eefe8107f9ddc" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math/cuda</compoundname>
    <innerfile refid="matrix_8h">matrix.h</innerfile>
    <innerfile refid="matrix__add_8h">matrix_add.h</innerfile>
    <innerfile refid="cuda_2matrix__invert_8h">matrix_invert.h</innerfile>
    <innerfile refid="matrix__multiply_8h">matrix_multiply.h</innerfile>
    <innerfile refid="matrix__op_8h">matrix_op.h</innerfile>
    <innerfile refid="matrix__transpose_8h">matrix_transpose.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_fcf279b433fb36f94b1a0018f1ca12c8" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model/cuda</compoundname>
    <innerfile refid="DeviceIntegration_8h">DeviceIntegration.h</innerfile>
    <innerfile refid="DeviceMetaData_8cc">DeviceMetaData.cc</innerfile>
    <innerfile refid="DeviceMetaData_8h">DeviceMetaData.h</innerfile>
    <innerfile refid="HostIntegration_8h">HostIntegration.h</innerfile>
    <innerfile refid="HostMetaData_8h">HostMetaData.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_49e56c817e5e54854c35e136979f97ca" kind="dir">
    <compoundname>docs</compoundname>
    <innerdir refid="dir_248832ff8517b5b7d5da1a6bc8750d99">docs/src</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_d3c419b6ec72671e9dcddfe0229ebd84" kind="dir">
    <compoundname>src/icrar/leap-accelerate/exception</compoundname>
    <innerfile refid="exception_8cc">exception.cc</innerfile>
    <innerfile refid="exception_8h">exception.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/exception/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_8755274c44546ba54c602d80da38f326" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/helper</compoundname>
    <innerfile refid="model__helper_8h">model_helper.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/helper/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_2cd41a2057587d0316622d61ff53471e" kind="dir">
    <compoundname>src/icrar</compoundname>
    <innerdir refid="dir_fd492ac65c9e5ad6fc88c528b024e268">src/icrar/leap-accelerate</innerdir>
    <innerdir refid="dir_8e79c837f989c64fbab75392435c0e1b">src/icrar/leap-accelerate-cli</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_1880433a9c6ddfe7ee325297be953faa" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm/cuda/kernel</compoundname>
    <innerfile refid="ComputePhaseDeltaKernel_8h">ComputePhaseDeltaKernel.h</innerfile>
    <innerfile refid="CopyPhaseDeltaKernel_8h">CopyPhaseDeltaKernel.h</innerfile>
    <innerfile refid="EmptyKernel_8h">EmptyKernel.h</innerfile>
    <innerfile refid="PolarizationsToPhaseAnglesKernel_8h">PolarizationsToPhaseAnglesKernel.h</innerfile>
    <innerfile refid="RotateVisibilitiesKernel_8h">RotateVisibilitiesKernel.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/kernel/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_fd492ac65c9e5ad6fc88c528b024e268" kind="dir">
    <compoundname>src/icrar/leap-accelerate</compoundname>
    <innerdir refid="dir_aa2834aa82004298034bf6213bcf1d9c">src/icrar/leap-accelerate/algorithm</innerdir>
    <innerdir refid="dir_55f26c15f81c6b0da5ac2cc7bf53d955">src/icrar/leap-accelerate/common</innerdir>
    <innerdir refid="dir_ee674cc579a6f82bd2447608147ad2b6">src/icrar/leap-accelerate/core</innerdir>
    <innerdir refid="dir_453eee146edd9e4714fb536e9601f4b1">src/icrar/leap-accelerate/cuda</innerdir>
    <innerdir refid="dir_d3c419b6ec72671e9dcddfe0229ebd84">src/icrar/leap-accelerate/exception</innerdir>
    <innerdir refid="dir_7c8ab01d93454e9bb8fb0b096c0ad427">src/icrar/leap-accelerate/math</innerdir>
    <innerdir refid="dir_7874ac982d20d0c4bbbd17cd287af407">src/icrar/leap-accelerate/model</innerdir>
    <innerdir refid="dir_65ee2404d341e2fba9cd2c97e8248483">src/icrar/leap-accelerate/ms</innerdir>
    <innerdir refid="dir_2613d10453c7c37d8dc303a28536b90e">src/icrar/leap-accelerate/tests</innerdir>
    <innerfile refid="pch_8h">pch.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_8e79c837f989c64fbab75392435c0e1b" kind="dir">
    <compoundname>src/icrar/leap-accelerate-cli</compoundname>
    <innerdir refid="dir_1517fcff6d7bc7a29598b4cb536aec23">src/icrar/leap-accelerate-cli/tests</innerdir>
    <innerfile refid="cli_2main_8cc">main.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_9565bc285cd1e30590f40797cd06456e" kind="dir">
    <compoundname>leap_drops</compoundname>
    <innerfile refid="____init_____8py">__init__.py</innerfile>
    <innerfile refid="CallLeap_8py">CallLeap.py</innerfile>
    <innerfile refid="LeapGather_8py">LeapGather.py</innerfile>
    <innerfile refid="ProduceConfig_8py">ProduceConfig.py</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="leap_drops/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_495e22a886fc380c78b66e16c7857bd8" kind="dir">
    <compoundname>src/icrar/leap-accelerate/core/log</compoundname>
    <innerfile refid="logging_8cc">logging.cc</innerfile>
    <innerfile refid="logging_8h">logging.h</innerfile>
    <innerfile refid="Verbosity_8cc">Verbosity.cc</innerfile>
    <innerfile refid="Verbosity_8h">Verbosity.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/log/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7c8ab01d93454e9bb8fb0b096c0ad427" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math</compoundname>
    <innerdir refid="dir_7229c8e8eacb0bb51ad1ee28332f16d0">src/icrar/leap-accelerate/math/cpu</innerdir>
    <innerdir refid="dir_5f8ec6869d7787d3967eefe8107f9ddc">src/icrar/leap-accelerate/math/cuda</innerdir>
    <innerfile refid="casacore__helper_8h">casacore_helper.h</innerfile>
    <innerfile refid="complex__extensions_8h">complex_extensions.h</innerfile>
    <innerfile refid="math__conversion_8cc">math_conversion.cc</innerfile>
    <innerfile refid="math__conversion_8h">math_conversion.h</innerfile>
    <innerfile refid="vector__extensions_8h">vector_extensions.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_e6c91ba553a8d18b39268705c7973dfe" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/math</compoundname>
    <innerdir refid="dir_96c95bf6b07e809698decd0a311dda15">src/icrar/leap-accelerate/tests/math/cuda</innerdir>
    <innerfile refid="eigen__helper_8cc">eigen_helper.cc</innerfile>
    <innerfile refid="eigen__helper_8h">eigen_helper.h</innerfile>
    <innerfile refid="EigenExtensionsTests_8cc">EigenExtensionsTests.cc</innerfile>
    <innerfile refid="MathConversionTests_8cc">MathConversionTests.cc</innerfile>
    <innerfile refid="MatrixTests_8cc">MatrixTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_aa021c1e9c5dddecbfefdc0fc92521fc" kind="dir">
    <compoundname>src/icrar/leap-accelerate/core/memory</compoundname>
    <innerfile refid="ioutils_8h">ioutils.h</innerfile>
    <innerfile refid="system__memory_8cc">system_memory.cc</innerfile>
    <innerfile refid="system__memory_8h">system_memory.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/memory/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7874ac982d20d0c4bbbd17cd287af407" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model</compoundname>
    <innerdir refid="dir_0a4b09224a839f8b9117516e3ea32ac2">src/icrar/leap-accelerate/model/cpu</innerdir>
    <innerdir refid="dir_fcf279b433fb36f94b1a0018f1ca12c8">src/icrar/leap-accelerate/model/cuda</innerdir>
    <innerfile refid="band__data_8h">band_data.h</innerfile>
    <innerfile refid="visibility_8h">visibility.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_944f05e549f1b190b296bbbff5f9b99c" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/model</compoundname>
    <innerdir refid="dir_64aa0feff8f48b3d707b28ed7d5dfd66">src/icrar/leap-accelerate/tests/model/cpu</innerdir>
    <innerfile refid="IntegrationTests_8cc">IntegrationTests.cc</innerfile>
    <innerfile refid="MetaDataTests_8cc">MetaDataTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_65ee2404d341e2fba9cd2c97e8248483" kind="dir">
    <compoundname>src/icrar/leap-accelerate/ms</compoundname>
    <innerfile refid="MeasurementSet_8cc">MeasurementSet.cc</innerfile>
    <innerfile refid="MeasurementSet_8h">MeasurementSet.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_317f6b0ce6e2d283c50b3358c7ad1a33" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/ms</compoundname>
    <innerfile refid="MeasurementSetTests_8cc">MeasurementSetTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/ms/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_b0cd4f726ab18784c27310578b56d895" kind="dir">
    <compoundname>src/icrar/leap-accelerate/core/profiling</compoundname>
    <innerfile refid="resource__usage_8cc">resource_usage.cc</innerfile>
    <innerfile refid="resource__usage_8h">resource_usage.h</innerfile>
    <innerfile refid="timer_8h">timer.h</innerfile>
    <innerfile refid="UsageReporter_8cc">UsageReporter.cc</innerfile>
    <innerfile refid="UsageReporter_8h">UsageReporter.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_248832ff8517b5b7d5da1a6bc8750d99" kind="dir">
    <compoundname>docs/src</compoundname>
    <innerfile refid="conf_8py">conf.py</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/src/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_68267d1309a1af8e8297ef4c3efbcdba" kind="dir">
    <compoundname>src</compoundname>
    <innerdir refid="dir_2cd41a2057587d0316622d61ff53471e">src/icrar</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_b9c59d16d97d2f8074bfc9c13ffdc988" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/system</compoundname>
    <innerfile refid="CalibrationTests_8cc">CalibrationTests.cc</innerfile>
    <innerfile refid="ConfigTests_8cc">ConfigTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/system/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_1517fcff6d7bc7a29598b4cb536aec23" kind="dir">
    <compoundname>src/icrar/leap-accelerate-cli/tests</compoundname>
    <innerfile refid="CommandLineTests_8cc">CommandLineTests.cc</innerfile>
    <innerfile refid="E2EPerformanceTests_8cc">E2EPerformanceTests.cc</innerfile>
    <innerfile refid="JSONHelperTests_8cc">JSONHelperTests.cc</innerfile>
    <innerfile refid="cli_2tests_2main_8cc">main.cc</innerfile>
    <innerfile refid="cli_2tests_2pch_8h">pch.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_2613d10453c7c37d8dc303a28536b90e" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests</compoundname>
    <innerdir refid="dir_51874acfb9fb847bec886c1bd064b075">src/icrar/leap-accelerate/tests/algorithm</innerdir>
    <innerdir refid="dir_a4741d49ecbb127240e6bceaca6f134e">src/icrar/leap-accelerate/tests/common</innerdir>
    <innerdir refid="dir_00bde1c4f662f0faba7bdd57964f5b60">src/icrar/leap-accelerate/tests/core</innerdir>
    <innerdir refid="dir_8755274c44546ba54c602d80da38f326">src/icrar/leap-accelerate/tests/helper</innerdir>
    <innerdir refid="dir_e6c91ba553a8d18b39268705c7973dfe">src/icrar/leap-accelerate/tests/math</innerdir>
    <innerdir refid="dir_944f05e549f1b190b296bbbff5f9b99c">src/icrar/leap-accelerate/tests/model</innerdir>
    <innerdir refid="dir_317f6b0ce6e2d283c50b3358c7ad1a33">src/icrar/leap-accelerate/tests/ms</innerdir>
    <innerdir refid="dir_b9c59d16d97d2f8074bfc9c13ffdc988">src/icrar/leap-accelerate/tests/system</innerdir>
    <innerfile refid="gtest__helper_8h">gtest_helper.h</innerfile>
    <innerfile refid="tests_2main_8cc">main.cc</innerfile>
    <innerfile refid="tests_2pch_8h">pch.h</innerfile>
    <innerfile refid="test__helper_8cc">test_helper.cc</innerfile>
    <innerfile refid="test__helper_8h">test_helper.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/"/>
  </compounddef></doxygen>