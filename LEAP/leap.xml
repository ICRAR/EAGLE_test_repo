<?xml version="1.0" standalone="yes"?>
<doxygen version="1.8.18"><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1Arguments" kind="struct" language="C++" prot="public">
    <compoundname>icrar::Arguments</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1Arguments_1a27e655bb98c44c43779b3b5850d461ed" prot="public" static="no" mutable="no">
        <type>InputType</type>
        <definition>InputType icrar::Arguments::source</definition>
        <argsstring/>
        <name>source</name>
        <initializer>= InputType::FILENAME</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="61" column="19" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1a6e1d503ad09ee9752541d29290ee8134" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::Arguments::filePath</definition>
        <argsstring/>
        <name>filePath</name>
        <initializer>= boost::none</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="62" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1a7bb9577c36cb5aa540b9fa6d8333eb3b" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::Arguments::configFilePath</definition>
        <argsstring/>
        <name>configFilePath</name>
        <initializer>= boost::none</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="63" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1ac7a49613391d5b596898f195e0659894" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::Arguments::stations</definition>
        <argsstring/>
        <name>stations</name>
        <initializer>= boost::none</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="65" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1a204f5a5535eb92ff49d550771fcc0e17" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::Arguments::directions</definition>
        <argsstring/>
        <name>directions</name>
        <initializer>= boost::none</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="66" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1a81f58394f41d8923799dec6d0636746c" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::Arguments::implementation</definition>
        <argsstring/>
        <name>implementation</name>
        <initializer>= std::string("casa")</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="67" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1adb623bc46d2ceb444710a8d34fd266d6" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::Arguments::mwaSupport</definition>
        <argsstring/>
        <name>mwaSupport</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="68" column="14" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1Arguments_1aee6cfcc9a8e2f8306c6e4e85eb98b753" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::Arguments::readAutocorrelations</definition>
        <argsstring/>
        <name>readAutocorrelations</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="69" column="14" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="69" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1Arguments_1a847c2e9814001ae4bb695a6c9acd4b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::Arguments::Arguments</definition>
        <argsstring>()</argsstring>
        <name>Arguments</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="71" column="9" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="71" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Raw set of command line interface arguments </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/main.cc" line="59" column="5" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="60" bodyend="72"/>
    <listofallmembers>
      <member refid="structicrar_1_1Arguments_1a847c2e9814001ae4bb695a6c9acd4b9c" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>Arguments</name></member>
      <member refid="structicrar_1_1Arguments_1a7bb9577c36cb5aa540b9fa6d8333eb3b" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>configFilePath</name></member>
      <member refid="structicrar_1_1Arguments_1a204f5a5535eb92ff49d550771fcc0e17" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>directions</name></member>
      <member refid="structicrar_1_1Arguments_1a6e1d503ad09ee9752541d29290ee8134" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>filePath</name></member>
      <member refid="structicrar_1_1Arguments_1a81f58394f41d8923799dec6d0636746c" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>implementation</name></member>
      <member refid="structicrar_1_1Arguments_1adb623bc46d2ceb444710a8d34fd266d6" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>mwaSupport</name></member>
      <member refid="structicrar_1_1Arguments_1aee6cfcc9a8e2f8306c6e4e85eb98b753" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>readAutocorrelations</name></member>
      <member refid="structicrar_1_1Arguments_1a27e655bb98c44c43779b3b5850d461ed" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>source</name></member>
      <member refid="structicrar_1_1Arguments_1ac7a49613391d5b596898f195e0659894" prot="public" virt="non-virtual"><scope>icrar::Arguments</scope><name>stations</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1ArgumentsValidated" kind="class" language="C++" prot="public">
    <compoundname>icrar::ArgumentsValidated</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a1be2dccbe2c31ed7261b4db4fb3649c7" prot="private" static="no" mutable="no">
        <type>InputType</type>
        <definition>InputType icrar::ArgumentsValidated::m_source</definition>
        <argsstring/>
        <name>m_source</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constants </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="82" column="19" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a7b3ac581ebaebde4b679de78616e7a02" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::ArgumentsValidated::m_filePath</definition>
        <argsstring/>
        <name>m_filePath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="83" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1aa21ee2bb17710c46719b46f22a69aec1" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; int &gt;</type>
        <definition>boost::optional&lt;int&gt; icrar::ArgumentsValidated::m_stations</definition>
        <argsstring/>
        <name>m_stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="84" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="84" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a6033e3b02034d3fd993c6835a540c9b3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; MVDirection &gt;</type>
        <definition>std::vector&lt;MVDirection&gt; icrar::ArgumentsValidated::m_directions</definition>
        <argsstring/>
        <name>m_directions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="85" column="21" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a7d750b234e3c96f91427c9c34365dc97" prot="private" static="no" mutable="no">
        <type>ComputeImplementation</type>
        <definition>ComputeImplementation icrar::ArgumentsValidated::m_computeImplementation</definition>
        <argsstring/>
        <name>m_computeImplementation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="86" column="31" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a0a074e0b6a87d5f303391ecf67480962" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::ArgumentsValidated::m_mwaSupport</definition>
        <argsstring/>
        <name>m_mwaSupport</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="87" column="14" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a11adba0bbb47ab04221ecea0ba8c7701" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::ArgumentsValidated::m_readAutocorrelations</definition>
        <argsstring/>
        <name>m_readAutocorrelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="88" column="14" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a0ac3b662c3beb1d5ddb83d6025ef6429" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;MeasurementSet&gt; icrar::ArgumentsValidated::m_measurementSet</definition>
        <argsstring/>
        <name>m_measurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resources </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="93" column="25" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1ArgumentsValidated_1a452873dd8fb9e4d316db5739130326c2" prot="private" static="no" mutable="no">
        <type>std::istream *</type>
        <definition>std::istream* icrar::ArgumentsValidated::m_inputStream</definition>
        <argsstring/>
        <name>m_inputStream</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="94" column="22" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a01472fbb6bbf8219c7026f4117db511f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::ArgumentsValidated::ArgumentsValidated</definition>
        <argsstring>(Arguments &amp;&amp;args)</argsstring>
        <name>ArgumentsValidated</name>
        <param>
          <type><ref refid="structicrar_1_1Arguments" kindref="compound">Arguments</ref> &amp;&amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="97" column="9" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="97" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1aa9b61b17bf7f75a9201b2778697dd839" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::istream &amp;</type>
        <definition>std::istream&amp; icrar::ArgumentsValidated::GetInputStream</definition>
        <argsstring>()</argsstring>
        <name>GetInputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="161" column="22" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1a95ac8e79334b0dea6a9575402de47f15" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1MeasurementSet" kindref="compound">MeasurementSet</ref> &amp;</type>
        <definition>MeasurementSet&amp; icrar::ArgumentsValidated::GetMeasurementSet</definition>
        <argsstring>()</argsstring>
        <name>GetMeasurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="166" column="24" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="166" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1ae7081213d23521e04530fd5f9cd0c041" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; icrar::MVDirection &gt; &amp;</type>
        <definition>std::vector&lt;icrar::MVDirection&gt;&amp; icrar::ArgumentsValidated::GetDirections</definition>
        <argsstring>()</argsstring>
        <name>GetDirections</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="171" column="21" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="171" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1ArgumentsValidated_1aee8245f8faddc28ffc7a518183d3f759" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ComputeImplementation</type>
        <definition>ComputeImplementation icrar::ArgumentsValidated::GetComputeImplementation</definition>
        <argsstring>()</argsstring>
        <name>GetComputeImplementation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="176" column="31" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="176" bodyend="179"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Validated set of command line arguments </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/main.cc" line="77" column="5" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="78" bodyend="180"/>
    <listofallmembers>
      <member refid="classicrar_1_1ArgumentsValidated_1a01472fbb6bbf8219c7026f4117db511f" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>ArgumentsValidated</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1aee8245f8faddc28ffc7a518183d3f759" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetComputeImplementation</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1ae7081213d23521e04530fd5f9cd0c041" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetDirections</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1aa9b61b17bf7f75a9201b2778697dd839" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetInputStream</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a95ac8e79334b0dea6a9575402de47f15" prot="public" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>GetMeasurementSet</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a7d750b234e3c96f91427c9c34365dc97" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_computeImplementation</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a6033e3b02034d3fd993c6835a540c9b3" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_directions</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a7b3ac581ebaebde4b679de78616e7a02" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_filePath</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a452873dd8fb9e4d316db5739130326c2" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_inputStream</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a0ac3b662c3beb1d5ddb83d6025ef6429" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_measurementSet</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a0a074e0b6a87d5f303391ecf67480962" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_mwaSupport</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a11adba0bbb47ab04221ecea0ba8c7701" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_readAutocorrelations</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1a1be2dccbe2c31ed7261b4db4fb3649c7" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_source</name></member>
      <member refid="classicrar_1_1ArgumentsValidated_1aa21ee2bb17710c46719b46f22a69aec1" prot="private" virt="non-virtual"><scope>icrar::ArgumentsValidated</scope><name>m_stations</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classband__data" kind="class" language="C++" prot="public">
    <compoundname>band_data</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classband__data_1a243cbfc7c1dbc7fad6253d8809ebd653" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t band_data::channelCount</definition>
        <argsstring/>
        <name>channelCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="19" column="12" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classband__data_1ae492c0a41e895cd637353b160dccafbe" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double band_data::frequencyStep</definition>
        <argsstring/>
        <name>frequencyStep</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="20" column="12" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classband__data_1a019579450dc1db16e84d65041d8f1b55" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; std::vector&lt; double &gt; &gt;</type>
        <definition>std::unique_ptr&lt;std::vector&lt;double&gt; &gt; band_data::channelFrequencies</definition>
        <argsstring/>
        <name>channelFrequencies</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="21" column="21" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classband__data_1a0ee4fd86d2a17b4503b7aa79ef3560f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>band_data::band_data</definition>
        <argsstring>()</argsstring>
        <name>band_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="24" column="5" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="24" bodyend="28"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/band_data.h" line="17" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="18" bodyend="29"/>
    <listofallmembers>
      <member refid="classband__data_1a0ee4fd86d2a17b4503b7aa79ef3560f1" prot="public" virt="non-virtual"><scope>band_data</scope><name>band_data</name></member>
      <member refid="classband__data_1a243cbfc7c1dbc7fad6253d8809ebd653" prot="private" virt="non-virtual"><scope>band_data</scope><name>channelCount</name></member>
      <member refid="classband__data_1a019579450dc1db16e84d65041d8f1b55" prot="private" virt="non-virtual"><scope>band_data</scope><name>channelFrequencies</name></member>
      <member refid="classband__data_1ae492c0a41e895cd637353b160dccafbe" prot="private" virt="non-virtual"><scope>band_data</scope><name>frequencyStep</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1CalibrationResult" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::CalibrationResult</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1CalibrationResult_1ad77e834958d8125ddc36296ac3d20dcb" prot="private" static="no" mutable="no">
        <type>MVDirection</type>
        <definition>MVDirection icrar::cpu::CalibrationResult::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="78" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1CalibrationResult_1a579f1ce52f18a75b1ba04dc9ce5dcee0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; casacore::Matrix&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;casacore::Matrix&lt;double&gt; &gt; icrar::cpu::CalibrationResult::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="79" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationResult_1aff2e591e406e3ce447992db2a3a41cfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::CalibrationResult::CalibrationResult</definition>
        <argsstring>(const MVDirection &amp;direction, const std::vector&lt; casacore::Matrix&lt; double &gt;&gt; &amp;data)</argsstring>
        <name>CalibrationResult</name>
        <param>
          <type>const MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>const std::vector&lt; casacore::Matrix&lt; double &gt;&gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="82" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="82" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationResult_1a6f7234fe889995971129d53637148bba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const MVDirection</type>
        <definition>const MVDirection icrar::cpu::CalibrationResult::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="90" column="27" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="90" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationResult_1a03634f314e20d7faa3ae95b708bfff23" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; casacore::Matrix&lt; double &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;casacore::Matrix&lt;double&gt; &gt;&amp; icrar::cpu::CalibrationResult::GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="91" column="27" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationResult_1a79472972701bc053a15eafcafc0ff7d7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::CalibrationResult::Serialize</definition>
        <argsstring>(std::ostream &amp;os) const</argsstring>
        <name>Serialize</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="93" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.cc" bodystart="34" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1CalibrationResult_1a0439566e58d88b9e15393d510d9d21b6" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Writer</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::CalibrationResult::CreateJsonStrFormat</definition>
        <argsstring>(Writer &amp;writer) const</argsstring>
        <name>CreateJsonStrFormat</name>
        <param>
          <type>Writer &amp;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="97" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="97" bodyend="120"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="76" column="5" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="77" bodyend="121"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1aff2e591e406e3ce447992db2a3a41cfa" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>CalibrationResult</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1a0439566e58d88b9e15393d510d9d21b6" prot="private" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>CreateJsonStrFormat</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1a03634f314e20d7faa3ae95b708bfff23" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>GetData</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1a6f7234fe889995971129d53637148bba" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1a579f1ce52f18a75b1ba04dc9ce5dcee0" prot="private" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>m_data</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1ad77e834958d8125ddc36296ac3d20dcb" prot="private" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1cpu_1_1CalibrationResult_1a79472972701bc053a15eafcafc0ff7d7" prot="public" virt="non-virtual"><scope>icrar::cpu::CalibrationResult</scope><name>Serialize</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1casalib_1_1CalibrationResult" kind="class" language="C++" prot="public">
    <compoundname>icrar::casalib::CalibrationResult</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1CalibrationResult_1a28846a64ca7f5586750ca25264632b09" prot="private" static="no" mutable="no">
        <type>casacore::MVDirection</type>
        <definition>casacore::MVDirection icrar::casalib::CalibrationResult::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="67" column="31" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1CalibrationResult_1a4393e583730ba6ddcf334eabe6b16ab0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; casacore::Matrix&lt; double &gt; &gt;</type>
        <definition>std::vector&lt;casacore::Matrix&lt;double&gt; &gt; icrar::casalib::CalibrationResult::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="68" column="21" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1casalib_1_1CalibrationResult_1ae7fa0ae6f3c75d8523eabfc2f6587037" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::casalib::CalibrationResult::CalibrationResult</definition>
        <argsstring>(const casacore::MVDirection &amp;direction, const std::vector&lt; casacore::Matrix&lt; double &gt;&gt; &amp;data)</argsstring>
        <name>CalibrationResult</name>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>const std::vector&lt; casacore::Matrix&lt; double &gt;&gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="71" column="9" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="71" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1casalib_1_1CalibrationResult_1a629ebfd08a34c58f6b0fb519fdba6460" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MVDirection</type>
        <definition>const casacore::MVDirection icrar::casalib::CalibrationResult::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="79" column="37" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1casalib_1_1CalibrationResult_1afdeb8f89071cc043a4edb93ae643c958" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; casacore::Matrix&lt; double &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;casacore::Matrix&lt;double&gt; &gt;&amp; icrar::casalib::CalibrationResult::GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="80" column="27" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="80" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="65" column="5" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="66" bodyend="83"/>
    <listofallmembers>
      <member refid="classicrar_1_1casalib_1_1CalibrationResult_1ae7fa0ae6f3c75d8523eabfc2f6587037" prot="public" virt="non-virtual"><scope>icrar::casalib::CalibrationResult</scope><name>CalibrationResult</name></member>
      <member refid="classicrar_1_1casalib_1_1CalibrationResult_1afdeb8f89071cc043a4edb93ae643c958" prot="public" virt="non-virtual"><scope>icrar::casalib::CalibrationResult</scope><name>GetData</name></member>
      <member refid="classicrar_1_1casalib_1_1CalibrationResult_1a629ebfd08a34c58f6b0fb519fdba6460" prot="public" virt="non-virtual"><scope>icrar::casalib::CalibrationResult</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1casalib_1_1CalibrationResult_1a4393e583730ba6ddcf334eabe6b16ab0" prot="private" virt="non-virtual"><scope>icrar::casalib::CalibrationResult</scope><name>m_data</name></member>
      <member refid="classicrar_1_1casalib_1_1CalibrationResult_1a28846a64ca7f5586750ca25264632b09" prot="private" virt="non-virtual"><scope>icrar::casalib::CalibrationResult</scope><name>m_direction</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classcasacore__eigen__tests" kind="class" language="C++" prot="public">
    <compoundname>casacore_eigen_tests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcasacore__eigen__tests_1af584e8eb2108a0caa93e4aabda3278d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>casacore_eigen_tests::casacore_eigen_tests</definition>
        <argsstring>()</argsstring>
        <name>casacore_eigen_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="40" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="40" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1a141d1328dc2340a0818e9d10b726298a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="45" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="45" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1a8ef23d8522284b50f178d2f04ec41c4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="50" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1a34e9a2626b48719f42b1e17b14c0e902" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::test_column_major</definition>
        <argsstring>()</argsstring>
        <name>test_column_major</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="55" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="55" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1ac00a945bd2db615bd04055c280981504" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::test_matrix_casa</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_casa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="92" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="92" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1a4c109e32739bf885143f5b26df2c6854" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::test_matrix_casa_to_eigen</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_casa_to_eigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="110" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="110" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1a8eef888cae174b0521dbd3f2193afc56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::test_matrix_casa_to_eigen_dynamic</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_casa_to_eigen_dynamic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="145" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="145" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classcasacore__eigen__tests_1ab85f77e0780aa47fafc4de3778a72879" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void casacore_eigen_tests::test_uvw_to_icrar</definition>
        <argsstring>()</argsstring>
        <name>test_uvw_to_icrar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="170" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="170" bodyend="178"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>casacore_eigen_tests</label>
        <link refid="classcasacore__eigen__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>casacore_eigen_tests</label>
        <link refid="classcasacore__eigen__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="37" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="38" bodyend="179"/>
    <listofallmembers>
      <member refid="classcasacore__eigen__tests_1af584e8eb2108a0caa93e4aabda3278d4" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>casacore_eigen_tests</name></member>
      <member refid="classcasacore__eigen__tests_1a141d1328dc2340a0818e9d10b726298a" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>SetUp</name></member>
      <member refid="classcasacore__eigen__tests_1a8ef23d8522284b50f178d2f04ec41c4a" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>TearDown</name></member>
      <member refid="classcasacore__eigen__tests_1a34e9a2626b48719f42b1e17b14c0e902" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>test_column_major</name></member>
      <member refid="classcasacore__eigen__tests_1ac00a945bd2db615bd04055c280981504" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>test_matrix_casa</name></member>
      <member refid="classcasacore__eigen__tests_1a4c109e32739bf885143f5b26df2c6854" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>test_matrix_casa_to_eigen</name></member>
      <member refid="classcasacore__eigen__tests_1a8eef888cae174b0521dbd3f2193afc56" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>test_matrix_casa_to_eigen_dynamic</name></member>
      <member refid="classcasacore__eigen__tests_1ab85f77e0780aa47fafc4de3778a72879" prot="public" virt="non-virtual"><scope>casacore_eigen_tests</scope><name>test_uvw_to_icrar</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classchannel__info" kind="class" language="C++" prot="public">
    <compoundname>channel_info</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classchannel__info_1a16733867dd6e967440681eee4de7ebca" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double channel_info::frequency</definition>
        <argsstring/>
        <name>frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="7" column="12" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classchannel__info_1a8003570d7a6c86edc4f8d6b5108a0b68" prot="private" static="no" mutable="no">
        <type>double</type>
        <definition>double channel_info::width</definition>
        <argsstring/>
        <name>width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="8" column="12" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="8" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classchannel__info_1ad9e513ed581ce4aa3c1c63887b45674f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>channel_info::channel_info</definition>
        <argsstring>(double frequency, double width)</argsstring>
        <name>channel_info</name>
        <param>
          <type>double</type>
          <declname>frequency</declname>
        </param>
        <param>
          <type>double</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/band_data.h" line="11" column="5" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="11" bodyend="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/band_data.h" line="5" column="1" bodyfile="src/icrar/leap-accelerate/model/band_data.h" bodystart="6" bodyend="15"/>
    <listofallmembers>
      <member refid="classchannel__info_1ad9e513ed581ce4aa3c1c63887b45674f" prot="public" virt="non-virtual"><scope>channel_info</scope><name>channel_info</name></member>
      <member refid="classchannel__info_1a16733867dd6e967440681eee4de7ebca" prot="private" virt="non-virtual"><scope>channel_info</scope><name>frequency</name></member>
      <member refid="classchannel__info_1a8003570d7a6c86edc4f8d6b5108a0b68" prot="private" virt="non-virtual"><scope>channel_info</scope><name>width</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1CommandLineTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::CommandLineTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classicrar_1_1CommandLineTests_1adb7e0543a69025fae2d6357206471ac7" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::CommandLineTests::m_binDir</definition>
        <argsstring/>
        <name>m_binDir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="44" column="21" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1CommandLineTests_1a739f5d35b0cbf3750c5be0409ad8ce0c" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::CommandLineTests::m_srcDir</definition>
        <argsstring/>
        <name>m_srcDir</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="45" column="21" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a0365421799d9471d6d567bd393bc7cf7" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::CommandLineTests::CommandLineTests</definition>
        <argsstring>()</argsstring>
        <name>CommandLineTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="47" column="9" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a013fcc28c5678f559b12c67e53048546" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::CommandLineTests::~CommandLineTests</definition>
        <argsstring>() override</argsstring>
        <name>~CommandLineTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="52" column="9" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="52" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a862d7c6a67fdf70010094e283233a66f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestHelp</definition>
        <argsstring>()</argsstring>
        <name>TestHelp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="57" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="57" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a135fc011ea35065cbf9fdb37db0a0dcc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestSimpleRun</definition>
        <argsstring>()</argsstring>
        <name>TestSimpleRun</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="66" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a512f00e248e0f36721fed039a03d2c26" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestMultipleCasa</definition>
        <argsstring>()</argsstring>
        <name>TestMultipleCasa</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="77" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="77" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a191d671c53806e6dab2fcd4785a9b739" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestMultipleCpu</definition>
        <argsstring>()</argsstring>
        <name>TestMultipleCpu</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="99" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="99" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1CommandLineTests_1a0d0122858b68b6dd045450d4e8932e86" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::CommandLineTests::TestMultipleCuda</definition>
        <argsstring>()</argsstring>
        <name>TestMultipleCuda</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="121" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="121" bodyend="141"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Test suite for executing leap-accelerate from the command line. Note: only </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>icrar::CommandLineTests</label>
        <link refid="classicrar_1_1CommandLineTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>icrar::CommandLineTests</label>
        <link refid="classicrar_1_1CommandLineTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="41" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="42" bodyend="142"/>
    <listofallmembers>
      <member refid="classicrar_1_1CommandLineTests_1a0365421799d9471d6d567bd393bc7cf7" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>CommandLineTests</name></member>
      <member refid="classicrar_1_1CommandLineTests_1adb7e0543a69025fae2d6357206471ac7" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>m_binDir</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a739f5d35b0cbf3750c5be0409ad8ce0c" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>m_srcDir</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a862d7c6a67fdf70010094e283233a66f" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestHelp</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a512f00e248e0f36721fed039a03d2c26" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestMultipleCasa</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a191d671c53806e6dab2fcd4785a9b739" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestMultipleCpu</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a0d0122858b68b6dd045450d4e8932e86" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestMultipleCuda</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a135fc011ea35065cbf9fdb37db0a0dcc" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>TestSimpleRun</name></member>
      <member refid="classicrar_1_1CommandLineTests_1a013fcc28c5678f559b12c67e53048546" prot="protected" virt="non-virtual"><scope>icrar::CommandLineTests</scope><name>~CommandLineTests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1cpu_1_1Constants" kind="struct" language="C++" prot="public">
    <compoundname>icrar::cpu::Constants</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1ab0a067ec8e8b17f0481d2238a87302ce" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Constants::nantennas</definition>
        <argsstring/>
        <name>nantennas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="66" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a160371497d6e3a6e99113401c29552d7" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Constants::nbaselines</definition>
        <argsstring/>
        <name>nbaselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="67" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a654bec40b839f9721f5e3c2c2f1a349f" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Constants::channels</definition>
        <argsstring/>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="69" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a648700cb0e4e122c8ba8235ad56510d2" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Constants::num_pols</definition>
        <argsstring/>
        <name>num_pols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="70" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1ad68cda918accf7fcbf99cb57f6c51561" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Constants::stations</definition>
        <argsstring/>
        <name>stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="71" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a78eb0494a05e9db9dcde774ebf0fbe29" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Constants::rows</definition>
        <argsstring/>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="72" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1abf327239959a92a93043639e29c2e0d7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::freq_start_hz</definition>
        <argsstring/>
        <name>freq_start_hz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="74" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a3c071ce77d09d634f35274fbf6e9c6de" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::freq_inc_hz</definition>
        <argsstring/>
        <name>freq_inc_hz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="75" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a7568d07d7dbee13c3e0c00a73f46a1ff" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::phase_centre_ra_rad</definition>
        <argsstring/>
        <name>phase_centre_ra_rad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="77" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a9ecd6e70a43be6e199c9ddc6de539b58" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::phase_centre_dec_rad</definition>
        <argsstring/>
        <name>phase_centre_dec_rad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="78" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a2608610236852ecebecd0fd8be8eec2b" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::dlm_ra</definition>
        <argsstring/>
        <name>dlm_ra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="79" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1cpu_1_1Constants_1a8c958443119d1388122d3d0daea69f52" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::cpu::Constants::dlm_dec</definition>
        <argsstring/>
        <name>dlm_dec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="80" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1cpu_1_1Constants_1a29107fc18802f0d2194e43101a5c53e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__device__ __host__ double</type>
        <definition>__device__ __host__ double icrar::cpu::Constants::GetChannelWavelength</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetChannelWavelength</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="82" column="36" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1cpu_1_1Constants_1a5d0da2e7ce58cc910c12c0a06d9acf24" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::Constants::operator==</definition>
        <argsstring>(const Constants &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">Constants</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="87" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="282" bodyend="296"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="64" column="5" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="65" bodyend="88"/>
    <listofallmembers>
      <member refid="structicrar_1_1cpu_1_1Constants_1a654bec40b839f9721f5e3c2c2f1a349f" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>channels</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a8c958443119d1388122d3d0daea69f52" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>dlm_dec</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a2608610236852ecebecd0fd8be8eec2b" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>dlm_ra</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a3c071ce77d09d634f35274fbf6e9c6de" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>freq_inc_hz</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1abf327239959a92a93043639e29c2e0d7" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>freq_start_hz</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a29107fc18802f0d2194e43101a5c53e9" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>GetChannelWavelength</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1ab0a067ec8e8b17f0481d2238a87302ce" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>nantennas</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a160371497d6e3a6e99113401c29552d7" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>nbaselines</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a648700cb0e4e122c8ba8235ad56510d2" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>num_pols</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a5d0da2e7ce58cc910c12c0a06d9acf24" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>operator==</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a9ecd6e70a43be6e199c9ddc6de539b58" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>phase_centre_dec_rad</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a7568d07d7dbee13c3e0c00a73f46a1ff" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>phase_centre_ra_rad</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1a78eb0494a05e9db9dcde774ebf0fbe29" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>rows</name></member>
      <member refid="structicrar_1_1cpu_1_1Constants_1ad68cda918accf7fcbf99cb57f6c51561" prot="public" virt="non-virtual"><scope>icrar::cpu::Constants</scope><name>stations</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1device__matrix" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::device_matrix</compoundname>
    <basecompoundref prot="private" virt="non-virtual">noncopyable</basecompoundref>
    <includes local="no">device_matrix.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__matrix_1afd61a9a14dbe5b8a01edb68ae8da86c3" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_matrix&lt; T &gt;::m_rows</definition>
        <argsstring/>
        <name>m_rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="49" column="16" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__matrix_1a583d40615f7187f6ee341378f5e8a84b" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_matrix&lt; T &gt;::m_cols</definition>
        <argsstring/>
        <name>m_cols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="50" column="16" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__matrix_1a71adbfa11d485ea8e62db1b4510ba4ec" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* icrar::cuda::device_matrix&lt; T &gt;::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="51" column="11" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ab1b4f61cd3d77ffcea38645ca03c08c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(size_t rows, size_t cols, const T *data=nullptr)</argsstring>
        <name>device_matrix</name>
        <param>
          <type>size_t</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct a new device buffer object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rows</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cols</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="62" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="62" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a5b3427e2d2f4bdcaae6ba8f2e2d8f86f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; data)</argsstring>
        <name>device_matrix</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="79" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="79" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a96b3bec5dd8eb12ac50d8c2e70dee7e6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Cols</declname>
            <defname>Cols</defname>
          </param>
        </templateparamlist>
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(Eigen::Matrix&lt; T, Rows, Cols &gt; data)</argsstring>
        <name>device_matrix</name>
        <param>
          <type>Eigen::Matrix&lt; T, Rows, Cols &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="83" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="83" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1acb19bd138c2aa99f35102aff9f24a2af" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::device_matrix</definition>
        <argsstring>(device_matrix &amp;&amp;other)</argsstring>
        <name>device_matrix</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">device_matrix</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="91" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="91" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ac01ef9262f7d200dc2503f0c2d1aa426" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_matrix&lt; T &gt;::~device_matrix</definition>
        <argsstring>()</argsstring>
        <name>~device_matrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="101" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="101" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a70a8a59c5c112c33e532322d92d83d98" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T* icrar::cuda::device_matrix&lt; T &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="109" column="31" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="109" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a64c41899b290f4a44ef064d671d76c2f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T* icrar::cuda::device_matrix&lt; T &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="114" column="37" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="114" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a563ae19e31b9a724139148314e6ec803" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetRows</definition>
        <argsstring>() const</argsstring>
        <name>GetRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="119" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="119" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a1daafaa282b83ebb96d0d9d7d59fe15c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetCols</definition>
        <argsstring>() const</argsstring>
        <name>GetCols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="124" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="124" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a0cb3c68e85866cdb1912321e6936dc76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="129" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a8c552300d2f1a63a85291c29db6e5e5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_matrix&lt; T &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="134" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a249a5cc81be23c3677be6f27fcc53833" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::SetDataSync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataSync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs a synchronous copy of data into the device buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="145" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="145" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a33447d1eba0413f7e38ba0280e46f5a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::SetDataAsync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the Data Async object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="158" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="158" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1a0ddef8694b9abafbfb52108b7e2bb67a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="165" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1ae8ade7e9e5231ee55f7f2229ac29085b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="171" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="171" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1aa3a83a98ab9ca0d06ac5fb4d09ca57f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="177" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="177" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1afd845d176fd77049e272bbb8901f1cab" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>Rows</declname>
            <defname>Rows</defname>
          </param>
          <param>
            <type>int</type>
            <declname>Cols</declname>
            <defname>Cols</defname>
          </param>
        </templateparamlist>
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Matrix&lt; T, Rows, Cols &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Matrix&lt; T, Rows, Cols &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="184" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="184" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__matrix_1af13d561d1cbbd6b17aaa6ae4c19550b9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_matrix&lt; T &gt;::ToHostASync</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHostASync</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="190" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="190" bodyend="194"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda device buffer object that represents a memory buffer on a cuda device. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <ulink url="https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/">https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/</ulink> </para>
</simplesect>
<simplesect kind="note"><para>See <ulink url="https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421">https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::cuda::device_matrix&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>noncopyable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::cuda::device_matrix&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>noncopyable</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/cuda/device_matrix.h" line="47" column="5" bodyfile="src/icrar/leap-accelerate/cuda/device_matrix.h" bodystart="48" bodyend="195"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ab1b4f61cd3d77ffcea38645ca03c08c7" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a5b3427e2d2f4bdcaae6ba8f2e2d8f86f" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a96b3bec5dd8eb12ac50d8c2e70dee7e6" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1acb19bd138c2aa99f35102aff9f24a2af" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>device_matrix</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a70a8a59c5c112c33e532322d92d83d98" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a64c41899b290f4a44ef064d671d76c2f" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a1daafaa282b83ebb96d0d9d7d59fe15c" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetCols</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a0cb3c68e85866cdb1912321e6936dc76" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetCount</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a563ae19e31b9a724139148314e6ec803" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetRows</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a8c552300d2f1a63a85291c29db6e5e5c" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a71adbfa11d485ea8e62db1b4510ba4ec" prot="private" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>m_buffer</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a583d40615f7187f6ee341378f5e8a84b" prot="private" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>m_cols</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1afd61a9a14dbe5b8a01edb68ae8da86c3" prot="private" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>m_rows</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a33447d1eba0413f7e38ba0280e46f5a6" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a249a5cc81be23c3677be6f27fcc53833" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>SetDataSync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1a0ddef8694b9abafbfb52108b7e2bb67a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ae8ade7e9e5231ee55f7f2229ac29085b" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1aa3a83a98ab9ca0d06ac5fb4d09ca57f9" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1afd845d176fd77049e272bbb8901f1cab" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1af13d561d1cbbd6b17aaa6ae4c19550b9" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>ToHostASync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__matrix_1ac01ef9262f7d200dc2503f0c2d1aa426" prot="public" virt="non-virtual"><scope>icrar::cuda::device_matrix</scope><name>~device_matrix</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1device__tensor3" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::device_tensor3</compoundname>
    <includes local="no">device_tensor.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__tensor3_1ad1aa4d21a8a16f972d45bb0a4908f2bc" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_tensor3&lt; T &gt;::m_sizeDim0</definition>
        <argsstring/>
        <name>m_sizeDim0</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="48" column="16" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__tensor3_1a6016af5a78642d5a8ecf22d491ba5096" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_tensor3&lt; T &gt;::m_sizeDim1</definition>
        <argsstring/>
        <name>m_sizeDim1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="49" column="16" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__tensor3_1ad66fde9a744715781815b92a96a6f6ba" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_tensor3&lt; T &gt;::m_sizeDim2</definition>
        <argsstring/>
        <name>m_sizeDim2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="50" column="16" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__tensor3_1aa435ff9ed2c15fefb2eda699c38ee556" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* icrar::cuda::device_tensor3&lt; T &gt;::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="51" column="11" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a5e0d54b4e1a740ae96e7edd28431de59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor3&lt; T &gt;::device_tensor3</definition>
        <argsstring>(size_t sizeDim0, size_t sizeDim1, size_t sizeDim2, const T *data=nullptr)</argsstring>
        <name>device_tensor3</name>
        <param>
          <type>size_t</type>
          <declname>sizeDim0</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim1</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>sizeDim2</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="54" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="54" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a66b186fbddb4ebc5be48a4c8febc37d5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor3&lt; T &gt;::device_tensor3</definition>
        <argsstring>(const Eigen::Tensor&lt; T, 3 &gt; &amp;tensor)</argsstring>
        <name>device_tensor3</name>
        <param>
          <type>const Eigen::Tensor&lt; T, 3 &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="71" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="71" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a68d8a7ae87bd477fea23ff06275ce207" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor3&lt; T &gt;::device_tensor3</definition>
        <argsstring>(device_tensor3 &amp;&amp;other)</argsstring>
        <name>device_tensor3</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__tensor3" kindref="compound">device_tensor3</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="79" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="79" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a2110d22499eb4eb1e7bb2a2bd1bd6c6e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_tensor3&lt; T &gt;::~device_tensor3</definition>
        <argsstring>()</argsstring>
        <name>~device_tensor3</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="91" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="91" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a687780ada4495a35229229fa1d2e3b2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T* icrar::cuda::device_tensor3&lt; T &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="99" column="31" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="99" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a7df17d38e6229bcbc164157efbbf716f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T* icrar::cuda::device_tensor3&lt; T &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="104" column="37" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="104" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a8020efaf01b882c650ff18c05ed87427" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_tensor3&lt; T &gt;::GetDimensionSize</definition>
        <argsstring>(int dim) const</argsstring>
        <name>GetDimensionSize</name>
        <param>
          <type>int</type>
          <declname>dim</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="109" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="109" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a4f844eb57ca6a8019536d836ec4c0263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ Eigen::DSizes&lt; Eigen::DenseIndex, 3 &gt;</type>
        <definition>__host__ __device__ Eigen::DSizes&lt;Eigen::DenseIndex, 3&gt; icrar::cuda::device_tensor3&lt; T &gt;::GetDimensions</definition>
        <argsstring>()</argsstring>
        <name>GetDimensions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="117" column="43" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="117" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a62463eee1f87ff071f40887ff4d603d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_tensor3&lt; T &gt;::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="126" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1ac390e53c79a6749a262fec2f9dd72e36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_tensor3&lt; T &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="131" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="131" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1ae13c9281f9508d730028fc0875ab85ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_tensor3&lt; T &gt;::GetByteSize</definition>
        <argsstring>() const</argsstring>
        <name>GetByteSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="136" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a141283f7387065b8a6778cff95c9c9f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor3&lt; T &gt;::SetDataSync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataSync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs a synchronous copy of data into the device buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="147" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="147" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1aaa2e423e967bb589314c7fa0cd46e2a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor3&lt; T &gt;::SetDataAsync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Set the Data asyncronously. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="160" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="160" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a0a26605584a4528235998dd1f237a168" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor3&lt; T &gt;::ToHost</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="167" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="167" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a7274a7a79ae57ffb4571115399280294" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor3&lt; T &gt;::ToHost</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="173" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1a5e6899672acea895ac16a303264a5ed4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor3&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Tensor&lt; T, 3 &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Tensor&lt; T, 3 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="179" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="179" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__tensor3_1ae4f553f6f565ec741a5f71c7df1e0df4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_tensor3&lt; T &gt;::ToHostASync</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHostASync</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="185" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="185" bodyend="189"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda device buffer object that represents a memory buffer on a cuda device. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <ulink url="https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/">https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/</ulink> </para>
</simplesect>
<simplesect kind="note"><para>See <ulink url="https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421">https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_tensor.h" line="46" column="5" bodyfile="src/icrar/leap-accelerate/cuda/device_tensor.h" bodystart="47" bodyend="190"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a5e0d54b4e1a740ae96e7edd28431de59" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>device_tensor3</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a66b186fbddb4ebc5be48a4c8febc37d5" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>device_tensor3</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a68d8a7ae87bd477fea23ff06275ce207" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>device_tensor3</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a687780ada4495a35229229fa1d2e3b2a" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a7df17d38e6229bcbc164157efbbf716f" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1ae13c9281f9508d730028fc0875ab85ed" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>GetByteSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a62463eee1f87ff071f40887ff4d603d9" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>GetCount</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a4f844eb57ca6a8019536d836ec4c0263" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>GetDimensions</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a8020efaf01b882c650ff18c05ed87427" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>GetDimensionSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1ac390e53c79a6749a262fec2f9dd72e36" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1aa435ff9ed2c15fefb2eda699c38ee556" prot="private" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>m_buffer</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1ad1aa4d21a8a16f972d45bb0a4908f2bc" prot="private" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>m_sizeDim0</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a6016af5a78642d5a8ecf22d491ba5096" prot="private" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>m_sizeDim1</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1ad66fde9a744715781815b92a96a6f6ba" prot="private" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>m_sizeDim2</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1aaa2e423e967bb589314c7fa0cd46e2a7" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a141283f7387065b8a6778cff95c9c9f0" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>SetDataSync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a0a26605584a4528235998dd1f237a168" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a7274a7a79ae57ffb4571115399280294" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a5e6899672acea895ac16a303264a5ed4" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1ae4f553f6f565ec741a5f71c7df1e0df4" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>ToHostASync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__tensor3_1a2110d22499eb4eb1e7bb2a2bd1bd6c6e" prot="public" virt="non-virtual"><scope>icrar::cuda::device_tensor3</scope><name>~device_tensor3</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1device__vector" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::device_vector</compoundname>
    <basecompoundref prot="private" virt="non-virtual">noncopyable</basecompoundref>
    <includes local="no">device_vector.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__vector_1ac5f26eb33096723e504d8a51c57f5dc9" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::device_vector&lt; T &gt;::m_count</definition>
        <argsstring/>
        <name>m_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="53" column="16" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1device__vector_1a7678fd3d5154ef09d6c9375374966dc0" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* icrar::cuda::device_vector&lt; T &gt;::m_buffer</definition>
        <argsstring/>
        <name>m_buffer</name>
        <initializer>= nullptr</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="54" column="11" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a8ea0a895010800fc2352aca36e407d8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(size_t count, const T *data=nullptr)</argsstring>
        <name>device_vector</name>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>data</declname>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
<para>Construct a new device buffer object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="64" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="64" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a2345ba70a85a79901b809711f37e29a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(std::vector&lt; T &gt; data)</argsstring>
        <name>device_vector</name>
        <param>
          <type>std::vector&lt; T &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="79" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a031ffc5a53f5e96e489b28b4aed42797" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; data)</argsstring>
        <name>device_vector</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="81" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a895af36b70fb382424a99db6c4965440" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(Eigen::Matrix&lt; T, 1, Eigen::Dynamic &gt; data)</argsstring>
        <name>device_vector</name>
        <param>
          <type>Eigen::Matrix&lt; T, 1, Eigen::Dynamic &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="83" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1aecec4f713a5d50413bb016ed17fd2114" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::device_vector</definition>
        <argsstring>(device_vector &amp;&amp;other)</argsstring>
        <name>device_vector</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Copy Constructor. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="90" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="90" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a6ab6ba8a917cd6345324062910675bfa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::device_vector&lt; T &gt;::~device_vector</definition>
        <argsstring>()</argsstring>
        <name>~device_vector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="98" column="9" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="98" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ab0bc2febcfd47e2d79120a9cee338478" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ T *</type>
        <definition>__host__ __device__ T* icrar::cuda::device_vector&lt; T &gt;::Get</definition>
        <argsstring>()</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="106" column="31" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="106" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1aca33746e8d5857f03d840f1583653cd6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ const T *</type>
        <definition>__host__ __device__ const T* icrar::cuda::device_vector&lt; T &gt;::Get</definition>
        <argsstring>() const</argsstring>
        <name>Get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="111" column="37" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="111" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a860ffec7b3f2597e93d67b216c9cc7d3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_vector&lt; T &gt;::GetCount</definition>
        <argsstring>() const</argsstring>
        <name>GetCount</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="116" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="116" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ada7479ce94e4eab84cd5c91149f66c20" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ __device__ size_t</type>
        <definition>__host__ __device__ size_t icrar::cuda::device_vector&lt; T &gt;::GetSize</definition>
        <argsstring>() const</argsstring>
        <name>GetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="121" column="36" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1afd61b0d60d9df51baf22522dffbdc124" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::SetDataSync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataSync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Performs a synchronous copy of data into the device buffer. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><bold>host</bold> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="132" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a4472bc9ed3f6d84657554a6259fb2374" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::SetDataAsync</definition>
        <argsstring>(const T *data)</argsstring>
        <name>SetDataAsync</name>
        <param>
          <type>const T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="139" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="139" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a7a19c8ee1780e6dd895fb15a0382a715" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHost</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="146" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="146" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1ae0800dacba95f2f9e230531ae93e0fb9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHost</definition>
        <argsstring>(std::vector&lt; T &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="152" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="152" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a4f9bf9878f9324bf3f2b460bfe0f3996" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHost</definition>
        <argsstring>(Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;out) const</argsstring>
        <name>ToHost</name>
        <param>
          <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="158" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="158" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1device__vector_1a13c8c32a5fede8461476fce865eba152" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::device_vector&lt; T &gt;::ToHostASync</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToHostASync</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="164" column="23" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="164" bodyend="168"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A cuda device buffer object that represents a memory buffer on a cuda device. </para>
    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>See <ulink url="https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/">https://www.quantstart.com/articles/Matrix-Matrix-Multiplication-on-the-GPU-with-Nvidia-CUDA/</ulink> </para>
</simplesect>
<simplesect kind="note"><para>See <ulink url="https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421">https://forums.developer.nvidia.com/t/guide-cudamalloc3d-and-cudaarrays/23421</ulink> </para>
</simplesect>
</para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>noncopyable</label>
      </node>
      <node id="1">
        <label>icrar::cuda::device_vector&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>noncopyable</label>
      </node>
      <node id="1">
        <label>icrar::cuda::device_vector&lt; T &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="2" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/cuda/device_vector.h" line="51" column="5" bodyfile="src/icrar/leap-accelerate/cuda/device_vector.h" bodystart="52" bodyend="169"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a8ea0a895010800fc2352aca36e407d8c" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a2345ba70a85a79901b809711f37e29a7" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a031ffc5a53f5e96e489b28b4aed42797" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a895af36b70fb382424a99db6c4965440" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1aecec4f713a5d50413bb016ed17fd2114" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>device_vector</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ab0bc2febcfd47e2d79120a9cee338478" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1aca33746e8d5857f03d840f1583653cd6" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>Get</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a860ffec7b3f2597e93d67b216c9cc7d3" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>GetCount</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ada7479ce94e4eab84cd5c91149f66c20" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>GetSize</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a7678fd3d5154ef09d6c9375374966dc0" prot="private" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>m_buffer</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ac5f26eb33096723e504d8a51c57f5dc9" prot="private" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>m_count</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a4472bc9ed3f6d84657554a6259fb2374" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>SetDataAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1afd61b0d60d9df51baf22522dffbdc124" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>SetDataSync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a7a19c8ee1780e6dd895fb15a0382a715" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1ae0800dacba95f2f9e230531ae93e0fb9" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a4f9bf9878f9324bf3f2b460bfe0f3996" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a13c8c32a5fede8461476fce865eba152" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>ToHostASync</name></member>
      <member refid="classicrar_1_1cuda_1_1device__vector_1a6ab6ba8a917cd6345324062910675bfa" prot="public" virt="non-virtual"><scope>icrar::cuda::device_vector</scope><name>~device_vector</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1DeviceIntegration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::DeviceIntegration</compoundname>
    <includes local="no">DeviceIntegration.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1aa20906ffc8dcef981c64045f855f3161" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cuda::DeviceIntegration::m_integrationNumber</definition>
        <argsstring/>
        <name>m_integrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="64" column="13" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1a31819cbe54e4df5af70c178a43233a77" prot="private" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor3" kindref="compound">device_tensor3</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>device_tensor3&lt;std::complex&lt;double&gt; &gt; icrar::cuda::DeviceIntegration::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="65" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1ad388e7ca84f910d35fd8664fdf13d8e3" prot="private" static="no" mutable="no">
        <type>union icrar::cuda::DeviceIntegration::@16</type>
        <definition>union icrar::cuda::DeviceIntegration::@16 icrar::cuda::DeviceIntegration::@17</definition>
        <argsstring/>
        <name>@17</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="77" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1a4ade14cacb67fbd9cd6cb5bd47008045" prot="public" static="no" mutable="no">
        <type>std::array&lt; size_t, 4 &gt;</type>
        <definition>std::array&lt;size_t, 4&gt; icrar::cuda::DeviceIntegration::m_parameters</definition>
        <argsstring/>
        <name>m_parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="69" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1ab514586f56e6ff1a222101021def9591" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::index</definition>
        <argsstring/>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="72" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1a2f5ff26c67b391723e2c31759206a4fe" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::x</definition>
        <argsstring/>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="73" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1abf4c7a9b4b018a7410c2dc06f92232ec" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::channels</definition>
        <argsstring/>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="74" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceIntegration_1a017ff14834a2d9f55e36ef7c495e99c6" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::baselines</definition>
        <argsstring/>
        <name>baselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="75" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1af8dbb2ee2c0fb362c6a79bf164601570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceIntegration::DeviceIntegration</definition>
        <argsstring>(Eigen::DSizes&lt; Eigen::DenseIndex, 3 &gt; shape)</argsstring>
        <name>DeviceIntegration</name>
        <param>
          <type>Eigen::DSizes&lt; Eigen::DenseIndex, 3 &gt;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Construct a new Device Integration object where visibilities is a zero tensor of @shape. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>shape</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="84" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a8952db3ae6f0e083210d493190dee9fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceIntegration::DeviceIntegration</definition>
        <argsstring>(const icrar::cpu::Integration &amp;integration)</argsstring>
        <name>DeviceIntegration</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">icrar::cpu::Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <briefdescription>
<para>Construct a new Device Integration object with a data syncronous copy. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="91" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a65bae5e2b5bababb3a0f85689767d0a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int icrar::cuda::DeviceIntegration::GetIntegrationNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetIntegrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="93" column="13" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a1dc1c05e783c19cdf7ef4f3f5d8cd6cf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetIndex</definition>
        <argsstring>() const</argsstring>
        <name>GetIndex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="94" column="16" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1aa3f8ac14947c6b5ffd76e7ea6208bfba" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetChannels</definition>
        <argsstring>() const</argsstring>
        <name>GetChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="96" column="16" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="96" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1afc987e7f4b39932632cbfbef455b9558" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cuda::DeviceIntegration::GetBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetBaselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="97" column="16" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1ade91f372062a4b0fd7a3f573aa9fda78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classicrar_1_1cuda_1_1device__tensor3" kindref="compound">device_tensor3</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>const device_tensor3&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DeviceIntegration::GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="99" column="30" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a157cbbf321b20d499c7cd30dbee01266" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classicrar_1_1cuda_1_1device__tensor3" kindref="compound">device_tensor3</ref>&lt; std::complex&lt; double &gt; &gt; &amp;</type>
        <definition>device_tensor3&lt;std::complex&lt;double&gt; &gt;&amp; icrar::cuda::DeviceIntegration::GetData</definition>
        <argsstring>()</argsstring>
        <name>GetData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="100" column="24" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceIntegration_1a74ca95e80471eda05a8cade5d96bb323" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DeviceIntegration::SetData</definition>
        <argsstring>(const icrar::cpu::Integration &amp;integration)</argsstring>
        <name>SetData</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">icrar::cpu::Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <briefdescription>
<para>Set the Data object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="107" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A Cuda memory buffer instance of visibility data for integration. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" line="62" column="5" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h" bodystart="63" bodyend="109"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a017ff14834a2d9f55e36ef7c495e99c6" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>baselines</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1abf4c7a9b4b018a7410c2dc06f92232ec" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>channels</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1af8dbb2ee2c0fb362c6a79bf164601570" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>DeviceIntegration</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a8952db3ae6f0e083210d493190dee9fb" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>DeviceIntegration</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1afc987e7f4b39932632cbfbef455b9558" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetBaselines</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aa3f8ac14947c6b5ffd76e7ea6208bfba" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetChannels</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1ade91f372062a4b0fd7a3f573aa9fda78" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a157cbbf321b20d499c7cd30dbee01266" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a1dc1c05e783c19cdf7ef4f3f5d8cd6cf" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetIndex</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a65bae5e2b5bababb3a0f85689767d0a1" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>GetIntegrationNumber</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1ab514586f56e6ff1a222101021def9591" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>index</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a31819cbe54e4df5af70c178a43233a77" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>m_data</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1aa20906ffc8dcef981c64045f855f3161" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>m_integrationNumber</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a4ade14cacb67fbd9cd6cb5bd47008045" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>m_parameters</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a74ca95e80471eda05a8cade5d96bb323" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>SetData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceIntegration_1a2f5ff26c67b391723e2c31759206a4fe" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceIntegration</scope><name>x</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1DeviceMetaData" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::DeviceMetaData</compoundname>
    <includes local="no">DeviceMetaData.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a51c7d396c56380ac1d5c91edcfc7052f" prot="private" static="no" mutable="no">
        <type><ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref></type>
        <definition>icrar::cpu::Constants icrar::cuda::DeviceMetaData::constants</definition>
        <argsstring/>
        <name>constants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="83" column="31" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1addee906bc64bda0d91fcff753116e805" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::DeviceMetaData::A</definition>
        <argsstring/>
        <name>A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="86" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a1b7a7b6492a619098e97ae4b3966b121" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">icrar::cuda::device_vector</ref>&lt; int &gt;</type>
        <definition>icrar::cuda::device_vector&lt;int&gt; icrar::cuda::DeviceMetaData::I</definition>
        <argsstring/>
        <name>I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="87" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a5a3527e1f4dddc6a4318bb08b8133012" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::DeviceMetaData::Ad</definition>
        <argsstring/>
        <name>Ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="88" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a17af43db18fe5e321cb4a97a37d196d6" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::DeviceMetaData::A1</definition>
        <argsstring/>
        <name>A1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="90" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a95cb41519f4e886340edcfa10fe05dad" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">icrar::cuda::device_vector</ref>&lt; int &gt;</type>
        <definition>icrar::cuda::device_vector&lt;int&gt; icrar::cuda::DeviceMetaData::I1</definition>
        <argsstring/>
        <name>I1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="91" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="91" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a2ea6223a473fbd1fb1735595ab5babc7" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::DeviceMetaData::Ad1</definition>
        <argsstring/>
        <name>Ad1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="92" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a5d1a6986babf248d18c98c5967f4f401" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">icrar::cuda::device_vector</ref>&lt; icrar::MVuvw &gt;</type>
        <definition>icrar::cuda::device_vector&lt;icrar::MVuvw&gt; icrar::cuda::DeviceMetaData::oldUVW</definition>
        <argsstring/>
        <name>oldUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="97" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a5861557840273c5088d7498fac3c4a33" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">icrar::cuda::device_vector</ref>&lt; icrar::MVuvw &gt;</type>
        <definition>icrar::cuda::device_vector&lt;icrar::MVuvw&gt; icrar::cuda::DeviceMetaData::UVW</definition>
        <argsstring/>
        <name>UVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="98" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1adee0d8b39cd7c6cd78baa3726a3a12c7" prot="public" static="no" mutable="no">
        <type>icrar::MVDirection</type>
        <definition>icrar::MVDirection icrar::cuda::DeviceMetaData::direction</definition>
        <argsstring/>
        <name>direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="99" column="28" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a888aefd7d920c78d9537b03bbe99ebfa" prot="public" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d icrar::cuda::DeviceMetaData::dd</definition>
        <argsstring/>
        <name>dd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="100" column="25" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1DeviceMetaData_1a38d3fb3630ae32f697a9f975634378a3" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; std::complex&lt; double &gt; &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;std::complex&lt;double&gt; &gt; icrar::cuda::DeviceMetaData::avg_data</definition>
        <argsstring/>
        <name>avg_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="101" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1ae14aeef2e17819743bd5e95876262d9f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceMetaData::DeviceMetaData</definition>
        <argsstring>()</argsstring>
        <name>DeviceMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="81" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a734264094a8cd14db2c941c51b51de91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cuda::DeviceMetaData::DeviceMetaData</definition>
        <argsstring>(const icrar::cpu::MetaData &amp;metadata)</argsstring>
        <name>DeviceMetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="104" column="9"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a9dd1f4696835630e2011325b12825513" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref> &amp;</type>
        <definition>const icrar::cpu::Constants&amp; icrar::cuda::DeviceMetaData::GetConstants</definition>
        <argsstring>()</argsstring>
        <name>GetConstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="106" column="37"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1ad6a9bae9d5d729b1a169dc1d92457a12" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DeviceMetaData::ToHost</definition>
        <argsstring>(icrar::cpu::MetaData &amp;host) const</argsstring>
        <name>ToHost</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="108" column="14"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a654929f0d4f395670435e9c28a5e2b08" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref></type>
        <definition>icrar::cpu::MetaData icrar::cuda::DeviceMetaData::ToHost</definition>
        <argsstring>() const</argsstring>
        <name>ToHost</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="109" column="30"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cuda_1_1DeviceMetaData_1a4faeae1bef55b4b3ae730ae7d932292c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::DeviceMetaData::ToHostAsync</definition>
        <argsstring>(icrar::cpu::MetaData &amp;host) const</argsstring>
        <name>ToHostAsync</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>host</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="110" column="14"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Represents the complete collection of MetaData that resides on the GPU for leap-calibration </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="3">
        <label>boost::noncopyable</label>
      </node>
      <node id="7">
        <label>icrar::cuda::device_matrix&lt; double &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="5" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>icrar::cuda::device_vector&lt; icrar::MVuvw &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="3" relation="private-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>noncopyable</label>
      </node>
      <node id="1">
        <label>icrar::cuda::DeviceMetaData</label>
        <link refid="classicrar_1_1cuda_1_1DeviceMetaData"/>
        <childnode refid="2" relation="usage">
          <edgelabel>oldUVW</edgelabel>
          <edgelabel>UVW</edgelabel>
        </childnode>
        <childnode refid="4" relation="usage">
          <edgelabel>I</edgelabel>
          <edgelabel>I1</edgelabel>
        </childnode>
        <childnode refid="6" relation="usage">
          <edgelabel>avg_data</edgelabel>
        </childnode>
        <childnode refid="7" relation="usage">
          <edgelabel>A1</edgelabel>
          <edgelabel>Ad</edgelabel>
          <edgelabel>Ad1</edgelabel>
          <edgelabel>A</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>icrar::cuda::device_vector&lt; int &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="5" relation="private-inheritance">
        </childnode>
      </node>
      <node id="6">
        <label>icrar::cuda::device_matrix&lt; std::complex&lt; double &gt; &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="5" relation="private-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="79" column="5" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="80" bodyend="111"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1addee906bc64bda0d91fcff753116e805" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>A</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a17af43db18fe5e321cb4a97a37d196d6" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>A1</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a5a3527e1f4dddc6a4318bb08b8133012" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>Ad</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a2ea6223a473fbd1fb1735595ab5babc7" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>Ad1</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a38d3fb3630ae32f697a9f975634378a3" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>avg_data</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a51c7d396c56380ac1d5c91edcfc7052f" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>constants</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a888aefd7d920c78d9537b03bbe99ebfa" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>dd</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1ae14aeef2e17819743bd5e95876262d9f" prot="private" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>DeviceMetaData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a734264094a8cd14db2c941c51b51de91" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>DeviceMetaData</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1adee0d8b39cd7c6cd78baa3726a3a12c7" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>direction</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a9dd1f4696835630e2011325b12825513" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>GetConstants</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a1b7a7b6492a619098e97ae4b3966b121" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>I</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a95cb41519f4e886340edcfa10fe05dad" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>I1</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a5d1a6986babf248d18c98c5967f4f401" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>oldUVW</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1ad6a9bae9d5d729b1a169dc1d92457a12" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a654929f0d4f395670435e9c28a5e2b08" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>ToHost</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a4faeae1bef55b4b3ae730ae7d932292c" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>ToHostAsync</name></member>
      <member refid="classicrar_1_1cuda_1_1DeviceMetaData_1a5861557840273c5088d7498fac3c4a33" prot="public" virt="non-virtual"><scope>icrar::cuda::DeviceMetaData</scope><name>UVW</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1E2EPerformanceTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::E2EPerformanceTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1E2EPerformanceTests_1a64ca4e5af7c9b3b6dbb3b7e9e00cc4fd" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::E2EPerformanceTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="59" column="25" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a1315a6fafa95a7e93f9a81c5d46119d2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::E2EPerformanceTests::E2EPerformanceTests</definition>
        <argsstring>()</argsstring>
        <name>E2EPerformanceTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="63" column="9" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="63" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a8500440c20bc9108468e6d2fd5fd54bc" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::E2EPerformanceTests::~E2EPerformanceTests</definition>
        <argsstring>() override</argsstring>
        <name>~E2EPerformanceTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="67" column="9" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a93a9045f1137c090c4c10ebbe5b00eba" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::E2EPerformanceTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="72" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a576962cadabca99af54921ba06a65f57" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::E2EPerformanceTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="77" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1E2EPerformanceTests_1a75b70076e22ff9f38cd7536f1024c105" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::E2EPerformanceTests::MultiDirectionTest</definition>
        <argsstring>(ComputeImplementation impl, std::string msname, int stations_override)</argsstring>
        <name>MultiDirectionTest</name>
        <param>
          <type>ComputeImplementation</type>
          <declname>impl</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>msname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>stations_override</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="82" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="82" bodyend="117"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::E2EPerformanceTests</label>
        <link refid="classicrar_1_1E2EPerformanceTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::E2EPerformanceTests</label>
        <link refid="classicrar_1_1E2EPerformanceTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="57" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="58" bodyend="118"/>
    <listofallmembers>
      <member refid="classicrar_1_1E2EPerformanceTests_1a1315a6fafa95a7e93f9a81c5d46119d2" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>E2EPerformanceTests</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a64ca4e5af7c9b3b6dbb3b7e9e00cc4fd" prot="private" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a75b70076e22ff9f38cd7536f1024c105" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>MultiDirectionTest</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a93a9045f1137c090c4c10ebbe5b00eba" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a576962cadabca99af54921ba06a65f57" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1E2EPerformanceTests_1a8500440c20bc9108468e6d2fd5fd54bc" prot="protected" virt="non-virtual"><scope>icrar::E2EPerformanceTests</scope><name>~E2EPerformanceTests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classeigen__tests" kind="class" language="C++" prot="public">
    <compoundname>eigen_tests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeigen__tests_1a6a657762211867f7a197831478a42b78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>eigen_tests::eigen_tests</definition>
        <argsstring>()</argsstring>
        <name>eigen_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="36" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classeigen__tests_1ae5094333f27cb03fb37c92adc24b7161" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eigen_tests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="41" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="41" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="classeigen__tests_1a1b560e5dbc32fc1b5cc71f6445bf999b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eigen_tests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="50" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="50" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classeigen__tests_1a4f3bfa41612f136327d34a6c86933af0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eigen_tests::test_matrix_size</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="55" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="55" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classeigen__tests_1a41ec991d983994cda36810a15ed35c7a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eigen_tests::test_matrix_eigen</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_eigen</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="71" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classeigen__tests_1a4dbe712e3eada524340c40e05bacf025" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eigen_tests::test_matrix_multiply</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_multiply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="76" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="76" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="classeigen__tests_1a8441b62cd791ac5805095b9603075f43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void eigen_tests::test_matrix_pretty</definition>
        <argsstring>()</argsstring>
        <name>test_matrix_pretty</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="90" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="90" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>eigen_tests</label>
        <link refid="classeigen__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>eigen_tests</label>
        <link refid="classeigen__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="33" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="34" bodyend="113"/>
    <listofallmembers>
      <member refid="classeigen__tests_1a6a657762211867f7a197831478a42b78" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>eigen_tests</name></member>
      <member refid="classeigen__tests_1ae5094333f27cb03fb37c92adc24b7161" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>SetUp</name></member>
      <member refid="classeigen__tests_1a1b560e5dbc32fc1b5cc71f6445bf999b" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>TearDown</name></member>
      <member refid="classeigen__tests_1a41ec991d983994cda36810a15ed35c7a" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>test_matrix_eigen</name></member>
      <member refid="classeigen__tests_1a4dbe712e3eada524340c40e05bacf025" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>test_matrix_multiply</name></member>
      <member refid="classeigen__tests_1a8441b62cd791ac5805095b9603075f43" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>test_matrix_pretty</name></member>
      <member refid="classeigen__tests_1a4f3bfa41612f136327d34a6c86933af0" prot="public" virt="non-virtual"><scope>eigen_tests</scope><name>test_matrix_size</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::exception</compoundname>
    <basecompoundref prot="public" virt="non-virtual">exception</basecompoundref>
    <derivedcompoundref refid="classicrar_1_1file__exception" prot="public" virt="non-virtual">icrar::file_exception</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1invalid__argument__exception" prot="public" virt="non-virtual">icrar::invalid_argument_exception</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1json__exception" prot="public" virt="non-virtual">icrar::json_exception</derivedcompoundref>
    <derivedcompoundref refid="classicrar_1_1not__implemented__exception" prot="public" virt="non-virtual">icrar::not_implemented_exception</derivedcompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1exception_1a89278ed56ba94f8c01df7d88b07aec8d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::exception::m_message</definition>
        <argsstring/>
        <name>m_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="33" column="21" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1exception_1a8f7ad57ef343909406b93fddf26c7bff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::exception::exception</definition>
        <argsstring>(std::string msg, std::string file, int line)</argsstring>
        <name>exception</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="36" column="9" bodyfile="src/icrar/leap-accelerate/exception/exception.cc" bodystart="28" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" static="no" const="yes" explicit="no" inline="no" noexcept="yes" virt="virtual">
        <type>const char *</type>
        <definition>const char * icrar::exception::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="38" column="28" bodyfile="src/icrar/leap-accelerate/exception/exception.cc" bodystart="35" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>icrar::not_implemented_exception</label>
        <link refid="classicrar_1_1not__implemented__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>icrar::file_exception</label>
        <link refid="classicrar_1_1file__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>std::exception</label>
      </node>
      <node id="4">
        <label>icrar::invalid_argument_exception</label>
        <link refid="classicrar_1_1invalid__argument__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5">
        <label>icrar::json_exception</label>
        <link refid="classicrar_1_1json__exception"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="31" column="5" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="32" bodyend="39"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1a8f7ad57ef343909406b93fddf26c7bff" prot="public" virt="non-virtual"><scope>icrar::exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1exception_1a89278ed56ba94f8c01df7d88b07aec8d" prot="private" virt="non-virtual"><scope>icrar::exception</scope><name>m_message</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="virtual"><scope>icrar::exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1file__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::file_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1file__exception_1a23c7a55e9620d859bb4f26aaff31b568" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::file_exception::file_exception</definition>
        <argsstring>(std::string msg, std::string filename, std::string file, int line)</argsstring>
        <name>file_exception</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="52" column="9" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="52" bodyend="54"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::file_exception</label>
        <link refid="classicrar_1_1file__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::file_exception</label>
        <link refid="classicrar_1_1file__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="49" column="5" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="50" bodyend="55"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1a8f7ad57ef343909406b93fddf26c7bff" prot="public" virt="non-virtual"><scope>icrar::file_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1file__exception_1a23c7a55e9620d859bb4f26aaff31b568" prot="public" virt="non-virtual"><scope>icrar::file_exception</scope><name>file_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="virtual"><scope>icrar::file_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1Integration" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::Integration</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a86ed609bc7172abc595b6d3308e6669a" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::Integration::m_integrationNumber</definition>
        <argsstring/>
        <name>m_integrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="66" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a0d0b15748ff522a5b088180b183de2a1" prot="private" static="no" mutable="no">
        <type>union icrar::cpu::Integration::@12</type>
        <definition>union icrar::cpu::Integration::@12 icrar::cpu::Integration::@13</definition>
        <argsstring/>
        <name>@13</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="78" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a61c9b091d6ef71d939f3934c8ca5a662" prot="private" static="no" mutable="no">
        <type>std::vector&lt; MVuvw &gt;</type>
        <definition>std::vector&lt;MVuvw&gt; icrar::cpu::Integration::m_uvw</definition>
        <argsstring/>
        <name>m_uvw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="80" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1ab4074d729dc68aee88f4dbfe1f782e8c" prot="private" static="no" mutable="no">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;double&gt;, 3&gt; icrar::cpu::Integration::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="81" column="23" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a27f940794045206488c39f390628e13f" prot="public" static="no" mutable="no">
        <type>std::array&lt; size_t, 4 &gt;</type>
        <definition>std::array&lt;size_t, 4&gt; icrar::cpu::Integration::parameters</definition>
        <argsstring/>
        <name>parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="70" column="24" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a1cb485b75ed97832244627c49cbac91d" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::index</definition>
        <argsstring/>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="73" column="24" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1a2b8feb24e4ff7cca83624760ad316b8c" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::x</definition>
        <argsstring/>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="74" column="24" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1ae5541c92280ca0df05554c7d01a01706" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::channels</definition>
        <argsstring/>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="75" column="24" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1Integration_1af467ac6cd19be8e0aa3f2fe1512a8bfb" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::baselines</definition>
        <argsstring/>
        <name>baselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="76" column="24" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classicrar_1_1cpu_1_1Integration_1af39131831a89a960e706f5354dc4ed3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class icrar::cuda::DeviceIntegration</definition>
        <argsstring/>
        <name>icrar::cuda::DeviceIntegration</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="129" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="129" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a3c799c312fc6edc739685e507420967c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::Integration::Integration</definition>
        <argsstring>(const icrar::casalib::Integration &amp;integration)</argsstring>
        <name>Integration</name>
        <param>
          <type>const <ref refid="classicrar_1_1casalib_1_1Integration" kindref="compound">icrar::casalib::Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <briefdescription>
<para>Construct a new Integration object from the equivalent casalib object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="87" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.cc" bodystart="35" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a773438b60f6a183422c1453939b90fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::Integration::Integration</definition>
        <argsstring>(unsigned int integrationNumber, const icrar::MeasurementSet &amp;ms, unsigned int index, unsigned int channels, unsigned int baselines, unsigned int polarizations)</argsstring>
        <name>Integration</name>
        <param>
          <type>unsigned int</type>
          <declname>integrationNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>baselines</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>polarizations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="89" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.cc" bodystart="46" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1ac0a4b91b38dabab459bbff42b97bc7e1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::Integration::operator==</definition>
        <argsstring>(const Integration &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="97" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.cc" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a54281133eb3dcb9a611f645bfaa6f3e6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int icrar::cpu::Integration::GetIntegrationNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetIntegrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="99" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a062bd362000a817149ef39c2e34a7818" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t icrar::cpu::Integration::GetBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetBaselines</name>
        <briefdescription>
<para>Gets the number of baselines. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="106" column="16" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1ac4612e0094f69d59f3b00ef145d427d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
        <definition>const std::vector&lt; icrar::MVuvw &gt; &amp; icrar::cpu::Integration::GetUVW</definition>
        <argsstring>() const</argsstring>
        <name>GetUVW</name>
        <briefdescription>
<para>Gets the UVW list. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const std::vector&lt;icrar::MVuvw&gt;&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="113" column="27" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.cc" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a80c17e141357e904a7e9b0943ffa61ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
        <definition>const Eigen::Tensor&lt;std::complex&lt;double&gt;, 3&gt;&amp; icrar::cpu::Integration::GetVis</definition>
        <argsstring>() const</argsstring>
        <name>GetVis</name>
        <briefdescription>
<para>Get the Visibilities object of size (polarizations, baselines, channels) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 3&gt;&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="120" column="29" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1Integration_1a06103c8aa25a6ab128bdb5e7bc1446dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; &amp;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;double&gt;, 3&gt;&amp; icrar::cpu::Integration::GetVis</definition>
        <argsstring>()</argsstring>
        <name>GetVis</name>
        <briefdescription>
<para>Get the Visibilities object of size (polarizations, baselines, channels) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Eigen::Tensor&lt;std::complex&lt;double&gt;, 3&gt;&amp; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="127" column="23" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="127" bodyend="127"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/Integration.h" line="64" column="5" bodyfile="src/icrar/leap-accelerate/model/cpu/Integration.h" bodystart="65" bodyend="130"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1Integration_1af467ac6cd19be8e0aa3f2fe1512a8bfb" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>baselines</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ae5541c92280ca0df05554c7d01a01706" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>channels</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a062bd362000a817149ef39c2e34a7818" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetBaselines</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a54281133eb3dcb9a611f645bfaa6f3e6" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetIntegrationNumber</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac4612e0094f69d59f3b00ef145d427d5" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a80c17e141357e904a7e9b0943ffa61ec" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a06103c8aa25a6ab128bdb5e7bc1446dc" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1af39131831a89a960e706f5354dc4ed3d" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>icrar::cuda::DeviceIntegration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a1cb485b75ed97832244627c49cbac91d" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>index</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a3c799c312fc6edc739685e507420967c" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>Integration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a773438b60f6a183422c1453939b90fc0" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>Integration</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ab4074d729dc68aee88f4dbfe1f782e8c" prot="private" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>m_data</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a86ed609bc7172abc595b6d3308e6669a" prot="private" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>m_integrationNumber</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a61c9b091d6ef71d939f3934c8ca5a662" prot="private" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>m_uvw</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1ac0a4b91b38dabab459bbff42b97bc7e1" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>operator==</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a27f940794045206488c39f390628e13f" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>parameters</name></member>
      <member refid="classicrar_1_1cpu_1_1Integration_1a2b8feb24e4ff7cca83624760ad316b8c" prot="public" virt="non-virtual"><scope>icrar::cpu::Integration</scope><name>x</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1casalib_1_1Integration" kind="class" language="C++" prot="public">
    <compoundname>icrar::casalib::Integration</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1ab12ea395a86d247bf9ed7429447a48d5" prot="public" static="no" mutable="no">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;double&gt;, 3&gt; icrar::casalib::Integration::data</definition>
        <argsstring/>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="63" column="23" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1a96911cab2b11ce12d83ee77c6a10c861" prot="public" static="no" mutable="no">
        <type>std::vector&lt; casacore::MVuvw &gt;</type>
        <definition>std::vector&lt;casacore::MVuvw&gt; icrar::casalib::Integration::uvw</definition>
        <argsstring/>
        <name>uvw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="65" column="21" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1ae9f06082431200b6a864604f632b3930" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::Integration::integration_number</definition>
        <argsstring/>
        <name>integration_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="66" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1ac0c6c75ab2a1075d426909ab071b0bce" prot="public" static="no" mutable="no">
        <type>std::array&lt; size_t, 4 &gt;</type>
        <definition>std::array&lt;size_t, 4&gt; icrar::casalib::Integration::parameters</definition>
        <argsstring/>
        <name>parameters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="70" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1aa242e03a5ca634eae2dcc66339058f7d" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::casalib::Integration::index</definition>
        <argsstring/>
        <name>index</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="73" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1affd37a2b7aa5c27abaed60a1beede20a" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::casalib::Integration::x</definition>
        <argsstring/>
        <name>x</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="74" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1a47b2373eed79ec4700c2e20eebfd95ea" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::casalib::Integration::channels</definition>
        <argsstring/>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="75" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1ac5ae78526b6be6e4a80e2a23f4363b08" prot="public" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t icrar::casalib::Integration::baselines</definition>
        <argsstring/>
        <name>baselines</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="76" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1Integration_1a2ed4806cb07662027d2c12ac49d2c1c3" prot="public" static="no" mutable="no">
        <type>union icrar::casalib::Integration::@0</type>
        <definition>union icrar::casalib::Integration::@0 icrar::casalib::Integration::@1</definition>
        <argsstring/>
        <name>@1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="78" column="9"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1casalib_1_1Integration_1ae411c10452164fd07ffcf038ea054837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::casalib::Integration::Integration</definition>
        <argsstring>(int integrationNumber, const icrar::MeasurementSet &amp;ms, int index, int channels, int baselines, int polarizations)</argsstring>
        <name>Integration</name>
        <param>
          <type>int</type>
          <declname>integrationNumber</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>int</type>
          <declname>index</declname>
        </param>
        <param>
          <type>int</type>
          <declname>channels</declname>
        </param>
        <param>
          <type>int</type>
          <declname>baselines</declname>
        </param>
        <param>
          <type>int</type>
          <declname>polarizations</declname>
        </param>
        <briefdescription>
<para>Construct a new Integration object. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integrationNumber</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the integration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ms</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>the row index of the uvw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>channels</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of channels </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>baselines</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of baselines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>polarizations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of polarizations </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="61" column="9" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.cc" bodystart="33" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1casalib_1_1Integration_1a57c616e76bfdf1a1259f0a2c5e807eb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::casalib::Integration::operator==</definition>
        <argsstring>(const Integration &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classicrar_1_1casalib_1_1Integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="80" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.cc" bodystart="44" bodyend="52"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/Integration.h" line="48" column="5" bodyfile="src/icrar/leap-accelerate/model/casa/Integration.h" bodystart="49" bodyend="81"/>
    <listofallmembers>
      <member refid="classicrar_1_1casalib_1_1Integration_1ac5ae78526b6be6e4a80e2a23f4363b08" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>baselines</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1a47b2373eed79ec4700c2e20eebfd95ea" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>channels</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1ab12ea395a86d247bf9ed7429447a48d5" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>data</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1aa242e03a5ca634eae2dcc66339058f7d" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>index</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1ae411c10452164fd07ffcf038ea054837" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>Integration</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1ae9f06082431200b6a864604f632b3930" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>integration_number</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1a57c616e76bfdf1a1259f0a2c5e807eb0" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>operator==</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1ac0c6c75ab2a1075d426909ab071b0bce" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>parameters</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1a96911cab2b11ce12d83ee77c6a10c861" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>uvw</name></member>
      <member refid="classicrar_1_1casalib_1_1Integration_1affd37a2b7aa5c27abaed60a1beede20a" prot="public" virt="non-virtual"><scope>icrar::casalib::Integration</scope><name>x</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1IntegrationResult" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::IntegrationResult</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1IntegrationResult_1a0785faffbc4a6603d6422bbd4a3c38c1" prot="private" static="no" mutable="no">
        <type>MVDirection</type>
        <definition>MVDirection icrar::cpu::IntegrationResult::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="59" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1IntegrationResult_1ab9e06915e143368021856d109cf2d6c1" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::cpu::IntegrationResult::m_integration_number</definition>
        <argsstring/>
        <name>m_integration_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="60" column="13" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1IntegrationResult_1af2aed12c5e269f160ed47e6ed3188a75" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt; &gt; &gt;</type>
        <definition>boost::optional&lt;std::vector&lt;casacore::Vector&lt;double&gt; &gt; &gt; icrar::cpu::IntegrationResult::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="61" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1IntegrationResult_1adb1d3c8125afcf5e63554b89ed87d3fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::IntegrationResult::IntegrationResult</definition>
        <argsstring>(icrar::MVDirection direction, int integration_number, boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt;&gt;&gt; data)</argsstring>
        <name>IntegrationResult</name>
        <param>
          <type>icrar::MVDirection</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>integration_number</declname>
        </param>
        <param>
          <type>boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt;&gt;&gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="64" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="64" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" line="57" column="5" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" bodystart="58" bodyend="74"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1IntegrationResult_1adb1d3c8125afcf5e63554b89ed87d3fa" prot="public" virt="non-virtual"><scope>icrar::cpu::IntegrationResult</scope><name>IntegrationResult</name></member>
      <member refid="classicrar_1_1cpu_1_1IntegrationResult_1af2aed12c5e269f160ed47e6ed3188a75" prot="private" virt="non-virtual"><scope>icrar::cpu::IntegrationResult</scope><name>m_data</name></member>
      <member refid="classicrar_1_1cpu_1_1IntegrationResult_1a0785faffbc4a6603d6422bbd4a3c38c1" prot="private" virt="non-virtual"><scope>icrar::cpu::IntegrationResult</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1cpu_1_1IntegrationResult_1ab9e06915e143368021856d109cf2d6c1" prot="private" virt="non-virtual"><scope>icrar::cpu::IntegrationResult</scope><name>m_integration_number</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1casalib_1_1IntegrationResult" kind="class" language="C++" prot="public">
    <compoundname>icrar::casalib::IntegrationResult</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1IntegrationResult_1aa31afccc83728f812fc2d71ae2fca67d" prot="private" static="no" mutable="no">
        <type>casacore::MVDirection</type>
        <definition>casacore::MVDirection icrar::casalib::IntegrationResult::m_direction</definition>
        <argsstring/>
        <name>m_direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="44" column="31" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1IntegrationResult_1a5424539328de253c7d8abb66bbddfd2f" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::IntegrationResult::m_integration_number</definition>
        <argsstring/>
        <name>m_integration_number</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="45" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1casalib_1_1IntegrationResult_1a2e4e6fb8a808cb766d152a5bdc945953" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt; &gt; &gt;</type>
        <definition>boost::optional&lt;std::vector&lt;casacore::Vector&lt;double&gt; &gt; &gt; icrar::casalib::IntegrationResult::m_data</definition>
        <argsstring/>
        <name>m_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="46" column="25" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1casalib_1_1IntegrationResult_1ace892ae5b34199e8198aa95d5c0504e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::casalib::IntegrationResult::IntegrationResult</definition>
        <argsstring>(casacore::MVDirection direction, int integration_number, boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt;&gt;&gt; data)</argsstring>
        <name>IntegrationResult</name>
        <param>
          <type>casacore::MVDirection</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>integration_number</declname>
        </param>
        <param>
          <type>boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt;&gt;&gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="49" column="9" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="49" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1casalib_1_1IntegrationResult_1a1830f124d3763911ec79bc1fad1eecd3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MVDirection</type>
        <definition>const casacore::MVDirection icrar::casalib::IntegrationResult::GetDirection</definition>
        <argsstring>() const</argsstring>
        <name>GetDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="60" column="37" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1casalib_1_1IntegrationResult_1a345275a22b4dbed45ac565aa6e20c1f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const boost::optional&lt; std::vector&lt; casacore::Vector&lt; double &gt; &gt; &gt; &amp;</type>
        <definition>const boost::optional&lt;std::vector&lt;casacore::Vector&lt;double&gt; &gt; &gt;&amp; icrar::casalib::IntegrationResult::GetData</definition>
        <argsstring>() const</argsstring>
        <name>GetData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="61" column="31" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1casalib_1_1IntegrationResult_1a09e96fe21cc99e0545a8edbff648760f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int icrar::casalib::IntegrationResult::GetIntegrationNumber</definition>
        <argsstring>() const</argsstring>
        <name>GetIntegrationNumber</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="62" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="62" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="42" column="5" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="43" bodyend="63"/>
    <listofallmembers>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1a345275a22b4dbed45ac565aa6e20c1f9" prot="public" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>GetData</name></member>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1a1830f124d3763911ec79bc1fad1eecd3" prot="public" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>GetDirection</name></member>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1a09e96fe21cc99e0545a8edbff648760f" prot="public" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>GetIntegrationNumber</name></member>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1ace892ae5b34199e8198aa95d5c0504e9" prot="public" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>IntegrationResult</name></member>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1a2e4e6fb8a808cb766d152a5bdc945953" prot="private" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>m_data</name></member>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1aa31afccc83728f812fc2d71ae2fca67d" prot="private" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>m_direction</name></member>
      <member refid="classicrar_1_1casalib_1_1IntegrationResult_1a5424539328de253c7d8abb66bbddfd2f" prot="private" virt="non-virtual"><scope>icrar::casalib::IntegrationResult</scope><name>m_integration_number</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1IntegrationTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::IntegrationTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1IntegrationTests_1a119c4e7e1e6bfc23bb00e740dea51d0c" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double icrar::IntegrationTests::PRECISION</definition>
        <argsstring/>
        <name>PRECISION</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="46" column="22" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1IntegrationTests_1a68859c8b4d66165da46a31a75596516f" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::IntegrationTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="47" column="25" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1a6fcbf1847f8066699305317b8b99c3ac" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::IntegrationTests::IntegrationTests</definition>
        <argsstring>()</argsstring>
        <name>IntegrationTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="50" column="9" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="50" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1aff309cf0417c5c5d2f7374692e977c33" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::IntegrationTests::~IntegrationTests</definition>
        <argsstring>() override</argsstring>
        <name>~IntegrationTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="54" column="9" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1adb23b0a9825735b29d08f95a9c690c0d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="59" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1ae5a5ca79a41ff5eed4b4e0b23a091bdf" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="65" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1a5a94a5fb3e98086a7aa6846dd4776a85" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TestMeasurementSet</definition>
        <argsstring>()</argsstring>
        <name>TestMeasurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="70" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="70" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1a229b9b22a879ce56caa15b41fc8e89e3" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TestReadFromFile</definition>
        <argsstring>()</argsstring>
        <name>TestReadFromFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="80" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="80" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1IntegrationTests_1ac770942341bd949ce198f6d8cbf94f1c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::IntegrationTests::TestCudaBufferCopy</definition>
        <argsstring>()</argsstring>
        <name>TestCudaBufferCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="142" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="142" bodyend="167"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::IntegrationTests</label>
        <link refid="classicrar_1_1IntegrationTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::IntegrationTests</label>
        <link refid="classicrar_1_1IntegrationTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="44" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="45" bodyend="168"/>
    <listofallmembers>
      <member refid="classicrar_1_1IntegrationTests_1a6fcbf1847f8066699305317b8b99c3ac" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>IntegrationTests</name></member>
      <member refid="classicrar_1_1IntegrationTests_1a68859c8b4d66165da46a31a75596516f" prot="private" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1IntegrationTests_1a119c4e7e1e6bfc23bb00e740dea51d0c" prot="private" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>PRECISION</name></member>
      <member refid="classicrar_1_1IntegrationTests_1adb23b0a9825735b29d08f95a9c690c0d" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1IntegrationTests_1ae5a5ca79a41ff5eed4b4e0b23a091bdf" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1IntegrationTests_1ac770942341bd949ce198f6d8cbf94f1c" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TestCudaBufferCopy</name></member>
      <member refid="classicrar_1_1IntegrationTests_1a5a94a5fb3e98086a7aa6846dd4776a85" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TestMeasurementSet</name></member>
      <member refid="classicrar_1_1IntegrationTests_1a229b9b22a879ce56caa15b41fc8e89e3" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>TestReadFromFile</name></member>
      <member refid="classicrar_1_1IntegrationTests_1aff309cf0417c5c5d2f7374692e977c33" prot="protected" virt="non-virtual"><scope>icrar::IntegrationTests</scope><name>~IntegrationTests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1invalid__argument__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::invalid_argument_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1invalid__argument__exception_1a6bf0d6e20bff19333e9f26967b83338c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::invalid_argument_exception::invalid_argument_exception</definition>
        <argsstring>(std::string msg, std::string arg, std::string file, int line)</argsstring>
        <name>invalid_argument_exception</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>arg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="44" column="9" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="44" bodyend="46"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>icrar::invalid_argument_exception</label>
        <link refid="classicrar_1_1invalid__argument__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>icrar::invalid_argument_exception</label>
        <link refid="classicrar_1_1invalid__argument__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="41" column="5" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="42" bodyend="47"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1a8f7ad57ef343909406b93fddf26c7bff" prot="public" virt="non-virtual"><scope>icrar::invalid_argument_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1invalid__argument__exception_1a6bf0d6e20bff19333e9f26967b83338c" prot="public" virt="non-virtual"><scope>icrar::invalid_argument_exception</scope><name>invalid_argument_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="virtual"><scope>icrar::invalid_argument_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1json__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::json_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1json__exception_1a0705a0c2a41150f629557b3878ac41dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::json_exception::json_exception</definition>
        <argsstring>(std::string msg, std::string file, int line)</argsstring>
        <name>json_exception</name>
        <param>
          <type>std::string</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="60" column="9" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="60" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>icrar::json_exception</label>
        <link refid="classicrar_1_1json__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="1">
        <label>icrar::json_exception</label>
        <link refid="classicrar_1_1json__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="57" column="5" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="58" bodyend="63"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1a8f7ad57ef343909406b93fddf26c7bff" prot="public" virt="non-virtual"><scope>icrar::json_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1json__exception_1a0705a0c2a41150f629557b3878ac41dd" prot="public" virt="non-virtual"><scope>icrar::json_exception</scope><name>json_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="virtual"><scope>icrar::json_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1JSONHelperTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::JSONHelperTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1a992254f1484fc3cef61caf07f15ec16d" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::JSONHelperTests::JSONHelperTests</definition>
        <argsstring>()</argsstring>
        <name>JSONHelperTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="61" column="9" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1ae1b9012da50a69a0b2846b541134864b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::JSONHelperTests::~JSONHelperTests</definition>
        <argsstring>() override</argsstring>
        <name>~JSONHelperTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="65" column="9" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1ab1e29b1c1f7d8f2b30455a49cec050d1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::JSONHelperTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="70" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1abab94a28d5e391a663f6035f1cb2c580" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::JSONHelperTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="75" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1a856efc207f046f83b8b21eac97772bb4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::JSONHelperTests::TestParseDirections</definition>
        <argsstring>(const std::string input, const std::vector&lt; icrar::MVDirection &gt; &amp;expected)</argsstring>
        <name>TestParseDirections</name>
        <param>
          <type>const std::string</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::vector&lt; icrar::MVDirection &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="80" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1JSONHelperTests_1a4f0e3e1b4648adcd72630d8b1b0f1415" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::JSONHelperTests::TestParseDirectionsException</definition>
        <argsstring>(const std::string input)</argsstring>
        <name>TestParseDirectionsException</name>
        <param>
          <type>const std::string</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="86" column="14" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="86" bodyend="89"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>icrar::JSONHelperTests</label>
        <link refid="classicrar_1_1JSONHelperTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>icrar::JSONHelperTests</label>
        <link refid="classicrar_1_1JSONHelperTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="56" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="57" bodyend="91"/>
    <listofallmembers>
      <member refid="classicrar_1_1JSONHelperTests_1a992254f1484fc3cef61caf07f15ec16d" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>JSONHelperTests</name></member>
      <member refid="classicrar_1_1JSONHelperTests_1ab1e29b1c1f7d8f2b30455a49cec050d1" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1JSONHelperTests_1abab94a28d5e391a663f6035f1cb2c580" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1JSONHelperTests_1a856efc207f046f83b8b21eac97772bb4" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>TestParseDirections</name></member>
      <member refid="classicrar_1_1JSONHelperTests_1a4f0e3e1b4648adcd72630d8b1b0f1415" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>TestParseDirectionsException</name></member>
      <member refid="classicrar_1_1JSONHelperTests_1ae1b9012da50a69a0b2846b541134864b" prot="protected" virt="non-virtual"><scope>icrar::JSONHelperTests</scope><name>~JSONHelperTests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1LeapRemote" kind="class" language="C++" prot="public">
    <compoundname>icrar::LeapRemote</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1LeapRemote_1a367f08f336ec9e7d07957a4d96c72cba" prot="private" static="no" mutable="no">
        <type>std::istream</type>
        <definition>std::istream icrar::LeapRemote::reader</definition>
        <argsstring/>
        <name>reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="35" column="22" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1LeapRemote_1a60e0f7e217f54891e8e7e3cd00ba97c7" prot="private" static="no" mutable="no">
        <type>std::ostream</type>
        <definition>std::ostream icrar::LeapRemote::writer</definition>
        <argsstring/>
        <name>writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="36" column="22" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1LeapRemote_1a3bd694c78ed819da1e6c061b546ea6f3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::future&lt; void &gt;</type>
        <definition>std::future&lt;void&gt; icrar::LeapRemote::SendObject</definition>
        <argsstring>(std::string generic_path)</argsstring>
        <name>SendObject</name>
        <param>
          <type>std::string</type>
          <declname>generic_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="39" column="21" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="39" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1LeapRemote_1a8f11a27fe8b55b89a82f56079e17e087" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::future&lt; void &gt;</type>
        <definition>std::future&lt;void&gt; icrar::LeapRemote::SendObject</definition>
        <argsstring>(std::map&lt; std::string, std::string &gt; map)</argsstring>
        <name>SendObject</name>
        <param>
          <type>std::map&lt; std::string, std::string &gt;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="46" column="21" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1LeapRemote_1abbc841ab1a992f6edcf091462a9df749" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::future&lt; std::map&lt; std::string, std::string &gt; &gt;</type>
        <definition>std::future&lt;std::map&lt;std::string, std::string&gt; &gt; icrar::LeapRemote::ReceiveObject</definition>
        <argsstring>()</argsstring>
        <name>ReceiveObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="51" column="21" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1LeapRemote_1a89314d081d09327d0de3f56d3c4fba78" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::LeapRemote::SendObject</definition>
        <argsstring>(const T &amp;object)</argsstring>
        <name>SendObject</name>
        <param>
          <type>const T &amp;</type>
          <declname>object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="57" column="14" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="57" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1LeapRemote_1aa704ca2d7b997a6a1784c315cce35af8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T icrar::LeapRemote::ReceiveObject</definition>
        <argsstring>()</argsstring>
        <name>ReceiveObject</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="63" column="11" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="63" bodyend="66"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/LeapRemote.h" line="33" column="5" bodyfile="src/icrar/leap-accelerate-client/LeapRemote.h" bodystart="34" bodyend="67"/>
    <listofallmembers>
      <member refid="classicrar_1_1LeapRemote_1a367f08f336ec9e7d07957a4d96c72cba" prot="private" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>reader</name></member>
      <member refid="classicrar_1_1LeapRemote_1abbc841ab1a992f6edcf091462a9df749" prot="public" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>ReceiveObject</name></member>
      <member refid="classicrar_1_1LeapRemote_1aa704ca2d7b997a6a1784c315cce35af8" prot="public" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>ReceiveObject</name></member>
      <member refid="classicrar_1_1LeapRemote_1a3bd694c78ed819da1e6c061b546ea6f3" prot="public" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>SendObject</name></member>
      <member refid="classicrar_1_1LeapRemote_1a8f11a27fe8b55b89a82f56079e17e087" prot="public" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>SendObject</name></member>
      <member refid="classicrar_1_1LeapRemote_1a89314d081d09327d0de3f56d3c4fba78" prot="public" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>SendObject</name></member>
      <member refid="classicrar_1_1LeapRemote_1a60e0f7e217f54891e8e7e3cd00ba97c7" prot="private" virt="non-virtual"><scope>icrar::LeapRemote</scope><name>writer</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1math__conversion__tests" kind="class" language="C++" prot="public">
    <compoundname>icrar::math_conversion_tests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1ac94ecbc113877f232cbf9ece0fafb3d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::math_conversion_tests::math_conversion_tests</definition>
        <argsstring>()</argsstring>
        <name>math_conversion_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="36" column="9" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1ad9fdadb5c9a4d9d7e8faae4d4347c98b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="41" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1aec08f7c189a2e01ac7d058f8917649be" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="43" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1aee971e125f5af18253a4c8af55fd6860" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestMVDirection</definition>
        <argsstring>()</argsstring>
        <name>TestMVDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="45" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="45" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1a38003cc79e01441c335b4929d7932024" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestConvertVector</definition>
        <argsstring>()</argsstring>
        <name>TestConvertVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="69" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="69" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1a9a6936a2456b6c5d52b7b331611cf015" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestConvertMatrix</definition>
        <argsstring>()</argsstring>
        <name>TestConvertMatrix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="83" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="83" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1a8c7e31907eb2c53e4ed655ab86207b70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestConvertUVW</definition>
        <argsstring>()</argsstring>
        <name>TestConvertUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="93" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="93" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1ab281ed47303139a366198a2d6e2977a2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestConvertUVWVector</definition>
        <argsstring>()</argsstring>
        <name>TestConvertUVWVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="102" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="102" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1aeebeb4eb07a8b04711008daf3ded6bbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestConvertMVDirection</definition>
        <argsstring>()</argsstring>
        <name>TestConvertMVDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="115" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1math__conversion__tests_1a2a1116f6f9ce9b6e4f3eb7a876f2e69a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::math_conversion_tests::TestConvertMVDirectionVector</definition>
        <argsstring>()</argsstring>
        <name>TestConvertMVDirectionVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="124" column="14" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="124" bodyend="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::math_conversion_tests</label>
        <link refid="classicrar_1_1math__conversion__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::math_conversion_tests</label>
        <link refid="classicrar_1_1math__conversion__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="33" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="34" bodyend="136"/>
    <listofallmembers>
      <member refid="classicrar_1_1math__conversion__tests_1ac94ecbc113877f232cbf9ece0fafb3d7" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>math_conversion_tests</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1ad9fdadb5c9a4d9d7e8faae4d4347c98b" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1aec08f7c189a2e01ac7d058f8917649be" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1a9a6936a2456b6c5d52b7b331611cf015" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestConvertMatrix</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1aeebeb4eb07a8b04711008daf3ded6bbf" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestConvertMVDirection</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1a2a1116f6f9ce9b6e4f3eb7a876f2e69a" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestConvertMVDirectionVector</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1a8c7e31907eb2c53e4ed655ab86207b70" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestConvertUVW</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1ab281ed47303139a366198a2d6e2977a2" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestConvertUVWVector</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1a38003cc79e01441c335b4929d7932024" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestConvertVector</name></member>
      <member refid="classicrar_1_1math__conversion__tests_1aee971e125f5af18253a4c8af55fd6860" prot="public" virt="non-virtual"><scope>icrar::math_conversion_tests</scope><name>TestMVDirection</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classmatrix__tests" kind="class" language="C++" prot="public">
    <compoundname>matrix_tests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classmatrix__tests_1ace952205c4e2bd9810e21bd9a6de7f82" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double matrix_tests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="39" column="18" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classmatrix__tests_1ab9ab1268e62123e51d48a3489f8f544a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>matrix_tests::matrix_tests</definition>
        <argsstring>()</argsstring>
        <name>matrix_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="41" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1a42fb43c02fa034df53d19e6fbcc3c0c5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="46" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1ae7b89c18329646cad3144c507bcd32de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="51" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1aed280d94d52503e1e7ac98ed163201cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_transpose</definition>
        <argsstring>()</argsstring>
        <name>test_transpose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="56" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="56" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1a40f23c1c9e1ca0934c749db610a86d56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_square_invert</definition>
        <argsstring>()</argsstring>
        <name>test_square_invert</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="75" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="75" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1a650d437d8449148d6a6a98224f6acc99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_pseudo_inverse_33</definition>
        <argsstring>()</argsstring>
        <name>test_pseudo_inverse_33</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="94" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="94" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1a3354a10725081d3b6c77cf438a0a0fe5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_pseudo_inverse_32</definition>
        <argsstring>()</argsstring>
        <name>test_pseudo_inverse_32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="113" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="113" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1afa97d5062865775b36393840e866c367" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_svd42</definition>
        <argsstring>()</argsstring>
        <name>test_svd42</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="132" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="132" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1a1460db0d4cce48c2a1b474a211e1d209" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_svd_pseudo_inverse_32_degenerate</definition>
        <argsstring>()</argsstring>
        <name>test_svd_pseudo_inverse_32_degenerate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="152" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="152" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1af84fde3387db2a04aa2a2134e0b5294a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_psuedo_inverse_42</definition>
        <argsstring>()</argsstring>
        <name>test_psuedo_inverse_42</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="171" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="171" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classmatrix__tests_1ae7568f55bc8eeddbe99d7f85ad09661b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void matrix_tests::test_deprecated</definition>
        <argsstring>()</argsstring>
        <name>test_deprecated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="193" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="193" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>matrix_tests</label>
        <link refid="classmatrix__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>matrix_tests</label>
        <link refid="classmatrix__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="37" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="38" bodyend="197"/>
    <listofallmembers>
      <member refid="classmatrix__tests_1ab9ab1268e62123e51d48a3489f8f544a" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>matrix_tests</name></member>
      <member refid="classmatrix__tests_1a42fb43c02fa034df53d19e6fbcc3c0c5" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>SetUp</name></member>
      <member refid="classmatrix__tests_1ae7b89c18329646cad3144c507bcd32de" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>TearDown</name></member>
      <member refid="classmatrix__tests_1ae7568f55bc8eeddbe99d7f85ad09661b" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_deprecated</name></member>
      <member refid="classmatrix__tests_1a3354a10725081d3b6c77cf438a0a0fe5" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_pseudo_inverse_32</name></member>
      <member refid="classmatrix__tests_1a650d437d8449148d6a6a98224f6acc99" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_pseudo_inverse_33</name></member>
      <member refid="classmatrix__tests_1af84fde3387db2a04aa2a2134e0b5294a" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_psuedo_inverse_42</name></member>
      <member refid="classmatrix__tests_1a40f23c1c9e1ca0934c749db610a86d56" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_square_invert</name></member>
      <member refid="classmatrix__tests_1afa97d5062865775b36393840e866c367" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_svd42</name></member>
      <member refid="classmatrix__tests_1a1460db0d4cce48c2a1b474a211e1d209" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_svd_pseudo_inverse_32_degenerate</name></member>
      <member refid="classmatrix__tests_1aed280d94d52503e1e7ac98ed163201cd" prot="public" virt="non-virtual"><scope>matrix_tests</scope><name>test_transpose</name></member>
      <member refid="classmatrix__tests_1ace952205c4e2bd9810e21bd9a6de7f82" prot="private" virt="non-virtual"><scope>matrix_tests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1MeasurementSet" kind="class" language="C++" prot="public">
    <compoundname>icrar::MeasurementSet</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a2abf066c6efb7fec8415b5daf92fe2e5" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; casacore::MeasurementSet &gt;</type>
        <definition>std::unique_ptr&lt;casacore::MeasurementSet&gt; icrar::MeasurementSet::m_measurementSet</definition>
        <argsstring/>
        <name>m_measurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="51" column="25" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a231b347e84035571dfdeb6825e2b09ac" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; casacore::MSMainColumns &gt;</type>
        <definition>std::unique_ptr&lt;casacore::MSMainColumns&gt; icrar::MeasurementSet::m_msmc</definition>
        <argsstring/>
        <name>m_msmc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="52" column="25" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1aa418f4d26123293066026be7ef9e065a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; casacore::MSColumns &gt;</type>
        <definition>std::unique_ptr&lt;casacore::MSColumns&gt; icrar::MeasurementSet::m_msc</definition>
        <argsstring/>
        <name>m_msc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="53" column="25" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1ae95b1e3fdde7ad259e86158aa15276d1" prot="private" static="no" mutable="no">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::MeasurementSet::m_filepath</definition>
        <argsstring/>
        <name>m_filepath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="55" column="25" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1ae61eecb307ddeaf325b4f6ae63102657" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::MeasurementSet::m_stations</definition>
        <argsstring/>
        <name>m_stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="56" column="13" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MeasurementSet_1a1e023da44562b8dfc52103a59929d29b" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::MeasurementSet::m_readAutocorrelations</definition>
        <argsstring/>
        <name>m_readAutocorrelations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="57" column="14" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1afd444b4fc4aa0a53fb745c378181b94f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::MeasurementSet::MeasurementSet</definition>
        <argsstring>(std::string filepath, boost::optional&lt; int &gt; overrideNStations, bool readAutocorrelations)</argsstring>
        <name>MeasurementSet</name>
        <param>
          <type>std::string</type>
          <declname>filepath</declname>
        </param>
        <param>
          <type>boost::optional&lt; int &gt;</type>
          <declname>overrideNStations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>readAutocorrelations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="61" column="9" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="28" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1abb3a7196d4da620eb1d1e6f578eafc81" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::MeasurementSet::MeasurementSet</definition>
        <argsstring>(const casacore::MeasurementSet &amp;ms, boost::optional&lt; int &gt; overrideNStations, bool readAutocorrelations)</argsstring>
        <name>MeasurementSet</name>
        <param>
          <type>const casacore::MeasurementSet &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>boost::optional&lt; int &gt;</type>
          <declname>overrideNStations</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>readAutocorrelations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="62" column="9" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="38" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a3aa164f6867f52f733b817c0a8940793" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>boost::optional&lt; std::string &gt;</type>
        <definition>boost::optional&lt;std::string&gt; icrar::MeasurementSet::GetFilepath</definition>
        <argsstring>() const</argsstring>
        <name>GetFilepath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="65" column="25" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a78fb0ae9a3084b2347b7ca8851bcff06" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MeasurementSet *</type>
        <definition>const casacore::MeasurementSet* icrar::MeasurementSet::GetMS</definition>
        <argsstring>() const</argsstring>
        <name>GetMS</name>
        <briefdescription>
<para>Gets a non-null pointer to a casacore::MeasurementSet. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const casacore::MeasurementSet* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="72" column="40" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="72" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a8b600fd8f16685927134084398b022f5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MSMainColumns *</type>
        <definition>const casacore::MSMainColumns* icrar::MeasurementSet::GetMSMainColumns</definition>
        <argsstring>() const</argsstring>
        <name>GetMSMainColumns</name>
        <briefdescription>
<para>Gets a non-null pointer to a casacore::MSMainColumns. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const casacore::MSMainColumns* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="79" column="39" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="79" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a659a41dd7b522999779dc65ed06dea63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const casacore::MSColumns *</type>
        <definition>const casacore::MSColumns* icrar::MeasurementSet::GetMSColumns</definition>
        <argsstring>() const</argsstring>
        <name>GetMSColumns</name>
        <briefdescription>
<para>Gets a non-null pointer to a casacore::MSColumns. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>const casacore::MSColumns* </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="86" column="35" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1ad3fc0d0fca8889bd21973a86608e68f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int icrar::MeasurementSet::GetNumStations</definition>
        <argsstring>() const</argsstring>
        <name>GetNumStations</name>
        <briefdescription>
<para>Gets the number of stations excluding flagged stations. Overridable at construction. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="93" column="22" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1afe3de1a1ba4ee41c513c38cbf8fbcbe0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int icrar::MeasurementSet::GetNumBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetNumBaselines</name>
        <briefdescription>
<para>Get the number of baselines in the measurement set including autocorrelations (e.g. (0,0), (1,1), (2,2)) and including stations not recording rows. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>TODO: baselines is always n*(n-1) / 2 and without autocorrelations </para>
</simplesect>
<simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="101" column="22" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="83" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a2e813097109dedaf6e2d973ecf32289c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int icrar::MeasurementSet::GetNumPols</definition>
        <argsstring>() const</argsstring>
        <name>GetNumPols</name>
        <briefdescription>
<para>Get the number of polarizations in the measurement set. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="108" column="22" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="70" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a65264d2d01eadb661ccfca813e61abcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int icrar::MeasurementSet::GetNumChannels</definition>
        <argsstring>() const</argsstring>
        <name>GetNumChannels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="110" column="22" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="103" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a2f09e1eb91aeaffb69a303d0b29b87e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int icrar::MeasurementSet::GetNumRows</definition>
        <argsstring>() const</argsstring>
        <name>GetNumRows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="112" column="22" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="60" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1aaccf5325d8ab596422f5ee1a1e5ca198" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixX3d</type>
        <definition>Eigen::MatrixX3d icrar::MeasurementSet::GetCoords</definition>
        <argsstring>() const</argsstring>
        <name>GetCoords</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="115" column="26" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="115" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a210509e7e262515daacad2bcb5c2ab8f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::MatrixX3d</type>
        <definition>Eigen::MatrixX3d icrar::MeasurementSet::GetCoords</definition>
        <argsstring>(unsigned int start_row, unsigned int nBaselines) const</argsstring>
        <name>GetCoords</name>
        <param>
          <type>unsigned int</type>
          <declname>start_row</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>nBaselines</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="116" column="26" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="120" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a2b566158aeac53505a0742ab06b5751a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt;</type>
        <definition>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; icrar::MeasurementSet::GetVis</definition>
        <argsstring>(std::uint32_t startBaseline, std::uint32_t startChannel, std::uint32_t nChannels, std::uint32_t nBaselines, std::uint32_t nPolarizations) const</argsstring>
        <name>GetVis</name>
        <param>
          <type>std::uint32_t</type>
          <declname>startBaseline</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>startChannel</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>nChannels</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>nBaselines</declname>
        </param>
        <param>
          <type>std::uint32_t</type>
          <declname>nPolarizations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="118" column="23" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="141" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1a35dec74848fac3d61434be54041aa8a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt;</type>
        <definition>Eigen::Tensor&lt; std::complex&lt; double &gt;, 3 &gt; icrar::MeasurementSet::GetVis</definition>
        <argsstring>() const</argsstring>
        <name>GetVis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="124" column="23" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="133" bodyend="139"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1MeasurementSet_1ac6571e652668c103e4e46cd3bb3499e3" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned int</type>
        <definition>unsigned int icrar::MeasurementSet::GetNumBaselines</definition>
        <argsstring>(bool useAutocorrelations) const</argsstring>
        <name>GetNumBaselines</name>
        <param>
          <type>bool</type>
          <declname>useAutocorrelations</declname>
        </param>
        <briefdescription>
<para>Get the number of baselines in the measurement set (e.g. (0,0), (1,1), (2,2)) </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>unsigned int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="132" column="22" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.cc" bodystart="88" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h" line="49" column="5" bodyfile="src/icrar/leap-accelerate/ms/MeasurementSet.h" bodystart="50" bodyend="133"/>
    <listofallmembers>
      <member refid="classicrar_1_1MeasurementSet_1aaccf5325d8ab596422f5ee1a1e5ca198" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetCoords</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a210509e7e262515daacad2bcb5c2ab8f" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetCoords</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a3aa164f6867f52f733b817c0a8940793" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetFilepath</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a78fb0ae9a3084b2347b7ca8851bcff06" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMS</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a659a41dd7b522999779dc65ed06dea63" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMSColumns</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a8b600fd8f16685927134084398b022f5" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetMSMainColumns</name></member>
      <member refid="classicrar_1_1MeasurementSet_1afe3de1a1ba4ee41c513c38cbf8fbcbe0" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ac6571e652668c103e4e46cd3bb3499e3" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumBaselines</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a65264d2d01eadb661ccfca813e61abcc" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumChannels</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a2e813097109dedaf6e2d973ecf32289c" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumPols</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a2f09e1eb91aeaffb69a303d0b29b87e8" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumRows</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ad3fc0d0fca8889bd21973a86608e68f9" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetNumStations</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a2b566158aeac53505a0742ab06b5751a" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a35dec74848fac3d61434be54041aa8a9" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>GetVis</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ae95b1e3fdde7ad259e86158aa15276d1" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_filepath</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a2abf066c6efb7fec8415b5daf92fe2e5" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_measurementSet</name></member>
      <member refid="classicrar_1_1MeasurementSet_1aa418f4d26123293066026be7ef9e065a" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_msc</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a231b347e84035571dfdeb6825e2b09ac" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_msmc</name></member>
      <member refid="classicrar_1_1MeasurementSet_1a1e023da44562b8dfc52103a59929d29b" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_readAutocorrelations</name></member>
      <member refid="classicrar_1_1MeasurementSet_1ae61eecb307ddeaf325b4f6ae63102657" prot="private" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>m_stations</name></member>
      <member refid="classicrar_1_1MeasurementSet_1afd444b4fc4aa0a53fb745c378181b94f" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>MeasurementSet</name></member>
      <member refid="classicrar_1_1MeasurementSet_1abb3a7196d4da620eb1d1e6f578eafc81" prot="public" virt="non-virtual"><scope>icrar::MeasurementSet</scope><name>MeasurementSet</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1casalib_1_1MetaData" kind="struct" language="C++" prot="public">
    <compoundname>icrar::casalib::MetaData</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1ad0f4cd49ee80e2b7e405262a70866575" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool icrar::casalib::MetaData::m_initialized</definition>
        <argsstring/>
        <name>m_initialized</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="54" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a798865dd4e8dfb10761bb04a55f380db" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::MetaData::nantennas</definition>
        <argsstring/>
        <name>nantennas</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="56" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a119b44e9ef32ae5508ec1e43baf77838" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::MetaData::channels</definition>
        <argsstring/>
        <name>channels</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="58" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a71ed08a815ca95b1794b2de7bc3be22d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::MetaData::num_pols</definition>
        <argsstring/>
        <name>num_pols</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="59" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a387fde2a79913cecf8a1363e3ae04893" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::MetaData::stations</definition>
        <argsstring/>
        <name>stations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="60" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a8147eef54b5d07d2b1b753a6ac5c4eaa" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::casalib::MetaData::rows</definition>
        <argsstring/>
        <name>rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="61" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a9039701107776e53badba9475af04610" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::casalib::MetaData::freq_start_hz</definition>
        <argsstring/>
        <name>freq_start_hz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="63" column="16" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1afe6cf3d49c7513c7693296edde9fc737" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::casalib::MetaData::freq_inc_hz</definition>
        <argsstring/>
        <name>freq_inc_hz</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="64" column="16" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a15be7f4641a03a56be997225b3c06097" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; icrar::casalib::MetaData::channel_wavelength</definition>
        <argsstring/>
        <name>channel_wavelength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="66" column="21" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a3842efdc9bfaced72c8b6196414fae0b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; casacore::MVuvw &gt;</type>
        <definition>std::vector&lt;casacore::MVuvw&gt; icrar::casalib::MetaData::oldUVW</definition>
        <argsstring/>
        <name>oldUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="67" column="21" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1ada0fc5ebbe4217b6d204487107aeaf7b" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; casacore::Matrix&lt; double &gt; &gt;</type>
        <definition>boost::optional&lt;casacore::Matrix&lt;double&gt; &gt; icrar::casalib::MetaData::dd</definition>
        <argsstring/>
        <name>dd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="69" column="25" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1ada227d6528c2ab134d8d6bed40889e6b" prot="public" static="no" mutable="no">
        <type>boost::optional&lt; casacore::Matrix&lt; std::complex&lt; double &gt; &gt; &gt;</type>
        <definition>boost::optional&lt;casacore::Matrix&lt;std::complex&lt;double&gt; &gt; &gt; icrar::casalib::MetaData::avg_data</definition>
        <argsstring/>
        <name>avg_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="71" column="25" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a823544b1191d56bb7e3e12e6aaf50a01" prot="public" static="no" mutable="no">
        <type>std::array&lt; double, 2 &gt;</type>
        <definition>std::array&lt;double, 2&gt; icrar::casalib::MetaData::phase_centre</definition>
        <argsstring/>
        <name>phase_centre</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="75" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1afc0bb126cd0b5fdaea54c014b2676b4c" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::casalib::MetaData::phase_centre_ra_rad</definition>
        <argsstring/>
        <name>phase_centre_ra_rad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="78" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a86ea0811191cc0c6f70cd76c851e7f50" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::casalib::MetaData::phase_centre_dec_rad</definition>
        <argsstring/>
        <name>phase_centre_dec_rad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="79" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1af532159409a3d77c52ae25093fd483ee" prot="public" static="no" mutable="no">
        <type>union icrar::casalib::MetaData::@4</type>
        <definition>union icrar::casalib::MetaData::@4 icrar::casalib::MetaData::@5</definition>
        <argsstring/>
        <name>@5</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="81" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1ac94eb48fe7f85ca38c0eb7739515050f" prot="public" static="no" mutable="no">
        <type>std::array&lt; double, 2 &gt;</type>
        <definition>std::array&lt;double, 2&gt; icrar::casalib::MetaData::dlm</definition>
        <argsstring/>
        <name>dlm</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="85" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1acff3ec48f9bcc8ef1c89091512bbc858" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::casalib::MetaData::dlm_ra</definition>
        <argsstring/>
        <name>dlm_ra</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="88" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1af4ed9cb455e79bd81659243994b1ddb8" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::casalib::MetaData::dlm_dec</definition>
        <argsstring/>
        <name>dlm_dec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="89" column="24" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a27087bdeeab64a5d7d6d82f6d33c0092" prot="public" static="no" mutable="no">
        <type>union icrar::casalib::MetaData::@6</type>
        <definition>union icrar::casalib::MetaData::@6 icrar::casalib::MetaData::@7</definition>
        <argsstring/>
        <name>@7</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="91" column="9"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a30cb8e7ce64ba709b34e18f74a194836" prot="public" static="no" mutable="no">
        <type>casacore::Matrix&lt; double &gt;</type>
        <definition>casacore::Matrix&lt;double&gt; icrar::casalib::MetaData::A</definition>
        <argsstring/>
        <name>A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="93" column="26" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a320e6b24f0da695bd47cacd3ed5c9cf0" prot="public" static="no" mutable="no">
        <type>casacore::Matrix&lt; double &gt;</type>
        <definition>casacore::Matrix&lt;double&gt; icrar::casalib::MetaData::Ad</definition>
        <argsstring/>
        <name>Ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="94" column="26" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a7557dcf9eb1c9bf5647babde8ee66d36" prot="public" static="no" mutable="no">
        <type>casacore::Matrix&lt; double &gt;</type>
        <definition>casacore::Matrix&lt;double&gt; icrar::casalib::MetaData::A1</definition>
        <argsstring/>
        <name>A1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="96" column="26" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a56e84f0a8269f67b66b79891001e9285" prot="public" static="no" mutable="no">
        <type>casacore::Matrix&lt; double &gt;</type>
        <definition>casacore::Matrix&lt;double&gt; icrar::casalib::MetaData::Ad1</definition>
        <argsstring/>
        <name>Ad1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="97" column="26" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1a05db679353d1303f13b90439b8284cbb" prot="public" static="no" mutable="no">
        <type>casacore::Vector&lt; int &gt;</type>
        <definition>casacore::Vector&lt;int&gt; icrar::casalib::MetaData::I1</definition>
        <argsstring/>
        <name>I1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="99" column="26" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1casalib_1_1MetaData_1abaf2d866a9adcf9270e51fd0f62391a7" prot="public" static="no" mutable="no">
        <type>casacore::Vector&lt; int &gt;</type>
        <definition>casacore::Vector&lt;int&gt; icrar::casalib::MetaData::I</definition>
        <argsstring/>
        <name>I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="100" column="26" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1ae94b78aa4b0bfe99c4112f7a83055fea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::casalib::MetaData::MetaData</definition>
        <argsstring>()</argsstring>
        <name>MetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="103" column="9" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="45" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1a98911513c2b0f3b8ac891d1d9247d074" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::casalib::MetaData::MetaData</definition>
        <argsstring>(std::istream &amp;input)</argsstring>
        <name>MetaData</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="104" column="9" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="147" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1afa16b9a586bbe6ad00cce69d886db7af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::casalib::MetaData::MetaData</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms)</argsstring>
        <name>MetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="105" column="9" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="56" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1a9913d6984a76eed768733636e76f4f10" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int icrar::casalib::MetaData::GetBaselines</definition>
        <argsstring>() const</argsstring>
        <name>GetBaselines</name>
        <briefdescription>
<para>Gets the number of baselines. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="112" column="13" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1a77d4e140db7de4ac1a758eba5a305723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::MetaData::SetWv</definition>
        <argsstring>()</argsstring>
        <name>SetWv</name>
        <briefdescription>
<para>Set the wavelength from meta data TODO: rename to CalcWv or UpdateWv. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="119" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="206" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1a36acda0c1c71d25e24178f7bd4de340a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::MetaData::CalcUVW</definition>
        <argsstring>(std::vector&lt; casacore::MVuvw &gt; &amp;uvw)</argsstring>
        <name>CalcUVW</name>
        <param>
          <type>std::vector&lt; casacore::MVuvw &gt; &amp;</type>
          <declname>uvw</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>uvw</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="127" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="152" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1a3941648bb6c908b6542d483e51734511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::MetaData::SetDD</definition>
        <argsstring>(const casacore::MVDirection &amp;direction)</argsstring>
        <name>SetDD</name>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="135" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="169" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1a9f596820ac6033fdb6c9711bb24ad066" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::MetaData::SetDD</definition>
        <argsstring>(const icrar::MVDirection &amp;direction)</argsstring>
        <name>SetDD</name>
        <param>
          <type>const icrar::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="137" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="195" bodyend="198"/>
      </memberdef>
      <memberdef kind="function" id="structicrar_1_1casalib_1_1MetaData_1aa14c3b680a7a29fe385ec69878beb0ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::casalib::MetaData::operator==</definition>
        <argsstring>(const MetaData &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structicrar_1_1casalib_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="139" column="14" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.cc" bodystart="219" bodyend="245"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/MetaData.h" line="52" column="5" bodyfile="src/icrar/leap-accelerate/model/casa/MetaData.h" bodystart="53" bodyend="140"/>
    <listofallmembers>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a30cb8e7ce64ba709b34e18f74a194836" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>A</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a7557dcf9eb1c9bf5647babde8ee66d36" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>A1</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a320e6b24f0da695bd47cacd3ed5c9cf0" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>Ad</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a56e84f0a8269f67b66b79891001e9285" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>Ad1</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1ada227d6528c2ab134d8d6bed40889e6b" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>avg_data</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a36acda0c1c71d25e24178f7bd4de340a" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>CalcUVW</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a15be7f4641a03a56be997225b3c06097" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>channel_wavelength</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a119b44e9ef32ae5508ec1e43baf77838" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>channels</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1ada0fc5ebbe4217b6d204487107aeaf7b" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>dd</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1ac94eb48fe7f85ca38c0eb7739515050f" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>dlm</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1af4ed9cb455e79bd81659243994b1ddb8" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>dlm_dec</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1acff3ec48f9bcc8ef1c89091512bbc858" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>dlm_ra</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1afe6cf3d49c7513c7693296edde9fc737" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>freq_inc_hz</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a9039701107776e53badba9475af04610" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>freq_start_hz</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a9913d6984a76eed768733636e76f4f10" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>GetBaselines</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1abaf2d866a9adcf9270e51fd0f62391a7" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>I</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a05db679353d1303f13b90439b8284cbb" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>I1</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1ad0f4cd49ee80e2b7e405262a70866575" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>m_initialized</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1ae94b78aa4b0bfe99c4112f7a83055fea" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>MetaData</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a98911513c2b0f3b8ac891d1d9247d074" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>MetaData</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1afa16b9a586bbe6ad00cce69d886db7af" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>MetaData</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a798865dd4e8dfb10761bb04a55f380db" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>nantennas</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a71ed08a815ca95b1794b2de7bc3be22d" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>num_pols</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a3842efdc9bfaced72c8b6196414fae0b" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>oldUVW</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1aa14c3b680a7a29fe385ec69878beb0ed" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>operator==</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a823544b1191d56bb7e3e12e6aaf50a01" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>phase_centre</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a86ea0811191cc0c6f70cd76c851e7f50" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>phase_centre_dec_rad</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1afc0bb126cd0b5fdaea54c014b2676b4c" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>phase_centre_ra_rad</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a8147eef54b5d07d2b1b753a6ac5c4eaa" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>rows</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a3941648bb6c908b6542d483e51734511" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>SetDD</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a9f596820ac6033fdb6c9711bb24ad066" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>SetDD</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a77d4e140db7de4ac1a758eba5a305723" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>SetWv</name></member>
      <member refid="structicrar_1_1casalib_1_1MetaData_1a387fde2a79913cecf8a1363e3ae04893" prot="public" virt="non-virtual"><scope>icrar::casalib::MetaData</scope><name>stations</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cpu_1_1MetaData" kind="class" language="C++" prot="public">
    <compoundname>icrar::cpu::MetaData</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a4fc1a4b38a3a6b125261e36c86720288" prot="private" static="no" mutable="no">
        <type><ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">Constants</ref></type>
        <definition>Constants icrar::cpu::MetaData::m_constants</definition>
        <argsstring/>
        <name>m_constants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="94" column="19" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1afa0c084db746a22aba2a74cbb69fd8ab" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_A</definition>
        <argsstring/>
        <name>m_A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="96" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a4a30dcc55bfed25527c1ffb19fdd08ec" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXi</type>
        <definition>Eigen::VectorXi icrar::cpu::MetaData::m_I</definition>
        <argsstring/>
        <name>m_I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="97" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1accc9578bf12dd4c5c535f0546f2667d9" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_Ad</definition>
        <argsstring/>
        <name>m_Ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="98" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a8fe2debc5e1bacd2edcd427a817a616e" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_A1</definition>
        <argsstring/>
        <name>m_A1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="100" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1add1f846b9537b59e248789ee032af6e9" prot="private" static="no" mutable="no">
        <type>Eigen::VectorXi</type>
        <definition>Eigen::VectorXi icrar::cpu::MetaData::m_I1</definition>
        <argsstring/>
        <name>m_I1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="101" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a6e315209235d2b7bd8e56391f65bc5a8" prot="private" static="no" mutable="no">
        <type>Eigen::MatrixXd</type>
        <definition>Eigen::MatrixXd icrar::cpu::MetaData::m_Ad1</definition>
        <argsstring/>
        <name>m_Ad1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="102" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a1e5821ea804b1d44b6019e20e21e74e4" prot="private" static="no" mutable="no">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt;icrar::MVuvw&gt; icrar::cpu::MetaData::m_oldUVW</definition>
        <argsstring/>
        <name>m_oldUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="104" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a18ce3579970cc38f9e3d04b34936e103" prot="private" static="no" mutable="no">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt;icrar::MVuvw&gt; icrar::cpu::MetaData::m_UVW</definition>
        <argsstring/>
        <name>m_UVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="105" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a91957dd47620cde5ab100359e391f64a" prot="public" static="no" mutable="no">
        <type>icrar::MVDirection</type>
        <definition>icrar::MVDirection icrar::cpu::MetaData::direction</definition>
        <argsstring/>
        <name>direction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="108" column="28" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1a08030567837964aa308acfcae80e107e" prot="public" static="no" mutable="no">
        <type>Eigen::Matrix3d</type>
        <definition>Eigen::Matrix3d icrar::cpu::MetaData::dd</definition>
        <argsstring/>
        <name>dd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="109" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cpu_1_1MetaData_1aacbb4acf3d3232f5b1378047a273f929" prot="public" static="no" mutable="no">
        <type>Eigen::MatrixXcd</type>
        <definition>Eigen::MatrixXcd icrar::cpu::MetaData::avg_data</definition>
        <argsstring/>
        <name>avg_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="111" column="26" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classicrar_1_1cpu_1_1MetaData_1a5e194a7def73c50b3e42257bf2923573" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class icrar::cuda::DeviceMetaData</definition>
        <argsstring/>
        <name>icrar::cuda::DeviceMetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="144" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1abb5424df00b78374348fbc205a10aca8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>()</argsstring>
        <name>MetaData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="92" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="92" bodyend="92"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a26455a4f0e15426fd601e7d5dcf6db6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, const std::vector&lt; icrar::MVuvw &gt; &amp;uvws)</argsstring>
        <name>MetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
          <declname>uvws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="115" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="88" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ade345c47da12059d02835b76df048463" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, const icrar::MVDirection &amp;direction, const std::vector&lt; icrar::MVuvw &gt; &amp;uvws)</argsstring>
        <name>MetaData</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const icrar::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
          <declname>uvws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="116" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="209" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a3da73e20790eb3c9601a8728abb10528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::cpu::MetaData::MetaData</definition>
        <argsstring>(const casalib::MetaData &amp;metadata)</argsstring>
        <name>MetaData</name>
        <param>
          <type>const <ref refid="structicrar_1_1casalib_1_1MetaData" kindref="compound">casalib::MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="117" column="9" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="38" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1aa74b711230b7a195dab2272198811031" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">Constants</ref> &amp;</type>
        <definition>const Constants &amp; icrar::cpu::MetaData::GetConstants</definition>
        <argsstring>() const</argsstring>
        <name>GetConstants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="119" column="25" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a15f8a7848c548f596a95420fc2111a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetA</definition>
        <argsstring>() const</argsstring>
        <name>GetA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="121" column="31" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a9bb2e3d74bf808d57942469fc480ef0a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::VectorXi &amp;</type>
        <definition>const Eigen::VectorXi &amp; icrar::cpu::MetaData::GetI</definition>
        <argsstring>() const</argsstring>
        <name>GetI</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="122" column="31" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="222" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a09b689cefdfb1a452274832597934787" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetAd</definition>
        <argsstring>() const</argsstring>
        <name>GetAd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="123" column="31" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="223" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1af2e4b0a7490d07cefe24f2a046ba98d8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetA1</definition>
        <argsstring>() const</argsstring>
        <name>GetA1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="125" column="31" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="225" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a90722dff7a6402cafd824728a86a4d9d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::VectorXi &amp;</type>
        <definition>const Eigen::VectorXi &amp; icrar::cpu::MetaData::GetI1</definition>
        <argsstring>() const</argsstring>
        <name>GetI1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="126" column="31" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="226" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1ae70722d649f173a38cf9ad49d8ed43df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const Eigen::MatrixXd &amp;</type>
        <definition>const Eigen::MatrixXd &amp; icrar::cpu::MetaData::GetAd1</definition>
        <argsstring>() const</argsstring>
        <name>GetAd1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="127" column="31" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="227" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a36006afefa01fe821d466b1749b40e46" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
        <definition>const std::vector&lt;icrar::MVuvw&gt;&amp; icrar::cpu::MetaData::GetOldUVW</definition>
        <argsstring>() const</argsstring>
        <name>GetOldUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="129" column="27" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="129" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1aae0b681fa7e33f17730ad2983c446e35" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
        <definition>const std::vector&lt;icrar::MVuvw&gt;&amp; icrar::cpu::MetaData::GetUVW</definition>
        <argsstring>() const</argsstring>
        <name>GetUVW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="130" column="27" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="130" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1acf27f3a95398cee37afd7d5416c22392" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::MetaData::SetDD</definition>
        <argsstring>(const icrar::MVDirection &amp;direction)</argsstring>
        <name>SetDD</name>
        <param>
          <type>const icrar::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="133" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="229" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a54b58c95e1b82f1340a572daa9838503" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::MetaData::SetOldUVW</definition>
        <argsstring>(const std::vector&lt; icrar::MVuvw &gt; &amp;uvws)</argsstring>
        <name>SetOldUVW</name>
        <param>
          <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
          <declname>uvws</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="134" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a1c637ecad8a5a06edcd3d3e945502785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::MetaData::CalcUVW</definition>
        <argsstring>()</argsstring>
        <name>CalcUVW</name>
        <briefdescription>
<para>Updates the rotated UVW vector member preconditions - DD is set, oldUVW is set. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="140" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="256" bodyend="265"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1cpu_1_1MetaData_1a477bf3bf5429f48c2be84225e4d1466d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::cpu::MetaData::operator==</definition>
        <argsstring>(const MetaData &amp;rhs) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="142" column="14" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.cc" bodystart="267" bodyend="280"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h" line="90" column="5" bodyfile="src/icrar/leap-accelerate/model/cpu/MetaData.h" bodystart="91" bodyend="145"/>
    <listofallmembers>
      <member refid="classicrar_1_1cpu_1_1MetaData_1aacbb4acf3d3232f5b1378047a273f929" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>avg_data</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a1c637ecad8a5a06edcd3d3e945502785" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>CalcUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a08030567837964aa308acfcae80e107e" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>dd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a91957dd47620cde5ab100359e391f64a" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>direction</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a15f8a7848c548f596a95420fc2111a61" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetA</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1af2e4b0a7490d07cefe24f2a046ba98d8" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetA1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a09b689cefdfb1a452274832597934787" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetAd</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ae70722d649f173a38cf9ad49d8ed43df" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetAd1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1aa74b711230b7a195dab2272198811031" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetConstants</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a9bb2e3d74bf808d57942469fc480ef0a" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetI</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a90722dff7a6402cafd824728a86a4d9d" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetI1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a36006afefa01fe821d466b1749b40e46" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetOldUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1aae0b681fa7e33f17730ad2983c446e35" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>GetUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a5e194a7def73c50b3e42257bf2923573" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>icrar::cuda::DeviceMetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1afa0c084db746a22aba2a74cbb69fd8ab" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_A</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a8fe2debc5e1bacd2edcd427a817a616e" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_A1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1accc9578bf12dd4c5c535f0546f2667d9" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_Ad</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a6e315209235d2b7bd8e56391f65bc5a8" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_Ad1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4fc1a4b38a3a6b125261e36c86720288" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_constants</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a4a30dcc55bfed25527c1ffb19fdd08ec" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_I</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1add1f846b9537b59e248789ee032af6e9" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_I1</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a1e5821ea804b1d44b6019e20e21e74e4" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_oldUVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a18ce3579970cc38f9e3d04b34936e103" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>m_UVW</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1abb5424df00b78374348fbc205a10aca8" prot="private" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a26455a4f0e15426fd601e7d5dcf6db6c" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1ade345c47da12059d02835b76df048463" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a3da73e20790eb3c9601a8728abb10528" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>MetaData</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a477bf3bf5429f48c2be84225e4d1466d" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>operator==</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1acf27f3a95398cee37afd7d5416c22392" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>SetDD</name></member>
      <member refid="classicrar_1_1cpu_1_1MetaData_1a54b58c95e1b82f1340a572daa9838503" prot="public" virt="non-virtual"><scope>icrar::cpu::MetaData</scope><name>SetOldUVW</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1MetaDataTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::MetaDataTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1MetaDataTests_1a1a984944f81c754b49bda48ccbe89ee4" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double icrar::MetaDataTests::PRECISION</definition>
        <argsstring/>
        <name>PRECISION</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="43" column="22" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1MetaDataTests_1a8abbde3e004616baaaf6ebc2868dc640" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::MetaDataTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="44" column="25" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="44" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a39132ededb87296a70e7eca8b4e6bb37" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::MetaDataTests::MetaDataTests</definition>
        <argsstring>()</argsstring>
        <name>MetaDataTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="47" column="9" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ac93c11c17aeb904b54fa02ac3891dc24" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::MetaDataTests::~MetaDataTests</definition>
        <argsstring>() override</argsstring>
        <name>~MetaDataTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="51" column="9" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ad06aeeee3ffd0813a0a771dff628d74b" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="56" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="56" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ac3e7b5c4402454e2129e25da3f78fe6e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="62" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1ab7d6595b30c2f2b972a0f2b728a52ba6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestMeasurementSet</definition>
        <argsstring>()</argsstring>
        <name>TestMeasurementSet</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="67" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="67" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a199a7b3e77b7610c6ecc51b63765e3e4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestRawReadFromFile</definition>
        <argsstring>()</argsstring>
        <name>TestRawReadFromFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="77" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="77" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a33332c26bdc7a43178dc32c61890625c" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestReadFromFileOverrideStations</definition>
        <argsstring>()</argsstring>
        <name>TestReadFromFileOverrideStations</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="112" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="112" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a58f2efa13558b8197fb1b18fe03b8183" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestDD</definition>
        <argsstring>()</argsstring>
        <name>TestDD</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="145" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="145" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a080d210c35682c3bba3b2300d1a75416" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestSetWv</definition>
        <argsstring>()</argsstring>
        <name>TestSetWv</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="177" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="177" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a32470880d29747cfd7ecf7c33a8554ac" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestChannelWavelengths</definition>
        <argsstring>()</argsstring>
        <name>TestChannelWavelengths</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="184" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="184" bodyend="194"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1MetaDataTests_1a2a625885ce8394adcfb355debaa7d7e0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::MetaDataTests::TestCudaBufferCopy</definition>
        <argsstring>()</argsstring>
        <name>TestCudaBufferCopy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="196" column="14" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="196" bodyend="212"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::MetaDataTests</label>
        <link refid="classicrar_1_1MetaDataTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::MetaDataTests</label>
        <link refid="classicrar_1_1MetaDataTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>Test</label>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="41" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="42" bodyend="213"/>
    <listofallmembers>
      <member refid="classicrar_1_1MetaDataTests_1a39132ededb87296a70e7eca8b4e6bb37" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>MetaDataTests</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a8abbde3e004616baaaf6ebc2868dc640" prot="private" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a1a984944f81c754b49bda48ccbe89ee4" prot="private" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>PRECISION</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ad06aeeee3ffd0813a0a771dff628d74b" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ac3e7b5c4402454e2129e25da3f78fe6e" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a32470880d29747cfd7ecf7c33a8554ac" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestChannelWavelengths</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a2a625885ce8394adcfb355debaa7d7e0" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestCudaBufferCopy</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a58f2efa13558b8197fb1b18fe03b8183" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestDD</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ab7d6595b30c2f2b972a0f2b728a52ba6" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestMeasurementSet</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a199a7b3e77b7610c6ecc51b63765e3e4" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestRawReadFromFile</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a33332c26bdc7a43178dc32c61890625c" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestReadFromFileOverrideStations</name></member>
      <member refid="classicrar_1_1MetaDataTests_1a080d210c35682c3bba3b2300d1a75416" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>TestSetWv</name></member>
      <member refid="classicrar_1_1MetaDataTests_1ac93c11c17aeb904b54fa02ac3891dc24" prot="protected" virt="non-virtual"><scope>icrar::MetaDataTests</scope><name>~MetaDataTests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classMSUtilsTests" kind="class" language="C++" prot="public">
    <compoundname>MSUtilsTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classMSUtilsTests_1a54f9a368c989a5f1efef130a0dcfa5c1" prot="private" static="no" mutable="no">
        <type>const double</type>
        <definition>const double MSUtilsTests::TOLERANCE</definition>
        <argsstring/>
        <name>TOLERANCE</name>
        <initializer>= 0.0001</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="33" column="18" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classMSUtilsTests_1abfe47ab8d88eeaebae8ffd152530e9ff" prot="private" static="no" mutable="no">
        <type>casacore::MeasurementSet</type>
        <definition>casacore::MeasurementSet MSUtilsTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="35" column="30" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classMSUtilsTests_1a64414332f909f90e2f4b55ede6fbee6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>MSUtilsTests::MSUtilsTests</definition>
        <argsstring>()</argsstring>
        <name>MSUtilsTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="38" column="5" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="38" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1ae02bbd2b1b8e33b68298db65e04b8e8e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MSUtilsTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="43" column="10" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1abc170d91b00f646d90313b5aeb4ff6e9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MSUtilsTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="49" column="10" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1a7ed330d7bade32abb891f12470263914" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MSUtilsTests::test_read_coords</definition>
        <argsstring>()</argsstring>
        <name>test_read_coords</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="54" column="10" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="54" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1a8b76911e72dc057b2f61dfbefb0f8aa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void MSUtilsTests::test_read_vis</definition>
        <argsstring>()</argsstring>
        <name>test_read_vis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="80" column="10" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="80" bodyend="123"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classMSUtilsTests_1ae65dac1ee99daf7ca81ba997cb7ff086" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; MSUtilsTests::GetExpectedUU</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedUU</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="126" column="17" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="126" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1a37e3dd73e2572054fa41eddb1e8c0467" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; MSUtilsTests::GetExpectedVV</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedVV</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="160" column="17" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="160" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1a84f19b444143e98f9dc136e75eaed25b" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; MSUtilsTests::GetExpectedWW</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedWW</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="194" column="17" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="194" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="classMSUtilsTests_1a6c40b3aa8474bec64b33b15d8506b6f3" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Eigen::Tensor&lt; std::complex&lt; float &gt;, 3 &gt;</type>
        <definition>Eigen::Tensor&lt;std::complex&lt;float&gt;, 3&gt; MSUtilsTests::GetExpectedVis</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedVis</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="229" column="19" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="229" bodyend="246"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>testing::Test</label>
      </node>
      <node id="1">
        <label>MSUtilsTests</label>
        <link refid="classMSUtilsTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>testing::Test</label>
      </node>
      <node id="1">
        <label>MSUtilsTests</label>
        <link refid="classMSUtilsTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="31" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="32" bodyend="247"/>
    <listofallmembers>
      <member refid="classMSUtilsTests_1ae65dac1ee99daf7ca81ba997cb7ff086" prot="private" virt="non-virtual"><scope>MSUtilsTests</scope><name>GetExpectedUU</name></member>
      <member refid="classMSUtilsTests_1a6c40b3aa8474bec64b33b15d8506b6f3" prot="private" virt="non-virtual"><scope>MSUtilsTests</scope><name>GetExpectedVis</name></member>
      <member refid="classMSUtilsTests_1a37e3dd73e2572054fa41eddb1e8c0467" prot="private" virt="non-virtual"><scope>MSUtilsTests</scope><name>GetExpectedVV</name></member>
      <member refid="classMSUtilsTests_1a84f19b444143e98f9dc136e75eaed25b" prot="private" virt="non-virtual"><scope>MSUtilsTests</scope><name>GetExpectedWW</name></member>
      <member refid="classMSUtilsTests_1abfe47ab8d88eeaebae8ffd152530e9ff" prot="private" virt="non-virtual"><scope>MSUtilsTests</scope><name>ms</name></member>
      <member refid="classMSUtilsTests_1a64414332f909f90e2f4b55ede6fbee6f" prot="public" virt="non-virtual"><scope>MSUtilsTests</scope><name>MSUtilsTests</name></member>
      <member refid="classMSUtilsTests_1ae02bbd2b1b8e33b68298db65e04b8e8e" prot="public" virt="non-virtual"><scope>MSUtilsTests</scope><name>SetUp</name></member>
      <member refid="classMSUtilsTests_1abc170d91b00f646d90313b5aeb4ff6e9" prot="public" virt="non-virtual"><scope>MSUtilsTests</scope><name>TearDown</name></member>
      <member refid="classMSUtilsTests_1a7ed330d7bade32abb891f12470263914" prot="public" virt="non-virtual"><scope>MSUtilsTests</scope><name>test_read_coords</name></member>
      <member refid="classMSUtilsTests_1a8b76911e72dc057b2f61dfbefb0f8aa4" prot="public" virt="non-virtual"><scope>MSUtilsTests</scope><name>test_read_vis</name></member>
      <member refid="classMSUtilsTests_1a54f9a368c989a5f1efef130a0dcfa5c1" prot="private" virt="non-virtual"><scope>MSUtilsTests</scope><name>TOLERANCE</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1not__implemented__exception" kind="class" language="C++" prot="public">
    <compoundname>icrar::not_implemented_exception</compoundname>
    <basecompoundref refid="classicrar_1_1exception" prot="public" virt="non-virtual">icrar::exception</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1not__implemented__exception_1a7e1f14c161bc0f381e3355c66097b1cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::not_implemented_exception::not_implemented_exception</definition>
        <argsstring>(std::string file, int line)</argsstring>
        <name>not_implemented_exception</name>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/exception/exception.h" line="68" column="9" bodyfile="src/icrar/leap-accelerate/exception/exception.cc" bodystart="40" bodyend="42"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>icrar::not_implemented_exception</label>
        <link refid="classicrar_1_1not__implemented__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1">
        <label>icrar::not_implemented_exception</label>
        <link refid="classicrar_1_1not__implemented__exception"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3">
        <label>std::exception</label>
      </node>
      <node id="2">
        <label>icrar::exception</label>
        <link refid="classicrar_1_1exception"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/exception/exception.h" line="65" column="5" bodyfile="src/icrar/leap-accelerate/exception/exception.h" bodystart="66" bodyend="69"/>
    <listofallmembers>
      <member refid="classicrar_1_1exception_1a8f7ad57ef343909406b93fddf26c7bff" prot="public" virt="non-virtual"><scope>icrar::not_implemented_exception</scope><name>exception</name></member>
      <member refid="classicrar_1_1not__implemented__exception_1a7e1f14c161bc0f381e3355c66097b1cb" prot="public" virt="non-virtual"><scope>icrar::not_implemented_exception</scope><name>not_implemented_exception</name></member>
      <member refid="classicrar_1_1exception_1a968aa0755ada45caf88a99a6dfd90e11" prot="public" virt="virtual"><scope>icrar::not_implemented_exception</scope><name>what</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1PhaseRotateTests" kind="class" language="C++" prot="public">
    <compoundname>icrar::PhaseRotateTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1PhaseRotateTests_1a85ea95f9d13406cf5abac0d0b9d5ac65" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &gt;</type>
        <definition>std::unique_ptr&lt;icrar::MeasurementSet&gt; icrar::PhaseRotateTests::ms</definition>
        <argsstring/>
        <name>ms</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="57" column="25" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="57" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a0497c44c674250562e180b2fa7995957" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::PhaseRotateTests::PhaseRotateTests</definition>
        <argsstring>()</argsstring>
        <name>PhaseRotateTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="61" column="9" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="61" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a91797dcb1b0a60820921ea6280758d57" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::PhaseRotateTests::~PhaseRotateTests</definition>
        <argsstring>() override</argsstring>
        <name>~PhaseRotateTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="65" column="9" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a85447be2b88144833b81393d74c75d43" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="70" column="14" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a7cc37d5b574ee31f908f48640fed23b4" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="77" column="14" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="77" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a22dca1bc6003302ea4d241c1c89aeca2" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::PhaseRotateTest</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>PhaseRotateTest</name>
        <param>
          <type>ComputeImplementation</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="82" column="14" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="82" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1ae0fcc396fe0be655635104a29e1bb761" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::RotateVisibilitiesTest</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>RotateVisibilitiesTest</name>
        <param>
          <type>ComputeImplementation</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="147" column="14" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="147" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a0c48119a9b922776266aa95b45adfb81" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::PhaseMatrixFunction0Test</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>PhaseMatrixFunction0Test</name>
        <param>
          <type>ComputeImplementation</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="272" column="14" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="272" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a153091a181431502ac456b0e3a3787be" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::pair&lt; casacore::MVDirection, std::vector&lt; double &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;casacore::MVDirection, std::vector&lt;double&gt; &gt; &gt; icrar::PhaseRotateTests::GetExpectedCalibration</definition>
        <argsstring>()</argsstring>
        <name>GetExpectedCalibration</name>
        <briefdescription>
<para>Get the Expected Calibration object validated the output of LEAP-Cal:ported. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>a vector of direction and antenna calibration pairs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="312" column="21" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="312" bodyend="841"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1PhaseRotateTests_1a7572f72468ed4fb1a29c3b0cabc5d119" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::PhaseRotateTests::PhaseMatrixFunctionDataTest</definition>
        <argsstring>(ComputeImplementation impl)</argsstring>
        <name>PhaseMatrixFunctionDataTest</name>
        <param>
          <type>ComputeImplementation</type>
          <declname>impl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="843" column="14" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="843" bodyend="978"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>icrar::PhaseRotateTests</label>
        <link refid="classicrar_1_1PhaseRotateTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>icrar::PhaseRotateTests</label>
        <link refid="classicrar_1_1PhaseRotateTests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="55" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="56" bodyend="979"/>
    <listofallmembers>
      <member refid="classicrar_1_1PhaseRotateTests_1a153091a181431502ac456b0e3a3787be" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>GetExpectedCalibration</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a85ea95f9d13406cf5abac0d0b9d5ac65" prot="private" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>ms</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a0c48119a9b922776266aa95b45adfb81" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>PhaseMatrixFunction0Test</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a7572f72468ed4fb1a29c3b0cabc5d119" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>PhaseMatrixFunctionDataTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a22dca1bc6003302ea4d241c1c89aeca2" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>PhaseRotateTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a0497c44c674250562e180b2fa7995957" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>PhaseRotateTests</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1ae0fcc396fe0be655635104a29e1bb761" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>RotateVisibilitiesTest</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a85447be2b88144833b81393d74c75d43" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>SetUp</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a7cc37d5b574ee31f908f48640fed23b4" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>TearDown</name></member>
      <member refid="classicrar_1_1PhaseRotateTests_1a91797dcb1b0a60820921ea6280758d57" prot="protected" virt="non-virtual"><scope>icrar::PhaseRotateTests</scope><name>~PhaseRotateTests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1profiling__timer" kind="class" language="C++" prot="public">
    <compoundname>icrar::profiling_timer</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1profiling__timer_1af9a144a97af573e92ff379398c192c2a" prot="private" static="no" mutable="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point icrar::profiling_timer::m_start</definition>
        <argsstring/>
        <name>m_start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="35" column="56" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1profiling__timer_1af0b7cda6cc6fa35fd8a3f4bd057fdaf7" prot="private" static="no" mutable="no">
        <type>std::chrono::high_resolution_clock::time_point</type>
        <definition>std::chrono::high_resolution_clock::time_point icrar::profiling_timer::m_stop</definition>
        <argsstring/>
        <name>m_stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="36" column="56" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1profiling__timer_1adb71700bcd78abcbcb1fd86805699c37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::profiling_timer::profiling_timer</definition>
        <argsstring>()</argsstring>
        <name>profiling_timer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="39" column="9" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="39" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling__timer_1a790b6a406ab64b6e9f52adfdd8b2f10b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::profiling_timer::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="47" column="21" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="47" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling__timer_1a496f6b6812d2c04478f50300dbc31145" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::profiling_timer::stop</definition>
        <argsstring>()</argsstring>
        <name>stop</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="54" column="21" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="54" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling__timer_1ade1c08767b8ff1c5e12f70da9e42b6f4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::profiling_timer::restart</definition>
        <argsstring>()</argsstring>
        <name>restart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="61" column="21" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="61" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling__timer_1a2fdd87751d1bd7b36e62f23299aa2874" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::profiling_timer::log</definition>
        <argsstring>(std::string entryName) const</argsstring>
        <name>log</name>
        <param>
          <type>std::string</type>
          <declname>entryName</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="70" column="21" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="70" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1profiling__timer_1a6ac1ad3465b44d4d38aeb6ae12c5a16f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::profiling_timer::log</definition>
        <argsstring>(std::string) const</argsstring>
        <name>log</name>
        <param>
          <type>std::string</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="75" column="21" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="75" bodyend="75"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling_timer.h" line="33" column="5" bodyfile="src/icrar/leap-accelerate/core/profiling_timer.h" bodystart="34" bodyend="77"/>
    <listofallmembers>
      <member refid="classicrar_1_1profiling__timer_1a2fdd87751d1bd7b36e62f23299aa2874" prot="public" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>log</name></member>
      <member refid="classicrar_1_1profiling__timer_1a6ac1ad3465b44d4d38aeb6ae12c5a16f" prot="public" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>log</name></member>
      <member refid="classicrar_1_1profiling__timer_1af9a144a97af573e92ff379398c192c2a" prot="private" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>m_start</name></member>
      <member refid="classicrar_1_1profiling__timer_1af0b7cda6cc6fa35fd8a3f4bd057fdaf7" prot="private" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>m_stop</name></member>
      <member refid="classicrar_1_1profiling__timer_1adb71700bcd78abcbcb1fd86805699c37" prot="public" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>profiling_timer</name></member>
      <member refid="classicrar_1_1profiling__timer_1ade1c08767b8ff1c5e12f70da9e42b6f4" prot="public" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>restart</name></member>
      <member refid="classicrar_1_1profiling__timer_1a790b6a406ab64b6e9f52adfdd8b2f10b" prot="public" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>start</name></member>
      <member refid="classicrar_1_1profiling__timer_1a496f6b6812d2c04478f50300dbc31145" prot="public" virt="non-virtual"><scope>icrar::profiling_timer</scope><name>stop</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1Server" kind="class" language="C++" prot="public">
    <compoundname>icrar::Server</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1Server_1a90e9a279d563e7108397dd9104b4f3a8" prot="private" static="no" mutable="no">
        <type>boost::asio::io_service &amp;</type>
        <definition>boost::asio::io_service&amp; icrar::Server::_io_service</definition>
        <argsstring/>
        <name>_io_service</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="76" column="33" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Server_1ab249200a669e65312c7ae0bc8298e557" prot="private" static="no" mutable="no">
        <type>tcp::acceptor</type>
        <definition>tcp::acceptor icrar::Server::_acceptor</definition>
        <argsstring/>
        <name>_acceptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="77" column="23" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1Server_1afbcd0da790eaeca6867fc44a48a7de9e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::Server::Server</definition>
        <argsstring>(boost::asio::io_service &amp;io_service, short port)</argsstring>
        <name>Server</name>
        <param>
          <type>boost::asio::io_service &amp;</type>
          <declname>io_service</declname>
        </param>
        <param>
          <type>short</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="79" column="9" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Server_1afa9ec5b99062f9ed0de350d7bde45fdc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::Server::start_accept</definition>
        <argsstring>()</argsstring>
        <name>start_accept</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="90" column="14" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="90" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Server_1ad73ac03ab2225e7f5df3456a448023f2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::Server::handle_accept</definition>
        <argsstring>(Session *new_session, const boost::system::error_code &amp;error)</argsstring>
        <name>handle_accept</name>
        <param>
          <type><ref refid="classicrar_1_1Session" kindref="compound">Session</ref> *</type>
          <declname>new_session</declname>
        </param>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="100" column="14" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="100" bodyend="112"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="74" column="5" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="75" bodyend="113"/>
    <listofallmembers>
      <member refid="classicrar_1_1Server_1ab249200a669e65312c7ae0bc8298e557" prot="private" virt="non-virtual"><scope>icrar::Server</scope><name>_acceptor</name></member>
      <member refid="classicrar_1_1Server_1a90e9a279d563e7108397dd9104b4f3a8" prot="private" virt="non-virtual"><scope>icrar::Server</scope><name>_io_service</name></member>
      <member refid="classicrar_1_1Server_1ad73ac03ab2225e7f5df3456a448023f2" prot="public" virt="non-virtual"><scope>icrar::Server</scope><name>handle_accept</name></member>
      <member refid="classicrar_1_1Server_1afbcd0da790eaeca6867fc44a48a7de9e" prot="public" virt="non-virtual"><scope>icrar::Server</scope><name>Server</name></member>
      <member refid="classicrar_1_1Server_1afa9ec5b99062f9ed0de350d7bde45fdc" prot="public" virt="non-virtual"><scope>icrar::Server</scope><name>start_accept</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1Session" kind="class" language="C++" prot="public">
    <compoundname>icrar::Session</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classicrar_1_1Session_1a0db88c34bbcd786057d5b28e47f8b0f7" prot="private" static="no" mutable="no">
        <type>tcp::socket</type>
        <definition>tcp::socket icrar::Session::_socket</definition>
        <argsstring/>
        <name>_socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="38" column="21" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Session_1af92a587f93175ce688a6c7e8cfaa7425" prot="private" static="no" mutable="no">
        <type>char</type>
        <definition>char icrar::Session::_data[1024]</definition>
        <argsstring>[1024]</argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="39" column="14" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1Session_1ae7b4e812762914716656546d429fdb26" prot="private" static="no" mutable="no">
        <type>const int</type>
        <definition>const int icrar::Session::max_length</definition>
        <argsstring/>
        <name>max_length</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="40" column="19" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classicrar_1_1Session_1a594c2c4feea00821bede1c38bdf7cec6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>icrar::Session::Session</definition>
        <argsstring>(boost::asio::io_service &amp;io_service)</argsstring>
        <name>Session</name>
        <param>
          <type>boost::asio::io_service &amp;</type>
          <declname>io_service</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="43" column="9" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="43" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Session_1ade11b94f341433d2a3536d89b9ea6308" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>tcp::socket &amp;</type>
        <definition>tcp::socket&amp; icrar::Session::get_socket</definition>
        <argsstring>()</argsstring>
        <name>get_socket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="49" column="21" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="49" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Session_1af1fbfb1fdbce56c4c98da524a1a74d17" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::Session::start</definition>
        <argsstring>()</argsstring>
        <name>start</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="54" column="14" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="54" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Session_1a8aa3c12d95bc1319777a97569637350c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::Session::handle_read</definition>
        <argsstring>(const boost::system::error_code &amp;error, size_t bytes_transferred)</argsstring>
        <name>handle_read</name>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>error</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes_transferred</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="62" column="14" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="62" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classicrar_1_1Session_1a6f998873a351e32d61f7ed5c6183bb34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::Session::handle_write</definition>
        <argsstring>(const boost::system::error_code &amp;error)</argsstring>
        <name>handle_write</name>
        <param>
          <type>const boost::system::error_code &amp;</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="68" column="14" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="68" bodyend="71"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="36" column="5" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="37" bodyend="72"/>
    <listofallmembers>
      <member refid="classicrar_1_1Session_1af92a587f93175ce688a6c7e8cfaa7425" prot="private" virt="non-virtual"><scope>icrar::Session</scope><name>_data</name></member>
      <member refid="classicrar_1_1Session_1a0db88c34bbcd786057d5b28e47f8b0f7" prot="private" virt="non-virtual"><scope>icrar::Session</scope><name>_socket</name></member>
      <member refid="classicrar_1_1Session_1ade11b94f341433d2a3536d89b9ea6308" prot="public" virt="non-virtual"><scope>icrar::Session</scope><name>get_socket</name></member>
      <member refid="classicrar_1_1Session_1a8aa3c12d95bc1319777a97569637350c" prot="public" virt="non-virtual"><scope>icrar::Session</scope><name>handle_read</name></member>
      <member refid="classicrar_1_1Session_1a6f998873a351e32d61f7ed5c6183bb34" prot="public" virt="non-virtual"><scope>icrar::Session</scope><name>handle_write</name></member>
      <member refid="classicrar_1_1Session_1ae7b4e812762914716656546d429fdb26" prot="private" virt="non-virtual"><scope>icrar::Session</scope><name>max_length</name></member>
      <member refid="classicrar_1_1Session_1a594c2c4feea00821bede1c38bdf7cec6" prot="public" virt="non-virtual"><scope>icrar::Session</scope><name>Session</name></member>
      <member refid="classicrar_1_1Session_1af1fbfb1fdbce56c4c98da524a1a74d17" prot="public" virt="non-virtual"><scope>icrar::Session</scope><name>start</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classicrar_1_1cuda_1_1UniformMetaData" kind="class" language="C++" prot="public">
    <compoundname>icrar::cuda::UniformMetaData</compoundname>
    <includes local="no">DeviceMetaData.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1a0383b48caddad702d713e90a99d26818" prot="public" static="no" mutable="no">
        <type><ref refid="structicrar_1_1cpu_1_1Constants" kindref="compound">icrar::cpu::Constants</ref></type>
        <definition>icrar::cpu::Constants icrar::cuda::UniformMetaData::constants</definition>
        <argsstring/>
        <name>constants</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="64" column="31" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1ae7dc5721a2386cdf8e699470cc77bf49" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::UniformMetaData::A</definition>
        <argsstring/>
        <name>A</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="66" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1a4f76546719896f0ee9916f51ef59bd09" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">icrar::cuda::device_vector</ref>&lt; int &gt;</type>
        <definition>icrar::cuda::device_vector&lt;int&gt; icrar::cuda::UniformMetaData::I</definition>
        <argsstring/>
        <name>I</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="67" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1aabae9687de8ec46c4428742cc534c4ca" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::UniformMetaData::Ad</definition>
        <argsstring/>
        <name>Ad</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="68" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1a0764a35e7af4999949b0f875ed2beed3" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::UniformMetaData::A1</definition>
        <argsstring/>
        <name>A1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="70" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1ab0e8fddb0c5734842bfddc0e0ae9e420" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">icrar::cuda::device_vector</ref>&lt; int &gt;</type>
        <definition>icrar::cuda::device_vector&lt;int&gt; icrar::cuda::UniformMetaData::I1</definition>
        <argsstring/>
        <name>I1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="71" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classicrar_1_1cuda_1_1UniformMetaData_1a10683e5c363eb93b960a15a59cb81a24" prot="public" static="no" mutable="no">
        <type><ref refid="classicrar_1_1cuda_1_1device__matrix" kindref="compound">icrar::cuda::device_matrix</ref>&lt; double &gt;</type>
        <definition>icrar::cuda::device_matrix&lt;double&gt; icrar::cuda::UniformMetaData::Ad1</definition>
        <argsstring/>
        <name>Ad1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="72" column="36" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Container of uniform gpu buffers available to all cuda threads and are immutable. </para>
    </detaileddescription>
    <collaborationgraph>
      <node id="5">
        <label>icrar::cuda::device_matrix&lt; double &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__matrix"/>
        <childnode refid="4" relation="private-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>icrar::cuda::UniformMetaData</label>
        <link refid="classicrar_1_1cuda_1_1UniformMetaData"/>
        <childnode refid="2" relation="usage">
          <edgelabel>constants</edgelabel>
        </childnode>
        <childnode refid="3" relation="usage">
          <edgelabel>I</edgelabel>
          <edgelabel>I1</edgelabel>
        </childnode>
        <childnode refid="5" relation="usage">
          <edgelabel>A1</edgelabel>
          <edgelabel>Ad</edgelabel>
          <edgelabel>Ad1</edgelabel>
          <edgelabel>A</edgelabel>
        </childnode>
      </node>
      <node id="4">
        <label>noncopyable</label>
      </node>
      <node id="3">
        <label>icrar::cuda::device_vector&lt; int &gt;</label>
        <link refid="classicrar_1_1cuda_1_1device__vector"/>
        <childnode refid="4" relation="private-inheritance">
        </childnode>
      </node>
      <node id="2">
        <label>icrar::cpu::Constants</label>
        <link refid="structicrar_1_1cpu_1_1Constants"/>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" line="61" column="5" bodyfile="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h" bodystart="62" bodyend="73"/>
    <listofallmembers>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1ae7dc5721a2386cdf8e699470cc77bf49" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>A</name></member>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1a0764a35e7af4999949b0f875ed2beed3" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>A1</name></member>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1aabae9687de8ec46c4428742cc534c4ca" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>Ad</name></member>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1a10683e5c363eb93b960a15a59cb81a24" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>Ad1</name></member>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1a0383b48caddad702d713e90a99d26818" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>constants</name></member>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1a4f76546719896f0ee9916f51ef59bd09" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>I</name></member>
      <member refid="classicrar_1_1cuda_1_1UniformMetaData_1ab0e8fddb0c5734842bfddc0e0ae9e420" prot="public" virt="non-virtual"><scope>icrar::cuda::UniformMetaData</scope><name>I1</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="classvector__tests" kind="class" language="C++" prot="public">
    <compoundname>vector_tests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">Test</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classvector__tests_1a3e31d23bfd705191cf80e1e273caef38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type/>
        <definition>vector_tests::vector_tests</definition>
        <argsstring>()</argsstring>
        <name>vector_tests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="36" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="36" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="classvector__tests_1a2fbf7414a07a524944349874f2593a93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_tests::SetUp</definition>
        <argsstring>() override</argsstring>
        <name>SetUp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="41" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="classvector__tests_1a8361fc1fcf1779248a70b723681c5f05" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_tests::TearDown</definition>
        <argsstring>() override</argsstring>
        <name>TearDown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="46" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classvector__tests_1a4e02eabc1fb18209799e4708e3165bce" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>unsigned int</type>
            <declname>n</declname>
            <defname>n</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void vector_tests::test_array_add</definition>
        <argsstring>(bool useCuda)</argsstring>
        <name>test_array_add</name>
        <param>
          <type>bool</type>
          <declname>useCuda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="52" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="52" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classvector__tests_1ac2f39ebcfe97befa8511b23c152d1b6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_tests::test_vector_add</definition>
        <argsstring>(const int n, bool useCuda)</argsstring>
        <name>test_vector_add</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCuda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="83" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="83" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classvector__tests_1ae2ad9be79039f5df45d1c0d6d378b9a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_tests::test_device_vector_add</definition>
        <argsstring>(const int n, bool useCuda)</argsstring>
        <name>test_device_vector_add</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCuda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="102" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="102" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classvector__tests_1a16270988c1b077ac424d76f2c6eafbf7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void vector_tests::test_device_vector_fibonacci</definition>
        <argsstring>(const int n, const int k, bool useCuda)</argsstring>
        <name>test_device_vector_fibonacci</name>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>useCuda</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="125" column="10" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="125" bodyend="164"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>vector_tests</label>
        <link refid="classvector__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>Test</label>
      </node>
      <node id="1">
        <label>vector_tests</label>
        <link refid="classvector__tests"/>
        <childnode refid="2" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="33" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="34" bodyend="165"/>
    <listofallmembers>
      <member refid="classvector__tests_1a2fbf7414a07a524944349874f2593a93" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>SetUp</name></member>
      <member refid="classvector__tests_1a8361fc1fcf1779248a70b723681c5f05" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>TearDown</name></member>
      <member refid="classvector__tests_1a4e02eabc1fb18209799e4708e3165bce" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>test_array_add</name></member>
      <member refid="classvector__tests_1ae2ad9be79039f5df45d1c0d6d378b9a5" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>test_device_vector_add</name></member>
      <member refid="classvector__tests_1a16270988c1b077ac424d76f2c6eafbf7" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>test_device_vector_fibonacci</name></member>
      <member refid="classvector__tests_1ac2f39ebcfe97befa8511b23c152d1b6a" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>test_vector_add</name></member>
      <member refid="classvector__tests_1a3e31d23bfd705191cf80e1e273caef38" prot="public" virt="non-virtual"><scope>vector_tests</scope><name>vector_tests</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="structicrar_1_1visibility" kind="struct" language="C++" prot="public">
    <compoundname>icrar::visibility</compoundname>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structicrar_1_1visibility_1af72b57f8712e447b4c20379626094c2d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::frequency</definition>
        <argsstring/>
        <name>frequency</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="30" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1afd7ecadb3fb2fac66d25c349d2b0c6f9" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::time</definition>
        <argsstring/>
        <name>time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="31" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a4bc15f93894e409717c9e35d72bb64b7" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::u</definition>
        <argsstring/>
        <name>u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="32" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1acceabd4158c4e8fccc2abdc04b5908ee" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::v</definition>
        <argsstring/>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="33" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a2ecfaae81e5563ba6f577586f5a0cf60" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::w</definition>
        <argsstring/>
        <name>w</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="34" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a098754613ada86438b0b6d8cdb896044" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::r</definition>
        <argsstring/>
        <name>r</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="35" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1aaf60c41e16c5e71dfe1e4e3391115e97" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::i</definition>
        <argsstring/>
        <name>i</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="36" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1aa275071c79dd305a593205b51a24098d" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double icrar::visibility::weight</definition>
        <argsstring/>
        <name>weight</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="37" column="16" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1adffbf3933fab6f52da0a150fff955980" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::visibility::a1</definition>
        <argsstring/>
        <name>a1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="38" column="13" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1a54fcbaa38dab9fbaffdaa2039f641f9b" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::visibility::a2</definition>
        <argsstring/>
        <name>a2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="39" column="13" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structicrar_1_1visibility_1ae5b696405fc41d3d0d4bd33923c9f2f1" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int icrar::visibility::gcfinx</definition>
        <argsstring/>
        <name>gcfinx</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="40" column="13" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structicrar_1_1visibility_1a10b3507c4396fa87815f9119781273f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; icrar::visibility::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const visibility &amp;vis)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structicrar_1_1visibility" kindref="compound">visibility</ref> &amp;</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/visibility.h" line="42" column="9" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="42" bodyend="48"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/visibility.h" line="28" column="5" bodyfile="src/icrar/leap-accelerate/model/visibility.h" bodystart="29" bodyend="49"/>
    <listofallmembers>
      <member refid="structicrar_1_1visibility_1adffbf3933fab6f52da0a150fff955980" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>a1</name></member>
      <member refid="structicrar_1_1visibility_1a54fcbaa38dab9fbaffdaa2039f641f9b" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>a2</name></member>
      <member refid="structicrar_1_1visibility_1af72b57f8712e447b4c20379626094c2d" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>frequency</name></member>
      <member refid="structicrar_1_1visibility_1ae5b696405fc41d3d0d4bd33923c9f2f1" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>gcfinx</name></member>
      <member refid="structicrar_1_1visibility_1aaf60c41e16c5e71dfe1e4e3391115e97" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>i</name></member>
      <member refid="structicrar_1_1visibility_1a10b3507c4396fa87815f9119781273f5" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>operator&lt;&lt;</name></member>
      <member refid="structicrar_1_1visibility_1a098754613ada86438b0b6d8cdb896044" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>r</name></member>
      <member refid="structicrar_1_1visibility_1afd7ecadb3fb2fac66d25c349d2b0c6f9" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>time</name></member>
      <member refid="structicrar_1_1visibility_1a4bc15f93894e409717c9e35d72bb64b7" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>u</name></member>
      <member refid="structicrar_1_1visibility_1acceabd4158c4e8fccc2abdc04b5908ee" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>v</name></member>
      <member refid="structicrar_1_1visibility_1a2ecfaae81e5563ba6f577586f5a0cf60" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>w</name></member>
      <member refid="structicrar_1_1visibility_1aa275071c79dd305a593205b51a24098d" prot="public" virt="non-virtual"><scope>icrar::visibility</scope><name>weight</name></member>
    </listofallmembers>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacecasacore" kind="namespace" language="C++">
    <compoundname>casacore</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" line="40" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceEigen" kind="namespace" language="C++">
    <compoundname>Eigen</compoundname>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceEigen_1a96feb50b05c91d55cf2a03e7318f3215" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; EigenMatrix&lt; T, -1, 1 &gt;, -1, -1 &gt;</type>
        <definition>using Eigen::Matrix3D = typedef Eigen::Matrix&lt;EigenMatrix&lt;T, -1, 1&gt;, -1, -1&gt;</definition>
        <argsstring/>
        <name>Matrix3D</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/matrix3d.h" line="34" column="5" bodyfile="src/icrar/leap-accelerate/math/cpu/matrix3d.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/matrix3d.h" line="31" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar" kind="namespace" language="C++">
    <compoundname>icrar</compoundname>
    <innerclass refid="structicrar_1_1Arguments" prot="public">icrar::Arguments</innerclass>
    <innerclass refid="classicrar_1_1ArgumentsValidated" prot="public">icrar::ArgumentsValidated</innerclass>
    <innerclass refid="classicrar_1_1CommandLineTests" prot="public">icrar::CommandLineTests</innerclass>
    <innerclass refid="classicrar_1_1E2EPerformanceTests" prot="public">icrar::E2EPerformanceTests</innerclass>
    <innerclass refid="classicrar_1_1exception" prot="public">icrar::exception</innerclass>
    <innerclass refid="classicrar_1_1file__exception" prot="public">icrar::file_exception</innerclass>
    <innerclass refid="classicrar_1_1IntegrationTests" prot="public">icrar::IntegrationTests</innerclass>
    <innerclass refid="classicrar_1_1invalid__argument__exception" prot="public">icrar::invalid_argument_exception</innerclass>
    <innerclass refid="classicrar_1_1json__exception" prot="public">icrar::json_exception</innerclass>
    <innerclass refid="classicrar_1_1JSONHelperTests" prot="public">icrar::JSONHelperTests</innerclass>
    <innerclass refid="classicrar_1_1LeapRemote" prot="public">icrar::LeapRemote</innerclass>
    <innerclass refid="classicrar_1_1math__conversion__tests" prot="public">icrar::math_conversion_tests</innerclass>
    <innerclass refid="classicrar_1_1MeasurementSet" prot="public">icrar::MeasurementSet</innerclass>
    <innerclass refid="classicrar_1_1MetaDataTests" prot="public">icrar::MetaDataTests</innerclass>
    <innerclass refid="classicrar_1_1not__implemented__exception" prot="public">icrar::not_implemented_exception</innerclass>
    <innerclass refid="classicrar_1_1PhaseRotateTests" prot="public">icrar::PhaseRotateTests</innerclass>
    <innerclass refid="classicrar_1_1profiling__timer" prot="public">icrar::profiling_timer</innerclass>
    <innerclass refid="classicrar_1_1Server" prot="public">icrar::Server</innerclass>
    <innerclass refid="classicrar_1_1Session" prot="public">icrar::Session</innerclass>
    <innerclass refid="structicrar_1_1visibility" prot="public">icrar::visibility</innerclass>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceicrar_1adef48186ce90b62c8d5113a075786528" prot="public" static="no" strong="yes">
        <type/>
        <name>ComputeImplementation</name>
        <enumvalue id="namespaceicrar_1adef48186ce90b62c8d5113a075786528a202447d5d44ce12531f7207cb33b6bf7" prot="public">
          <name>casa</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1adef48186ce90b62c8d5113a075786528ad9747e2da342bdb995f6389533ad1a3d" prot="public">
          <name>cpu</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1adef48186ce90b62c8d5113a075786528a39466fe22b062a34cfe09f3cc8c24868" prot="public">
          <name>cuda</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/compute_implementation.h" line="29" column="5" bodyfile="src/icrar/leap-accelerate/core/compute_implementation.h" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509" prot="public" static="no" strong="yes">
        <type/>
        <name>InputType</name>
        <enumvalue id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509a2f05998d2a71cdc19b7109549bbe2646" prot="public">
          <name>STREAM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509a496475a066afb2d2e50a4133b9822497" prot="public">
          <name>FILENAME</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceicrar_1aed2695a6f067d20f9ca5b6639fa61509a89e5ba47dca4a898ba35ee1a035bb2b1" prot="public">
          <name>APACHE_ARROW</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="49" column="5" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="50" bodyend="54"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceicrar_1a8a431a9ab82f50b2ddfc44ed3869b2a0" prot="public" static="no">
        <type>Eigen::RowVector3d</type>
        <definition>typedef Eigen::Vector3d icrar::MVDirection</definition>
        <argsstring/>
        <name>MVDirection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/MVDirection.h" line="29" column="5" bodyfile="src/icrar/leap-accelerate/common/MVDirection.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1a5adefae0c454c8c24bb15ac3f9045288" prot="public" static="no">
        <type>Eigen::RowVector3d</type>
        <definition>using icrar::MVuvw = typedef Eigen::RowVector3d</definition>
        <argsstring/>
        <name>MVuvw</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/MVuvw.h" line="27" column="5" bodyfile="src/icrar/leap-accelerate/common/MVuvw.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceicrar_1ae1be3d6c5e85d786b22e755cff03ee3a" prot="public" static="no">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Tensor&lt; T, 3 &gt;</type>
        <definition>using icrar::Tensor3X = typedef Eigen::Tensor&lt;T, 3&gt;</definition>
        <argsstring/>
        <name>Tensor3X</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Tensor3X.h" line="31" column="5" bodyfile="src/icrar/leap-accelerate/common/Tensor3X.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceicrar_1a0e67f8ee9c77adb35c7f4b976dfc7870" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double icrar::speed_of_light</definition>
        <argsstring/>
        <name>speed_of_light</name>
        <initializer>= 299792458.0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/constants.h" line="27" column="22" bodyfile="src/icrar/leap-accelerate/common/constants.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceicrar_1a84591c57301e28bb2e685ca9c74f5286" prot="public" static="yes" mutable="no">
        <type>std::string</type>
        <definition>std::string icrar::_version</definition>
        <argsstring/>
        <name>_version</name>
        <initializer>= std::to_string(LEAP_ACCELERATE_VERSION_MAJOR) + "." +
                              std::to_string(LEAP_ACCELERATE_VERSION_MINOR) + "." +
                              std::to_string(LEAP_ACCELERATE_VERSION_PATCH)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/version.cc" line="36" column="20" bodyfile="src/icrar/leap-accelerate/core/version.cc" bodystart="36" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceicrar_1ad4c0f9f43fb3b2e13b244bc109271f89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RowVector</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::pretty_row</definition>
        <argsstring>(const RowVector &amp;row, std::stringstream &amp;ss)</argsstring>
        <name>pretty_row</name>
        <param>
          <type>const RowVector &amp;</type>
          <declname>row</declname>
        </param>
        <param>
          <type>std::stringstream &amp;</type>
          <declname>ss</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_extensions.h" line="39" column="10" bodyfile="src/icrar/leap-accelerate/common/eigen_extensions.h" bodystart="39" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab7ab7061a3b93ad046180cc17c774d04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string icrar::pretty_matrix</definition>
        <argsstring>(const Matrix &amp;value)</argsstring>
        <name>pretty_matrix</name>
        <param>
          <type>const Matrix &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_extensions.h" line="68" column="17" bodyfile="src/icrar/leap-accelerate/common/eigen_extensions.h" bodystart="68" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abafcd056cc821b1f860efdba6a07451b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::isApprox</definition>
        <argsstring>(const Tensor3X&lt; T &gt; &amp;lhs, const Tensor3X&lt; T &gt; &amp;rhs, double tolerance)</argsstring>
        <name>isApprox</name>
        <param>
          <type>const Tensor3X&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const Tensor3X&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/Tensor3X.h" line="34" column="10" bodyfile="src/icrar/leap-accelerate/common/Tensor3X.h" bodystart="34" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a03c42b9ab9108be3632f27c413939688" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::isApprox</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;lhs, const std::vector&lt; T &gt; &amp;rhs, T threshold)</argsstring>
        <name>isApprox</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
<para>Returns of true if all vector elements of. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>are within the threshold difference to</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threshold</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true </para>
</simplesect>
<simplesect kind="return"><para>false </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/vector_extensions.h" line="58" column="10" bodyfile="src/icrar/leap-accelerate/common/vector_extensions.h" bodystart="58" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a33bcc78f06ba68cb6edadf55cc67e1e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::result_of_t&lt; Op(const T &amp;)&gt; &gt;</type>
        <definition>std::vector&lt;std::result_of_t&lt;Op(const T&amp;)&gt; &gt; icrar::vector_map</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;vector, Op lambda)</argsstring>
        <name>vector_map</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>Op</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Performs a std::transform on a newly allocated std::vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector template type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>of signature R(const T&amp;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;R&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/vector_extensions.h" line="84" column="17" bodyfile="src/icrar/leap-accelerate/common/vector_extensions.h" bodystart="84" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad4be0be3b73418829c88e1a95057fb34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::TryParseComputeImplementation</definition>
        <argsstring>(std::string value, ComputeImplementation &amp;out)</argsstring>
        <name>TryParseComputeImplementation</name>
        <param>
          <type>std::string</type>
          <declname>value</declname>
        </param>
        <param>
          <type>ComputeImplementation &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if value was converted succesfully, false otherwise </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/compute_implementation.cc" line="31" column="10" bodyfile="src/icrar/leap-accelerate/core/compute_implementation.cc" bodystart="31" bodyend="55" declfile="src/icrar/leap-accelerate/core/compute_implementation.h" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae7f3597714639e7e96bf179724df2f49" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::git_sha1</definition>
        <argsstring>()</argsstring>
        <name>git_sha1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The git SHA1 value for the current source code commit. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/git_revision.h" line="39" column="13" declfile="src/icrar/leap-accelerate/core/git_revision.h" declline="39" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a70a86cd3af244f05dc34984adf556ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool icrar::git_has_local_changes</definition>
        <argsstring>()</argsstring>
        <name>git_has_local_changes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the local clone of the repository has uncommitted changes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/git_revision.h" line="44" column="6" declfile="src/icrar/leap-accelerate/core/git_revision.h" declline="44" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aee0f98e30d249baa41d1a0a8effeedfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::version</definition>
        <argsstring>()</argsstring>
        <name>version</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the version of this library as a single string <simplesect kind="return"><para>The version of this library </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/version.cc" line="40" column="13" bodyfile="src/icrar/leap-accelerate/core/version.cc" bodystart="40" bodyend="43" declfile="src/icrar/leap-accelerate/core/version.h" declline="40" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a742e738e02f68378504bea9c741ffcb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; icrar::MVDirection &gt;</type>
        <definition>std::vector&lt; icrar::MVDirection &gt; icrar::ParseDirections</definition>
        <argsstring>(const std::string json)</argsstring>
        <name>ParseDirections</name>
        <param>
          <type>const std::string</type>
          <declname>json</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/json/json_helper.cc" line="33" column="17" bodyfile="src/icrar/leap-accelerate/json/json_helper.cc" bodystart="33" bodyend="62" declfile="src/icrar/leap-accelerate/json/json_helper.h" declline="30" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae6a4c624a95442ecdb6ff69a1ec1d7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::Transpose</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; matrix)</argsstring>
        <name>Transpose</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt;</type>
          <declname>matrix</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="40" column="22" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="40" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab2d583f91f60b824db7a478694dfbb0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>icrar::MVuvw</type>
        <definition>icrar::MVuvw icrar::Dot</definition>
        <argsstring>(const icrar::MVuvw &amp;left, const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;right)</argsstring>
        <name>Dot</name>
        <param>
          <type>const icrar::MVuvw &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, 3, 3 &gt; &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="47" column="18" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a63482801324ebcc5f3766ce000ef1d08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::MVuvw</type>
        <definition>casacore::MVuvw icrar::Dot</definition>
        <argsstring>(const casacore::MVuvw &amp;v1, const casacore::Matrix&lt; T &gt; &amp;v2)</argsstring>
        <name>Dot</name>
        <param>
          <type>const casacore::MVuvw &amp;</type>
          <declname>v1</declname>
        </param>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>v2</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="53" column="21" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="53" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad9a7b4a0a5b042085d3399ca7eaa2fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::Equal</definition>
        <argsstring>(const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;l, const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;r)</argsstring>
        <name>Equal</name>
        <param>
          <type>const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const boost::optional&lt; casacore::Matrix&lt; T &gt;&gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="61" column="10" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="61" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4102a32244ae19e5033be361a15b3f4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool icrar::Equal</definition>
        <argsstring>(const casacore::Array&lt; T &gt; &amp;l, const casacore::Array&lt; T &gt; &amp;r)</argsstring>
        <name>Equal</name>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>l</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="75" column="10" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="75" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad3e4eb9fe34268f6ed72e48828971afe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; std::result_of_t&lt; Op(const T &amp;)&gt; &gt;</type>
        <definition>casacore::Matrix&lt;std::result_of_t&lt;Op(const T&amp;)&gt; &gt; icrar::casa_matrix_map</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;matrix, Op lambda)</argsstring>
        <name>casa_matrix_map</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>Op</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Performs a std::transform on a newly allocated casacore::Matrix. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector template type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>of signature R(const T&amp;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;R&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="94" column="22" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="94" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adb2ae4e6bc5195fedf6fbd6c02b0609d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Op</type>
          </param>
        </templateparamlist>
        <type>casacore::Vector&lt; std::result_of_t&lt; Op(const T &amp;)&gt; &gt;</type>
        <definition>casacore::Vector&lt;std::result_of_t&lt;Op(const T&amp;)&gt; &gt; icrar::casa_vector_map</definition>
        <argsstring>(const casacore::Vector&lt; T &gt; &amp;vector, Op lambda)</argsstring>
        <name>casa_vector_map</name>
        <param>
          <type>const casacore::Vector&lt; T &gt; &amp;</type>
          <declname>vector</declname>
        </param>
        <param>
          <type>Op</type>
          <declname>lambda</declname>
        </param>
        <briefdescription>
<para>Performs a std::transform on a newly allocated casacore::Vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>The input vector template type </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>function</parametername>
</parameternamelist>
<parameterdescription>
<para>of signature R(const T&amp;) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vector</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;R&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="113" column="22" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="113" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a650cd5523400d2c1c47603ca421c4c67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::ArrayFill</definition>
        <argsstring>(casacore::Array&lt; T &gt; &amp;value, T v)</argsstring>
        <name>ArrayFill</name>
        <param>
          <type>casacore::Array&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="124" column="10" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="124" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a338e5d333e2266f60892d83462dcb471" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T icrar::ArrayMax</definition>
        <argsstring>(const casacore::Array&lt; T &gt; &amp;value)</argsstring>
        <name>ArrayMax</name>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Returns the largest value within the array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casacore_helper.h" line="140" column="7" bodyfile="src/icrar/leap-accelerate/math/casacore_helper.h" bodystart="140" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac1ad71d74b6f2db57bbc985a8f95f164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Eigen::Vector2d</type>
        <definition>Eigen::Vector2d icrar::ToPolar</definition>
        <argsstring>(const MVDirection &amp;xyz)</argsstring>
        <name>ToPolar</name>
        <param>
          <type>const MVDirection &amp;</type>
          <declname>xyz</declname>
        </param>
        <briefdescription>
<para>Converts a unit catersian direction to polar coordinates. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cartesian</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Eigen::Vector2d </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math.cc" line="28" column="21" bodyfile="src/icrar/leap-accelerate/math/math.cc" bodystart="28" bodyend="41" declfile="src/icrar/leap-accelerate/math/math.h" declline="91" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9869fd4122f44fabacefc846c9387136" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; IntType &gt;</type>
        <definition>std::vector&lt;IntType&gt; icrar::range</definition>
        <argsstring>(IntType start, IntType stop, IntType step)</argsstring>
        <name>range</name>
        <param>
          <type>IntType</type>
          <declname>start</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>stop</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>step</declname>
        </param>
        <briefdescription>
<para>returns a linear sequence of values from start at step </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>step</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IntType&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math.h" line="40" column="17" bodyfile="src/icrar/leap-accelerate/math/math.h" bodystart="40" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af5b1bcaacdb936a2755b9734a0f163c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; IntType &gt;</type>
        <definition>std::vector&lt;IntType&gt; icrar::range</definition>
        <argsstring>(IntType start, IntType stop)</argsstring>
        <name>range</name>
        <param>
          <type>IntType</type>
          <declname>start</declname>
        </param>
        <param>
          <type>IntType</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IntType&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math.h" line="67" column="17" bodyfile="src/icrar/leap-accelerate/math/math.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1acbf5224cf69bece7c2027c2b1ea877bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IntType</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; IntType &gt;</type>
        <definition>std::vector&lt;IntType&gt; icrar::range</definition>
        <argsstring>(IntType stop)</argsstring>
        <name>range</name>
        <param>
          <type>IntType</type>
          <declname>stop</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>IntType</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stop</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;IntType&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math.h" line="80" column="17" bodyfile="src/icrar/leap-accelerate/math/math.h" bodystart="80" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a398aa4a16dc41a88e4d65011497415b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>icrar::MVuvw</type>
        <definition>icrar::MVuvw icrar::ToUVW</definition>
        <argsstring>(const casacore::MVuvw &amp;value)</argsstring>
        <name>ToUVW</name>
        <param>
          <type>const casacore::MVuvw &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a casacore UVW value to an icrar UVW value. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>icrar::MVuvw </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="30" column="18" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="30" bodyend="33" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="113" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abd90be3713302554e46ea4bac4915534" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt; icrar::MVuvw &gt; icrar::ToUVWVector</definition>
        <argsstring>(const std::vector&lt; casacore::MVuvw &gt; &amp;value)</argsstring>
        <name>ToUVWVector</name>
        <param>
          <type>const std::vector&lt; casacore::MVuvw &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="35" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="35" bodyend="38" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="115" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a44f7f8e9f06f178d898c006dde31a949" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; icrar::MVuvw &gt;</type>
        <definition>std::vector&lt; icrar::MVuvw &gt; icrar::ToUVWVector</definition>
        <argsstring>(const Eigen::MatrixXd &amp;value)</argsstring>
        <name>ToUVWVector</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts a column-major matrix of size Nx3 into a vector of UVWs. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::vector&lt;icrar::MVuvw&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="40" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="40" bodyend="50" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="123" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af512f8326e0e9ba057292cac052abfd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::MVuvw</type>
        <definition>casacore::MVuvw icrar::ToCasaUVW</definition>
        <argsstring>(const icrar::MVuvw &amp;value)</argsstring>
        <name>ToCasaUVW</name>
        <param>
          <type>const icrar::MVuvw &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="52" column="21" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="52" bodyend="55" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="124" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac2e5f08691b422b6e082caf4b5935a67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; casacore::MVuvw &gt;</type>
        <definition>std::vector&lt; casacore::MVuvw &gt; icrar::ToCasaUVWVector</definition>
        <argsstring>(const std::vector&lt; icrar::MVuvw &gt; &amp;value)</argsstring>
        <name>ToCasaUVWVector</name>
        <param>
          <type>const std::vector&lt; icrar::MVuvw &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="57" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="57" bodyend="60" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="125" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adf7d4f90445beb9e99231bdda44ad614" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; casacore::MVuvw &gt;</type>
        <definition>std::vector&lt; casacore::MVuvw &gt; icrar::ToCasaUVWVector</definition>
        <argsstring>(const Eigen::MatrixX3d &amp;value)</argsstring>
        <name>ToCasaUVWVector</name>
        <param>
          <type>const Eigen::MatrixX3d &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="62" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="62" bodyend="72" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="126" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1adb54e6cd721f5a052fa23a690971cde4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>icrar::MVDirection</type>
        <definition>icrar::MVDirection icrar::ToDirection</definition>
        <argsstring>(const casacore::MVDirection &amp;value)</argsstring>
        <name>ToDirection</name>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="74" column="24" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="74" bodyend="77" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="128" declcolumn="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4138357b64dabbbe52048d55d08bd1e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; icrar::MVDirection &gt;</type>
        <definition>std::vector&lt; icrar::MVDirection &gt; icrar::ToDirectionVector</definition>
        <argsstring>(const std::vector&lt; casacore::MVDirection &gt; &amp;value)</argsstring>
        <name>ToDirectionVector</name>
        <param>
          <type>const std::vector&lt; casacore::MVDirection &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="79" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="79" bodyend="82" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="129" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abd62772a38d07532f14e39f7c3b32b2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::MVDirection</type>
        <definition>casacore::MVDirection icrar::ToCasaDirection</definition>
        <argsstring>(const icrar::MVDirection &amp;value)</argsstring>
        <name>ToCasaDirection</name>
        <param>
          <type>const icrar::MVDirection &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="84" column="27" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="84" bodyend="87" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="131" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a741d37e54b4f719072aecf4d6ac38850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; casacore::MVDirection &gt;</type>
        <definition>std::vector&lt; casacore::MVDirection &gt; icrar::ToCasaDirectionVector</definition>
        <argsstring>(const std::vector&lt; icrar::MVDirection &gt; &amp;value)</argsstring>
        <name>ToCasaDirectionVector</name>
        <param>
          <type>const std::vector&lt; icrar::MVDirection &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="89" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="89" bodyend="92" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="132" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a5c4887ca2091612b9ecd1c68670fd65e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::ToMSString</definition>
        <argsstring>(std::chrono::system_clock::duration duration)</argsstring>
        <name>ToMSString</name>
        <param>
          <type>std::chrono::system_clock::duration</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.cc" line="94" column="17" bodyfile="src/icrar/leap-accelerate/math/math_conversion.cc" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae45f8d2929d66cc349fd096d30607436" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::ToMatrix</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;value)</argsstring>
        <name>ToMatrix</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="44" column="19" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="44" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aad421e66f6975b9d2d24b47f53e9eaad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>int</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, R, C &gt;</type>
        <definition>Eigen::Matrix&lt;T, R, C&gt; icrar::ToMatrix</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;value)</argsstring>
        <name>ToMatrix</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="53" column="19" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="53" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae948c353f03c65a4b25a58dc5334ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>int</type>
            <declname>R</declname>
            <defname>R</defname>
          </param>
          <param>
            <type>int</type>
            <declname>C</declname>
            <defname>C</defname>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::ConvertMatrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, R, C &gt; &amp;value)</argsstring>
        <name>ConvertMatrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, R, C &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="67" column="22" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="67" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a23cb07a6c4eeecc78136f336e7b21752" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::ConvertMatrix</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;value)</argsstring>
        <name>ConvertMatrix</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="73" column="22" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="73" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7a889258d5f5f151a984c0d3a9209960" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; icrar::ToVector</definition>
        <argsstring>(casacore::Array&lt; T &gt; value)</argsstring>
        <name>ToVector</name>
        <param>
          <type>casacore::Array&lt; T &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="79" column="19" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="79" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2e39265e36d08949ef4d234d31073e9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, 1&gt; icrar::ToVector</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;value)</argsstring>
        <name>ToVector</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="87" column="19" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="87" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8c09159712e8acc6e3c177451d3092a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Vector&lt; T &gt;</type>
        <definition>casacore::Vector&lt;T&gt; icrar::ConvertVector</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;value)</argsstring>
        <name>ConvertVector</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, 1 &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Converts an Eigen3 column-vector into a casacore Array. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>casacore::Array&lt;T&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="102" column="22" bodyfile="src/icrar/leap-accelerate/math/math_conversion.h" bodystart="102" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af9f1551c856cfdb51d38646a6bb66df4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string icrar::ToMSString</definition>
        <argsstring>(std::chrono::nanoseconds duration)</argsstring>
        <name>ToMSString</name>
        <param>
          <type>std::chrono::nanoseconds</type>
          <declname>duration</declname>
        </param>
        <briefdescription>
<para>Convert duration to millisecond string. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/math_conversion.h" line="137" column="17" declfile="src/icrar/leap-accelerate/math/math_conversion.h" declline="137" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a5dca9561ab213b5d8bce78ffede3fc7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::ms_read_coords</definition>
        <argsstring>(const casacore::MeasurementSet &amp;ms, unsigned int start_row, unsigned int num_baselines, T *uu, T *vv, T *ww)</argsstring>
        <name>ms_read_coords</name>
        <param>
          <type>const casacore::MeasurementSet &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>start_row</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_baselines</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>uu</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>vv</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>ww</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/utils.h" line="46" column="10" bodyfile="src/icrar/leap-accelerate/ms/utils.h" bodystart="46" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab64e64d2d18f5e83e24d0734a2605e38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::ms_read_vis</definition>
        <argsstring>(casacore::MeasurementSet &amp;ms, unsigned int start_baseline, unsigned int start_channel, unsigned int num_channels, unsigned int num_baselines, unsigned int num_pols, const char *column, T *vis)</argsstring>
        <name>ms_read_vis</name>
        <param>
          <type>casacore::MeasurementSet &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>start_baseline</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>start_channel</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_channels</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_baselines</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>num_pols</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>column</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>vis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/ms/utils.h" line="83" column="10" bodyfile="src/icrar/leap-accelerate/ms/utils.h" bodystart="83" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af9536b82ea94252deaac5f9dc8b07b55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunction0TestCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunction0TestCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="981" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="981" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1abb5587af2d8b58354502cb7ca1314abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunction0TestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunction0TestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="982" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="982" bodyend="982"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6aa1d3aeb00fe7602462ac5ea32796d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunction0TestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunction0TestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="983" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="983" bodyend="983"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a72e96b97ad3e639019eca6e53739fb46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunctionDataTestCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunctionDataTestCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="985" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="985" bodyend="985"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1acc8dc48694ef2309caf8d64f75acb1cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunctionDataTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunctionDataTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="986" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="986" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a198a832cbc90460838fa426f8eb216ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseMatrixFunctionDataTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseMatrixFunctionDataTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="987" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="987" bodyend="987"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4d43ea646a3623456aeabd6d3db2a4b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, RotateVisibilitiesTestCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>RotateVisibilitiesTestCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="989" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="989" bodyend="989"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac5034cf6f84076364bc3b45ad3557dcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, RotateVisibilitiesTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>RotateVisibilitiesTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="990" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="990" bodyend="990"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aa54ff5b24e14dcc4a386ea9bf65abea8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, RotateVisibilitiesTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>RotateVisibilitiesTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="991" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="991" bodyend="991"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a65b897cbf815826c4bf1801234d386b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateTestCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateTestCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="993" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="993" bodyend="993"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8d90bc5c35a1b90dca77458cf0847231" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="994" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="994" bodyend="994"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6e10814ad0bcbc0d29719600aa88c21f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(PhaseRotateTests, PhaseRotateTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1PhaseRotateTests" kindref="compound">PhaseRotateTests</ref></type>
        </param>
        <param>
          <type>PhaseRotateTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="995" column="5" bodyfile="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" bodystart="995" bodyend="995"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7cad7c942a8500043e8d93abf7ee306e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>::testing::AssertionResult</type>
        <definition>::testing::AssertionResult icrar::AttributeEquals</definition>
        <argsstring>(MyObject const &amp;obj, T value)</argsstring>
        <name>AttributeEquals</name>
        <param>
          <type>MyObject const &amp;</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/gtest_helper.h" line="9" column="32" bodyfile="src/icrar/leap-accelerate/tests/gtest_helper.h" bodystart="9" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a800248d2ebf8475e0600bace7fa7082f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestMVDirection)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestMVDirection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="138" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="138" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af5021e702d86c1e8f0c9f07eb823203f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestConvertVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestConvertVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="140" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="140" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a9db5fcfe133ac803bae54d3661ecfeb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestConvertMatrix)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestConvertMatrix</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="141" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="141" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aca2e3dfe9237791d0336ccec57a7dab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestConvertUVW)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestConvertUVW</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="143" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="143" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1d8c551848349ab4ce786b7d08d6d989" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestConvertUVWVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestConvertUVWVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="144" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac2f61a81e4570a7ec64d43ae76475ca9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestConvertMVDirection)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestConvertMVDirection</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="146" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a170a43f9ab299b8dbada18fe42edee08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(math_conversion_tests, TestConvertMVDirectionVector)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1math__conversion__tests" kindref="compound">math_conversion_tests</ref></type>
        </param>
        <param>
          <type>TestConvertMVDirectionVector</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" line="147" column="5" bodyfile="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a6093379b5220727ab9e6bc9d4972e453" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(IntegrationTests, DISABLED_TestMeasurementSet)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1IntegrationTests" kindref="compound">IntegrationTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestMeasurementSet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="170" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7b81a6083cbe182b2acd4ba8c9dd4917" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(IntegrationTests, TestReadFromFile)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1IntegrationTests" kindref="compound">IntegrationTests</ref></type>
        </param>
        <param>
          <type>TestReadFromFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="171" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1add1f936b3c8f5901e82e5ac1c780dd9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(IntegrationTests, DISABLED_TestCudaBufferCopy)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1IntegrationTests" kindref="compound">IntegrationTests</ref></type>
        </param>
        <param>
          <type>DISABLED_TestCudaBufferCopy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" line="172" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc" bodystart="172" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8b1d34169c11f9994d030e8c0010603b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestMeasurementSet)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestMeasurementSet</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="215" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ab4177a8b51c718471ec81e42a8e3a293" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestRawReadFromFile)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestRawReadFromFile</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="216" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="216" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a2d81a6a3c0e0c69f86a33d8f370d03f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestReadFromFileOverrideStations)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestReadFromFileOverrideStations</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="217" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="217" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a13dce3fff17688e641ca4c2e273c9c3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestSetWv)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestSetWv</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="218" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="218" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1a5ca601c33411ceaf8372ca49517a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestChannelWavelengths)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestChannelWavelengths</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="219" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="219" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4291368dbbd54258ed385dd87b4172cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestCudaBufferCopy)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestCudaBufferCopy</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="220" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="220" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a7d4cbcb0430553389207206e2e1027a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(MetaDataTests, TestDD)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1MetaDataTests" kindref="compound">MetaDataTests</ref></type>
        </param>
        <param>
          <type>TestDD</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" line="221" column="5" bodyfile="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc" bodystart="221" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1049d4a91985db6b5cd9389a7bd0f748" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestHelp)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestHelp</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="144" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="144" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a82880c1c3b9520de6463538036f89cd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestSimpleRun)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestSimpleRun</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="145" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="145" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a704cdbba7e0f4c42d4d580e7a8435ccd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestMultipleCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestMultipleCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="146" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="146" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a15f7e7b3eee48841dec7fb333b306b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestMultipleCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestMultipleCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="147" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="147" bodyend="147"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1af63b08b1971f4f0edd90c2799fa41818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(CommandLineTests, TestMultipleCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1CommandLineTests" kindref="compound">CommandLineTests</ref></type>
        </param>
        <param>
          <type>TestMultipleCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" line="148" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc" bodystart="148" bodyend="148"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aeaeefbe67e4e8fad9d3f7edc3dde2df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, MultiDirectionTestCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>MultiDirectionTestCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="120" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a0f055ad6be224a6a4ab6e73635f3497f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, MultiDirectionTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>MultiDirectionTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="121" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad58b8891354df192677cd25c8f732d6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, MultiDirectionTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>MultiDirectionTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="122" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ae4ab27738fd2cf569818b5bf1c60cb55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, DISABLED_MultiDirectionFullTestCasa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>DISABLED_MultiDirectionFullTestCasa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="124" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ad7e6cf47e382e2a5ecf502b2006b958b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, DISABLED_MultiDirectionFullTestCpu)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>DISABLED_MultiDirectionFullTestCpu</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="125" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a102377ce516f74f3c8419c64ba8bb65d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(E2EPerformanceTests, DISABLED_MultiDirectionFullTestCuda)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1E2EPerformanceTests" kindref="compound">E2EPerformanceTests</ref></type>
        </param>
        <param>
          <type>DISABLED_MultiDirectionFullTestCuda</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" line="126" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc" bodystart="126" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1afab62ec4f75aa22f74c7dd57c3db8307" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(JSONHelperTests, TestParseDirectionsEmpty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1JSONHelperTests" kindref="compound">JSONHelperTests</ref></type>
        </param>
        <param>
          <type>TestParseDirectionsEmpty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="93" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a25f6436e423287b545a6f77fb9979467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(JSONHelperTests, TestParseDirectionsOne)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1JSONHelperTests" kindref="compound">JSONHelperTests</ref></type>
        </param>
        <param>
          <type>TestParseDirectionsOne</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="100" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="100" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a83f098ce1cec79554b52e1567b399c22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>icrar::TEST_F</definition>
        <argsstring>(JSONHelperTests, TestParseDirectionsFive)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classicrar_1_1JSONHelperTests" kindref="compound">JSONHelperTests</ref></type>
        </param>
        <param>
          <type>TestParseDirectionsFive</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" line="112" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc" bodystart="112" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a4bc77e22a8f3c379cb4c7e95dc16c144" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::ServerLeapHandleRemoteMS</definition>
        <argsstring>(std::istream &amp;reader, std::ostream &amp;)</argsstring>
        <name>ServerLeapHandleRemoteMS</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <defname>writer</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.cc" line="43" column="10" bodyfile="src/icrar/leap-accelerate-client/Calibrate.cc" bodystart="43" bodyend="60" declfile="src/icrar/leap-accelerate-client/Calibrate.h" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a826059b1e49d04199882fded68e864d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapHandleRemoteMS</definition>
        <argsstring>(std::string)</argsstring>
        <name>LeapHandleRemoteMS</name>
        <param>
          <type>std::string</type>
          <defname>ms_filename</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.cc" line="62" column="10" bodyfile="src/icrar/leap-accelerate-client/Calibrate.cc" bodystart="62" bodyend="67" declfile="src/icrar/leap-accelerate-client/Calibrate.h" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a1b55062c7d943cafab04a363fb8b08b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::ClientLeapRemoteCalibration</definition>
        <argsstring>(std::string, short, std::string, const std::vector&lt; MVDirection &gt; &amp;, boost::optional&lt; int &gt;, int)</argsstring>
        <name>ClientLeapRemoteCalibration</name>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>short</type>
        </param>
        <param>
          <type>std::string</type>
        </param>
        <param>
          <type>const std::vector&lt; MVDirection &gt; &amp;</type>
        </param>
        <param>
          <type>boost::optional&lt; int &gt;</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.cc" line="69" column="10" bodyfile="src/icrar/leap-accelerate-client/Calibrate.cc" bodystart="69" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1ac9ad2b02ea860f868dd3eaeff7892ad1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapRemoteCalibration</definition>
        <argsstring>(std::istream &amp;input, std::ostream &amp;, boost::optional&lt; int &gt; overrideStations)</argsstring>
        <name>LeapRemoteCalibration</name>
        <param>
          <type>std::istream &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
        </param>
        <param>
          <type>boost::optional&lt; int &gt;</type>
          <declname>overrideStations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.cc" line="80" column="10" bodyfile="src/icrar/leap-accelerate-client/Calibrate.cc" bodystart="80" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a26d201b921177270819da2922be27f54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapRemoteCalibration</definition>
        <argsstring>(const std::vector&lt; MVDirection &gt; &amp;)</argsstring>
        <name>LeapRemoteCalibration</name>
        <param>
          <type>const std::vector&lt; MVDirection &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.cc" line="91" column="10" bodyfile="src/icrar/leap-accelerate-client/Calibrate.cc" bodystart="91" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a8c4cba7d7bd0ad4efe37004a0a343a3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapCalibrateFromQueue</definition>
        <argsstring>(const MVDirection &amp;, casalib::MetaData &amp;)</argsstring>
        <name>LeapCalibrateFromQueue</name>
        <param>
          <type>const MVDirection &amp;</type>
        </param>
        <param>
          <type><ref refid="structicrar_1_1casalib_1_1MetaData" kindref="compound">casalib::MetaData</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.cc" line="96" column="10" bodyfile="src/icrar/leap-accelerate-client/Calibrate.cc" bodystart="96" bodyend="102"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a68dbc9da2a4c1ae03e643eade77b4d9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapRemoteCalibration</definition>
        <argsstring>(const std::vector&lt; casacore::MVDirection &gt; &amp;directions)</argsstring>
        <name>LeapRemoteCalibration</name>
        <param>
          <type>const std::vector&lt; casacore::MVDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.h" line="43" column="10" declfile="src/icrar/leap-accelerate-client/Calibrate.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1aed5c1695baabc279184064356bce1ff0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapCalibrateFromQueue</definition>
        <argsstring>(const casacore::MVDirection &amp;direction, casalib::MetaData &amp;meta)</argsstring>
        <name>LeapCalibrateFromQueue</name>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type><ref refid="structicrar_1_1casalib_1_1MetaData" kindref="compound">casalib::MetaData</ref> &amp;</type>
          <declname>meta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/Calibrate.h" line="51" column="10" declfile="src/icrar/leap-accelerate-client/Calibrate.h" declline="51" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespaceicrar_1a95d829a7b787ecd393973bd632ef183a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::LeapHandleRemoteMS</definition>
        <argsstring>()</argsstring>
        <name>LeapHandleRemoteMS</name>
        <briefdescription>
<para>Server connection handler. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.h" line="119" column="10" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.h" bodystart="119" bodyend="122"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="68" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1casalib" kind="namespace" language="C++">
    <compoundname>icrar::casalib</compoundname>
    <innerclass refid="classicrar_1_1casalib_1_1CalibrationResult" prot="public">icrar::casalib::CalibrationResult</innerclass>
    <innerclass refid="classicrar_1_1casalib_1_1Integration" prot="public">icrar::casalib::Integration</innerclass>
    <innerclass refid="classicrar_1_1casalib_1_1IntegrationResult" prot="public">icrar::casalib::IntegrationResult</innerclass>
    <innerclass refid="structicrar_1_1casalib_1_1MetaData" prot="public">icrar::casalib::MetaData</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="casa_2CalibrateResult_8h_1a654d812703c52bfa971a5cb81198ef4b" prot="public" static="no">
        <type>std::pair&lt; std::vector&lt; std::queue&lt; <ref refid="classicrar_1_1casalib_1_1IntegrationResult" kindref="compound">IntegrationResult</ref> &gt; &gt;, std::vector&lt; std::queue&lt; <ref refid="classicrar_1_1casalib_1_1CalibrationResult" kindref="compound">CalibrationResult</ref> &gt; &gt; &gt;</type>
        <definition>using icrar::casalib::CalibrateResult = typedef std::pair&lt; std::vector&lt;std::queue&lt;IntegrationResult&gt; &gt;, std::vector&lt;std::queue&lt;CalibrationResult&gt; &gt; &gt;</definition>
        <argsstring/>
        <name>CalibrateResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" line="85" column="5" bodyfile="src/icrar/leap-accelerate/model/casa/CalibrateResult.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="casa_2PhaseRotate_8cc_1a659c656b67fe43d9c662d3578fb47763" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrateResult</type>
        <definition>CalibrateResult icrar::casalib::Calibrate</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, const std::vector&lt; casacore::MVDirection &gt; &amp;directions)</argsstring>
        <name>Calibrate</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; casacore::MVDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="73" column="21" bodyfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" bodystart="73" bodyend="133" declfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.h" declline="64" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="casa_2PhaseRotate_8cc_1a51261e7433d63d2193b740412f51830c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::PhaseRotate</definition>
        <argsstring>(MetaData &amp;metadata, const casacore::MVDirection &amp;direction, std::queue&lt; Integration &gt; &amp;input, std::queue&lt; IntegrationResult &gt; &amp;output_integrations, std::queue&lt; CalibrationResult &gt; &amp;output_calibrations)</argsstring>
        <name>PhaseRotate</name>
        <param>
          <type><ref refid="structicrar_1_1casalib_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>directions</declname>
        </param>
        <param>
          <type>std::queue&lt; <ref refid="classicrar_1_1casalib_1_1Integration" kindref="compound">Integration</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::queue&lt; <ref refid="classicrar_1_1casalib_1_1IntegrationResult" kindref="compound">IntegrationResult</ref> &gt; &amp;</type>
          <declname>output_integrations</declname>
        </param>
        <param>
          <type>std::queue&lt; <ref refid="classicrar_1_1casalib_1_1CalibrationResult" kindref="compound">CalibrationResult</ref> &gt; &amp;</type>
          <declname>output_calibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directions</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="136" column="10" bodyfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" bodystart="136" bodyend="201" declfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.h" declline="75" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="casa_2PhaseRotate_8cc_1a47030a7c46b87f03b3df9d1483189f74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::RotateVisibilities</definition>
        <argsstring>(Integration &amp;integration, MetaData &amp;metadata, const casacore::MVDirection &amp;direction)</argsstring>
        <name>RotateVisibilities</name>
        <param>
          <type><ref refid="classicrar_1_1casalib_1_1Integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <param>
          <type><ref refid="structicrar_1_1casalib_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const casacore::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="203" column="10" bodyfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" bodystart="203" bodyend="279" declfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.h" declline="89" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="casa_2PhaseRotate_8cc_1ae586460a174d4e659a7abeea2b2a08a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; casacore::Matrix&lt; double &gt;, casacore::Vector&lt; std::int32_t &gt; &gt;</type>
        <definition>std::pair&lt; casacore::Matrix&lt; double &gt;, casacore::Vector&lt; std::int32_t &gt; &gt; icrar::casalib::PhaseMatrixFunction</definition>
        <argsstring>(const casacore::Vector&lt; std::int32_t &gt; &amp;a1, const casacore::Vector&lt; std::int32_t &gt; &amp;a2, int refAnt=-1)</argsstring>
        <name>PhaseMatrixFunction</name>
        <param>
          <type>const casacore::Vector&lt; std::int32_t &gt; &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const casacore::Vector&lt; std::int32_t &gt; &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>refAnt</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Form Phase Matrix Given the antenna lists from MS and (optionally) RefAnt &amp; Map: If non-negative RefAnt is provided it only forms the matrix for baselines with that antenna. If True Map is provided it returns the index map for the matrix (only useful if RefAnt set). </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates and returns the linear matrix for the phase calibration (only) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a1</parametername>
</parameternamelist>
<parameterdescription>
<para>antenna vector of size nStations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2</parametername>
</parameternamelist>
<parameterdescription>
<para>antenna vector of size nStations </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refAnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference antenna e.g. (0, 1). -1 if no reference. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;Matrixd, Matrixi&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="281" column="15" bodyfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" bodystart="281" bodyend="340" declfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.h" declline="103" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="casa_2matrix_8h_1af4b8e6b03ad0453a125233a65b134f70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::casalib::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;a, const casacore::Matrix&lt; T &gt; &amp;b, casacore::Matrix&lt; T &gt; &amp;c)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/matrix.h" line="35" column="10" bodyfile="src/icrar/leap-accelerate/math/casa/matrix.h" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="casa_2matrix_8h_1a54f505fdc3f3c842192f2c40e0cf03ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Matrix&lt; T &gt;</type>
        <definition>casacore::Matrix&lt;T&gt; icrar::casalib::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;a, const casacore::Matrix&lt; T &gt; &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/matrix.h" line="44" column="22" bodyfile="src/icrar/leap-accelerate/math/casa/matrix.h" bodystart="44" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="casa_2matrix_8h_1a42a2f6f7e7950d7f88532ba20ce5c068" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::casalib::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;a, const casacore::Vector&lt; T &gt; &amp;b, casacore::Vector&lt; T &gt; &amp;c)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Vector&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/matrix.h" line="52" column="10" bodyfile="src/icrar/leap-accelerate/math/casa/matrix.h" bodystart="52" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="casa_2matrix_8h_1adb8aacbf85f008226083e30dbc4bbe6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>casacore::Vector&lt; T &gt;</type>
        <definition>casacore::Vector&lt;T&gt; icrar::casalib::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; T &gt; &amp;a, const casacore::Vector&lt; T &gt; &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/matrix.h" line="61" column="22" bodyfile="src/icrar/leap-accelerate/math/casa/matrix.h" bodystart="61" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="matrix__invert_8cc_1a196d892bf7c863f71e11a99dfdc8402f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::Matrix&lt; double &gt;</type>
        <definition>casacore::Matrix&lt; double &gt; icrar::casalib::PseudoInverse</definition>
        <argsstring>(const casacore::Matrix&lt; double &gt; &amp;a)</argsstring>
        <name>PseudoInverse</name>
        <param>
          <type>const casacore::Matrix&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>PseudoInverse </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/matrix_invert.cc" line="32" column="22" bodyfile="src/icrar/leap-accelerate/math/casa/matrix_invert.cc" bodystart="32" bodyend="35" declfile="src/icrar/leap-accelerate/math/casa/matrix_invert.h" declline="47" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="matrix__invert_8cc_1a43e6e209b6aba6dd90d87fa99a9680fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::Matrix&lt; double &gt;</type>
        <definition>casacore::Matrix&lt; double &gt; icrar::casalib::SVDPseudoInverse</definition>
        <argsstring>(const casacore::Matrix&lt; double &gt; &amp;a, double epsilon)</argsstring>
        <name>SVDPseudoInverse</name>
        <param>
          <type>const casacore::Matrix&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>std::numeric_limits&lt; Eigen::MatrixXd::Scalar &gt;::epsilon()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para>SVDPseudoInverse </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/matrix_invert.cc" line="37" column="22" bodyfile="src/icrar/leap-accelerate/math/casa/matrix_invert.cc" bodystart="37" bodyend="40" declfile="src/icrar/leap-accelerate/math/casa/matrix_invert.h" declline="52" declcolumn="22"/>
      </memberdef>
      <memberdef kind="function" id="casa_2vector_8cc_1a1b8017eb4b6c72d3d6dde400e7f0aeb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::add</definition>
        <argsstring>(const casacore::Array&lt; double &gt; &amp;a, const casacore::Array&lt; double &gt; &amp;b, casacore::Array&lt; double &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; double &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/vector.cc" line="29" column="10" bodyfile="src/icrar/leap-accelerate/math/casa/vector.cc" bodystart="29" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="casa_2vector_8cc_1a2dd6986b278fe8a4f7701f9cabb91025" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::add</definition>
        <argsstring>(const casacore::Array&lt; float &gt; &amp;a, const casacore::Array&lt; float &gt; &amp;b, casacore::Array&lt; float &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; float &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/vector.cc" line="30" column="10" bodyfile="src/icrar/leap-accelerate/math/casa/vector.cc" bodystart="30" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="casa_2vector_8cc_1aa0d9db9d5416d15d434f8d9b45371817" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::casalib::add</definition>
        <argsstring>(const casacore::Array&lt; int &gt; &amp;a, const casacore::Array&lt; int &gt; &amp;b, casacore::Array&lt; int &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; int &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/vector.cc" line="31" column="10" bodyfile="src/icrar/leap-accelerate/math/casa/vector.cc" bodystart="31" bodyend="31"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="70" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1cpu" kind="namespace" language="C++">
    <compoundname>icrar::cpu</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1CalibrationResult" prot="public">icrar::cpu::CalibrationResult</innerclass>
    <innerclass refid="structicrar_1_1cpu_1_1Constants" prot="public">icrar::cpu::Constants</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1Integration" prot="public">icrar::cpu::Integration</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1IntegrationResult" prot="public">icrar::cpu::IntegrationResult</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1MetaData" prot="public">icrar::cpu::MetaData</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cpu_2PhaseRotate_8h_1a67e105b7214a526b827142fa9a40ce94" prot="public" static="no">
        <type>std::pair&lt; std::vector&lt; std::vector&lt; <ref refid="classicrar_1_1cpu_1_1IntegrationResult" kindref="compound">IntegrationResult</ref> &gt; &gt;, std::vector&lt; std::vector&lt; <ref refid="classicrar_1_1cpu_1_1CalibrationResult" kindref="compound">CalibrationResult</ref> &gt; &gt; &gt;</type>
        <definition>typedef std::pair&lt; std::vector&lt; std::vector&lt; cpu::IntegrationResult &gt; &gt;, std::vector&lt; std::vector&lt; cpu::CalibrationResult &gt; &gt; &gt; icrar::cpu::CalibrateResult</definition>
        <argsstring/>
        <name>CalibrateResult</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" line="65" column="5" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="cpu_2PhaseRotate_8cc_1a76b0e17dbcbfb320ac406139e3416f91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrateResult</type>
        <definition>CalibrateResult icrar::cpu::Calibrate</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, const std::vector&lt; icrar::MVDirection &gt; &amp;directions)</argsstring>
        <name>Calibrate</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; icrar::MVDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" line="66" column="21" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" bodystart="66" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2PhaseRotate_8cc_1a07e792815e12b99d7242ae0e14c95abd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::PhaseRotate</definition>
        <argsstring>(cpu::MetaData &amp;metadata, const icrar::MVDirection &amp;direction, std::vector&lt; cpu::Integration &gt; &amp;input, std::vector&lt; cpu::IntegrationResult &gt; &amp;output_integrations, std::vector&lt; cpu::CalibrationResult &gt; &amp;output_calibrations)</argsstring>
        <name>PhaseRotate</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">cpu::MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const icrar::MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">cpu::Integration</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1IntegrationResult" kindref="compound">cpu::IntegrationResult</ref> &gt; &amp;</type>
          <declname>output_integrations</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1CalibrationResult" kindref="compound">cpu::CalibrationResult</ref> &gt; &amp;</type>
          <declname>output_calibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" line="140" column="10" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" bodystart="140" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2PhaseRotate_8cc_1a9db1b20d46ee1857ec03c245482da710" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::RotateVisibilities</definition>
        <argsstring>(Integration &amp;integration, MetaData &amp;metadata)</argsstring>
        <name>RotateVisibilities</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">Integration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Performs averaging over each baseline, channel and polarization. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>integration</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" line="189" column="10" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" bodystart="189" bodyend="244" declfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" declline="98" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2PhaseRotate_8cc_1a7c947c3fe5aee8276c585cd29f6596de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXi &gt;</type>
        <definition>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXi &gt; icrar::cpu::PhaseMatrixFunction</definition>
        <argsstring>(const Eigen::VectorXi &amp;a1, const Eigen::VectorXi &amp;a2, int refAnt=-1)</argsstring>
        <name>PhaseMatrixFunction</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>refAnt</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Form Phase Matrix Given the antenna lists from MS and (optionally) RefAnt &amp; Map: If non-negative RefAnt is provided it only forms the matrix for baselines with that antenna. If True Map is provided it returns the index map for the matrix (only useful if RefAnt set). </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates and returns the linear matrix for the phase calibration (only) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>a1</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes of 1st antenna of each baselines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>a2</parametername>
</parameternamelist>
<parameterdescription>
<para>indexes of 2nd antenna of each baselines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>refAnt</parametername>
</parameternamelist>
<parameterdescription>
<para>the reference antenna (0, 1), -1 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>map</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::pair&lt;Matrixd, Matrixi&gt; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" line="246" column="11" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" bodystart="246" bodyend="306" declfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" declline="115" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2PhaseRotate_8h_1a3190c9712009de73e0b3863769f735a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrateResult</type>
        <definition>CalibrateResult icrar::cpu::Calibrate</definition>
        <argsstring>(const icrar::MeasurementSet &amp;ms, const std::vector&lt; MVDirection &gt; &amp;directions)</argsstring>
        <name>Calibrate</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">icrar::MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; MVDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" line="74" column="21" declfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" declline="74" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2PhaseRotate_8h_1abae098eacd6f109e96f37a0f9ae50ce7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::PhaseRotate</definition>
        <argsstring>(MetaData &amp;metadata, const MVDirection &amp;directions, std::vector&lt; Integration &gt; &amp;input, std::vector&lt; IntegrationResult &gt; &amp;output_integrations, std::vector&lt; CalibrationResult &gt; &amp;output_calibrations)</argsstring>
        <name>PhaseRotate</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">MetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const MVDirection &amp;</type>
          <declname>directions</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1Integration" kindref="compound">Integration</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1IntegrationResult" kindref="compound">IntegrationResult</ref> &gt; &amp;</type>
          <declname>output_integrations</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1CalibrationResult" kindref="compound">CalibrationResult</ref> &gt; &amp;</type>
          <declname>output_calibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>directions</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>input</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" line="85" column="10" declfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h" declline="85" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="casa_2vector_8h_1a5e40ce12a4234582c39d02ecec5a27f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const casacore::Array&lt; T &gt; &amp;a, const casacore::Array&lt; T &gt; &amp;b, casacore::Array&lt; T &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/casa/vector.h" line="35" column="10" bodyfile="src/icrar/leap-accelerate/math/casa/vector.h" bodystart="35" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="matrix3d_8h_1af359f3a833ba7d1c7c2396ebfe4f467e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Matrix3D</type>
        <definition>Matrix3D icrar::cpu::Matrix3DZeros</definition>
        <argsstring>(int rows, int cols, int depth)</argsstring>
        <name>Matrix3DZeros</name>
        <param>
          <type>int</type>
          <declname>rows</declname>
        </param>
        <param>
          <type>int</type>
          <declname>cols</declname>
        </param>
        <param>
          <type>int</type>
          <declname>depth</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/matrix3d.h" line="42" column="14" bodyfile="src/icrar/leap-accelerate/math/cpu/matrix3d.h" bodystart="42" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2matrix__invert_8h_1a485c627d6f71d1b7dddf68f1a8529c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix_T</type>
          </param>
        </templateparamlist>
        <type>Matrix_T</type>
        <definition>Matrix_T icrar::cpu::SVDPseudoInverse</definition>
        <argsstring>(const Matrix_T &amp;a, double epsilon=std::numeric_limits&lt; typename Matrix_T::Scalar &gt;::epsilon())</argsstring>
        <name>SVDPseudoInverse</name>
        <param>
          <type>const Matrix_T &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>double</type>
          <declname>epsilon</declname>
          <defval>std::numeric_limits&lt; typename Matrix_T::Scalar &gt;::epsilon()</defval>
        </param>
        <briefdescription>
<para>Calculates the PseudoInverse matrix of size N * M for a given M * N matrix. Satisfies the equation A = A * Ah * A. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>epsilon</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Matrix_T </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" line="51" column="14" bodyfile="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" bodystart="51" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2matrix__invert_8h_1a2a1960c643cb691cad550f5e474fd028" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt;</type>
        <definition>Eigen::Matrix&lt;T, Eigen::Dynamic, Eigen::Dynamic&gt; icrar::cpu::PseudoInverse</definition>
        <argsstring>(const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;a)</argsstring>
        <name>PseudoInverse</name>
        <param>
          <type>const Eigen::Matrix&lt; T, Eigen::Dynamic, Eigen::Dynamic &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
<para>Invert as a function If non-negative RefAnt is provided it only forms the matrix for baselines with that antenna. </para>
        </briefdescription>
        <detaileddescription>
<para>This function generates and returns the inverse of the linear matrix to solve for the phase calibration (only) given a MS. The MS is used to fill the columns of the matrix, based on the baselines in the MS (and RefAnt if given)</para>
<para>The output will be the inverse matrix to cross with the observation vector.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" line="72" column="19" bodyfile="src/icrar/leap-accelerate/math/cpu/matrix_invert.h" bodystart="72" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1aee9905786019ce9377e9f14b9509abf6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(size_t n, const double *a, const double *b, double *c)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="31" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a89fee9a0f10d65e38959ed904247a226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(size_t n, const float *a, const float *b, float *c)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="32" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a7da109900665780e1e687203d9f3a981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(size_t n, const int *a, const int *b, int *c)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="33" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="33" bodyend="33"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a6a0a68fb46c9b5df52f701107a152699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;a, const std::vector&lt; double &gt; &amp;b, std::vector&lt; double &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="35" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="35" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a23c90f731f147d9fdd6340ca2cadb39a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;a, const std::vector&lt; float &gt; &amp;b, std::vector&lt; float &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="36" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="36" bodyend="36"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a3b82c617780be8cc5ea9c8125ca5b482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;a, const std::vector&lt; int &gt; &amp;b, std::vector&lt; int &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="37" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a1b25dc29cf5d21d767f218ea9a691853" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const Eigen::VectorXcd &amp;a, const Eigen::VectorXcd &amp;b, Eigen::VectorXcd &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXcd &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXcd &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXcd &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="39" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="39" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a3238cb30eedbce55b67e8d794a8ba217" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const Eigen::VectorXd &amp;a, const Eigen::VectorXd &amp;b, Eigen::VectorXd &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="40" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a475c399ca70bb2e69990da764aed1703" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const Eigen::VectorXf &amp;a, const Eigen::VectorXf &amp;b, Eigen::VectorXf &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXf &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXf &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXf &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="41" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8cc_1a45e02b6cc5835216f91f00ac4a43e6aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const Eigen::VectorXi &amp;a, const Eigen::VectorXi &amp;b, Eigen::VectorXi &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXi &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.cc" line="42" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.cc" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8h_1a3cbba64d8d4169e4876c2bc04eb7599d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(size_t n, const T *x1, const T *x2, T *y)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>x2</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Performs vector addition of equal length vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para>vector value type </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>left vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x2</parametername>
</parameternamelist>
<parameterdescription>
<para>right vector </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>out vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.h" line="45" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.h" bodystart="45" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8h_1a7030a038636cbf21892bb5188ffc422c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const std::array&lt; T, N &gt; &amp;a, const std::array&lt; T, N &gt; &amp;b, std::array&lt; T, N &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::array&lt; T, N &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.h" line="54" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8h_1a35f7c8ffc15299b5c6838bc7fb82a156" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type>std::array&lt; T, N &gt;</type>
        <definition>std::array&lt;T, N&gt; icrar::cpu::add</definition>
        <argsstring>(const std::array&lt; T, N &gt; &amp;a, const std::array&lt; T, N &gt; &amp;b)</argsstring>
        <name>add</name>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::array&lt; T, N &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.h" line="60" column="16" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.h" bodystart="60" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8h_1a8e42ec824c31f5d3943d04c2fb1bd95a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void icrar::cpu::add</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;a, const std::vector&lt; T &gt; &amp;b, std::vector&lt; T &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; T &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.h" line="68" column="10" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.h" bodystart="68" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8h_1abcf26093c764b11db6b1e6ebcdf9c1e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix</type>
          </param>
        </templateparamlist>
        <type>Eigen::IndexedView&lt; Matrix, Eigen::VectorXi, Eigen::internal::SingleRange &gt;</type>
        <definition>Eigen::IndexedView&lt;Matrix, Eigen::VectorXi, Eigen::internal::SingleRange&gt; icrar::cpu::VectorRangeSelect</definition>
        <argsstring>(Matrix &amp;matrix, const Eigen::VectorXi &amp;rowIndices, unsigned int column)</argsstring>
        <name>VectorRangeSelect</name>
        <param>
          <type>Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>rowIndices</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Provides selecting a range of elements via the index in the matrix. Negative indexes select from the back of the vector with -1 as the last element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced matrix to select from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of row indices to select </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.h" line="89" column="5" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.h" bodystart="89" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="cpu_2vector_8h_1a126251236589b98a51f26203c8466b4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Matrix</type>
          </param>
        </templateparamlist>
        <type>Eigen::IndexedView&lt; Matrix, Eigen::VectorXi, Eigen::internal::AllRange&lt;-1 &gt; &gt;</type>
        <definition>Eigen::IndexedView&lt;Matrix, Eigen::VectorXi, Eigen::internal::AllRange&lt;-1&gt; &gt; icrar::cpu::MatrixRangeSelect</definition>
        <argsstring>(Matrix &amp;matrix, const Eigen::VectorXi &amp;rowIndices, Eigen::internal::all_t range)</argsstring>
        <name>MatrixRangeSelect</name>
        <param>
          <type>Matrix &amp;</type>
          <declname>matrix</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>rowIndices</declname>
        </param>
        <param>
          <type>Eigen::internal::all_t</type>
          <declname>range</declname>
        </param>
        <briefdescription>
<para>Provides selecting a range of elements via the index in the matrix. Negative indexes select from the back of the vector with -1 as the last element. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>T</parametername>
</parameternamelist>
<parameterdescription>
<para/>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>matrix</parametername>
</parameternamelist>
<parameterdescription>
<para>the referenced matrix to select from </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowIndices</parametername>
</parameternamelist>
<parameterdescription>
<para>a range of row indices to select </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>column</parametername>
</parameternamelist>
<parameterdescription>
<para>a valid column index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cpu/vector.h" line="117" column="5" bodyfile="src/icrar/leap-accelerate/math/cpu/vector.h" bodystart="117" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="CalibrateResult_8cc_1ac162006978c40d324c4666ae067a4fa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>CalibrateResult</type>
        <definition>icrar::cpu::CalibrateResult icrar::cpu::ToCalibrateResult</definition>
        <argsstring>(casalib::CalibrateResult &amp;result)</argsstring>
        <name>ToCalibrateResult</name>
        <param>
          <type>casalib::CalibrateResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.cc" line="47" column="21" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.cc" bodystart="47" bodyend="84" declfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" declline="128" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="CalibrateResult_8cc_1aeacfd9460d47cb1eeb134b1f6c9830e2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cpu::PrintResult</definition>
        <argsstring>(const CalibrateResult &amp;result)</argsstring>
        <name>PrintResult</name>
        <param>
          <type>const CalibrateResult &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.cc" line="86" column="10" bodyfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.cc" bodystart="86" bodyend="95" declfile="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h" declline="130" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" line="64" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1cuda" kind="namespace" language="C++">
    <compoundname>icrar::cuda</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__matrix" prot="public">icrar::cuda::device_matrix</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1device__tensor3" prot="public">icrar::cuda::device_tensor3</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1device__vector" prot="public">icrar::cuda::device_vector</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceIntegration" prot="public">icrar::cuda::DeviceIntegration</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceMetaData" prot="public">icrar::cuda::DeviceMetaData</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1UniformMetaData" prot="public">icrar::cuda::UniformMetaData</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="cuda_2PhaseRotate_8h_1aac2f318a4987bdd714bb8967f9f2a645" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cpu::CalibrateResult</type>
        <definition>cpu::CalibrateResult icrar::cuda::Calibrate</definition>
        <argsstring>(const MeasurementSet &amp;ms, const std::vector&lt; MVDirection &gt; &amp;directions)</argsstring>
        <name>Calibrate</name>
        <param>
          <type>const <ref refid="classicrar_1_1MeasurementSet" kindref="compound">MeasurementSet</ref> &amp;</type>
          <declname>ms</declname>
        </param>
        <param>
          <type>const std::vector&lt; MVDirection &gt; &amp;</type>
          <declname>directions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" line="69" column="26" declfile="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" declline="69" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2PhaseRotate_8h_1a3bd811dc5136c9b128151f8be534df9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::PhaseRotate</definition>
        <argsstring>(cpu::MetaData &amp;hostMetadata, DeviceMetaData &amp;deviceMetadata, const MVDirection &amp;direction, std::vector&lt; cuda::DeviceIntegration &gt; &amp;input, std::vector&lt; cpu::IntegrationResult &gt; &amp;output_integrations, std::vector&lt; cpu::CalibrationResult &gt; &amp;output_calibrations)</argsstring>
        <name>PhaseRotate</name>
        <param>
          <type><ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">cpu::MetaData</ref> &amp;</type>
          <declname>hostMetadata</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;</type>
          <declname>deviceMetadata</declname>
        </param>
        <param>
          <type>const MVDirection &amp;</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cuda_1_1DeviceIntegration" kindref="compound">cuda::DeviceIntegration</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1IntegrationResult" kindref="compound">cpu::IntegrationResult</ref> &gt; &amp;</type>
          <declname>output_integrations</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="classicrar_1_1cpu_1_1CalibrationResult" kindref="compound">cpu::CalibrationResult</ref> &gt; &amp;</type>
          <declname>output_calibrations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Performs only visibilities rotation on the GPU </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" line="76" column="10" declfile="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" declline="76" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2PhaseRotate_8h_1aaf51381d25cede8e027ce1b8f23dc601" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>__host__ void</type>
        <definition>__host__ void icrar::cuda::RotateVisibilities</definition>
        <argsstring>(DeviceIntegration &amp;integration, DeviceMetaData &amp;metadata)</argsstring>
        <name>RotateVisibilities</name>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceIntegration" kindref="compound">DeviceIntegration</ref> &amp;</type>
          <declname>integration</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1DeviceMetaData" kindref="compound">DeviceMetaData</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" line="84" column="19" declfile="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" declline="84" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2PhaseRotate_8h_1aadcd6befb812b2246eabbda17c399506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; Eigen::MatrixXd, Eigen::VectorXi &gt;</type>
        <definition>std::pair&lt;Eigen::MatrixXd, Eigen::VectorXi&gt; icrar::cuda::PhaseMatrixFunction</definition>
        <argsstring>(const Eigen::VectorXi &amp;a1, const Eigen::VectorXi &amp;a2, int refAnt)</argsstring>
        <name>PhaseMatrixFunction</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a1</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>refAnt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" line="88" column="15" declfile="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" declline="88" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a26e1ee8d8e06b3b84f747ab871010abf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::multiply</definition>
        <argsstring>(const int m, const int n, double *mat, double *vec, double *out)</argsstring>
        <name>multiply</name>
        <param>
          <type>const int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="33" column="10" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="33" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a73514417d18fa10b2fc0075f685e121f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::multiply</definition>
        <argsstring>(const int m, const int n, float *mat, float *vec, float *out)</argsstring>
        <name>multiply</name>
        <param>
          <type>const int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="34" column="10" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="34" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a5cf40ba9e0764b69c0a78b403e83f285" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::multiply</definition>
        <argsstring>(const int m, const int n, int *mat, int *vec, int *out)</argsstring>
        <name>multiply</name>
        <param>
          <type>const int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>n</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>mat</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>vec</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="35" column="10" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="35" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a5bbf0be6f23c46e318c54bc148bae0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::Array&lt; double &gt;</type>
        <definition>casacore::Array&lt;double&gt; icrar::cuda::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; double &gt; &amp;a, const casacore::Array&lt; double &gt; &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="37" column="21" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="37" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1ad6d75d9492a4d0d32822e927336554da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::Array&lt; float &gt;</type>
        <definition>casacore::Array&lt;float&gt; icrar::cuda::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; float &gt; &amp;a, const casacore::Array&lt; float &gt; &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="38" column="21" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="38" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1ab3e345376dc34fba473500207e6a59ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>casacore::Array&lt; int &gt;</type>
        <definition>casacore::Array&lt;int&gt; icrar::cuda::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; int &gt; &amp;a, const casacore::Array&lt; int &gt; &amp;b)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="39" column="21" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="39" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1a4116e7f8d065d43f3c63d454cb825e34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; double &gt; &amp;a, const casacore::Array&lt; double &gt; &amp;b, casacore::Array&lt; double &gt; &amp;c)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; double &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="41" column="10" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1ae27b41b7f158da90213cca657f1e4300" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; float &gt; &amp;a, const casacore::Array&lt; float &gt; &amp;b, casacore::Array&lt; float &gt; &amp;c)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; float &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="42" column="10" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="42" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="matrix__multiply_8h_1aaa3750f41e7df23afd2164fe755a7691" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::multiply</definition>
        <argsstring>(const casacore::Matrix&lt; int &gt; &amp;a, const casacore::Array&lt; int &gt; &amp;b, casacore::Array&lt; int &gt; &amp;c)</argsstring>
        <name>multiply</name>
        <param>
          <type>const casacore::Matrix&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; int &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" line="43" column="10" declfile="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a96b54e88c50303a4a0bb7cb4b4fb5bfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(size_t n, const double *a, const double *b, double *c)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const double *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="39" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="39" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1adc8a372802f5214aca0ce0458c4fb55c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(size_t n, const float *a, const float *b, float *c)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="40" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="40" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a322fd4399daee7f78af8dbe58c66b4a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(size_t n, const int *a, const int *b, int *c)</argsstring>
        <name>add</name>
        <param>
          <type>size_t</type>
          <declname>n</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const int *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="41" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="41" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a4ca37ad8ec7d0f9ec0880d6b21926837" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const device_vector&lt; double &gt; &amp;a, const device_vector&lt; double &gt; &amp;b, device_vector&lt; double &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; double &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="43" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="43" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a174d3991b40e808a0b7ca1afe01d4c26" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const device_vector&lt; float &gt; &amp;a, const device_vector&lt; float &gt; &amp;b, device_vector&lt; float &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; float &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="44" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="44" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1ab4292163de99238db3423a55dc629d99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const device_vector&lt; int &gt; &amp;a, const device_vector&lt; int &gt; &amp;b, device_vector&lt; int &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type><ref refid="classicrar_1_1cuda_1_1device__vector" kindref="compound">device_vector</ref>&lt; int &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="45" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="45" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a28fadee0879ef9c59d8ed86f9014aba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;a, const std::vector&lt; double &gt; &amp;b, std::vector&lt; double &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="47" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="47" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1ad43ca73c27fd0311137527990404d42f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;a, const std::vector&lt; float &gt; &amp;b, std::vector&lt; float &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; float &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="48" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="48" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1ac95d624e47ba26386ba65766a636a4c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;a, const std::vector&lt; int &gt; &amp;b, std::vector&lt; int &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="49" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="49" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a39d6d998615e4a807db72c6ced55d598" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const Eigen::VectorXd &amp;a, const Eigen::VectorXd &amp;b, Eigen::VectorXd &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXd &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="51" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="51" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1aa8ad4d3705f681fabd42b948600bd7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const Eigen::VectorXf &amp;a, const Eigen::VectorXf &amp;b, Eigen::VectorXf &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXf &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXf &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXf &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="52" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="52" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a791906bbefd0c5152ffaca1dfc42f20a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const Eigen::VectorXi &amp;a, const Eigen::VectorXi &amp;b, Eigen::VectorXi &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>Eigen::VectorXi &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="53" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="53" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a69526b71ddf41e4a7b85a2929f5e7355" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const casacore::Array&lt; double &gt; &amp;a, const casacore::Array&lt; double &gt; &amp;b, casacore::Array&lt; double &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; double &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; double &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; double &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="55" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="55" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1abe45e7506a3402ff9c2e1873786e514d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const casacore::Array&lt; float &gt; &amp;a, const casacore::Array&lt; float &gt; &amp;b, casacore::Array&lt; float &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; float &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; float &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; float &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="56" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="56" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="cuda_2vector_8h_1a1f2061107d92a9c0145e4e5be376ac87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::cuda::add</definition>
        <argsstring>(const casacore::Array&lt; int &gt; &amp;a, const casacore::Array&lt; int &gt; &amp;b, casacore::Array&lt; int &gt; &amp;c)</argsstring>
        <name>add</name>
        <param>
          <type>const casacore::Array&lt; int &gt; &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const casacore::Array&lt; int &gt; &amp;</type>
          <declname>b</declname>
        </param>
        <param>
          <type>casacore::Array&lt; int &gt; &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/math/cuda/vector.h" line="57" column="10" declfile="src/icrar/leap-accelerate/math/cuda/vector.h" declline="57" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h" line="60" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespaceicrar_1_1log" kind="namespace" language="C++">
    <compoundname>icrar::log</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="logging_8cc_1af1c37a54054ed958b2466d273c8822c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void icrar::log::Initialize</definition>
        <argsstring>()</argsstring>
        <name>Initialize</name>
        <briefdescription>
<para>Initializes logging. </para>
        </briefdescription>
        <detaileddescription>
<para>Initializes logging singletons.</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/core/logging.cc" line="34" column="10" bodyfile="src/icrar/leap-accelerate/core/logging.cc" bodystart="34" bodyend="65" declfile="src/icrar/leap-accelerate/core/logging.h" declline="48" declcolumn="10"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/logging.cc" line="28" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacerapidjson" kind="namespace" language="C++">
    <compoundname>rapidjson</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/json/json_helper.cc" line="29" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="namespacestd_1_1literals_1_1complex__literals" kind="namespace" language="C++">
    <compoundname>std::literals::complex_literals</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc" line="51" column="1"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="CMakeLists_8txt_1a1cf8cebffe48bd373024fd7c7b56b111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>cmake_minimum_required</definition>
        <argsstring>(VERSION 3.8) set(SOLUTION_NAME LEAP-Accelerate) set(SOLUTION_NAME_LOWER leap-accelerate) file(STRINGS version.txt SOLUTION_VERSION) message(STATUS "Building $</argsstring>
        <name>cmake_minimum_required</name>
        <param>
          <type>VERSION 3.</type>
          <declname>8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="CMakeLists.txt" line="1" column="1" bodyfile="CMakeLists.txt" bodystart="1" bodyend="7"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2CMakeLists_8txt_1a795136900b5b354fd5fafe3286fab778" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>configure_file</definition>
        <argsstring>(config.h.in config.h) include("$</argsstring>
        <name>configure_file</name>
        <param>
          <type>config.h.in config.</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/CMakeLists.txt" line="3" column="1" bodyfile="src/icrar/leap-accelerate/CMakeLists.txt" bodystart="3" bodyend="5"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2CMakeLists_8txt_1ac80bed0ee7e8a36c86193ee26a346381" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cmake CUDAConfig cmake</type>
        <definition>cmake CUDAConfig cmake include</definition>
        <argsstring>("${PROJECT_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake") get_git_head_revision(GIT_REFSPEC GIT_SHA1) git_local_changes(GIT_HAS_LOCAL_CHANGES) set(git_revision_cc "$</argsstring>
        <name>include</name>
        <param>
          <type>"${PROJECT_SOURCE_DIR}/cmake/GetGitRevisionDescription.cmake"</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/CMakeLists.txt" line="7" column="1" bodyfile="src/icrar/leap-accelerate/CMakeLists.txt" bodystart="7" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2CMakeLists_8txt_1adab286cd7ad1dd4ec686bd0d72656f27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>core git_revision cc</type>
        <definition>core git_revision cc configure_file</definition>
        <argsstring>("core/git_revision.cc.in" "${git_revision_cc}" @ONLY) set(TARGET_NAME LeapAccelerate) set(public_headers $</argsstring>
        <name>configure_file</name>
        <param>
          <type>"core/git_revision.cc.in" "${git_revision_cc}" @</type>
          <declname>ONLY</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/CMakeLists.txt" line="11" column="1" bodyfile="src/icrar/leap-accelerate/CMakeLists.txt" bodystart="11" bodyend="16"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2CMakeLists_8txt_1a88e4b434ddbb7bb1b3806e90b5a1061e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>config h model visibility h model <ref refid="classband__data" kindref="compound">band_data</ref> h model casa MetaData h algorithm casa PhaseRotate h</type>
        <definition>config h model visibility h model band_data h model casa MetaData h algorithm casa PhaseRotate h set</definition>
        <argsstring>(private_headers math/casacore_helper.h math/math_conversion.h math/math.h) set(sources $</argsstring>
        <name>set</name>
        <param>
          <type>private_headers math/casacore_helper.h math/math_conversion.h math/math.</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/CMakeLists.txt" line="24" column="1" bodyfile="src/icrar/leap-accelerate/CMakeLists.txt" bodystart="24" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2CMakeLists_8txt_1aa9b291e423755a642b135d2653101898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>exception exception cc ms utils cc ms MeasurementSet cc model casa Integration cc model casa MetaData cc model cpu Integration cc model cpu MetaData cc model cpu CalibrateResult cc math math cc math math_conversion cc math casa vector cc math casa matrix cc math casa matrix_invert cc math cpu vector cc core compute_implementation cc core logging cc core version cc json json_helper cc algorithm casa PhaseRotate cc algorithm cpu PhaseRotate cc</type>
        <definition>exception exception cc ms utils cc ms MeasurementSet cc model casa Integration cc model casa MetaData cc model cpu Integration cc model cpu MetaData cc model cpu CalibrateResult cc math math cc math math_conversion cc math casa vector cc math casa matrix cc math casa matrix_invert cc math cpu vector cc core compute_implementation cc core logging cc core version cc json json_helper cc algorithm casa PhaseRotate cc algorithm cpu PhaseRotate cc set</definition>
        <argsstring>(cuda_headers cuda/cuda_info.h cuda/helper_cuda.cuh cuda/helper_string.cuh math/cuda/vector.h math/cuda/vector.cuh math/cuda/matrix.h math/cuda/matrix.cuh math/cuda/matrix_multiply.cuh math/cuda/matrix_transpose.cuh algorithm/cuda/PhaseRotate.h) set(cuda_sources cuda/cuda_info.cu model/cuda/DeviceMetaData.cu model/cuda/DeviceIntegration.cu math/cuda/vector.cu math/cuda/matrix.cu algorithm/cuda/PhaseRotate.cu) option(CASA_ENABLED "Casa Enabled" TRUE) option(GSL_ENABLED "GSL Enabled" OFF) add_library($</argsstring>
        <name>set</name>
        <param>
          <type>cuda_headers cuda/cuda_info.h cuda/helper_cuda.cuh cuda/helper_string.cuh math/cuda/vector.h math/cuda/vector.cuh math/cuda/matrix.h math/cuda/matrix.cuh math/cuda/matrix_multiply.cuh math/cuda/matrix_transpose.cuh algorithm/cuda/PhaseRotate.</type>
          <declname>h</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/CMakeLists.txt" line="62" column="1" bodyfile="src/icrar/leap-accelerate/CMakeLists.txt" bodystart="62" bodyend="93"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate_2tests_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2tests_2CMakeLists_8txt_1a8889d3e4b5bf48fa06bc83e2b71e5d6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>set</definition>
        <argsstring>(TEST_TARGET_NAME LeapAccelerate.Tests) set(sources main.cc test_helper.cc math/casacore_eigen_tests.cc math/eigen_tests.cc math/vector_tests.cc math/matrix_tests.cc math/linear_math_tests.cc ms/MSUtilsTests.cc model/MetaDataTests.cc model/IntegrationTests.cc algorithm/PhaseRotateTests.cc) set(cuda_sources math/cuda/cuda_vector_tests.cu math/cuda/cuda_matrix_tests.cu math/cuda/cuda_vector_eigen_tests.cu) if(CUDA_VERSION_MAJOR GREATER 9) list(APPEND sources $</argsstring>
        <name>set</name>
        <param>
          <type>TEST_TARGET_NAME LeapAccelerate.</type>
          <declname>Tests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/CMakeLists.txt" line="2" column="1" bodyfile="src/icrar/leap-accelerate/tests/CMakeLists.txt" bodystart="2" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate_2tests_2CMakeLists_8txt_1a6bc8e1c7f6f69b0741df2c401178cf14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>endif</definition>
        <argsstring>() add_executable($</argsstring>
        <name>endif</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/CMakeLists.txt" line="32" column="1" bodyfile="src/icrar/leap-accelerate/tests/CMakeLists.txt" bodystart="32" bodyend="34"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate-cli_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-cli_2CMakeLists_8txt_1a21f5b924eb4891cf20ad8e8b79b3c9aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>set</definition>
        <argsstring>(TARGET_NAME LeapAccelerateCLI) set(TARGET_EXPORT leapaccelerate-targest) set(sources main.cc) include_directories($</argsstring>
        <name>set</name>
        <param>
          <type>TARGET_NAME</type>
          <declname>LeapAccelerateCLI</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/CMakeLists.txt" line="1" column="3" bodyfile="src/icrar/leap-accelerate-cli/CMakeLists.txt" bodystart="1" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-cli_2CMakeLists_8txt_1a045640122566dbe71ea44f6b46f29192" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>external CLI11 include</type>
        <definition>external CLI11 include add_executable</definition>
        <argsstring>(${TARGET_NAME} main.cc) target_link_libraries($</argsstring>
        <name>add_executable</name>
        <param>
          <declname>${TARGET_NAME} main.</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/CMakeLists.txt" line="11" column="1" bodyfile="src/icrar/leap-accelerate-cli/CMakeLists.txt" bodystart="11" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-cli_2CMakeLists_8txt_1a5cd1c80a02659dbc4551b9a2606005fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>LeapAccelerate</type>
        <definition>LeapAccelerate set_target_properties</definition>
        <argsstring>(${TARGET_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib" RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin") if(BUILD_TESTING) add_subdirectory(tests) endif() install(TARGETS $</argsstring>
        <name>set_target_properties</name>
        <param>
          <declname>${TARGET_NAME} PROPERTIES ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib" LIBRARY_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/lib" RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/CMakeLists.txt" line="13" column="1" bodyfile="src/icrar/leap-accelerate-cli/CMakeLists.txt" bodystart="13" bodyend="26"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate-cli_2tests_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-cli_2tests_2CMakeLists_8txt_1a7b3d8bb48661e6cbdd9fca3d6d067bda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>set</definition>
        <argsstring>(TEST_TARGET_NAME LeapAccelerateCLI.Tests) set(sources main.cc CommandLineTests.cc JSONHelperTests.cc E2EPerformanceTests.cc) add_executable($</argsstring>
        <name>set</name>
        <param>
          <type>TEST_TARGET_NAME LeapAccelerateCLI.</type>
          <declname>Tests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/CMakeLists.txt" line="2" column="1" bodyfile="src/icrar/leap-accelerate-cli/tests/CMakeLists.txt" bodystart="2" bodyend="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate-client_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-client_2CMakeLists_8txt_1ab146ecaba03e959b94f7bf9850a20ddb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>set</definition>
        <argsstring>(TARGET_NAME LeapAccelerateClient) set(TARGET_EXPORT leapaccelerate-targest) set(TARGET_TEST LeapAccelerateClientExec) set(sources Calibrate.cc leap_cal_client.cc remote_cal.cc) set(private_headers Calibrate.h leap_cal_client.h remote_cal.h) find_package(Threads) add_executable($</argsstring>
        <name>set</name>
        <param>
          <type>TARGET_NAME</type>
          <declname>LeapAccelerateClient</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/CMakeLists.txt" line="1" column="5" bodyfile="src/icrar/leap-accelerate-client/CMakeLists.txt" bodystart="1" bodyend="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate-client_2tests_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-client_2tests_2CMakeLists_8txt_1a05930e796eabc82ae45ae3bd8c4a99bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>set</definition>
        <argsstring>(TEST_TARGET_NAME LeapAccelerateClient.Tests) add_executable($</argsstring>
        <name>set</name>
        <param>
          <type>TEST_TARGET_NAME LeapAccelerateClient.</type>
          <declname>Tests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/tests/CMakeLists.txt" line="2" column="1" bodyfile="src/icrar/leap-accelerate-client/tests/CMakeLists.txt" bodystart="2" bodyend="4"/>
      </memberdef>
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-client_2tests_2CMakeLists_8txt_1a382ca235f8d10e618ded6cff429f527d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>main cc cuda_tests cu casacore_tests cc PhaseRotateTests cc</type>
        <definition>main cc cuda_tests cu casacore_tests cc PhaseRotateTests cc configure_cuda_warnings</definition>
        <argsstring>(${TEST_TARGET_NAME}) target_link_libraries($</argsstring>
        <name>configure_cuda_warnings</name>
        <param>
          <declname>${TEST_TARGET_NAME}</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/tests/CMakeLists.txt" line="11" column="1" bodyfile="src/icrar/leap-accelerate-client/tests/CMakeLists.txt" bodystart="11" bodyend="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/tests/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="src_2icrar_2leap-accelerate-server_2CMakeLists_8txt" kind="file" language="C++">
    <compoundname>CMakeLists.txt</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="src_2icrar_2leap-accelerate-server_2CMakeLists_8txt_1a681d1437c536e1e13d816ed0a5cd8880" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>set</definition>
        <argsstring>(TARGET_NAME LeapAccelerateServer) set(TARGET_EXPORT leapaccelerate-targest) set(TARGET_TEST LeapAccelerateServerExec) set(sources leap_cal_server.cc) set(private_headers leap_cal_server.h) find_package(Threads) add_executable($</argsstring>
        <name>set</name>
        <param>
          <type>TARGET_NAME</type>
          <declname>LeapAccelerateServer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/CMakeLists.txt" line="1" column="1" bodyfile="src/icrar/leap-accelerate-server/CMakeLists.txt" bodystart="1" bodyend="21"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-server/CMakeLists.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CMakeStyleGuide_8md" kind="file" language="Markdown">
    <compoundname>CMakeStyleGuide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/CMakeStyleGuide.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CPlusPlusStyleGuide_8md" kind="file" language="Markdown">
    <compoundname>CPlusPlusStyleGuide.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/CPlusPlusStyleGuide.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Submodules_8md" kind="file" language="Markdown">
    <compoundname>Submodules.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/Submodules.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="testdata_2README_8md" kind="file" language="Markdown">
    <compoundname>README.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="testdata/README.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CommandLineTests_8cc" kind="file" language="C++">
    <compoundname>CommandLineTests.cc</compoundname>
    <innerclass refid="classicrar_1_1CommandLineTests" prot="public">icrar::CommandLineTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/CommandLineTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="E2EPerformanceTests_8cc" kind="file" language="C++">
    <compoundname>E2EPerformanceTests.cc</compoundname>
    <innerclass refid="classicrar_1_1E2EPerformanceTests" prot="public">icrar::E2EPerformanceTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/E2EPerformanceTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="JSONHelperTests_8cc" kind="file" language="C++">
    <compoundname>JSONHelperTests.cc</compoundname>
    <innerclass refid="classicrar_1_1JSONHelperTests" prot="public">icrar::JSONHelperTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/JSONHelperTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Calibrate_8cc" kind="file" language="C++">
    <compoundname>Calibrate.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/Calibrate.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap__cal__client_8cc" kind="file" language="C++">
    <compoundname>leap_cal_client.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="leap__cal__client_8cc_1a2c3f6775325c30275d11c6abee2db6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int, char **)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-client/leap_cal_client.cc" line="24" column="5" bodyfile="src/icrar/leap-accelerate-client/leap_cal_client.cc" bodystart="24" bodyend="27"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/leap_cal_client.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap__cal__client_8h" kind="file" language="C++">
    <compoundname>leap_cal_client.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/leap_cal_client.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LeapRemote_8cc" kind="file" language="C++">
    <compoundname>LeapRemote.cc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/LeapRemote.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="LeapRemote_8h" kind="file" language="C++">
    <compoundname>LeapRemote.h</compoundname>
    <innerclass refid="classicrar_1_1LeapRemote" prot="public">icrar::LeapRemote</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/LeapRemote.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="remote__cal_8cc" kind="file" language="C++">
    <compoundname>remote_cal.cc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/remote_cal.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="remote__cal_8h" kind="file" language="C++">
    <compoundname>remote_cal.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/remote_cal.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap__cal__server_8cc" kind="file" language="C++">
    <compoundname>leap_cal_server.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="leap__cal__server_8cc_1a2c3f6775325c30275d11c6abee2db6a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int, char **)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char **</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-server/leap_cal_server.cc" line="25" column="5" bodyfile="src/icrar/leap-accelerate-server/leap_cal_server.cc" bodystart="25" bodyend="38"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-server/leap_cal_server.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap__cal__server_8h" kind="file" language="C++">
    <compoundname>leap_cal_server.h</compoundname>
    <innerclass refid="classicrar_1_1Session" prot="public">icrar::Session</innerclass>
    <innerclass refid="classicrar_1_1Server" prot="public">icrar::Server</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-server/leap_cal_server.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate_2algorithm_2casa_2Calibrate_8h" kind="file" language="C++">
    <compoundname>Calibrate.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/casa/Calibrate.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate-client_2Calibrate_8h" kind="file" language="C++">
    <compoundname>Calibrate.h</compoundname>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/Calibrate.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2PhaseRotate_8cc" kind="file" language="C++">
    <compoundname>PhaseRotate.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="casa_2PhaseRotate_8cc_1a818c17a987f81357f2a8e03f9e3e736b" prot="public" static="no">
        <type>double</type>
        <definition>using Radians =  double</definition>
        <argsstring/>
        <name>Radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" line="64" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2PhaseRotate_8cc" kind="file" language="C++">
    <compoundname>PhaseRotate.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="cpu_2PhaseRotate_8cc_1a818c17a987f81357f2a8e03f9e3e736b" prot="public" static="no">
        <type>double</type>
        <definition>using Radians =  double</definition>
        <argsstring/>
        <name>Radians</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" line="60" column="1" bodyfile="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2PhaseRotate_8h" kind="file" language="C++">
    <compoundname>PhaseRotate.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/casa/PhaseRotate.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2PhaseRotate_8h" kind="file" language="C++">
    <compoundname>PhaseRotate.h</compoundname>
    <innernamespace refid="namespacecasacore">casacore</innernamespace>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/PhaseRotate.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cuda_2PhaseRotate_8h" kind="file" language="C++">
    <compoundname>PhaseRotate.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/PhaseRotate.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="complex__extensions_8h" kind="file" language="C++">
    <compoundname>complex_extensions.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="complex__extensions_8h_1a82bf7ccd0ef9b627be776ef898bf7947" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool isApprox</definition>
        <argsstring>(const std::complex&lt; T &gt; &amp;lhs, const std::complex&lt; T &gt; &amp;rhs, T threshold)</argsstring>
        <name>isApprox</name>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::complex&lt; T &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>T</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/complex_extensions.h" line="29" column="6" bodyfile="src/icrar/leap-accelerate/common/complex_extensions.h" bodystart="29" bodyend="32"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/complex_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="constants_8h" kind="file" language="C++">
    <compoundname>constants.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/constants.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__extensions_8h" kind="file" language="C++">
    <compoundname>eigen_extensions.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="eigen__extensions_8h_1aa5a9e0efb03c0d10ffe1e331a148389e" prot="public" static="no" constexpr="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int pretty_width</definition>
        <argsstring/>
        <name>pretty_width</name>
        <initializer>= 12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/eigen_extensions.h" line="34" column="15" bodyfile="src/icrar/leap-accelerate/common/eigen_extensions.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/eigen_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MVDirection_8h" kind="file" language="C++">
    <compoundname>MVDirection.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/MVDirection.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MVPosition_8h" kind="file" language="C++">
    <compoundname>MVPosition.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/MVPosition.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MVuvw_8h" kind="file" language="C++">
    <compoundname>MVuvw.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/MVuvw.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="stream__extensions_8h" kind="file" language="C++">
    <compoundname>stream_extensions.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="stream__extensions_8h_1a4248026e7d2c0f6a4ea723b16668531e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::set&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::set&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/stream_extensions.h" line="33" column="1" bodyfile="src/icrar/leap-accelerate/common/stream_extensions.h" bodystart="33" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="stream__extensions_8h_1aa82b599c8992556be325b0b0a8c9f06f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename S</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::map&lt; T, S &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::map&lt; T, S &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/stream_extensions.h" line="47" column="1" bodyfile="src/icrar/leap-accelerate/common/stream_extensions.h" bodystart="47" bodyend="55"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/stream_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="Tensor3X_8h" kind="file" language="C++">
    <compoundname>Tensor3X.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/Tensor3X.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="vector__extensions_8h" kind="file" language="C++">
    <compoundname>vector_extensions.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector__extensions_8h_1a4b8db62a17e01a839e499a4c59112df5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const std::vector&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/common/vector_extensions.h" line="32" column="1" bodyfile="src/icrar/leap-accelerate/common/vector_extensions.h" bodystart="32" bodyend="43"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/vector_extensions.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="compute__implementation_8cc" kind="file" language="C++">
    <compoundname>compute_implementation.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/compute_implementation.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="compute__implementation_8h" kind="file" language="C++">
    <compoundname>compute_implementation.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/compute_implementation.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="git__revision_8h" kind="file" language="C++">
    <compoundname>git_revision.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para>
<para>Stores the version information of leap-accelerate </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/git_revision.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="logging_8cc" kind="file" language="C++">
    <compoundname>logging.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/logging.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="logging_8h" kind="file" language="C++">
    <compoundname>logging.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1log">icrar::log</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/logging.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="profiling__timer_8h" kind="file" language="C++">
    <compoundname>profiling_timer.h</compoundname>
    <innerclass refid="classicrar_1_1profiling__timer" prot="public">icrar::profiling_timer</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/profiling_timer.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="version_8cc" kind="file" language="C++">
    <compoundname>version.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para>
<para>Stores the version information of leap-accelerate </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/version.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="version_8h" kind="file" language="C++">
    <compoundname>version.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA</para>
<para>Stores the version information of leap-accelerate </para>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/version.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cuda__info_8h" kind="file" language="C++">
    <compoundname>cuda_info.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="cuda__info_8h_1a039eafcb10fbb53e90d756f31d504312" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int GetCudaDeviceCount</definition>
        <argsstring>()</argsstring>
        <name>GetCudaDeviceCount</name>
        <briefdescription>
<para>Gets the number of available Cuda Devices. </para>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA (in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA <simplesect kind="return"><para>int </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/cuda_info.h" line="28" column="5" declfile="src/icrar/leap-accelerate/cuda/cuda_info.h" declline="28" declcolumn="5"/>
      </memberdef>
      <memberdef kind="function" id="cuda__info_8h_1a1c5a24b76656425742bd0d7a833c7f38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void printCudaVersion</definition>
        <argsstring>()</argsstring>
        <name>printCudaVersion</name>
        <briefdescription>
<para>Prints running cuda device info to the output log. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/cuda/cuda_info.h" line="33" column="6" declfile="src/icrar/leap-accelerate/cuda/cuda_info.h" declline="33" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/cuda_info.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="device__matrix_8h" kind="file" language="C++">
    <compoundname>device_matrix.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__matrix" prot="public">icrar::cuda::device_matrix</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_matrix.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="device__tensor_8h" kind="file" language="C++">
    <compoundname>device_tensor.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__tensor3" prot="public">icrar::cuda::device_tensor3</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_tensor.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="device__vector_8h" kind="file" language="C++">
    <compoundname>device_vector.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1device__vector" prot="public">icrar::cuda::device_vector</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/device_vector.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="exception_8cc" kind="file" language="C++">
    <compoundname>exception.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/exception/exception.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="exception_8h" kind="file" language="C++">
    <compoundname>exception.h</compoundname>
    <innerclass refid="classicrar_1_1exception" prot="public">icrar::exception</innerclass>
    <innerclass refid="classicrar_1_1invalid__argument__exception" prot="public">icrar::invalid_argument_exception</innerclass>
    <innerclass refid="classicrar_1_1file__exception" prot="public">icrar::file_exception</innerclass>
    <innerclass refid="classicrar_1_1json__exception" prot="public">icrar::json_exception</innerclass>
    <innerclass refid="classicrar_1_1not__implemented__exception" prot="public">icrar::not_implemented_exception</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/exception/exception.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="json__helper_8cc" kind="file" language="C++">
    <compoundname>json_helper.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespacerapidjson">rapidjson</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/json/json_helper.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="json__helper_8h" kind="file" language="C++">
    <compoundname>json_helper.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/json/json_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix_8cc" kind="file" language="C++">
    <compoundname>matrix.cc</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/matrix.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2matrix_8h" kind="file" language="C++">
    <compoundname>matrix.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/matrix.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cuda_2matrix_8h" kind="file" language="C++">
    <compoundname>matrix.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__invert_8cc" kind="file" language="C++">
    <compoundname>matrix_invert.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/matrix_invert.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2matrix__invert_8h" kind="file" language="C++">
    <compoundname>matrix_invert.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/matrix_invert.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2matrix__invert_8h" kind="file" language="C++">
    <compoundname>matrix_invert.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/matrix_invert.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2vector_8cc" kind="file" language="C++">
    <compoundname>vector.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/vector.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2vector_8cc" kind="file" language="C++">
    <compoundname>vector.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/vector.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2vector_8h" kind="file" language="C++">
    <compoundname>vector.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/vector.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2vector_8h" kind="file" language="C++">
    <compoundname>vector.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/vector.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cuda_2vector_8h" kind="file" language="C++">
    <compoundname>vector.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/vector.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casacore__helper_8h" kind="file" language="C++">
    <compoundname>casacore_helper.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casacore_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix3d_8h" kind="file" language="C++">
    <compoundname>matrix3d.h</compoundname>
    <innernamespace refid="namespaceEigen">Eigen</innernamespace>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/matrix3d.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__multiply_8h" kind="file" language="C++">
    <compoundname>matrix_multiply.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_multiply.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__transpose_8h" kind="file" language="C++">
    <compoundname>matrix_transpose.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/matrix_transpose.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="ReadMe_8md" kind="file" language="Markdown">
    <compoundname>ReadMe.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/ReadMe.md"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math_8cc" kind="file" language="C++">
    <compoundname>math.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/math.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math_8h" kind="file" language="C++">
    <compoundname>math.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/math.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math__conversion_8cc" kind="file" language="C++">
    <compoundname>math_conversion.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/math_conversion.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="math__conversion_8h" kind="file" language="C++">
    <compoundname>math_conversion.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/math_conversion.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="band__data_8h" kind="file" language="C++">
    <compoundname>band_data.h</compoundname>
    <innerclass refid="classchannel__info" prot="public">channel_info</innerclass>
    <innerclass refid="classband__data" prot="public">band_data</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/band_data.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2CalibrateResult_8h" kind="file" language="C++">
    <compoundname>CalibrateResult.h</compoundname>
    <innerclass refid="classicrar_1_1casalib_1_1IntegrationResult" prot="public">icrar::casalib::IntegrationResult</innerclass>
    <innerclass refid="classicrar_1_1casalib_1_1CalibrationResult" prot="public">icrar::casalib::CalibrationResult</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/CalibrateResult.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2CalibrateResult_8h" kind="file" language="C++">
    <compoundname>CalibrateResult.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1IntegrationResult" prot="public">icrar::cpu::IntegrationResult</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1CalibrationResult" prot="public">icrar::cpu::CalibrationResult</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2Integration_8cc" kind="file" language="C++">
    <compoundname>Integration.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/Integration.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2Integration_8cc" kind="file" language="C++">
    <compoundname>Integration.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/Integration.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2Integration_8h" kind="file" language="C++">
    <compoundname>Integration.h</compoundname>
    <innerclass refid="classicrar_1_1casalib_1_1Integration" prot="public">icrar::casalib::Integration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/Integration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2Integration_8h" kind="file" language="C++">
    <compoundname>Integration.h</compoundname>
    <innerclass refid="classicrar_1_1cpu_1_1Integration" prot="public">icrar::cpu::Integration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/Integration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2MetaData_8cc" kind="file" language="C++">
    <compoundname>MetaData.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/MetaData.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2MetaData_8cc" kind="file" language="C++">
    <compoundname>MetaData.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casa_2MetaData_8h" kind="file" language="C++">
    <compoundname>MetaData.h</compoundname>
    <innerclass refid="structicrar_1_1casalib_1_1MetaData" prot="public">icrar::casalib::MetaData</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1casalib">icrar::casalib</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/MetaData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="cpu_2MetaData_8h" kind="file" language="C++">
    <compoundname>MetaData.h</compoundname>
    <innerclass refid="structicrar_1_1cpu_1_1Constants" prot="public">icrar::cpu::Constants</innerclass>
    <innerclass refid="classicrar_1_1cpu_1_1MetaData" prot="public">icrar::cpu::MetaData</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/MetaData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="CalibrateResult_8cc" kind="file" language="C++">
    <compoundname>CalibrateResult.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/CalibrateResult.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="DeviceIntegration_8h" kind="file" language="C++">
    <compoundname>DeviceIntegration.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceIntegration" prot="public">icrar::cuda::DeviceIntegration</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cpu">icrar::cpu</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceIntegration.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="DeviceMetaData_8h" kind="file" language="C++">
    <compoundname>DeviceMetaData.h</compoundname>
    <innerclass refid="classicrar_1_1cuda_1_1UniformMetaData" prot="public">icrar::cuda::UniformMetaData</innerclass>
    <innerclass refid="classicrar_1_1cuda_1_1DeviceMetaData" prot="public">icrar::cuda::DeviceMetaData</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespaceicrar_1_1cuda">icrar::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/DeviceMetaData.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="visibility_8h" kind="file" language="C++">
    <compoundname>visibility.h</compoundname>
    <innerclass refid="structicrar_1_1visibility" prot="public">icrar::visibility</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/visibility.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MeasurementSet_8cc" kind="file" language="C++">
    <compoundname>MeasurementSet.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/MeasurementSet.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MeasurementSet_8h" kind="file" language="C++">
    <compoundname>MeasurementSet.h</compoundname>
    <innerclass refid="classicrar_1_1MeasurementSet" prot="public">icrar::MeasurementSet</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/MeasurementSet.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="utils_8cc" kind="file" language="C++">
    <compoundname>utils.cc</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/utils.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="utils_8h" kind="file" language="C++">
    <compoundname>utils.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/utils.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate_2pch_8h" kind="file" language="C++">
    <compoundname>pch.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/pch.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate_2tests_2pch_8h" kind="file" language="C++">
    <compoundname>pch.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/pch.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate-cli_2tests_2pch_8h" kind="file" language="C++">
    <compoundname>pch.h</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/pch.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="PhaseRotateTests_8cc" kind="file" language="C++">
    <compoundname>PhaseRotateTests.cc</compoundname>
    <innerclass refid="classicrar_1_1PhaseRotateTests" prot="public">icrar::PhaseRotateTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <innernamespace refid="namespacestd_1_1literals_1_1complex__literals">std::literals::complex_literals</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/PhaseRotateTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="gtest__helper_8h" kind="file" language="C++">
    <compoundname>gtest_helper.h</compoundname>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/gtest_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate_2tests_2main_8cc" kind="file" language="C++">
    <compoundname>main.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="leap-accelerate_2tests_2main_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/main.cc" line="25" column="5" bodyfile="src/icrar/leap-accelerate/tests/main.cc" bodystart="25" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/main.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate-cli_2main_8cc" kind="file" language="C++">
    <compoundname>main.cc</compoundname>
    <innerclass refid="structicrar_1_1Arguments" prot="public">icrar::Arguments</innerclass>
    <innerclass refid="classicrar_1_1ArgumentsValidated" prot="public">icrar::ArgumentsValidated</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="leap-accelerate-cli_2main_8cc_1af607e1cb5cb8dfdc972ade85d822d63a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arg_string</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>arg_string</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="185" column="13" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="185" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="leap-accelerate-cli_2main_8cc_1aa77dd4d43882ebc7b4a8680e7621d335" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string version_information</definition>
        <argsstring>(const char *name)</argsstring>
        <name>version_information</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="195" column="13" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="195" bodyend="204"/>
      </memberdef>
      <memberdef kind="function" id="leap-accelerate-cli_2main_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/main.cc" line="206" column="5" bodyfile="src/icrar/leap-accelerate-cli/main.cc" bodystart="206" bodyend="270"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/main.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="leap-accelerate-cli_2tests_2main_8cc" kind="file" language="C++">
    <compoundname>main.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="leap-accelerate-cli_2tests_2main_8cc_1a3c04138a5bfe5d72780bb7e82a18e627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int main</definition>
        <argsstring>(int argc, char **argv)</argsstring>
        <name>main</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate-cli/tests/main.cc" line="25" column="5" bodyfile="src/icrar/leap-accelerate-cli/tests/main.cc" bodystart="25" bodyend="29"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/main.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="casacore__eigen__tests_8cc" kind="file" language="C++">
    <compoundname>casacore_eigen_tests.cc</compoundname>
    <innerclass refid="classcasacore__eigen__tests" prot="public">casacore_eigen_tests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="casacore__eigen__tests_8cc_1a0eca8f3f930543fcc5260346af004487" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(casacore_eigen_tests, test_column_major)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classcasacore__eigen__tests" kindref="compound">casacore_eigen_tests</ref></type>
        </param>
        <param>
          <type>test_column_major</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="181" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="181" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="casacore__eigen__tests_8cc_1ae16ec03b6991613029a91c6c8a1d432f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(casacore_eigen_tests, test_matrix_casa)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classcasacore__eigen__tests" kindref="compound">casacore_eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_casa</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="182" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="casacore__eigen__tests_8cc_1a5a51201e50be7715bf1f030724a19737" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(casacore_eigen_tests, test_matrix_casa_to_eigen)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classcasacore__eigen__tests" kindref="compound">casacore_eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_casa_to_eigen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="183" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="183" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="casacore__eigen__tests_8cc_1aecf06fcab861101d7f930de1b71b4f08" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(casacore_eigen_tests, test_matrix_casa_to_eigen_dynamic)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classcasacore__eigen__tests" kindref="compound">casacore_eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_casa_to_eigen_dynamic</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="184" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="casacore__eigen__tests_8cc_1ae89b570e18cd95de2a5533a84698161d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(casacore_eigen_tests, test_uvw_to_icrar)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classcasacore__eigen__tests" kindref="compound">casacore_eigen_tests</ref></type>
        </param>
        <param>
          <type>test_uvw_to_icrar</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" line="186" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc" bodystart="186" bodyend="186"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/casacore_eigen_tests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="eigen__tests_8cc" kind="file" language="C++">
    <compoundname>eigen_tests.cc</compoundname>
    <innerclass refid="classeigen__tests" prot="public">eigen_tests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="eigen__tests_8cc_1a2c53e5b8dad44c41657bdcbe8361c5d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(eigen_tests, test_matrix_size)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classeigen__tests" kindref="compound">eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_size</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="115" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="eigen__tests_8cc_1a71e843fa21156fedb0e9575bf7648c92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(eigen_tests, test_matrix_eigen)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classeigen__tests" kindref="compound">eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_eigen</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="116" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="eigen__tests_8cc_1a2ce0329eec1802c0ec1c60b86a7ad1b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(eigen_tests, test_matrix_multiply)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classeigen__tests" kindref="compound">eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_multiply</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="117" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="eigen__tests_8cc_1a9ef83c673cd0b1a5183bb204e8eee4eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(eigen_tests, test_matrix_pretty)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classeigen__tests" kindref="compound">eigen_tests</ref></type>
        </param>
        <param>
          <type>test_matrix_pretty</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" line="118" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/eigen_tests.cc" bodystart="118" bodyend="118"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/eigen_tests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="linear__math__tests_8cc" kind="file" language="C++">
    <compoundname>linear_math_tests.cc</compoundname>
    <innerclass refid="classicrar_1_1math__conversion__tests" prot="public">icrar::math_conversion_tests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/linear_math_tests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="matrix__tests_8cc" kind="file" language="C++">
    <compoundname>matrix_tests.cc</compoundname>
    <innerclass refid="classmatrix__tests" prot="public">matrix_tests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="matrix__tests_8cc_1ab99ed39df0572c8e354dd5e924f473a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_cpu_transpose)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_transpose</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="199" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="199" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="matrix__tests_8cc_1a2f57b921fc9e05634ebbc9ba58ceacb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_cpu_square_invert)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_square_invert</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="200" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="200" bodyend="200"/>
      </memberdef>
      <memberdef kind="function" id="matrix__tests_8cc_1a02d564dff1e09d8bb9b5493c4f91a8fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_cpu_pseudo_inverse_33)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_pseudo_inverse_33</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="201" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="201" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="matrix__tests_8cc_1ae7d2aee843da29dd64568bd11e5912e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_cpu_pseudo_inverse_32)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_pseudo_inverse_32</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="202" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="202" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="matrix__tests_8cc_1ae77eba5eacd1fc20b5f9b804e25ab321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_cpu_svd42)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_svd42</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="203" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="203" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="matrix__tests_8cc_1a47a6165c079d306aa93159fc15c89937" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_psuedo_inverse_42)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_psuedo_inverse_42</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="205" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="205" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="matrix__tests_8cc_1ae501c62e4650bd3c355fea87c3e1046b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(matrix_tests, test_cpu_svd_pseudo_inverse_32_degenerate)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classmatrix__tests" kindref="compound">matrix_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_svd_pseudo_inverse_32_degenerate</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" line="206" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/matrix_tests.cc" bodystart="206" bodyend="206"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/matrix_tests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="vector__tests_8cc" kind="file" language="C++">
    <compoundname>vector_tests.cc</compoundname>
    <innerclass refid="classvector__tests" prot="public">vector_tests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="vector__tests_8cc_1a360a8b1a869f97151fe26e17b6288a87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_array_add0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_array_add0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="167" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a472e5a10fc8a64c0eaa1d4aa4b805c80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_array_add3)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_array_add3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="168" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a91a434e16cf52b8d9ebc14bc7ed23111" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_vector_add0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_vector_add0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="169" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a3d67a5dea31630bc348ec62efea985b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_vector_add4)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_vector_add4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="170" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="170" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a13e0dfdccdcde626cad6ec66d78c3890" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_vector_add6)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_vector_add6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="171" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="171" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a70fdc04e43ee2a2350f6ac6f36f3f6bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_array_add0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_array_add0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="173" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="173" bodyend="173"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a88454c25ffc05b6850ffd2b3abca4e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_array_add3)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_array_add3</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="174" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="174" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a4343607f83be1ed959f4c4bb79d8e821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_vector_add0)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_vector_add0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="175" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="175" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1af730eb274b7a6413e318cd5bb60ac01a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_vector_add4)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_vector_add4</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="176" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="176" bodyend="176"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a7ca170b6f3cc74c05bb340c64aacd159" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_vector_add6)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_vector_add6</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="177" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="177" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1ab016627762d3aae5827446acd2000587" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_device_vector_add)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_device_vector_add</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="179" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="179" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1aa1718cf4d193613904d963d1e8f75440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_device_vector_add)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_device_vector_add</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="180" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1ad5bf4dcad523b4cffe7a5ad6cd22516b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_cpu_device_vector_fibonacci)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_cpu_device_vector_fibonacci</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="182" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="182" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="vector__tests_8cc_1a49df242fc825d543927ab712eb186542" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(vector_tests, test_gpu_device_vector_fibonacci)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classvector__tests" kindref="compound">vector_tests</ref></type>
        </param>
        <param>
          <type>test_gpu_device_vector_fibonacci</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc" line="183" column="1" bodyfile="src/icrar/leap-accelerate/tests/math/vector_tests.cc" bodystart="183" bodyend="183"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/vector_tests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="IntegrationTests_8cc" kind="file" language="C++">
    <compoundname>IntegrationTests.cc</compoundname>
    <innerclass refid="classicrar_1_1IntegrationTests" prot="public">icrar::IntegrationTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/IntegrationTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MetaDataTests_8cc" kind="file" language="C++">
    <compoundname>MetaDataTests.cc</compoundname>
    <innerclass refid="classicrar_1_1MetaDataTests" prot="public">icrar::MetaDataTests</innerclass>
    <innernamespace refid="namespaceicrar">icrar</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/MetaDataTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="MSUtilsTests_8cc" kind="file" language="C++">
    <compoundname>MSUtilsTests.cc</compoundname>
    <innerclass refid="classMSUtilsTests" prot="public">MSUtilsTests</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="MSUtilsTests_8cc_1aaadb7001ea7ce05e231c466f50c83d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MSUtilsTests, test_read_coords)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMSUtilsTests" kindref="compound">MSUtilsTests</ref></type>
        </param>
        <param>
          <type>test_read_coords</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="249" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="249" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="MSUtilsTests_8cc_1aa74589950813ba9f5bbad0cb436effb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type/>
        <definition>TEST_F</definition>
        <argsstring>(MSUtilsTests, test_read_vis)</argsstring>
        <name>TEST_F</name>
        <param>
          <type><ref refid="classMSUtilsTests" kindref="compound">MSUtilsTests</ref></type>
        </param>
        <param>
          <type>test_read_vis</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" line="250" column="1" bodyfile="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc" bodystart="250" bodyend="250"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/ms/MSUtilsTests.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="test__helper_8cc" kind="file" language="C++">
    <compoundname>test_helper.cc</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__helper_8cc_1abd00b4c3a9cea23c9bf84871494dd856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_cd</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;expected, const std::complex&lt; double &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_near_cd</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="27" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="27" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a340380ee67ab998c7f24f8e01f5bdece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_matrix_near</definition>
        <argsstring>(const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;expected, const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near</name>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, -1 &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="41" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="41" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a26c07e80f792226914c4290f7a60793c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_i</definition>
        <argsstring>(const Eigen::MatrixXi &amp;expected, const Eigen::MatrixXi &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_i</name>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="66" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a258eff9ff69cf492bba2bd7c2b01ac17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_d</definition>
        <argsstring>(const Eigen::MatrixXd &amp;expected, const Eigen::MatrixXd &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_d</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="71" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="71" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a205ecd545c971a3cb4b71466bcb48df1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_d</definition>
        <argsstring>(const Eigen::Matrix3d &amp;expected, const Eigen::Matrix3d &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_d</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="76" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="76" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a49337840844810c8db75cf984bcf0c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_cd</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;expected, const Eigen::MatrixXcd &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_cd</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="101" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="101" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a91bbacc5affd89e3f00004aa9a13366b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_vector_near</definition>
        <argsstring>(const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;expected, const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near</name>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix&lt; T, -1, 1 &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="107" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="107" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a20e7a70bde960e3b2b979ed136fd4a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_vector_near_i</definition>
        <argsstring>(const Eigen::VectorXi &amp;expected, const Eigen::VectorXi &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near_i</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="129" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="129" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1add09ab76f84d411b2612ae55771e698b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_vector_near_d</definition>
        <argsstring>(const Eigen::VectorXd &amp;expected, const Eigen::VectorXd &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near_d</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="134" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="134" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a8aace1d6c9ba7b64129b73d0a685862a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_vector_near</definition>
        <argsstring>(const std::vector&lt; T &gt; &amp;expected, const std::vector&lt; T &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near</name>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="140" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="140" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a12ac13675659f908ce3d99bb6ce0d450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_vector_near_d</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;expected, const std::vector&lt; double &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near_d</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="161" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="161" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8cc_1a89b36d0555c8e927df7c82446481ac61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_metadata_eq</definition>
        <argsstring>(const icrar::cpu::MetaData &amp;expected, const icrar::cpu::MetaData &amp;actual, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_metadata_eq</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.cc" line="166" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="166" bodyend="208"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/test_helper.cc"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="test__helper_8h" kind="file" language="C++">
    <compoundname>test_helper.h</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="test__helper_8h_1abd00b4c3a9cea23c9bf84871494dd856" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_near_cd</definition>
        <argsstring>(const std::complex&lt; double &gt; &amp;expected, const std::complex&lt; double &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_near_cd</name>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::complex&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ICRAR - International Centre for Radio Astronomy Research (c) UWA - The University of Western Australia Copyright by UWA(in the framework of the ICRAR) All rights reserved</para>
<para>This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version.</para>
<para>This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the GNU Lesser General Public License for more details.</para>
<para>You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 - 1307 USA </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="35" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="27" bodyend="38" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="35" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a26c07e80f792226914c4290f7a60793c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_i</definition>
        <argsstring>(const Eigen::MatrixXi &amp;expected, const Eigen::MatrixXi &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_i</name>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="38" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="66" bodyend="69" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="38" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a258eff9ff69cf492bba2bd7c2b01ac17" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_d</definition>
        <argsstring>(const Eigen::MatrixXd &amp;expected, const Eigen::MatrixXd &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_d</name>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="41" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="71" bodyend="74" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="41" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1ac3f064b9c7b7645e9bb5a2ef59ed56cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_meq3d</definition>
        <argsstring>(const Eigen::Matrix3d &amp;expected, const Eigen::Matrix3d &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_meq3d</name>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Matrix3d &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="42" column="6" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="42" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a49337840844810c8db75cf984bcf0c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_matrix_near_cd</definition>
        <argsstring>(const Eigen::MatrixXcd &amp;expected, const Eigen::MatrixXcd &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_matrix_near_cd</name>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::MatrixXcd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="45" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="101" bodyend="104" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="45" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a20e7a70bde960e3b2b979ed136fd4a38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_vector_near_i</definition>
        <argsstring>(const Eigen::VectorXi &amp;expected, const Eigen::VectorXi &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near_i</name>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXi &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="48" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="129" bodyend="132" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="48" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1add09ab76f84d411b2612ae55771e698b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_vector_near_d</definition>
        <argsstring>(const Eigen::VectorXd &amp;expected, const Eigen::VectorXd &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near_d</name>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::VectorXd &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="51" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="134" bodyend="137" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="51" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a12ac13675659f908ce3d99bb6ce0d450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_vector_near_d</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;expected, const std::vector&lt; double &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_vector_near_d</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="53" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="161" bodyend="164" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="53" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a6e3fc459b0115453cc05b09f6ca9d3e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void assert_teq</definition>
        <argsstring>(const Eigen::Tensor&lt; T, 3 &gt; &amp;expected, const Eigen::Tensor&lt; T, 3 &gt; &amp;actual, double tolerance, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_teq</name>
        <param>
          <type>const Eigen::Tensor&lt; T, 3 &gt; &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const Eigen::Tensor&lt; T, 3 &gt; &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>double</type>
          <declname>tolerance</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="56" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.h" bodystart="56" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="test__helper_8h_1a89b36d0555c8e927df7c82446481ac61" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void assert_metadata_eq</definition>
        <argsstring>(const icrar::cpu::MetaData &amp;expected, const icrar::cpu::MetaData &amp;actual, std::string ln, std::string rn, std::string file, int line)</argsstring>
        <name>assert_metadata_eq</name>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>expected</declname>
        </param>
        <param>
          <type>const <ref refid="classicrar_1_1cpu_1_1MetaData" kindref="compound">icrar::cpu::MetaData</ref> &amp;</type>
          <declname>actual</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>ln</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>rn</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int</type>
          <declname>line</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/icrar/leap-accelerate/tests/test_helper.h" line="90" column="6" bodyfile="src/icrar/leap-accelerate/tests/test_helper.cc" bodystart="166" bodyend="208" declfile="src/icrar/leap-accelerate/tests/test_helper.h" declline="90" declcolumn="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/test_helper.h"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="version_8txt" kind="file" language="C++">
    <compoundname>version.txt</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="version.txt"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_CMakeStyleGuide" kind="page">
    <compoundname>md_docs_CMakeStyleGuide</compoundname>
    <title>CMake Style Guide</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>See <ulink url="https://cliutils.gitlab.io/modern-cmake/">https://cliutils.gitlab.io/modern-cmake/</ulink> </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_CPlusPlusStyleGuide" kind="page">
    <compoundname>md_docs_CPlusPlusStyleGuide</compoundname>
    <title>C++ Style Guide</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Refer to:<itemizedlist>
<listitem><para><ulink url="https://github.com/ska-telescope/developer.skatelescope.org/blob/master/src/development/cplusplus-codeguide.rst">https://github.com/ska-telescope/developer.skatelescope.org/blob/master/src/development/cplusplus-codeguide.rst</ulink></para>
</listitem></itemizedlist>
</para>
<sect1 id="md_docs_CPlusPlusStyleGuide_1autotoc_md2">
<title>Naming Conventions</title>
<sect2 id="md_docs_CPlusPlusStyleGuide_1autotoc_md3">
<title>Extra</title>
<para>Refer to:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://github.com/isocpp/CppCoreGuidelines">https://github.com/isocpp/CppCoreGuidelines</ulink></para>
</listitem><listitem><para><ulink url="https://google.github.io/styleguide/cppguide.html">https://google.github.io/styleguide/cppguide.html</ulink> </para>
</listitem></itemizedlist>
</para>
</sect2>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_docs_Submodules" kind="page">
    <compoundname>md_docs_Submodules</compoundname>
    <title>Pull Submodules</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>git submodule update <ndash/>init <ndash/>recursive</para>
<sect1 id="md_docs_Submodules_1autotoc_md5">
<title>Add Submodules</title>
<para>git submodule add <ndash/>name gtest-1.8.1 <ulink url="https://github.com/google/googletest.git">https://github.com/google/googletest.git</ulink> external/gtest-1.8.1 git submodule add <ndash/>name cmake-modules <ulink url="https://gitlab.com/ska-telescope/cmake-modules.git">https://gitlab.com/ska-telescope/cmake-modules.git</ulink> external/cmake-modules git submodule add <ndash/>name eigen-3.3.90 <ulink url="https://gitlab.com/libeigen/eigen.git">https://gitlab.com/libeigen/eigen.git</ulink> external/eigen-3.3.90 git submodule add <ndash/>name rapidjson-1.1.0 <ulink url="https://github.com/Tencent/rapidjson.git">https://github.com/Tencent/rapidjson.git</ulink> external/rapidjson-1.1.0 </para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_README" kind="page">
    <compoundname>md_README</compoundname>
    <title>LEAP Accelerate</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><image type="html" name="https://img.shields.io/badge/license-LGPL_2.1-blue" inline="yes"/>
 <ulink url="https://travis-ci.com/ICRAR/leap-accelerate"><image type="html" name="https://travis-ci.com/ICRAR/leap-accelerate.svg?token=1YzqBsytWggkjwq3sjZP&amp;branch=master" inline="yes"/>
</ulink></para>
<para>Low-frequency Excision of the Atmosphere in Parallel (LEAP) Calibration using GPU acceleration.</para>
<para>LEAP-Accelerate includes:</para>
<para><itemizedlist>
<listitem><para>leap-accelerate: a shared library for gpu accelerated direction centering and phase calibration</para>
</listitem><listitem><para>leap-accelerate-cli: a CLI interface for I/O datastream or plasma data access</para>
</listitem><listitem><para>leap-accelerate-client: a socket client interface for processing data from a LEAP-Cal server</para>
</listitem><listitem><para>leap-accelerate-server: a socket server interface for dispatching data processing to LEAP-Cal clients</para>
</listitem></itemizedlist>
</para>
<sect1 id="md_README_1autotoc_md7">
<title>Build</title>
<sect2 id="md_README_1autotoc_md8">
<title>Linux</title>
<para><computeroutput>export CUDA_HOME=/usr/local/cuda</computeroutput></para>
<para><computeroutput>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64</computeroutput></para>
<para><computeroutput>export PATH=$PATH:$CUDA_HOME/bin</computeroutput></para>
<para><computeroutput>mkdir -p build/linux/{Debug,Release} &amp;&amp; cd build/linux</computeroutput></para>
<sect3 id="md_README_1autotoc_md9">
<title>Debug</title>
<para><computeroutput>cd Debug</computeroutput></para>
<para><computeroutput>cmake ../../ -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DCMAKE_BUILD_TYPE=Debug</computeroutput></para>
<para>(with tracing):</para>
<para><computeroutput>cmake ../../ -DCMAKE_CXX_FLAGS_DEBUG="-g -O1" -DTRACE=ON -DCMAKE_BUILD_TYPE=Debug</computeroutput></para>
</sect3>
<sect3 id="md_README_1autotoc_md10">
<title>Release</title>
<para><computeroutput>cd Release</computeroutput></para>
<para><computeroutput>cmake ../../ -DCMAKE_BUILD_TYPE=Release</computeroutput></para>
</sect3>
<sect3 id="md_README_1autotoc_md11">
<title>Linux Cluster</title>
<para><computeroutput>module load cmake/3.15.1 gcc/6.3.0 boost/1.66.0 casacore/3.1.2</computeroutput></para>
<para><computeroutput>module unload gfortran/default</computeroutput></para>
<para><computeroutput>module load isl/default</computeroutput></para>
<para><computeroutput>export CUDA_HOME=/usr/local/cuda</computeroutput></para>
<para><computeroutput>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${CUDA_HOME}/lib64:${CUDA_HOME}/extras/CUPTI/lib64</computeroutput></para>
<para><computeroutput>export PATH=$PATH:$CUDA_HOME/bin</computeroutput></para>
<para><computeroutput>mkdir -p build &amp;&amp; cd build</computeroutput></para>
<para><computeroutput>cmake ../../ -DCUDA_TOOLKIT_ROOT_DIR=$CUDA_HOME -DCUDA_HOST_COMPILER=g++ -DCASACORE_ROOT_DIR=$BLDR_CASACORE_BASE_PATH -DCMAKE_BUILD_TYPE=Release</computeroutput></para>
</sect3>
<sect3 id="md_README_1autotoc_md12">
<title>Ubuntu/Debian Dependencies</title>
<para>20.04 LTS</para>
<para><itemizedlist>
<listitem><para>sudo apt-get install gcc g++ gdb doxygen cmake casacore-dev clang-tidy-10 libboost1.71-all-dev libgsl-dev</para>
</listitem><listitem><para><ulink url="https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=2004&amp;target_type=deblocal">https://developer.nvidia.com/cuda-downloads?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=2004&amp;target_type=deblocal</ulink></para>
</listitem></itemizedlist>
</para>
<para>or</para>
<para><itemizedlist>
<listitem><para>sudo apt-get install nvidia-cuda-toolkit-gcc</para>
</listitem></itemizedlist>
</para>
<para>18.04 LTS</para>
<para><itemizedlist>
<listitem><para>sudo apt-get install gcc g++ gdb doxygen cmake casacore-dev clang-tidy-10 libboost1.65-all-dev libgsl-dev</para>
</listitem><listitem><para><ulink url="https://developer.nvidia.com/cuda-10.1-download-archive-update2?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=deblocal">https://developer.nvidia.com/cuda-10.1-download-archive-update2?target_os=Linux&amp;target_arch=x86_64&amp;target_distro=Ubuntu&amp;target_version=1804&amp;target_type=deblocal</ulink></para>
</listitem></itemizedlist>
</para>
<para>16.04 LTS</para>
<para><itemizedlist>
<listitem><para><ulink url="https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line">https://askubuntu.com/questions/355565/how-do-i-install-the-latest-version-of-cmake-from-the-command-line</ulink></para>
</listitem><listitem><para>sudo apt-get install gcc g++ gdb doxygen casacore-dev libboost1.58-all-dev libgsl-dev</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_README_1autotoc_md13">
<title>Recommended Versions Compatibility</title>
<para><itemizedlist>
<listitem><para>g++ 9.3.0</para>
</listitem><listitem><para>cuda 10.1</para>
</listitem><listitem><para>boost 1.71.0</para>
</listitem><listitem><para>casacore 3.1.2</para>
</listitem><listitem><para>eigen 3.3.90</para>
</listitem></itemizedlist>
</para>
</sect3>
<sect3 id="md_README_1autotoc_md14">
<title>Minimum Versions Compatibility</title>
<para><itemizedlist>
<listitem><para>g++ 6.3.0</para>
</listitem><listitem><para>cuda 9.0</para>
</listitem><listitem><para>boost 1.63.0 (1.55.0 available)</para>
</listitem><listitem><para>cmake 3.15.1</para>
</listitem><listitem><para>casacore 3.1.2</para>
</listitem></itemizedlist>
</para>
</sect3>
</sect2>
</sect1>
<sect1 id="md_README_1autotoc_md15">
<title>Test</title>
<para>Testing provided via googletest. To test using CTest use the following command in build/linux:</para>
<para><computeroutput>make test</computeroutput> or <computeroutput>ctest</computeroutput></para>
<para>for verbose output use:</para>
<para><computeroutput>ctest --verbose</computeroutput></para>
<para>To test using the google test runner, the test binaries can be executed directly using the following commands:</para>
<para><computeroutput>./src/icrar/leap-accelerate/tests/LeapAccelerate.Tests</computeroutput> <computeroutput>./src/icrar/leap-accelerate-cli/tests/LeapAccelerateCLI.Tests</computeroutput></para>
</sect1>
<sect1 id="md_README_1autotoc_md16">
<title>Doxygen</title>
<para>Doxygen is generated with the following target:</para>
<para><computeroutput>make doxygen</computeroutput></para>
<para>Generated doxygen is available at the following file location:</para>
<para><computeroutput>src/out/html/index.html</computeroutput></para>
</sect1>
<sect1 id="md_README_1autotoc_md17">
<title>Run CLI</title>
<para><computeroutput>./src/icrar/leap-accelerate-cli/LeapAccelerateCLI</computeroutput></para>
<para>or</para>
<para><computeroutput>./bin/LeapAccelerateCLI</computeroutput></para>
</sect1>
<sect1 id="md_README_1autotoc_md18">
<title>Profiling</title>
<para><itemizedlist>
<listitem><para>nvprof</para>
</listitem><listitem><para>gprof</para>
</listitem><listitem><para>google-perftools </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_src_icrar_leap-accelerate_math_cuda_ReadMe" kind="page">
    <compoundname>md_src_icrar_leap-accelerate_math_cuda_ReadMe</compoundname>
    <title>leap-accelerate cuda</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This module within leap-accelerate provides cuda acceleration for common math and algorithmic operations.</para>
<para>Cuda files here are compiled by nvcc for linking with leap-accelerate.</para>
<sect1 id="md_src_icrar_leap-accelerate_math_cuda_ReadMe_1autotoc_md20">
<title>File types</title>
<para><itemizedlist>
<listitem><para>*.cu - Cuda C++ source file targetted by nvcc.</para>
</listitem><listitem><para>*.cuh - Cuda C++ header containing cuda only code. To access functions here eslewhere they must be exposed via a *.h file</para>
</listitem><listitem><para>*.h - C++ compatible Cuda header. These headers may be included by both C++ and CUDA source files. </para>
</listitem></itemizedlist>
</para>
</sect1>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="md_testdata_README" kind="page">
    <compoundname>md_testdata_README</compoundname>
    <title>leap-accelerate test data</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This folder is hosted on CloudStor and can be retrieved via running the install.sh script. </para>
    </detaileddescription>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_aa2834aa82004298034bf6213bcf1d9c" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm</compoundname>
    <innerdir refid="dir_eebb919dfbd18e4c07ad51db57bd9d71">src/icrar/leap-accelerate/algorithm/casa</innerdir>
    <innerdir refid="dir_fff48974e8bcd8fd2eb2a194743508e4">src/icrar/leap-accelerate/algorithm/cpu</innerdir>
    <innerdir refid="dir_e692bd0fe16eb358a9e42d8cc9465ef5">src/icrar/leap-accelerate/algorithm/cuda</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_51874acfb9fb847bec886c1bd064b075" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/algorithm</compoundname>
    <innerfile refid="PhaseRotateTests_8cc">PhaseRotateTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/algorithm/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_16a89613ca6316255cb814b796541e11" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math/casa</compoundname>
    <innerfile refid="matrix_8cc">matrix.cc</innerfile>
    <innerfile refid="casa_2matrix_8h">matrix.h</innerfile>
    <innerfile refid="matrix__invert_8cc">matrix_invert.cc</innerfile>
    <innerfile refid="casa_2matrix__invert_8h">matrix_invert.h</innerfile>
    <innerfile refid="casa_2vector_8cc">vector.cc</innerfile>
    <innerfile refid="casa_2vector_8h">vector.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/casa/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_622501f2e5a0e7d534e134b2c7180b08" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model/casa</compoundname>
    <innerfile refid="casa_2CalibrateResult_8h">CalibrateResult.h</innerfile>
    <innerfile refid="casa_2Integration_8cc">Integration.cc</innerfile>
    <innerfile refid="casa_2Integration_8h">Integration.h</innerfile>
    <innerfile refid="casa_2MetaData_8cc">MetaData.cc</innerfile>
    <innerfile refid="casa_2MetaData_8h">MetaData.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/casa/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_eebb919dfbd18e4c07ad51db57bd9d71" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm/casa</compoundname>
    <innerfile refid="leap-accelerate_2algorithm_2casa_2Calibrate_8h">Calibrate.h</innerfile>
    <innerfile refid="casa_2PhaseRotate_8cc">PhaseRotate.cc</innerfile>
    <innerfile refid="casa_2PhaseRotate_8h">PhaseRotate.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/casa/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_55f26c15f81c6b0da5ac2cc7bf53d955" kind="dir">
    <compoundname>src/icrar/leap-accelerate/common</compoundname>
    <innerfile refid="complex__extensions_8h">complex_extensions.h</innerfile>
    <innerfile refid="constants_8h">constants.h</innerfile>
    <innerfile refid="eigen__extensions_8h">eigen_extensions.h</innerfile>
    <innerfile refid="MVDirection_8h">MVDirection.h</innerfile>
    <innerfile refid="MVPosition_8h">MVPosition.h</innerfile>
    <innerfile refid="MVuvw_8h">MVuvw.h</innerfile>
    <innerfile refid="stream__extensions_8h">stream_extensions.h</innerfile>
    <innerfile refid="Tensor3X_8h">Tensor3X.h</innerfile>
    <innerfile refid="vector__extensions_8h">vector_extensions.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/common/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_ee674cc579a6f82bd2447608147ad2b6" kind="dir">
    <compoundname>src/icrar/leap-accelerate/core</compoundname>
    <innerfile refid="compute__implementation_8cc">compute_implementation.cc</innerfile>
    <innerfile refid="compute__implementation_8h">compute_implementation.h</innerfile>
    <innerfile refid="git__revision_8h">git_revision.h</innerfile>
    <innerfile refid="logging_8cc">logging.cc</innerfile>
    <innerfile refid="logging_8h">logging.h</innerfile>
    <innerfile refid="profiling__timer_8h">profiling_timer.h</innerfile>
    <innerfile refid="version_8cc">version.cc</innerfile>
    <innerfile refid="version_8h">version.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/core/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7229c8e8eacb0bb51ad1ee28332f16d0" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math/cpu</compoundname>
    <innerfile refid="matrix3d_8h">matrix3d.h</innerfile>
    <innerfile refid="cpu_2matrix__invert_8h">matrix_invert.h</innerfile>
    <innerfile refid="cpu_2vector_8cc">vector.cc</innerfile>
    <innerfile refid="cpu_2vector_8h">vector.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_0a4b09224a839f8b9117516e3ea32ac2" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model/cpu</compoundname>
    <innerfile refid="CalibrateResult_8cc">CalibrateResult.cc</innerfile>
    <innerfile refid="cpu_2CalibrateResult_8h">CalibrateResult.h</innerfile>
    <innerfile refid="cpu_2Integration_8cc">Integration.cc</innerfile>
    <innerfile refid="cpu_2Integration_8h">Integration.h</innerfile>
    <innerfile refid="cpu_2MetaData_8cc">MetaData.cc</innerfile>
    <innerfile refid="cpu_2MetaData_8h">MetaData.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_fff48974e8bcd8fd2eb2a194743508e4" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm/cpu</compoundname>
    <innerfile refid="cpu_2PhaseRotate_8cc">PhaseRotate.cc</innerfile>
    <innerfile refid="cpu_2PhaseRotate_8h">PhaseRotate.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cpu/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_453eee146edd9e4714fb536e9601f4b1" kind="dir">
    <compoundname>src/icrar/leap-accelerate/cuda</compoundname>
    <innerfile refid="cuda__info_8h">cuda_info.h</innerfile>
    <innerfile refid="device__matrix_8h">device_matrix.h</innerfile>
    <innerfile refid="device__tensor_8h">device_tensor.h</innerfile>
    <innerfile refid="device__vector_8h">device_vector.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_5f8ec6869d7787d3967eefe8107f9ddc" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math/cuda</compoundname>
    <innerfile refid="cuda_2matrix_8h">matrix.h</innerfile>
    <innerfile refid="matrix__multiply_8h">matrix_multiply.h</innerfile>
    <innerfile refid="matrix__transpose_8h">matrix_transpose.h</innerfile>
    <innerfile refid="cuda_2vector_8h">vector.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_fcf279b433fb36f94b1a0018f1ca12c8" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model/cuda</compoundname>
    <innerfile refid="DeviceIntegration_8h">DeviceIntegration.h</innerfile>
    <innerfile refid="DeviceMetaData_8h">DeviceMetaData.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_e692bd0fe16eb358a9e42d8cc9465ef5" kind="dir">
    <compoundname>src/icrar/leap-accelerate/algorithm/cuda</compoundname>
    <innerfile refid="cuda_2PhaseRotate_8h">PhaseRotate.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/algorithm/cuda/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_49e56c817e5e54854c35e136979f97ca" kind="dir">
    <compoundname>docs</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="docs/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_d3c419b6ec72671e9dcddfe0229ebd84" kind="dir">
    <compoundname>src/icrar/leap-accelerate/exception</compoundname>
    <innerfile refid="exception_8cc">exception.cc</innerfile>
    <innerfile refid="exception_8h">exception.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/exception/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_2cd41a2057587d0316622d61ff53471e" kind="dir">
    <compoundname>src/icrar</compoundname>
    <innerdir refid="dir_fd492ac65c9e5ad6fc88c528b024e268">src/icrar/leap-accelerate</innerdir>
    <innerdir refid="dir_8e79c837f989c64fbab75392435c0e1b">src/icrar/leap-accelerate-cli</innerdir>
    <innerdir refid="dir_d47051684cb1e84a74c995c85b0dcacb">src/icrar/leap-accelerate-client</innerdir>
    <innerdir refid="dir_49df4b5a7615f444f16805bdb56bfbca">src/icrar/leap-accelerate-server</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_1ed6b40732ea80a361d4a0749e3d651a" kind="dir">
    <compoundname>src/icrar/leap-accelerate/json</compoundname>
    <innerfile refid="json__helper_8cc">json_helper.cc</innerfile>
    <innerfile refid="json__helper_8h">json_helper.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/json/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_fd492ac65c9e5ad6fc88c528b024e268" kind="dir">
    <compoundname>src/icrar/leap-accelerate</compoundname>
    <innerdir refid="dir_aa2834aa82004298034bf6213bcf1d9c">src/icrar/leap-accelerate/algorithm</innerdir>
    <innerdir refid="dir_55f26c15f81c6b0da5ac2cc7bf53d955">src/icrar/leap-accelerate/common</innerdir>
    <innerdir refid="dir_ee674cc579a6f82bd2447608147ad2b6">src/icrar/leap-accelerate/core</innerdir>
    <innerdir refid="dir_453eee146edd9e4714fb536e9601f4b1">src/icrar/leap-accelerate/cuda</innerdir>
    <innerdir refid="dir_d3c419b6ec72671e9dcddfe0229ebd84">src/icrar/leap-accelerate/exception</innerdir>
    <innerdir refid="dir_1ed6b40732ea80a361d4a0749e3d651a">src/icrar/leap-accelerate/json</innerdir>
    <innerdir refid="dir_7c8ab01d93454e9bb8fb0b096c0ad427">src/icrar/leap-accelerate/math</innerdir>
    <innerdir refid="dir_7874ac982d20d0c4bbbd17cd287af407">src/icrar/leap-accelerate/model</innerdir>
    <innerdir refid="dir_65ee2404d341e2fba9cd2c97e8248483">src/icrar/leap-accelerate/ms</innerdir>
    <innerdir refid="dir_2613d10453c7c37d8dc303a28536b90e">src/icrar/leap-accelerate/tests</innerdir>
    <innerfile refid="leap-accelerate_2pch_8h">pch.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_8e79c837f989c64fbab75392435c0e1b" kind="dir">
    <compoundname>src/icrar/leap-accelerate-cli</compoundname>
    <innerdir refid="dir_1517fcff6d7bc7a29598b4cb536aec23">src/icrar/leap-accelerate-cli/tests</innerdir>
    <innerfile refid="leap-accelerate-cli_2main_8cc">main.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_d47051684cb1e84a74c995c85b0dcacb" kind="dir">
    <compoundname>src/icrar/leap-accelerate-client</compoundname>
    <innerdir refid="dir_e3297b8aa3e253452f0c38735b25a1d1">src/icrar/leap-accelerate-client/tests</innerdir>
    <innerfile refid="Calibrate_8cc">Calibrate.cc</innerfile>
    <innerfile refid="leap-accelerate-client_2Calibrate_8h">Calibrate.h</innerfile>
    <innerfile refid="leap__cal__client_8cc">leap_cal_client.cc</innerfile>
    <innerfile refid="leap__cal__client_8h">leap_cal_client.h</innerfile>
    <innerfile refid="LeapRemote_8cc">LeapRemote.cc</innerfile>
    <innerfile refid="LeapRemote_8h">LeapRemote.h</innerfile>
    <innerfile refid="remote__cal_8cc">remote_cal.cc</innerfile>
    <innerfile refid="remote__cal_8h">remote_cal.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_49df4b5a7615f444f16805bdb56bfbca" kind="dir">
    <compoundname>src/icrar/leap-accelerate-server</compoundname>
    <innerfile refid="leap__cal__server_8cc">leap_cal_server.cc</innerfile>
    <innerfile refid="leap__cal__server_8h">leap_cal_server.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-server/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7c8ab01d93454e9bb8fb0b096c0ad427" kind="dir">
    <compoundname>src/icrar/leap-accelerate/math</compoundname>
    <innerdir refid="dir_16a89613ca6316255cb814b796541e11">src/icrar/leap-accelerate/math/casa</innerdir>
    <innerdir refid="dir_7229c8e8eacb0bb51ad1ee28332f16d0">src/icrar/leap-accelerate/math/cpu</innerdir>
    <innerdir refid="dir_5f8ec6869d7787d3967eefe8107f9ddc">src/icrar/leap-accelerate/math/cuda</innerdir>
    <innerfile refid="casacore__helper_8h">casacore_helper.h</innerfile>
    <innerfile refid="math_8cc">math.cc</innerfile>
    <innerfile refid="math_8h">math.h</innerfile>
    <innerfile refid="math__conversion_8cc">math_conversion.cc</innerfile>
    <innerfile refid="math__conversion_8h">math_conversion.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/math/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_e6c91ba553a8d18b39268705c7973dfe" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/math</compoundname>
    <innerfile refid="casacore__eigen__tests_8cc">casacore_eigen_tests.cc</innerfile>
    <innerfile refid="eigen__tests_8cc">eigen_tests.cc</innerfile>
    <innerfile refid="linear__math__tests_8cc">linear_math_tests.cc</innerfile>
    <innerfile refid="matrix__tests_8cc">matrix_tests.cc</innerfile>
    <innerfile refid="vector__tests_8cc">vector_tests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/math/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_944f05e549f1b190b296bbbff5f9b99c" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/model</compoundname>
    <innerfile refid="IntegrationTests_8cc">IntegrationTests.cc</innerfile>
    <innerfile refid="MetaDataTests_8cc">MetaDataTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/model/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_7874ac982d20d0c4bbbd17cd287af407" kind="dir">
    <compoundname>src/icrar/leap-accelerate/model</compoundname>
    <innerdir refid="dir_622501f2e5a0e7d534e134b2c7180b08">src/icrar/leap-accelerate/model/casa</innerdir>
    <innerdir refid="dir_0a4b09224a839f8b9117516e3ea32ac2">src/icrar/leap-accelerate/model/cpu</innerdir>
    <innerdir refid="dir_fcf279b433fb36f94b1a0018f1ca12c8">src/icrar/leap-accelerate/model/cuda</innerdir>
    <innerfile refid="band__data_8h">band_data.h</innerfile>
    <innerfile refid="visibility_8h">visibility.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/model/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_317f6b0ce6e2d283c50b3358c7ad1a33" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests/ms</compoundname>
    <innerfile refid="MSUtilsTests_8cc">MSUtilsTests.cc</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/ms/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_65ee2404d341e2fba9cd2c97e8248483" kind="dir">
    <compoundname>src/icrar/leap-accelerate/ms</compoundname>
    <innerfile refid="MeasurementSet_8cc">MeasurementSet.cc</innerfile>
    <innerfile refid="MeasurementSet_8h">MeasurementSet.h</innerfile>
    <innerfile refid="utils_8cc">utils.cc</innerfile>
    <innerfile refid="utils_8h">utils.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/ms/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_68267d1309a1af8e8297ef4c3efbcdba" kind="dir">
    <compoundname>src</compoundname>
    <innerdir refid="dir_2cd41a2057587d0316622d61ff53471e">src/icrar</innerdir>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_4264a838ab1e3be40083ab3fd46c1232" kind="dir">
    <compoundname>testdata</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="testdata/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_1517fcff6d7bc7a29598b4cb536aec23" kind="dir">
    <compoundname>src/icrar/leap-accelerate-cli/tests</compoundname>
    <innerfile refid="CommandLineTests_8cc">CommandLineTests.cc</innerfile>
    <innerfile refid="E2EPerformanceTests_8cc">E2EPerformanceTests.cc</innerfile>
    <innerfile refid="JSONHelperTests_8cc">JSONHelperTests.cc</innerfile>
    <innerfile refid="leap-accelerate-cli_2tests_2main_8cc">main.cc</innerfile>
    <innerfile refid="leap-accelerate-cli_2tests_2pch_8h">pch.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-cli/tests/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_e3297b8aa3e253452f0c38735b25a1d1" kind="dir">
    <compoundname>src/icrar/leap-accelerate-client/tests</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate-client/tests/"/>
  </compounddef><compounddef xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" id="dir_2613d10453c7c37d8dc303a28536b90e" kind="dir">
    <compoundname>src/icrar/leap-accelerate/tests</compoundname>
    <innerdir refid="dir_51874acfb9fb847bec886c1bd064b075">src/icrar/leap-accelerate/tests/algorithm</innerdir>
    <innerdir refid="dir_e6c91ba553a8d18b39268705c7973dfe">src/icrar/leap-accelerate/tests/math</innerdir>
    <innerdir refid="dir_944f05e549f1b190b296bbbff5f9b99c">src/icrar/leap-accelerate/tests/model</innerdir>
    <innerdir refid="dir_317f6b0ce6e2d283c50b3358c7ad1a33">src/icrar/leap-accelerate/tests/ms</innerdir>
    <innerfile refid="gtest__helper_8h">gtest_helper.h</innerfile>
    <innerfile refid="leap-accelerate_2tests_2main_8cc">main.cc</innerfile>
    <innerfile refid="leap-accelerate_2tests_2pch_8h">pch.h</innerfile>
    <innerfile refid="test__helper_8cc">test_helper.cc</innerfile>
    <innerfile refid="test__helper_8h">test_helper.h</innerfile>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="src/icrar/leap-accelerate/tests/"/>
  </compounddef></doxygen>