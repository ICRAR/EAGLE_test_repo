<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="JacalBPCalibrator_8cc" kind="file" language="C++">
    <compoundname>JacalBPCalibrator.cc</compoundname>
    <innernamespace refid="namespaceaskap">askap</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="JacalBPCalibrator_8cc_1a96d32795c1a116ea855bca7456d9101b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ASKAP_LOGGER</definition>
        <argsstring>(logger, &quot;.parallel&quot;)</argsstring>
        <name>ASKAP_LOGGER</name>
        <param>
          <type>logger</type>
        </param>
        <param>
          <type>&quot;.parallel&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Usage in graphs:</para><para>The assumption is that there will be a scatter over some number of channels at the moment a drop only does a single channel in its allocation - but I might be able to change that.</para><para>The output needs to be attached to a drop outside the scatter - or perhaps talk to Chen about a /// gather </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="jacal/factory/JacalBPCalibrator.cc" line="44" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>JacalBPCalibrator: part of the specialised tool to do optimised bandpass calibration with limited functionality. This class <verbatim> * solves for bandpass only
 * works only with preaveraging calibration approach
 * does not support multiple chunks in time (i.e. only one solution is made for the whole dataset)
 * does not support data distribution except per beam
 * does not support a distributed model (e.h. with individual workers dealing with individual Taylor terms)
 * does not require exact match between number of workers and number of channel chunks, data are dealt with
   serially by each worker with multiple iterations over data, if required.
 * solves normal equations at the worker level in the parallel case
</verbatim></para><para>This specialised tool is simply all that is required to get bandpass calibration into a Daliuge drop <simplesect kind="copyright"><para>(c) 2018 CSIRO Australia Telescope National Facility (ATNF) Commonwealth Scientific and Industrial Research Organisation (CSIRO) PO Box 76, Epping NSW 1710, Australia <ulink url="mailto:atnf-enquiries@csiro.au">atnf-enquiries@csiro.au</ulink></para></simplesect>
This file is part of the JACAL software distribution.</para><para>This file is based in part on BPCalibratorParallel.cc from the ASKAP distribution </para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Include<sp/>own<sp/>header<sp/>file<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="JacalBPCalibrator_8h" kindref="compound">JacalBPCalibrator.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="NEUtils_8h" kindref="compound">NEUtils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="DaliugeApplication_8h" kindref="compound">daliuge/DaliugeApplication.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>logging<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rtobar:<sp/>is<sp/>this<sp/>really<sp/>needed?<sp/>It<sp/>doesn&apos;t<sp/>ship<sp/>now<sp/>with<sp/>yandasoft</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(probably<sp/>an<sp/>oversight<sp/>though)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>#include<sp/>&lt;askap_synthesis.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/AskapLogging.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="JacalBPCalibrator_8cc_1a96d32795c1a116ea855bca7456d9101b" kindref="member">ASKAP_LOGGER</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;.parallel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>own<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/askap/AskapError.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/askap/AskapUtil.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Blob/BlobIStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Blob/BlobOStream.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/profile/AskapProfiler.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/dataaccess/TableDataSource.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/dataaccess/ParsetInterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/scimath/fitting/LinearSolver.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/scimath/fitting/GenericNormalEquations.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/scimath/fitting/Params.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/ImageFFTEquation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/SynthesisParamsHelper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/MEParsetInterface.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/CalibrationME.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/PreAvgCalMEBase.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/ComponentEquation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/NoXPolGain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/NoXPolFreqDependentGain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/NoXPolBeamIndependentGain.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/ImagingEquationAdapter.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/measurementequation/IMeasurementEquation.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/parallel/CalibratorParallel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/gridding/VisGridderFactory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/askapparallel/AskapParallel.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Common/ParameterSet.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/calibaccess/CalParamNameHelper.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;askap/calibaccess/CalibAccessFactory.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="comment">//<sp/>casa<sp/>includes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;casacore/casa/aips.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;casacore/casa/OS/Timer.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceaskap" kindref="compound">askap</ref><sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><ref refid="classaskap_1_1JacalBPCalibrator_1a117c1878d3d684910ec9b8732d8fa706" kindref="member">JacalBPCalibrator::JacalBPCalibrator</ref>(dlg_app_info<sp/>*raw_app)<sp/>:<sp/>DaliugeApplication(raw_app),</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsPerfectModel(new<sp/>scimath::Params()),<sp/>itsRefAntenna(-1),<sp/>itsSolutionID(-1),<sp/>itsSolutionIDValid(false),itsModel(new<sp/>scimath::Params()),itsSolver(scimath::Solver::ShPtr(new<sp/>scimath::Solver)),itsNe(new<sp/>scimath::ImagingNormalEquations(*itsModel))</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>this-&gt;itsChan<sp/>=<sp/>NEUtils::getChan(raw_app-&gt;uid);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;itsChan<sp/>&lt;<sp/>0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>outside<sp/>a<sp/>loop<sp/>we<sp/>are<sp/>going<sp/>to<sp/>do<sp/>this<sp/>ourselves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isMaster<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isWorker<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isParallel<sp/>=<sp/><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>we<sp/>are<sp/>in<sp/>a<sp/>loop<sp/>-<sp/>assume<sp/>it<sp/>is<sp/>over<sp/>frequency<sp/>and<sp/>all<sp/>work<sp/>is<sp/>distributed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isWorker<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isMaster<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;isParallel<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>only<sp/>beam<sp/>0<sp/>for<sp/>the<sp/>moment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>this-&gt;itsBeam<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">DaliugeApplication::ShPtr<sp/>JacalBPCalibrator::createDaliugeApplication(dlg_app_info<sp/>*raw_app)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>JacalBPCalibrator::ShPtr(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>JacalBPCalibrator(raw_app));</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>JacalBPCalibrator::init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>***arguments)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Argument<sp/>parsing<sp/>is<sp/>not<sp/>working<sp/>as<sp/>yet</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*parset_filename<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(1)<sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>**param<sp/>=<sp/>*arguments;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Sentinel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(param<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>any<sp/>params<sp/>I<sp/>might<sp/>need<sp/>go<sp/>here:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>filename:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>no<sp/>longer<sp/>required<sp/>as<sp/>input<sp/>comes<sp/>from<sp/>daliuge<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//if<sp/>(strcmp(param[0],<sp/>&quot;parset_filename&quot;)<sp/>==<sp/>0)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>parset_filename<sp/>=<sp/>strdup(param[1]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>arguments++;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>FIXME:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>This<sp/>should<sp/>be<sp/>here<sp/>but<sp/>I<sp/>could<sp/>not<sp/>get<sp/>a<sp/>boost<sp/>smart<sp/>pointer<sp/>to<sp/>work</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>to_app_data(app)-&gt;parset.reset(<sp/>new<sp/>LOFAR::ParameterSet(parset_filename));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>FIXME:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Arbitrarily<sp/>setting<sp/>frequency<sp/>selection<sp/>to<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>this-&gt;freqInterval<sp/>=<sp/>casacore::IPosition(2,0);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>this-&gt;timeInterval<sp/>=<sp/>casacore::IPosition(2,0);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>this-&gt;freqInterval[0]<sp/>=<sp/>this-&gt;itsChan;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>this-&gt;freqInterval[1]<sp/>=<sp/>this-&gt;itsChan+1;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>JacalBPCalibrator::run()<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Lets<sp/>get<sp/>the<sp/>key-value-parset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><ref refid="JacalBPCalibrator_8cc_1a96d32795c1a116ea855bca7456d9101b" kindref="member">ASKAP_LOGGER</ref>(logger,<sp/></highlight><highlight class="stringliteral">&quot;.run&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>itsModelInputs<sp/>=<sp/>get_inputs(</highlight><highlight class="stringliteral">&quot;Model&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buf[64*1024];</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n_read<sp/>=<sp/>input(</highlight><highlight class="stringliteral">&quot;Config&quot;</highlight><highlight class="normal">).read(buf,<sp/>64*1024);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n_read<sp/>==<sp/>64*1024)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>n_read--;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/>buf[n_read]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>LOFAR::ParameterSet<sp/>parset(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>parset.adoptBuffer(buf);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/>this-&gt;itsParset<sp/>=<sp/>parset.makeSubset(</highlight><highlight class="stringliteral">&quot;Cbpcalibrator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Bandpass<sp/>will<sp/>be<sp/>solved<sp/>for<sp/>using<sp/>a<sp/>specialised<sp/>pipeline&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isMaster)<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>solution<sp/>source<sp/>(or<sp/>sink<sp/>to<sp/>be<sp/>exact,<sp/>because<sp/>we&apos;re<sp/>writing<sp/>the<sp/>solution<sp/>here)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsSolutionSource<sp/>=<sp/>accessors::CalibAccessFactory::rwCalSolutionSource(this-&gt;itsParset);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPASSERT(itsSolutionSource);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isParallel)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>work<sp/>will<sp/>be<sp/>distributed<sp/>between<sp/>workers&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;The<sp/>work<sp/>will<sp/>be<sp/>done<sp/>in<sp/>the<sp/>serial<sp/>by<sp/>the<sp/>current<sp/>process&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>calAccType<sp/>=<sp/>this-&gt;itsParset.getString(</highlight><highlight class="stringliteral">&quot;calibaccess&quot;</highlight><highlight class="normal">,</highlight><highlight class="stringliteral">&quot;parset&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isWorker)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>datasets<sp/>(we<sp/>cannot<sp/>rely<sp/>on<sp/>the<sp/>code<sp/>in<sp/>base<sp/>classes<sp/>because<sp/>we<sp/>don&apos;t<sp/>distribute<sp/>by<sp/>node<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>setMeasurementSets(itsParset.getStringVector(</highlight><highlight class="stringliteral">&quot;dataset&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsSolver.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>scimath::LinearSolver(1e3));</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsSolver,<sp/></highlight><highlight class="stringliteral">&quot;Solver<sp/>not<sp/>defined<sp/>correctly&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>solver<sp/>parameters.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>solverType<sp/>=<sp/>itsParset.getString(</highlight><highlight class="stringliteral">&quot;solver&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;SVD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsSolver-&gt;setAlgorithm(solverType);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(solverType<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;LSQR&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;solver<sp/>type<sp/>LSQR&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/>solverParams<sp/>=<sp/>synthesis::CalibratorParallel::getLSQRSolverParameters(itsParset);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solverParams[</highlight><highlight class="stringliteral">&quot;nChan&quot;</highlight><highlight class="normal">]<sp/>=<sp/>itsParset.getString(</highlight><highlight class="stringliteral">&quot;nChan&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsSolver-&gt;setParameters(solverParams);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;solver<sp/>type<sp/>SVD&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(!itsParset.isDefined(</highlight><highlight class="stringliteral">&quot;refgain&quot;</highlight><highlight class="normal">),<sp/></highlight><highlight class="stringliteral">&quot;usage<sp/>of<sp/>refgain<sp/>is<sp/>deprecated,<sp/>define<sp/>reference<sp/>antenna<sp/>instead&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsRefAntenna<sp/>=<sp/>itsParset.getInt32(</highlight><highlight class="stringliteral">&quot;refantenna&quot;</highlight><highlight class="normal">,-1);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itsRefAntenna<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Phases<sp/>will<sp/>be<sp/>rotated,<sp/>so<sp/>antenna<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;itsRefAntenna&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>has<sp/>zero<sp/>phase<sp/>for<sp/>all<sp/>channels<sp/>and<sp/>beams<sp/>in<sp/>the<sp/>first<sp/>polarisation&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsRefAntenna<sp/>&lt;<sp/>static_cast&lt;int&gt;(nAnt()),<sp/></highlight><highlight class="stringliteral">&quot;Requested<sp/>reference<sp/>antenna<sp/>doesn&apos;t<sp/>exist,<sp/>nAnt=&quot;</highlight><highlight class="normal">&lt;&lt;nAnt());</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>phase<sp/>rotation<sp/>will<sp/>be<sp/>done<sp/>between<sp/>iterations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>sky<sp/>model,<sp/>populate<sp/>itsPerfectModel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>readModels();</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isParallel)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>work<sp/>units<sp/>in<sp/>the<sp/>parallel<sp/>case,<sp/>make<sp/>beams<sp/>the<sp/>first<sp/>(fastest<sp/>to<sp/>change)<sp/>parameter<sp/>to<sp/>achieve</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>greater<sp/>benefits<sp/>if<sp/>multiple<sp/>measurement<sp/>sets<sp/>are<sp/>present<sp/>(more<sp/>likely<sp/>to<sp/>be<sp/>scheduled<sp/>for<sp/>different<sp/>ranks)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Work<sp/>for<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nBeam()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>beams<sp/>and<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nChan()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>channels<sp/>will<sp/>be<sp/>split<sp/>between<sp/>ranks,<sp/>this<sp/>one<sp/>handles<sp/>a<sp/>single<sp/>channel<sp/>-<sp/>but<sp/>we<sp/>could<sp/>define<sp/>a<sp/>chunk&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>allocation<sp/>=<sp/>nChanPerRank();</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>casacore::IPosition<sp/>start(2,<sp/>this-&gt;itsBeam,<sp/>(this-&gt;itsChan)*allocation);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>casacore::IPosition<sp/>stop(2,<sp/>this-&gt;itsBeam,<sp/>(this-&gt;itsChan+1)*allocation-1);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,</highlight><highlight class="stringliteral">&quot;Allocation<sp/>of<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>allocation<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>starts<sp/>at<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>start<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>stop<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>stop);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsWorkUnitIterator.init(casacore::IPosition(2,<sp/>nBeam(),<sp/>nChan()),<sp/>start,<sp/>stop);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itsWorkUnitIterator.init(casacore::IPosition(2,<sp/>nBeam(),<sp/>nChan()),<sp/>1,<sp/>this-&gt;itsChan);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Initialised<sp/>iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK((measurementSets().size()<sp/>==<sp/>1)<sp/>||<sp/>(measurementSets().size()<sp/>==<sp/>nBeam()),</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>measurement<sp/>sets<sp/>given<sp/>in<sp/>the<sp/>parset<sp/>(&quot;</highlight><highlight class="normal">&lt;&lt;measurementSets().size()&lt;&lt;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;)<sp/>should<sp/>be<sp/>either<sp/>1<sp/>or<sp/>equal<sp/>the<sp/>number<sp/>of<sp/>beams<sp/>(&quot;</highlight><highlight class="normal">&lt;&lt;nBeam()&lt;&lt;</highlight><highlight class="stringliteral">&quot;)&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;isParallel)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>work<sp/>units<sp/>in<sp/>the<sp/>serial<sp/>case<sp/>-<sp/>all<sp/>work<sp/>to<sp/>be<sp/>done<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;All<sp/>work<sp/>for<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nBeam()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>beams<sp/>and<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nChan()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>channels<sp/>will<sp/>be<sp/>handled<sp/>by<sp/>this<sp/>rank&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsWorkUnitIterator.init(casacore::IPosition(2,<sp/>nBeam(),<sp/>nChan()));</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isMaster)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>only<sp/>one<sp/>rank<sp/>does<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;About<sp/>to<sp/>set<sp/>the<sp/>solution<sp/>accessor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itsSolutionIDValid)<sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>solution<sp/>ID<sp/>only<sp/>once,<sp/>the<sp/>results<sp/>can<sp/>come<sp/>in<sp/>random<sp/>order<sp/>and<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>accessor<sp/>is<sp/>responsible<sp/>for<sp/>aggregating<sp/>all<sp/>of<sp/>them<sp/>together.<sp/>This<sp/>is<sp/>done<sp/>based<sp/>on<sp/>this<sp/>ID.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//@todo<sp/>Can<sp/>probably<sp/>get<sp/>rid<sp/>of<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsSolutionID<sp/>=<sp/>itsSolutionSource-&gt;newSolutionID(solutionTime());</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsSolutionIDValid<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Have<sp/>set<sp/>solutionID&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isWorker)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>static<sp/>std::mutex<sp/>safety;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::lock_guard&lt;std::mutex&gt;<sp/>guard(safety);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>nCycles<sp/>=<sp/>this-&gt;parset().getInt32(</highlight><highlight class="stringliteral">&quot;ncycles&quot;</highlight><highlight class="normal">,<sp/>1);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(nCycles<sp/>&gt;=<sp/>0,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Number<sp/>of<sp/>calibration<sp/>iterations<sp/>should<sp/>be<sp/>a<sp/>non-negative<sp/>number,<sp/>you<sp/>have<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>nCycles);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itsWorkUnitIterator.origin();<sp/>itsWorkUnitIterator.hasMore();<sp/>itsWorkUnitIterator.next())<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>force<sp/>creation<sp/>of<sp/>the<sp/>new<sp/>measurement<sp/>equation<sp/>for<sp/>this<sp/>beam/channel<sp/>pair</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsEquation.reset();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;casacore::uInt,<sp/>casacore::uInt&gt;<sp/>indices<sp/>=<sp/>currentBeamAndChannel();</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Initialise<sp/>(unknowns<sp/>gains)<sp/>for<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;nAnt()&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>antennas<sp/>for<sp/>beam=&quot;</highlight><highlight class="normal">&lt;&lt;indices.first&lt;&lt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>channel=&quot;</highlight><highlight class="normal">&lt;&lt;indices.second);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;reset();</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(casacore::uInt<sp/>ant<sp/>=<sp/>0;<sp/>ant&lt;nAnt();<sp/>++ant)<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;add(accessors::CalParamNameHelper::paramName(ant,<sp/>indices.first,<sp/>casacore::Stokes::XX),<sp/>casacore::Complex(1.,0.));</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;add(accessors::CalParamNameHelper::paramName(ant,<sp/>indices.first,<sp/>casacore::Stokes::YY),<sp/>casacore::Complex(1.,0.));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>setup<sp/>reference<sp/>gain,<sp/>if<sp/>needed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itsRefAntenna<sp/>&gt;=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//itsRefGain<sp/>=<sp/>accessors::CalParamNameHelper::paramName(itsRefAntenna,<sp/>indices.first,<sp/>casacore::Stokes::XX);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wasim<sp/>was<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainXX<sp/>=<sp/>accessors::CalParamNameHelper::paramName(itsRefAntenna,<sp/>indices.first,<sp/>casacore::Stokes::XX);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainYY<sp/>=<sp/>accessors::CalParamNameHelper::paramName(itsRefAntenna,<sp/>indices.first,<sp/>casacore::Stokes::YY);</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainXX<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainYY<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>cycle<sp/>=<sp/>0;<sp/>(cycle<sp/>&lt;<sp/>nCycles)<sp/>&amp;&amp;<sp/>validSolution();<sp/>++cycle)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;***<sp/>Starting<sp/>calibration<sp/>iteration<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>cycle<sp/>+<sp/>1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>for<sp/>beam=&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices.first&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>channel=&quot;</highlight><highlight class="normal">&lt;&lt;indices.second&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>***&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>iterator<sp/>is<sp/>used<sp/>to<sp/>access<sp/>the<sp/>current<sp/>work<sp/>unit<sp/>inside<sp/>calcNE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>calcNE();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>solveNE();</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;itsChan<sp/>&gt;=0)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>proxy<sp/>for<sp/>in<sp/>a<sp/>loop<sp/>over<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>send<sp/>the<sp/>model<sp/>to<sp/>the<sp/>master,<sp/>add<sp/>beam<sp/>and<sp/>channel<sp/>tags<sp/>first</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;add(</highlight><highlight class="stringliteral">&quot;beam&quot;</highlight><highlight class="normal">,static_cast&lt;double&gt;(indices.first));</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;add(</highlight><highlight class="stringliteral">&quot;channel&quot;</highlight><highlight class="normal">,static_cast&lt;double&gt;(indices.second));</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;fix(</highlight><highlight class="stringliteral">&quot;beam&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;fix(</highlight><highlight class="stringliteral">&quot;channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sendModelToMaster();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;isParallel){</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>serial<sp/>operation,<sp/>just<sp/>write<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validSolution())<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeModel();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isMaster<sp/>&amp;&amp;<sp/>this-&gt;isParallel)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>the<sp/>master<sp/>rank<sp/>has<sp/>to<sp/>wait<sp/>for<sp/>the<sp/>workers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,</highlight><highlight class="stringliteral">&quot;There<sp/>are<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>this-&gt;itsModelInputs.size()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>inputs<sp/>to<sp/>iterate<sp/>over&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;int&gt;::const_iterator<sp/>it<sp/>=<sp/><sp/>this-&gt;itsModelInputs.begin();<sp/>it<sp/>!=<sp/>this-&gt;itsModelInputs.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>casacore::uInt<sp/>numberOfWorkUnits<sp/>=<sp/>nBeam()<sp/>*<sp/>nChanPerRank();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Master<sp/>waiting<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>numberOfWorkUnits<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;work<sp/>units<sp/>on<sp/>this<sp/>input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(casacore::uInt<sp/>chunk<sp/>=<sp/>0;<sp/>chunk<sp/>&lt;<sp/>numberOfWorkUnits;<sp/>++chunk)<sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>asynchronously<sp/>receive<sp/>result<sp/>from<sp/>workers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>receiveModelFromWorker(*it);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(validSolution())<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>Model<sp/>from<sp/>Worker&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>writeModel();</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Destroy<sp/>an<sp/>accessor,<sp/>which<sp/>should<sp/>call<sp/>syncCache<sp/>and<sp/>write<sp/>the<sp/>table<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>if<sp/>(this-&gt;isMaster)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/>&quot;Syncing<sp/>the<sp/>cached<sp/>bandpass<sp/>table<sp/>to<sp/>disk&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>begin<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPASSERT(itsSolutionSource);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>itsSolAcc<sp/>=<sp/>itsSolutionSource-&gt;rwSolution(itsSolutionID);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/>&quot;Have<sp/>set<sp/>solution<sp/>accessor&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPASSERT(itsSolAcc);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parlist<sp/>=<sp/>itsModel-&gt;freeNames();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>for<sp/>(casacore::uInt<sp/>chan<sp/>;<sp/>chan<sp/>&lt;<sp/>nChan();<sp/>++chan<sp/>)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>(std::vector&lt;std::string&gt;::const_iterator<sp/>it<sp/>=<sp/>parlist.begin();<sp/>it<sp/>!=<sp/>parlist.end();<sp/>++it)<sp/>{</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>ASKAPLOG_INFO_STR(logger,&quot;Value<sp/>&quot;<sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/>&quot;<sp/>Param<sp/>&quot;<sp/>&lt;&lt;<sp/>*it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::pair&lt;accessors::JonesIndex,<sp/>casacore::Stokes::StokesTypes&gt;<sp/>paramType<sp/>=</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessors::CalParamNameHelper::parseParam(*it);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>beam<sp/>is<sp/>also<sp/>coded<sp/>in<sp/>the<sp/>parameters,<sp/>although<sp/>we<sp/>don&apos;t<sp/>need<sp/>it<sp/>because<sp/>the<sp/>data<sp/>are<sp/>partitioned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>just<sp/>cross-check<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,&quot;bandpass:&quot;<sp/>&lt;&lt;<sp/>itsSolAcc-&gt;bandpass(paramType.first,chan).g1()<sp/>&lt;&lt;<sp/>&quot;:&quot;<sp/>&lt;&lt;<sp/>itsSolAcc-&gt;bandpass(paramType.first,chan).g2());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>end<sp/>check</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>the<sp/>SolAcc<sp/>is<sp/>actually<sp/>a<sp/>MemCalSolutionAccessor<sp/>lets<sp/>see<sp/>if<sp/>we<sp/>can<sp/>cast<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>//<sp/>it<sp/>is<sp/>supposed<sp/>to<sp/>sync<sp/>when<sp/>it<sp/>is<sp/>reset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,&quot;Current<sp/>use_count<sp/>for<sp/>accessor<sp/>is<sp/>&quot;<sp/>&lt;&lt;<sp/>itsSolAcc.use_count());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>itsSolAcc.reset();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/>&quot;Table<sp/>should<sp/>be<sp/>synced<sp/>on<sp/>disk&quot;);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="comment">//}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="394"><highlight class="normal">}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal">LOFAR::ParameterSet<sp/>JacalBPCalibrator::emptyDatasetKeyword(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>LOFAR::ParameterSet<sp/>&amp;parset)</highlight></codeline>
<codeline lineno="404"><highlight class="normal">{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>LOFAR::ParameterSet<sp/>result(parset.makeSubset(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>result.replace(</highlight><highlight class="stringliteral">&quot;dataset&quot;</highlight><highlight class="normal">,std::string());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>JacalBPCalibrator::validSolution()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="418"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itsModel)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!itsModel-&gt;has(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal">}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal">std::pair&lt;casacore::uInt,<sp/>casacore::uInt&gt;<sp/>JacalBPCalibrator::currentBeamAndChannel()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="432"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isMaster<sp/>&amp;&amp;<sp/>this-&gt;isParallel)<sp/>{</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel-&gt;has(</highlight><highlight class="stringliteral">&quot;beam&quot;</highlight><highlight class="normal">)<sp/>&amp;&amp;<sp/>itsModel-&gt;has(</highlight><highlight class="stringliteral">&quot;channel&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beam<sp/>=<sp/>itsModel-&gt;scalarValue(</highlight><highlight class="stringliteral">&quot;beam&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>channel<sp/>=<sp/>itsModel-&gt;scalarValue(</highlight><highlight class="stringliteral">&quot;channel&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT((beam<sp/>&gt;=<sp/>0.)<sp/>&amp;&amp;<sp/>(channel<sp/>&gt;=<sp/>0.));</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;casacore::uInt,casacore::uInt&gt;<sp/>result(static_cast&lt;casacore::uInt&gt;(beam),<sp/>static_cast&lt;casacore::uInt&gt;(channel));</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(result.first<sp/>&lt;<sp/>nBeam());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(result.second<sp/>&lt;<sp/>nChan());</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>casacore::IPosition<sp/>cursor<sp/>=<sp/>itsWorkUnitIterator.cursor();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(cursor.nelements()<sp/>==<sp/>2);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT((cursor[0]<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(cursor[1]<sp/>&gt;=<sp/>0));</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;casacore::uInt,casacore::uInt&gt;<sp/>result(static_cast&lt;casacore::uInt&gt;(cursor[0]),<sp/>static_cast&lt;casacore::uInt&gt;(cursor[1]));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(result.first<sp/>&lt;<sp/>nBeam());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(result.second<sp/>&lt;<sp/>nChan());</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal">}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BPCALIBRATOR_PARALLEL_BLOB_STREAM_VERSION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::sendModelToMaster()</highlight></codeline>
<codeline lineno="460"><highlight class="normal">{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME<sp/>-<sp/>send<sp/>this<sp/>to<sp/>the<sp/>correct<sp/>OUTPUT<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="465"><highlight class="comment"><sp/><sp/><sp/>ASKAPDEBUGTRACE(&quot;JacalBPCalibrator::sendModelToMaster&quot;);</highlight></codeline>
<codeline lineno="466"><highlight class="comment"><sp/><sp/><sp/>ASKAPLOG_DEBUG_STR(logger,<sp/>&quot;Sending<sp/>results<sp/>to<sp/>the<sp/>master&quot;);</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/><sp/>itsComms.notifyMaster();</highlight></codeline>
<codeline lineno="468"><highlight class="comment"><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="469"><highlight class="comment"></highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/><sp/><sp/>askapparallel::BlobOBufMW<sp/>bobmw(itsComms,<sp/>0);</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/>LOFAR::BlobOStream<sp/>out(bobmw);</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/>out.putStart(&quot;calmodel&quot;,<sp/>BPCALIBRATOR_PARALLEL_BLOB_STREAM_VERSION);</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>*itsModel;</highlight></codeline>
<codeline lineno="474"><highlight class="comment"><sp/><sp/><sp/>out.putEnd();</highlight></codeline>
<codeline lineno="475"><highlight class="comment"><sp/><sp/><sp/>bobmw.flush();</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/>NEUtils::sendParams(itsModel,output(</highlight><highlight class="stringliteral">&quot;Model&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal">}</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::receiveModelFromWorker()</highlight></codeline>
<codeline lineno="486"><highlight class="normal">{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/>itsModel.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>scimath::Params);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/>NEUtils::receiveParams(itsModel,<sp/>input(</highlight><highlight class="stringliteral">&quot;Model&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>THis<sp/>is<sp/>the<sp/>old<sp/>receive<sp/>once<sp/>the<sp/>above<sp/>works<sp/>-<sp/>just<sp/>remove<sp/>this</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/><sp/><sp/>//<sp/>wait<sp/>for<sp/>the<sp/>notification</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/><sp/><sp/>const<sp/>int<sp/>source<sp/>=<sp/>itsComms.waitForNotification().first;</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/><sp/><sp/>ASKAPLOG_DEBUG_STR(logger,<sp/>&quot;Receiving<sp/>results<sp/>from<sp/>rank<sp/>&quot;&lt;&lt;source);</highlight></codeline>
<codeline lineno="496"><highlight class="comment"></highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/><sp/><sp/>askapparallel::BlobIBufMW<sp/>bibmw(itsComms,<sp/>source);</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/><sp/><sp/>LOFAR::BlobIStream<sp/>in(bibmw);</highlight></codeline>
<codeline lineno="499"><highlight class="comment"><sp/><sp/><sp/>const<sp/>int<sp/>version<sp/>=<sp/>in.getStart(&quot;calmodel&quot;);</highlight></codeline>
<codeline lineno="500"><highlight class="comment"><sp/><sp/><sp/>ASKAPASSERT(version<sp/>==<sp/>BPCALIBRATOR_PARALLEL_BLOB_STREAM_VERSION);</highlight></codeline>
<codeline lineno="501"><highlight class="comment"><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>*itsModel;</highlight></codeline>
<codeline lineno="502"><highlight class="comment"><sp/><sp/><sp/>in.getEnd();</highlight></codeline>
<codeline lineno="503"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal">}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::receiveModelFromWorker(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>theInput)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/>itsModel.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>scimath::Params);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/>NEUtils::receiveParams(itsModel,<sp/>input(theInput));</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>FIXME:<sp/>THis<sp/>is<sp/>the<sp/>old<sp/>receive<sp/>once<sp/>the<sp/>above<sp/>works<sp/>-<sp/>just<sp/>remove<sp/>this</highlight></codeline>
<codeline lineno="515"><highlight class="comment"><sp/><sp/><sp/>//<sp/>wait<sp/>for<sp/>the<sp/>notification</highlight></codeline>
<codeline lineno="516"><highlight class="comment"><sp/><sp/><sp/>const<sp/>int<sp/>source<sp/>=<sp/>itsComms.waitForNotification().first;</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/><sp/><sp/>ASKAPLOG_DEBUG_STR(logger,<sp/>&quot;Receiving<sp/>results<sp/>from<sp/>rank<sp/>&quot;&lt;&lt;source);</highlight></codeline>
<codeline lineno="518"><highlight class="comment"></highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/><sp/><sp/>askapparallel::BlobIBufMW<sp/>bibmw(itsComms,<sp/>source);</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/><sp/>LOFAR::BlobIStream<sp/>in(bibmw);</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/><sp/>const<sp/>int<sp/>version<sp/>=<sp/>in.getStart(&quot;calmodel&quot;);</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/><sp/>ASKAPASSERT(version<sp/>==<sp/>BPCALIBRATOR_PARALLEL_BLOB_STREAM_VERSION);</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/><sp/><sp/>in<sp/>&gt;&gt;<sp/>*itsModel;</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/><sp/><sp/>in.getEnd();</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::calcNE()</highlight></codeline>
<codeline lineno="533"><highlight class="normal">{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(this-&gt;isWorker);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>a<sp/>new<sp/>instance<sp/>of<sp/>the<sp/>normal<sp/>equations<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>boost::shared_ptr&lt;scimath::GenericNormalEquations&gt;<sp/>gne(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>scimath::GenericNormalEquations);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/>itsNe<sp/>=<sp/>gne;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>create<sp/>the<sp/>gridder<sp/>too</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/>itsGridder<sp/>=<sp/>askap::synthesis::VisGridderFactory::make(this-&gt;itsParset);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(itsNe);</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(itsGridder);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>obtain<sp/>details<sp/>on<sp/>the<sp/>current<sp/>iteration,<sp/>i.e.<sp/>beam<sp/>and<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(itsWorkUnitIterator.hasMore());</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>is<sp/>beam,<sp/>second<sp/>is<sp/>channel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;casacore::uInt,<sp/>casacore::uInt&gt;<sp/>indices<sp/>=<sp/>currentBeamAndChannel();</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>ASKAPLOG_INFO_STR(logger,</highlight><highlight class="stringliteral">&quot;Processing<sp/>beam<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>indices.first<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>channel<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>indices.second);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT((measurementSets().size()<sp/>==<sp/>1)<sp/>||<sp/>(indices.first<sp/>&lt;<sp/>measurementSets().size()));</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>ms<sp/>=<sp/>(measurementSets().size()<sp/>==<sp/>1<sp/>?<sp/>measurementSets()[0]<sp/>:<sp/>measurementSets()[indices.first]);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>actual<sp/>computation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>calcOne(ms,<sp/>indices.second,<sp/>indices.first);</highlight></codeline>
<codeline lineno="561"><highlight class="normal">}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::invalidateSolution()<sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/>itsModel-&gt;add(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">,1.);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/>itsModel-&gt;fix(</highlight><highlight class="stringliteral">&quot;invalid&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::solveNE()</highlight></codeline>
<codeline lineno="574"><highlight class="normal">{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;isWorker)<sp/>{</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Solving<sp/>normal<sp/>equations&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsNe);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itsNe-&gt;unknowns().size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_WARN_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Normal<sp/>equations<sp/>are<sp/>empty<sp/>-<sp/>no<sp/>valid<sp/>data<sp/>found,<sp/>flagging<sp/>the<sp/>solution<sp/>as<sp/>bad&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidateSolution();</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>casacore::Timer<sp/>timer;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>timer.mark();</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>scimath::Quality<sp/>q;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsSolver);</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsSolver-&gt;init();</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsSolver-&gt;addNormalEquations(*itsNe);</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsSolver-&gt;solveNormalEquations(*itsModel,q);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Solved<sp/>normal<sp/>equations<sp/>in<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>timer.real()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>seconds<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Solution<sp/>quality:<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;q);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>minRank<sp/>=<sp/>this-&gt;parset().getUint32(</highlight><highlight class="stringliteral">&quot;minrank&quot;</highlight><highlight class="normal">,15u);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(q.rank()<sp/>&lt;<sp/>minRank)<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_WARN_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Solution<sp/>failed<sp/>-<sp/>minimum<sp/>rank<sp/>is<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;minRank&lt;&lt;</highlight><highlight class="stringliteral">&quot;,<sp/>normal<sp/>matrix<sp/>has<sp/>rank<sp/>=<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;q.rank());</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>invalidateSolution();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wasim<sp/>was<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(itsRefGain<sp/>!=<sp/>&quot;&quot;)<sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/>&quot;Rotating<sp/>phases<sp/>to<sp/>have<sp/>that<sp/>of<sp/>&quot;&lt;&lt;itsRefGain&lt;&lt;&quot;<sp/>equal<sp/>to<sp/>0&quot;);</highlight></codeline>
<codeline lineno="605"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotatePhases();</highlight></codeline>
<codeline lineno="606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itsRefGainXX<sp/>!=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itsRefGainXX<sp/>==<sp/>itsRefGainYY){</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Rotating<sp/>both<sp/>XX<sp/>and<sp/>YY<sp/>phases<sp/>to<sp/>have<sp/>that<sp/>of<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainXX&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>equal<sp/>to<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Rotating<sp/>XX<sp/>phases<sp/>to<sp/>have<sp/>that<sp/>of<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainXX&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>equal<sp/>to<sp/>0<sp/>and<sp/>YY<sp/>phases<sp/>to<sp/>have<sp/>that<sp/>of<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsRefGainYY&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>equal<sp/>to<sp/>0&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotatePhases();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::writeModel(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(this-&gt;isMaster);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;casacore::uInt,<sp/>casacore::uInt&gt;<sp/>indices<sp/>=<sp/>currentBeamAndChannel();</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Writing<sp/>results<sp/>of<sp/>the<sp/>calibration<sp/>for<sp/>beam=&quot;</highlight><highlight class="normal">&lt;&lt;indices.first&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>channel=&quot;</highlight><highlight class="normal">&lt;&lt;indices.second);</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/>ASKAPCHECK(itsSolutionSource,<sp/></highlight><highlight class="stringliteral">&quot;Solution<sp/>source<sp/>has<sp/>to<sp/>be<sp/>defined<sp/>by<sp/>this<sp/>stage&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>boost::shared_ptr&lt;accessors::ICalSolutionAccessor&gt;<sp/>itsSolAcc<sp/>=<sp/>itsSolutionSource-&gt;rwSolution(itsSolutionID);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>ASKAPASSERT(itsSolAcc);</highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>parlist<sp/>=<sp/>itsModel-&gt;freeNames();</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;std::string&gt;::const_iterator<sp/>it<sp/>=<sp/>parlist.begin();<sp/>it<sp/>!=<sp/>parlist.end();<sp/>++it)<sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>casacore::Complex<sp/>val<sp/>=<sp/>itsModel-&gt;complexValue(*it);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_DEBUG_STR(logger,</highlight><highlight class="stringliteral">&quot;Value<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>val<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>Param<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>*it);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::pair&lt;accessors::JonesIndex,<sp/>casacore::Stokes::StokesTypes&gt;<sp/>paramType<sp/>=</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accessors::CalParamNameHelper::parseParam(*it);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>beam<sp/>is<sp/>also<sp/>coded<sp/>in<sp/>the<sp/>parameters,<sp/>although<sp/>we<sp/>don&apos;t<sp/>need<sp/>it<sp/>because<sp/>the<sp/>data<sp/>are<sp/>partitioned</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>cross-check<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPDEBUGASSERT(static_cast&lt;casacore::uInt&gt;(paramType.first.beam())<sp/>==<sp/>indices.first);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsSolAcc-&gt;setBandpassElement(paramType.first,<sp/>paramType.second,<sp/>indices.second,<sp/>val);</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Done<sp/>writing<sp/>results<sp/>of<sp/>the<sp/>calibration<sp/>for<sp/>beam=&quot;</highlight><highlight class="normal">&lt;&lt;indices.first&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>channel=&quot;</highlight><highlight class="normal">&lt;&lt;indices.second);</highlight></codeline>
<codeline lineno="654"><highlight class="normal">}</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::createCalibrationME(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>accessors::IDataSharedIter<sp/>&amp;dsi,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::shared_ptr&lt;synthesis::IMeasurementEquation<sp/>const&gt;<sp/>&amp;perfectME)</highlight></codeline>
<codeline lineno="665"><highlight class="normal">{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/>ASKAPDEBUGASSERT(perfectME);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>is<sp/>handy<sp/>to<sp/>have<sp/>a<sp/>shared<sp/>pointer<sp/>to<sp/>the<sp/>base<sp/>type<sp/>because<sp/>it<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>templated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/>boost::shared_ptr&lt;synthesis::PreAvgCalMEBase&gt;<sp/>preAvgME;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solve<sp/>as<sp/>normal<sp/>gains<sp/>(rather<sp/>than<sp/>bandpass)<sp/>because<sp/>only<sp/>one<sp/>channel<sp/>is<sp/>supposed<sp/>to<sp/>be<sp/>selected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>also<sp/>opens<sp/>a<sp/>possibility<sp/>to<sp/>use<sp/>several<sp/>(e.g.<sp/>54<sp/>=<sp/>coarse<sp/>resolution)<sp/>channels<sp/>to<sp/>get<sp/>one<sp/>gain</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>solution<sp/>which<sp/>is<sp/>then<sp/>replicated<sp/>to<sp/>all<sp/>channels<sp/>involved.<sp/>We<sp/>can<sp/>also<sp/>add<sp/>frequency-dependent<sp/>leakage,<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>tests<sp/>show<sp/>it<sp/>is<sp/>required<sp/>(currently<sp/>it<sp/>is<sp/>not<sp/>in<sp/>the<sp/>calibration<sp/>model)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/>preAvgME.reset(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>synthesis::CalibrationME&lt;synthesis::NoXPolGain,<sp/>synthesis::PreAvgCalMEBase&gt;());</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/>ASKAPDEBUGASSERT(preAvgME);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/>ASKAPDEBUGASSERT(dsi.hasMore());</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/>preAvgME-&gt;accumulate(dsi,perfectME);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/>itsEquation<sp/>=<sp/>preAvgME;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>just<sp/>because<sp/>we<sp/>bypass<sp/>setting<sp/>the<sp/>model<sp/>for<sp/>the<sp/>first<sp/>major<sp/>cycle</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>case<sp/>without<sp/>pre-averaging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/>itsEquation-&gt;setParameters(*itsModel);</highlight></codeline>
<codeline lineno="686"><highlight class="normal">}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::rotatePhases()</highlight></codeline>
<codeline lineno="697"><highlight class="normal">{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>intention<sp/>is<sp/>to<sp/>rotate<sp/>phases<sp/>in<sp/>worker<sp/>(for<sp/>this<sp/>class)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(this-&gt;isWorker);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>ASKAPDEBUGASSERT(itsModel);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//wasim<sp/>was<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="703"><highlight class="comment"><sp/><sp/>ASKAPCHECK(itsModel-&gt;has(itsRefGain),<sp/>&quot;phase<sp/>rotation<sp/>to<sp/>`&quot;&lt;&lt;itsRefGain&lt;&lt;</highlight></codeline>
<codeline lineno="704"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&quot;`<sp/>is<sp/>impossible<sp/>because<sp/>this<sp/>parameter<sp/>is<sp/>not<sp/>present<sp/>in<sp/>the<sp/>model&quot;);</highlight></codeline>
<codeline lineno="705"><highlight class="comment"><sp/><sp/>casacore::Complex<sp/><sp/>refPhaseTerm<sp/>=<sp/>casacore::polar(1.f,-arg(itsModel-&gt;complexValue(itsRefGain)));</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>ASKAPCHECK(itsModel-&gt;has(itsRefGainXX),<sp/></highlight><highlight class="stringliteral">&quot;phase<sp/>rotation<sp/>to<sp/>`&quot;</highlight><highlight class="normal">&lt;&lt;itsRefGainXX&lt;&lt;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;`<sp/>is<sp/>impossible<sp/>because<sp/>this<sp/>parameter<sp/>is<sp/>not<sp/>present<sp/>in<sp/>the<sp/>model&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>ASKAPCHECK(itsModel-&gt;has(itsRefGainYY),<sp/></highlight><highlight class="stringliteral">&quot;phase<sp/>rotation<sp/>to<sp/>`&quot;</highlight><highlight class="normal">&lt;&lt;itsRefGainYY&lt;&lt;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;`<sp/>is<sp/>impossible<sp/>because<sp/>this<sp/>parameter<sp/>is<sp/>not<sp/>present<sp/>in<sp/>the<sp/>model&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>casacore::Complex<sp/><sp/>refPhaseTermXX<sp/>=<sp/>casacore::polar(1.f,-arg(itsModel-&gt;complexValue(itsRefGainXX)));</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/>casacore::Complex<sp/><sp/>refPhaseTermYY<sp/>=<sp/>casacore::polar(1.f,-arg(itsModel-&gt;complexValue(itsRefGainYY)));</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>names(itsModel-&gt;freeNames());</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::vector&lt;std::string&gt;::const_iterator<sp/>it=names.begin();<sp/>it!=names.end();++it)<sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>parname<sp/>=<sp/>*it;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//wasim<sp/>was<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*if<sp/>(parname.find(&quot;gain&quot;)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;update(parname,<sp/>itsModel-&gt;complexValue(parname)<sp/>*<sp/>refPhaseTerm);</highlight></codeline>
<codeline lineno="719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parname.find(</highlight><highlight class="stringliteral">&quot;gain.g11&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;update(parname,<sp/>itsModel-&gt;complexValue(parname)<sp/>*<sp/>refPhaseTermXX);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(parname.find(</highlight><highlight class="stringliteral">&quot;gain.g22&quot;</highlight><highlight class="normal">)<sp/>!=<sp/>std::string::npos)<sp/>{</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsModel-&gt;update(parname,<sp/>itsModel-&gt;complexValue(parname)<sp/>*<sp/>refPhaseTermYY);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal">}</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>JacalBPCalibrator::solutionTime()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="739"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>use<sp/>the<sp/>earliest<sp/>time<sp/>corresponding<sp/>to<sp/>the<sp/>data<sp/>used<sp/>to<sp/>make<sp/>this<sp/>calibration<sp/>solution</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>tag<sp/>the<sp/>solution.<sp/>A<sp/>request<sp/>for<sp/>any<sp/>latest<sp/>time<sp/>than<sp/>this<sp/>would<sp/>automatically</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>extract<sp/>this<sp/>solution<sp/>as<sp/>most<sp/>recent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/>ASKAPASSERT(itsNe);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>boost::shared_ptr&lt;scimath::GenericNormalEquations&gt;<sp/>gne<sp/>=<sp/>boost::dynamic_pointer_cast&lt;scimath::GenericNormalEquations&gt;(itsNe);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(gne)<sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>scimath::Params&amp;<sp/>metadata<sp/>=<sp/>gne-&gt;metadata();</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(metadata.has(</highlight><highlight class="stringliteral">&quot;min_time&quot;</highlight><highlight class="normal">))<sp/>{</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metadata.scalarValue(</highlight><highlight class="stringliteral">&quot;min_time&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0.;</highlight></codeline>
<codeline lineno="753"><highlight class="normal">}</highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::calcOne(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>ms,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>casacore::uInt<sp/>chan,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>casacore::uInt<sp/>beam)</highlight></codeline>
<codeline lineno="760"><highlight class="normal">{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/>casacore::Timer<sp/>timer;</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/>timer.mark();</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Calculating<sp/>normal<sp/>equations<sp/>for<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>ms<sp/>&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>channel<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;chan&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>beam<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;beam);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>time<sp/>around<sp/>we<sp/>need<sp/>to<sp/>generate<sp/>the<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itsEquation)<sp/>{</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>measurement<sp/>equation&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>table<sp/>data<sp/>source&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accessors::TableDataSource<sp/>ds(ms,<sp/>accessors::TableDataSource::DEFAULT,<sp/>dataColumn());</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>selector<sp/>from<sp/>parset&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accessors::IDataSelectorPtr<sp/>sel=ds.createSelector();</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sel<sp/>&lt;&lt;<sp/>this-&gt;parset();</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sel-&gt;chooseChannels(1,chan);</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>sel-&gt;chooseFeed(beam);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>converter<sp/>for<sp/>selector&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accessors::IDataConverterPtr<sp/>conv=ds.createConverter();</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conv-&gt;setFrequencyFrame(casacore::MFrequency::Ref(casacore::MFrequency::TOPO),<sp/></highlight><highlight class="stringliteral">&quot;Hz&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conv-&gt;setDirectionFrame(casacore::MDirection::Ref(casacore::MDirection::J2000));</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ensure<sp/>that<sp/>time<sp/>is<sp/>counted<sp/>in<sp/>seconds<sp/>since<sp/>0<sp/>MJD</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>conv-&gt;setEpochFrame();</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Creating<sp/>iterator&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>accessors::IDataSharedIter<sp/>it=ds.createIterator(sel,<sp/>conv);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(it.hasMore(),<sp/></highlight><highlight class="stringliteral">&quot;No<sp/>data<sp/>seem<sp/>to<sp/>be<sp/>available<sp/>for<sp/>channel<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;chan&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>beam<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;beam);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsModel,<sp/></highlight><highlight class="stringliteral">&quot;Initial<sp/>assumption<sp/>of<sp/>parameters<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!itsPerfectME)<sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Constructing<sp/>measurement<sp/>equation<sp/>corresponding<sp/>to<sp/>the<sp/>uncorrupted<sp/>model&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsPerfectModel,<sp/></highlight><highlight class="stringliteral">&quot;Uncorrupted<sp/>model<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(synthesis::SynthesisParamsHelper::hasImage(itsPerfectModel))<sp/>{</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(!synthesis::SynthesisParamsHelper::hasComponent(itsPerfectModel),</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Image<sp/>+<sp/>component<sp/>case<sp/>has<sp/>not<sp/>yet<sp/>been<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>to<sp/>create<sp/>an<sp/>image-specific<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;synthesis::ImagingEquationAdapter&gt;<sp/>ieAdapter(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>synthesis::ImagingEquationAdapter);</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsGridder,<sp/></highlight><highlight class="stringliteral">&quot;Gridder<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ieAdapter-&gt;assign&lt;synthesis::ImageFFTEquation&gt;(*itsPerfectModel,<sp/>itsGridder);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsPerfectME<sp/>=<sp/>ieAdapter;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>model<sp/>is<sp/>a<sp/>number<sp/>of<sp/>components,<sp/>don&apos;t<sp/>need<sp/>an<sp/>adapter<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it<sp/>doesn&apos;t<sp/>matter<sp/>which<sp/>iterator<sp/>is<sp/>passed<sp/>below.<sp/>It<sp/>is<sp/>not<sp/>used</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boost::shared_ptr&lt;synthesis::ComponentEquation&gt;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compEq(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>synthesis::ComponentEquation(*itsPerfectModel,it));</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itsPerfectME<sp/>=<sp/>compEq;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>now<sp/>we<sp/>could&apos;ve<sp/>used<sp/>class<sp/>data<sp/>members<sp/>directly<sp/>instead<sp/>of<sp/>passing<sp/>them<sp/>to<sp/>createCalibrationME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>createCalibrationME(it,itsPerfectME);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsEquation,<sp/></highlight><highlight class="stringliteral">&quot;Equation<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Reusing<sp/>measurement<sp/>equation&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>need<sp/>to<sp/>update<sp/>the<sp/>model<sp/>held<sp/>by<sp/>measurement<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>it<sp/>has<sp/>been<sp/>cloned<sp/>at<sp/>construction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsEquation,<sp/></highlight><highlight class="stringliteral">&quot;Equation<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ASKAPCHECK(itsModel,<sp/></highlight><highlight class="stringliteral">&quot;Model<sp/>is<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>itsEquation-&gt;setParameters(*itsModel);</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/>ASKAPCHECK(itsNe,<sp/></highlight><highlight class="stringliteral">&quot;NormalEquations<sp/>are<sp/>not<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><sp/><sp/>itsEquation-&gt;calcEquations(*itsNe);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/>ASKAPLOG_INFO_STR(logger,<sp/></highlight><highlight class="stringliteral">&quot;Calculated<sp/>normal<sp/>equations<sp/>for<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>ms<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>channel<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;chan&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>beam<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;beam&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>&quot;</highlight><highlight class="normal">&lt;&lt;<sp/>timer.real()</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>seconds<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal">}</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::data_written(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>dlg_app_running();</highlight></codeline>
<codeline lineno="828"><highlight class="normal">}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>JacalBPCalibrator::drop_completed(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*uid,<sp/>drop_status<sp/>status)<sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/>dlg_app_done(APP_FINISHED);</highlight></codeline>
<codeline lineno="833"><highlight class="normal">}</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>askap</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="jacal/factory/JacalBPCalibrator.cc"/>
  </compounddef>
</doxygen>
