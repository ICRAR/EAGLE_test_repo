{
    "modelData": {
        "fileType": "palette",
        "repoService": "GitHub",
        "repoBranch": "master",
        "repo": "ICRAR/EAGLE_test_repo",
        "readonly": true,
        "filePath": "casatasks.test.palette",
        "sha": "0.1",
        "git_url": "casatasks"
    },
    "nodeDataArray": [
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -1,
            "text": "accor",
            "description": "Spectral windows combinations to form for gaintables(s) Subparameter of callib=False default:  (apply solutions from each spw to that spw only) Examples: spwmap=[0,0,1,1] means apply the caltable solutions from spw = 0 to the spw 0,1 and spw 1 to spw 2,3.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.accor",
                    "defaultValue": "casatasks.accor",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file default: none example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output gain calibration table default: none example: caltable='ngc5921.gcal'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) default: '' --> all fields Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C Note: do not forget to include the flux density calibrator if you have one!",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30 type 'help par.selection' for more examples.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent default: '' (no selection by intent) Example: intent='\\*BANDPASS\\*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters default: True (Must set selectdata=True to select other selection parameters.)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True default: '' (all) Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers Note: just for antenna selection, an integer (or integer list) is converted to a string and matched against the antenna 'name' first. Only if that fails, the integer is matched with the antenna ID. The latter is the case for most observatories, where the antenna name is not strictly an integer.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True default: '' = all Check 'go listobs' to insure the scan numbers are in order.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Solution interval (units optional) default: 'inf' (~infinite, up to boundaries controlled by combine) Options: 'inf' (~infinite), 'int' (per integration), any float or integer value with or without units Examples: solint='1min'; solint='60s'; solint=60 --> 1 minute solint='0s'; solint=0; solint='int' --> per integration solint-'-1s'; solint='inf' --> ~infinite, up to boundaries -interacts with combine",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data axes which to combine for solve default: '' (solutions will break at obs, scan, field, and spw) Options: '','obs','scan','spw',field', or any comma-separated combination in a single string For gaintype='K', if combine includes 'spw', multi-band delays will be determined; otherwise, (per-spw) single-band delays will be determined. Example: combine='scan,spw' (extend solutions over scan boundaries)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "corrdepflags",
                    "name": "corrdepflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "f False (default), if any correlation is flagged, treat all correlations in the visibility vector as flagged when solving (per channel, per baseline). If True, use unflagged correlations in a visibility vector, even if one or more other correlations are flagged. Default: False (treat correlation vectors with one or more correlations flagged as entirely flagged) Traditionally, CASA has observed a strict interpretation of correlation-dependent flags: if one or more correlations (for any baseline and channel) is flagged, then all available correlations for the same baseline and channel are treated as flagged.  However, it is desirable in some circumstances to relax this stricture, e.g., to preserve use of data from antennas with only one good polarization (e.g., one polarization is bad or entirely absent).  Solutions for the bad or missing polarization will be rendered as flagged.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Append solutions to the (existing) table default: False (overwrite existing table or make new table) Appended solutions must be derived from the same MS as the existing caltable, and solution spws must have the same meta-info (according to spw selection and solint) or be non-overlapping.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Control means of specifying the caltables default: False --> Use gaintable, gainfield, interp, spwmap, calwt. If True, specify a file containing cal library in callib",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "",
                    "defaultValue": "",
                    "description": "Cal Library filename Subparameter of callib=True If docallib=True, specify a file containing cal library directives",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Gain calibration table(s) to apply on the fly Subparameter of callib=False default: '' (none) Examples: gaintable='ngc5921.gcal' gaintable=gc5921.ampcal','ngc5921.phcal']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) Subparameter of callib=False default:'' --> all sources in table gaintable='nearest' --> nearest (on sky) available field in table. Otherwise, same syntax as field Examples: gainfield='0~2,5' means use fields 0,1,2,5 from gaintable gainfield=['0~3','4~6'] means use field 0 through 3 from first gain file, field 4 through 6 for second.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation parmameters (in timereq]) for each gaintable, as a list of strings. Default: '' --> 'linear,linear' for all gaintable(s) Options: Time: 'nearest', 'linear' Freq: 'nearest', 'linear', 'cubic', 'spline' Specify a list of strings, aligned with the list of caltable specified in gaintable, that contain the required interpolation parameters for each caltable. - When frequency interpolation is relevant (B, Df, Xf), separate time-dependent and freq-dependent interp types with a comma (freq_after\\_ the comma). - Specifications for frequency are ignored when the calibration table has no channel-dependence. - Time-dependent interp options ending in 'PD' enable a phase delay\" correction per spw for non-channel-dependent calibration types. - For multi-obsId datasets, 'perobs' can be appended to the time-dependent interpolation specification to enforce obsId boundaries when interpolating in time. - Freq-dependent interp options can have 'flag' appended to enforce channel-dependent flagging, and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral windows combinations to form for gaintables(s) Subparameter of callib=False default:  (apply solutions from each spw to that spw only) Examples: spwmap=[0,0,1,1] means apply the caltable solutions from spw = 0 to the spw 0,1 and spw 1 to spw 2,3.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -2,
            "text": "apparentsens",
            "description": "uv-taper on outer baselines in uv-plane Apply a Gaussian taper in addition to the weighting scheme specified via the 'weighting' parameter. Higher spatial frequencies are weighted down relative to lower spatial frequencies to suppress artifacts arising from poorly sampled areas of the uv-plane. It is equivalent to smoothing the PSF obtained by other weighting schemes and can be specified either as a Gaussian in uv-space (eg. units of lambda) or as a Gaussian in the image domain (eg. angular units like arcsec). uvtaper = maj, bmin, bpa] NOTE: the on-sky FWHM in arcsec is roughly  the uv taper/200 (klambda). default: uvtaper=; no Gaussian taper applied example: uvtaper=['5klambda']  circular taper FWHM=5 kilo-lambda uvtaper=['5klambda','3klambda','45.0deg'] uvtaper=['10arcsec'] on-sky FWHM 10 arcseconds uvtaper=['300.0'] default units are lambda in aperture plane",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.apparentsens",
                    "defaultValue": "casatasks.apparentsens",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of input visibility file(s) default: none; example: vis='ngc5921.ms' vis=gc5921a.ms','ngc5921b.ms']; multiple MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select fields to image or mosaic.  Use field id(s) or name(s). o listobs' to obtain the list id's or names] default: ''= all fields If field string is a non-negative integer, it is assumed to be a field index otherwise, it is assumed to be a field name field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C For multiple MS input, a list of field strings can be used: field = ['0~2','0~4']; field ids 0-2 for the first MS and 0-4 for the second field = '0~2'; field ids 0-2 for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels NOTE: channels de-selected here will contain all zeros if selected by the parameter mode subparameters. default: ''=all spectral windows and channels spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='0:5~61'; spw 0, channels 5 to 61 spw='<2';   spectral windows less than 2 (i.e. 0,1) spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. For multiple MS input, a list of spw strings can be used: spw=['0','0~3']; spw ids 0 for the first MS and 0-3 for the second spw='0~3' spw ids 0-3 for all input MS spw='3:10~20;50~60' for multiple channel ranges within spw id 3 spw='3:10~20;50~60,4:0~30' for different channel ranges for spw ids 3 and 4 spw='0:0~10,1:20~30,2:1;2;3'; spw 0, channels 0-10, spw 1, channels 20-30, and spw 2, channels, 1,2 and 3 spw='1~4;6:15~48' for channels 15 through 48 for spw ids 1,2,3,4 and 6",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan Intent(s) default: '' (all) example: intent='TARGET_SOURCE' example: intent='TARGET_SOURCE1,TARGET_SOURCE2' example: intent='TARGET_POINTING*'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Enable data selection parameters. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of time to select from data default: '' (all); examples, timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' Note: if YYYY/MM/DD is missing date defaults to first day in data set timerange='09:14:0~09:54:0' picks 40 min on first day timerange='25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='> 10:24:00' data after this time For multiple MS input, a list of timerange strings can be used: timerange=['09:14:0~09:54:0','> 10:24:00'] timerange='09:14:0~09:54:0''; apply the same timerange for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default unit is meters) default: '' (all); example: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='> 4klambda';uvranges greater than 4 kilo lambda For multiple MS input, a list of uvrange strings can be used: uvrange=['0~1000klambda','100~1000klamda'] uvrange='0~1000klambda'; apply 0-1000 kilo-lambda for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline default: '' (all) If antenna string is a non-negative integer, it is assumed to be an antenna index, otherwise, it is considered an antenna name. antenna='5\\&6'; baseline between antenna index 5 and index 6. antenna='VA05\\&VA06'; baseline between VLA antenna 5 and 6. antenna='5\\&6;7\\&8'; baselines 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,9'; all baselines with antennas 5,6,9 index number For multiple MS input, a list of antenna strings can be used: antenna=['5','5\\&6']; antenna='5'; antenna index 5 for all input MSes antenna='!DV14'; use all antennas except DV14",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range default: '' (all) example: scan='1~5' For multiple MS input, a list of scan strings can be used: scan=['0~100','10~200'] scan='0~100; scan ids 0-100 for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Observation ID range default: '' (all) example: observation='1~5'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "[100]",
                    "defaultValue": "[100]",
                    "description": "Number of pixels example :  imsize = [350,250] imsize = 500 is equivalent to [500,500] To take proper advantage of internal optimized FFT routines, the number of pixels must be even and factorizable by 2,3,5,7 only.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Cell size example: cell=['0.5arcsec,'0.5arcsec'] or cell=['1arcmin', '1arcmin'] cell = '1arcsec' is equivalent to ['1arcsec','1arcsec']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "I",
                    "defaultValue": "I",
                    "description": "Stokes Planes to make (I only, for now) default='I'; example: stokes='IQUV'; Options: 'I','Q','U','V','IV','QU','IQ','UV','IQUV','RR','LL','XX','YY','RRLL','XXYY','pseudoI' Note : Due to current internal code constraints, if any correlation pair is flagged, by default, no data for that row in the MS will be used. So, in an MS with XX,YY, if only YY is flagged, neither a Stokes I image nor an XX image can be made from those data points. In such a situation, please split out only the unflagged correlation into a separate MS. Note : The 'pseudoI' option is a partial solution, allowing Stokes I imaging when either of the parallel-hand correlations are unflagged. The remaining constraints shall be removed (where logical) in a future release.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "specmode",
                    "name": "specmode",
                    "value": "mfs",
                    "defaultValue": "mfs",
                    "description": "Spectral definition mode (mfs only, for now) mode='mfs' : Continuum imaging with only one output image channel. (mode='cont' can also be used here) mode='cube' : Spectral line imaging with one or more channels Parameters start, width,and nchan define the spectral coordinate system and can be specified either in terms of channel numbers, frequency or velocity in whatever spectral frame is specified in 'outframe'. All internal and output images are made with outframe as the base spectral frame. However imaging code internally uses the fixed spectral frame, LSRK for automatic internal software Doppler tracking so that a spectral line observed over an extended time range will line up appropriately. Therefore the output images have additional spectral frame conversion layer in LSRK on the top the base frame. (Note : Even if the input parameters are specified in a frame other than LSRK, the viewer still displays spectral axis in LSRK by default because of the conversion frame layer mentioned above. The viewer can be used to relabel the spectral axis in any desired frame - via the spectral reference option under axis label properties in the data display options window.) mode='cubedata' : Spectral line imaging with one or more channels There is no internal software Doppler tracking so a spectral line observed over an extended time range may be smeared out in frequency. There is strictly no valid spectral frame with which to label the output images, but they will list the frame defined in the MS.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "weighting",
                    "name": "weighting",
                    "value": "natural",
                    "defaultValue": "natural",
                    "description": "Weighting scheme (natural,uniform,briggs,superuniform,radial) During gridding of the dirty or residual image, each visibility value is multiplied by a weight before it is accumulated on the uv-grid. The PSF's uv-grid is generated by gridding only the weights (weightgrid). weighting='natural' : Gridding weights are identical to the data weights from the MS. For visibilities with similar data weights, the weightgrid will follow the sample density pattern on the uv-plane. This weighting scheme provides the maximum imaging sensitivity at the expense of a possibly fat PSF with high sidelobes. It is most appropriate for detection experiments where sensitivity is most important. weighting='uniform' : Gridding weights per visibility data point are the original data weights divided by the total weight of all data points that map to the same uv grid cell : ' data_weight / total_wt_per_cell '. The weightgrid is as close to flat as possible resulting in a PSF with a narrow main lobe and suppressed sidelobes. However, since heavily sampled areas of the uv-plane get down-weighted, the imaging sensitivity is not as high as with natural weighting. It is most appropriate for imaging experiments where a well behaved PSF can help the reconstruction. weighting='briggs' :  Gridding weights per visibility data point are given by 'data_weight / ( A / total_wt_per_cell + B ) ' where A and B vary according to the 'robust' parameter. robust = -2.0 maps to A=1,B=0 or uniform weighting. robust = +2.0 maps to natural weighting. (robust=0.5 is equivalent to robust=0.0 in AIPS IMAGR.) Robust/Briggs weighting generates a PSF that can vary smoothly between 'natural' and 'uniform' and allow customized trade-offs between PSF shape and imaging sensitivity. weighting='superuniform' : This is similar to uniform weighting except that the total_wt_per_cell is replaced by the total_wt_within_NxN_cells around the uv cell of interest.  ( N = subparameter 'npixels' ) This method tends to give a PSF with inner sidelobes that are suppressed as in uniform weighting but with far-out sidelobes closer to natural weighting. The peak sensitivity is also closer to natural weighting. weighting='radial' : Gridding weights are given by ' data_weight * uvdistance ' This method approximately minimizes rms sidelobes for an east-west synthesis array. For more details on weighting please see Chapter3 of Dan Briggs' thesis (http://www.aoc.nrao.edu/dissertations/dbriggs)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "robust",
                    "name": "robust",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "Robustness parameter for Briggs weighting. robust = -2.0 maps to uniform weighting. robust = +2.0 maps to natural weighting. (robust=0.5 is equivalent to robust=0.0 in AIPS IMAGR.)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "npixels",
                    "name": "npixels",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Number of pixels to determine uv-cell size for super-uniform weighting (0 defaults to -/+ 3 pixels) npixels -- uv-box used for weight calculation a box going from -npixel/2 to +npixel/2 on each side around a point is used to calculate weight density. npixels=2 goes from -1 to +1 and covers 3 pixels on a side. npixels=0 implies a single pixel, which does not make sense for superuniform weighting. Therefore, if npixels=0 it will be forced to 6 (or a box of -3pixels to +3pixels) to cover 7 pixels on a side.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvtaper",
                    "name": "uvtaper",
                    "value": "['']",
                    "defaultValue": "['']",
                    "description": "uv-taper on outer baselines in uv-plane Apply a Gaussian taper in addition to the weighting scheme specified via the 'weighting' parameter. Higher spatial frequencies are weighted down relative to lower spatial frequencies to suppress artifacts arising from poorly sampled areas of the uv-plane. It is equivalent to smoothing the PSF obtained by other weighting schemes and can be specified either as a Gaussian in uv-space (eg. units of lambda) or as a Gaussian in the image domain (eg. angular units like arcsec). uvtaper = maj, bmin, bpa] NOTE: the on-sky FWHM in arcsec is roughly  the uv taper/200 (klambda). default: uvtaper=; no Gaussian taper applied example: uvtaper=['5klambda']  circular taper FWHM=5 kilo-lambda uvtaper=['5klambda','3klambda','45.0deg'] uvtaper=['10arcsec'] on-sky FWHM 10 arcseconds uvtaper=['300.0'] default units are lambda in aperture plane",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -3,
            "text": "applycal",
            "description": "Automatically back up the state of flags before the run? ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.applycal",
                    "defaultValue": "casatasks.applycal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file default: non Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) default: '' --> all fields Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30 type 'help par.selection' for more examples.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent default: '' (no selection by intent) Example: intent='\\*BANDPASS\\*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters default: True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default units meters) Subparameter of selectdata=True default: '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilolambda",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Control means of specifying the caltables default: False --> Use gaintable, gainfield, interp, spwmap, calwt. If True, specify a file containing cal library in callib",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "",
                    "defaultValue": "",
                    "description": "Cal Library filename Subparameter of callib=True If docallib=True, specify a file containing cal library directives",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Gain calibration table(s) to apply on the fly Subparameter of callib=False default: '' (none) All gain table types: 'G', GSPLINE, 'T', 'B', 'BPOLY', 'D's' can be applied. Examples: gaintable='ngc5921.gcal' gaintable=gc5921.ampcal','ngc5921.phcal']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) Subparameter of callib=False default:'' --> all sources in table gaintable='nearest' --> nearest (on sky) available field in table. Otherwise, same syntax as field Examples: gainfield='0~2,5' means use fields 0,1,2,5 from gaintable gainfield=['0~3','4~6'] (for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation parmameters (in timereq]) for each gaintable, as a list of strings. Default: '' --> 'linear,linear' for all gaintable(s) Options: Time: 'nearest', 'linear' Freq: 'nearest', 'linear', 'cubic', 'spline' Specify a list of strings, aligned with the list of caltable specified in gaintable, that contain the required interpolation parameters for each caltable. - When frequency interpolation is relevant (B, Df, Xf), separate time-dependent and freq-dependent interp types with a comma (freq after the comma). - Specifications for frequency are ignored when the calibration table has no channel-dependence. - Time-dependent interp options ending in 'PD' enable a phase delay\" correction per spw for non-channel-dependent calibration types. - For multi-obsId datasets, 'perobs' can be appended to the time-dependent interpolation specification to enforce obsId boundaries when interpolating in time. - Freq-dependent interp options can have 'flag' appended to enforce channel-dependent flagging, and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral windows combinations to form for gaintables(s) Subparameter of callib=False default:  (apply solutions from each spw to that spw only) Examples: spwmap=[0,0,1,1] means apply the caltable solutions from spw = 0 to the spw 0,1 and spw 1 to spw 2,3. spwmap=0,0,1,1],[0,1,0,1]] (for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calwt",
                    "name": "calwt",
                    "value": "[True]",
                    "defaultValue": "[True]",
                    "description": "Calibrate data weights per gaintable. default: True (for all specified gaintables) Examples: calwt=False (for all specified gaintables) calwt=rue,False,True] (specified per gaintable)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parang",
                    "name": "parang",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Apply parallactic angle correction default: False If True, apply the parallactic angle correction. FOR ANY POLARIZATION CALIBRATION AND IMAGING, parang = True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applymode",
                    "name": "applymode",
                    "value": "",
                    "defaultValue": "",
                    "description": "Calibration apply mode default: 'calflag' Options: calflag\", \"calflagstrict\", \"trial\", \"flagonly\", \"flagonlystrict\", \"calonly\" -- applymode='calflag': calibrate data and apply flags from solutions -- applymode='trial': report on flags from solutions, dataset entirely unchanged -- applymode='flagonly': apply flags from solutions only, data not calibrated -- applymode='calonly' calibrate data only, flags from solutions NOT applied (use with extreme caution!) -- applymode='calflagstrict' or 'flagonlystrict' same as above except flag spws for which calibration is unavailable in one or more tables (instead of allowing them to pass uncalibrated and unflagged)\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Automatically back up the state of flags before the run? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -4,
            "text": "asdmsummary",
            "description": "Name of input ASDM directory The asdmsummary task prints a description of the content of an SDM dataset to the CASA logger. Example: asdm='10C-119_sb3070258_1.55628.42186299768'",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.asdmsummary",
                    "defaultValue": "casatasks.asdmsummary",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "asdm",
                    "name": "asdm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input ASDM directory The asdmsummary task prints a description of the content of an SDM dataset to the CASA logger. Example: asdm='10C-119_sb3070258_1.55628.42186299768'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -5,
            "text": "bandpass",
            "description": "Apply parallactic angle correction default: False If True, apply the parallactic angle correction",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.bandpass",
                    "defaultValue": "casatasks.bandpass",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file default: non Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output bandpass calibration table default: none Example: caltable='ngc5921.bcal'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) default: '' --> all fields Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30 type 'help par.selection' for more examples.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent default: '' (no selection by intent) Example: intent='\\*BANDPASS\\*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters default: True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default units meters) Subparameter of selectdata=True default: '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilolambda",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True default: '' (all) Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers Note: just for antenna selection, an integer (or integer list) is converted to a string and matched against the antenna 'name' first. Only if that fails, the integer is matched with the antenna ID. The latter is the case for most observatories, where the antenna name is not strictly an integer.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True default: '' = all Check 'go listobs' to insure the scan numbers are in order.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Solution interval in timereq] default: 'inf' (~infinite, up to boundaries controlled by combine, with no pre-averaging in frequency) Options for time: 'inf' (~infinite), 'int' (per integration), any float or integer value with or without units Options for freq: an integer with 'ch' suffix will enforce pre-averaging by the specified number of channels. A numeric value suffixed with frequency units (e.g., 'Hz','kHz','MHz') will enforce pre-averaging by an integral number of channels amounting to no more than the specified bandwidth. Examples: solint='1min'; solint='60s', solint=60 --> 1 minute solint='0s'; solint=0; solint='int' --> per integration solint='-1s'; solint='inf' --> ~infinite, up to boundaries enforced by combine solint='inf,8Mhz' --> ~infinite in time, with 8MHz pre-average in freq solint='int,32ch' --> per-integration in time, with 32-channel pre-average in freq",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "scan",
                    "defaultValue": "scan",
                    "description": "Data axes to combine for solving default: 'scan' --> solutions will break at obs, field, and spw boundaries but may extend over multiple scans (per obs, field and spw) up to solint. Options: '','obs','scan','spw',field', or any comma-separated combination in a single string. Example: combine='scan,spw' --> extend solutions over scan boundaries (up to the solint), and combine spws for solving.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refant",
                    "name": "refant",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference antenna name(s); a prioritized list may be specified default: '' (no reference antenna) Examples: refant='13' (antenna with index 13) refant='VA04' (VLA antenna #4) refant='EA02,EA23,EA13' (EVLA antenna EA02, use EA23 and EA13 as alternates if/when EA02 drops out) Use 'go listobs' for antenna listing",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minblperant",
                    "name": "minblperant",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "Minimum baselines _per antenna_ required for solve default: 4 Antennas with fewer baselines are excluded from solutions. Amplitude solutions with fewer than 4 baselines, and phase solutions with fewer than 3 baselines are only trivially constrained, and are no better than baseline-based solutions. example: minblperant=10 --> Antennas participating on 10 or more baselines are included in the solve.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minsnr",
                    "name": "minsnr",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Reject solutions below this SNR (only applies for bandtype = B) default: 3.0",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solnorm",
                    "name": "solnorm",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Normalize bandpass amplitudes and phase for each spw, pol, ant, and timestamp default: False (no normalization)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bandtype",
                    "name": "bandtype",
                    "value": "B",
                    "defaultValue": "B",
                    "description": "Type of bandpass solution (B or BPOLY) default: 'B' 'B' does a channel by channel solution for each specified spw. 'BPOLY' is somewhat experimental. It will fit an nth order polynomial for the amplitude and phase as a function of frequency. Only one fit is made for all specified spw, and edge channels should be omitted. Use taskname=plotcal in order to compare the results from B and BPOLY. Example: bandtype='BPOLY'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smodel",
                    "name": "smodel",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Point source Stokes parameters for source model. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "corrdepflags",
                    "name": "corrdepflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "f False (default), if any correlation is flagged, treat all correlations in the visibility vector as flagged when solving (per channel, per baseline). If True, use unflagged correlations in a visibility vector, even if one or more other correlations are flagged. Default: False (treat correlation vectors with one or more correlations flagged as entirely flagged) Traditionally, CASA has observed a strict interpretation of correlation-dependent flags: if one or more correlations (for any baseline and channel) is flagged, then all available correlations for the same baseline and channel are treated as flagged.  However, it is desirable in some circumstances to relax this stricture, e.g., to preserve use of data from antennas with only one good polarization (e.g., one polarization is bad or entirely absent).  Solutions for the bad or missing polarization will be rendered as flagged.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Append solutions to the (existing) table default: False (overwrite existing table or make new table) Append solutions to the (existing) table. Appended solutions must be derived from the same MS as the existing caltable, and solution spws must have the same meta-info (according to spw selection and solint) or be non-overlapping.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fillgaps",
                    "name": "fillgaps",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Fill flagged solution channels by interpolation Subparameter of bandtype='B' default: 0 (don't interpolate) Example: fillgaps=3 (interpolate gaps 3 channels wide and narrower)",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "degamp",
                    "name": "degamp",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "Polynomial degree for BPOLY amplitude solution Subparameter of bandtype='BPOLY' default: 3 Example: degamp=2",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "degphase",
                    "name": "degphase",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "Polynomial degree for BPOLY phase solution Subparameter of bandtype='BPOLY' default: 3 Example: degphase=2",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "visnorm",
                    "name": "visnorm",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Normalize data prior to BPOLY solution Subparameter of bandtype='BPOLY' default: False Example: visnorm=True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maskcenter",
                    "name": "maskcenter",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Number of channels to avoid in center of each band Subparameter of bandtype='BPOLY' default: 0 Example: maskcenter=5 (BPOLY only)",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maskedge",
                    "name": "maskedge",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Fraction of channels to avoid at each band edge (in %) Subparameter of bandtype='BPOLY' default: 5 Example: maskedge=3 (BPOLY only)",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Control means of specifying the caltables default: False --> Use gaintable, gainfield, interp, spwmap, calwt. If True, specify a file containing cal library in callib",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "",
                    "defaultValue": "",
                    "description": "Cal Library filename Subparameter of callib=True If docallib=True, specify a file containing cal library directives",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Gain calibration table(s) to apply on the fly Subparameter of callib=False default: '' (none) Examples: gaintable='ngc5921.gcal' gaintable=gc5921.ampcal','ngc5921.phcal']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) Subparameter of callib=False default:'' --> all sources in table gaintable='nearest' --> nearest (on sky) available field in table. Otherwise, same syntax as field Examples: gainfield='0~2,5' means use fields 0,1,2,5 from gaintable gainfield=['0~3','4~6'] (for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation parmameters (in timereq]) for each gaintable, as a list of strings. Default: '' --> 'linear,linear' for all gaintable(s) Options: Time: 'nearest', 'linear' Freq: 'nearest', 'linear', 'cubic', 'spline' Specify a list of strings, aligned with the list of caltable specified in gaintable, that contain the required interpolation parameters for each caltable. - When frequency interpolation is relevant (B, Df, Xf), separate time-dependent and freq-dependent interp types with a comma (freq after the comma). - Specifications for frequency are ignored when the calibration table has no channel-dependence. - Time-dependent interp options ending in 'PD' enable a phase delay\" correction per spw for non-channel-dependent calibration types. - For multi-obsId datasets, 'perobs' can be appended to the time-dependent interpolation specification to enforce obsId boundaries when interpolating in time. - Freq-dependent interp options can have 'flag' appended to enforce channel-dependent flagging, and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window mappings to form for gaintable(s) Only used if callib=False default:  (apply solutions from each calibration spw to the same MS spw only) Any available calibration spw can be mechanically mapped to any MS spw. Examples: spwmap=[0,0,1,1] means apply calibration from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3. spwmap=0,0,1,1],[0,1,0,1]] (use a list of lists for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parang",
                    "name": "parang",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Apply parallactic angle correction default: False If True, apply the parallactic angle correction",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -6,
            "text": "blcal",
            "description": "Apply parallactic angle correction Default: False If True, apply the parallactic angle correction",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.blcal",
                    "defaultValue": "casatasks.blcal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output gain calibration table Default: none Example: caltable='ngc5921.gcal'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels) Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='\\*BANDPASS\\*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. Default = '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilo-lambda uvrange='0~1000km'; uvrange in kilometers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Solution interval Default: 'inf' (infinite, up to boundaries controlled by combine); Options: 'inf' (~infinite), 'int' (per integration), any float or integer value with or without units Examples: solint='1min'; solint='60s', solint=60 (i.e., 1 minute); solint='0s'; solint=0; solint='int' (i.e., per integration); solint-'-1s'; solint='inf' (i.e., ~infinite, up to boundaries enforced by combine)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "scan",
                    "defaultValue": "scan",
                    "description": "Data axes which to combine for solve Default: 'scan' (solutions will break at obs, field, and spw boundaries, but may extend over multiple scans er obs, field, and spw] up to solint.) Options: '','obs','scan','spw',field', or any comma-separated combination in a single string Example: combine='scan,spw' - Extend solutions over scan boundaries (up to the solint), and combine spws for solving",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqdep",
                    "name": "freqdep",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Solve for frequency dependent solutions Default: False (gain; True=bandpass) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calmode",
                    "name": "calmode",
                    "value": "ap",
                    "defaultValue": "ap",
                    "description": "Type of solution ('ap', 'p', 'a') Default: 'ap' (amp and phase) Options: 'p' (phase) ,'a' (amplitude), 'ap' (amplitude and phase) Example: calmode='p'\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solnorm",
                    "name": "solnorm",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Normalize average solution amplitudes to 1.0 Default: False (no normalization) For freqdep=False, this is a global (per-spw) normalization of amplitudes (only). For freqdep=True, each baseline  solution spectrum is separately normalized by its (complex) mean.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Gain calibration table(s) to apply on the fly Default: '' (none) Examples: gaintable='ngc5921.gcal' gaintable=gc5921.ampcal','ngc5921.phcal']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) Default: '' (all sources on the sky) 'nearest' ==> nearest (on sky) available field in table otherwise, same syntax as field Examples: gainfield='0~3' gainfield=['0~3','4~6']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation parmameters (in timereq]) for each gaintable, as a list of strings. Default: '' --> 'linear,linear' for all gaintable(s) Options: Time: 'nearest', 'linear' Freq: 'nearest', 'linear', 'cubic', 'spline' Specify a list of strings, aligned with the list of caltable specified in gaintable, that contain the required interpolation parameters for each caltable. - When frequency interpolation is relevant (B, Df, Xf), separate time-dependent and freq-dependent interp types with a comma (freq after the comma). - Specifications for frequency are ignored when the calibration table has no channel-dependence. - Time-dependent interp options ending in 'PD' enable a phase delay\" correction per spw for non-channel-dependent calibration types. - For multi-obsId datasets, 'perobs' can be appended to the time-dependent interpolation specification to enforce obsId boundaries when interpolating in time. - Freq-dependent interp options can have 'flag' appended to enforce channel-dependent flagging, and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window mappings to form for gaintable(s) default:  (apply solutions from each calibration spw to the same MS spw only) Any available calibration spw can be mechanically mapped to any MS spw. Examples: spwmap=[0,0,1,1] means apply calibration from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3. spwmap=0,0,1,1],[0,1,0,1]] (use a list of lists for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parang",
                    "name": "parang",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Apply parallactic angle correction Default: False If True, apply the parallactic angle correction",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -7,
            "text": "calstat",
            "description": "Which data column to use if axis is 'amp', 'amplitude', 'phase', 'real', 'imag' or 'imaginary'. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.calstat",
                    "defaultValue": "casatasks.calstat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input calibration table Default: '' Example: vis='ggtau.1mm.amp.gcal'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axis",
                    "name": "axis",
                    "value": "amplitude",
                    "defaultValue": "amplitude",
                    "description": "Which data to analyze. Default: 'amplitude' Options: 'amp', 'amplitude', 'phase', 'real', 'imag', 'imaginary'. Also, the name of any real valued MS column can be given, e.g. TIME, POLY_COEFF_AMP, REF_ANT, ANTENNA1, FLAG, ... Note: the phase of a complex number is in radians in the range i; pi].",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "gain",
                    "defaultValue": "gain",
                    "description": "Which data column to use if axis is 'amp', 'amplitude', 'phase', 'real', 'imag' or 'imaginary'. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -8,
            "text": "clearcal",
            "description": "add MODEL_DATA along with CORRECTED_DATA? Default: False (model will not be added) Options: False|True If False, it will add/reset only CORRECTED_DATA, model visibilities will then be evaluated when needed.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.clearcal",
                    "defaultValue": "casatasks.clearcal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30 type 'help par.selection' for more examples.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent default: '' (no selection by intent) Example: intent='*BANDPASS*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "addmodel",
                    "name": "addmodel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "add MODEL_DATA along with CORRECTED_DATA? Default: False (model will not be added) Options: False|True If False, it will add/reset only CORRECTED_DATA, model visibilities will then be evaluated when needed.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -9,
            "text": "clearstat",
            "description": "Output port parsing technique",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.clearstat",
                    "defaultValue": "casatasks.clearstat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -10,
            "text": "concat",
            "description": "Make sure that there is only one joint ephemeris for every field in this list Default: '' (standard treatment of all ephemeris fields) By default, concat will only merge two ephemeris fields if the first ephemeris covers the time range of the second. Otherwise, two separate fields with separate ephemerides are placed in the output MS. In order to override this behaviour and make concat merge the non-overlapping or only partially overlapping input ephemerides, the name or id of the field in question needs to be placed into the list in parameter 'forcesingleephemfield'. Example: eptune'] - will make sure that there is only one joint ephemeris for field Neptune in",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.concat",
                    "defaultValue": "casatasks.concat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name of input visibility file default: none Example: vis='rc2.ms','ngc5921.ms','ngc315.ms']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "concatvis",
                    "name": "concatvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of visibility file that will contain the concatenated data default: none Example: concatvis='outvis.ms' Note: if this file exits on disk then the input files are added to this file.  Otherwise the new file contains the concatenated data. Be careful here when concatenating to an existing file.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqtol",
                    "name": "freqtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Frequency shift tolerance for considering data as the same spwid. The number of channels must also be the same. Default: '' == 1 Hz Example: freqtol='10MHz' will not combine spwid unless they are within 10 MHz. Note: This option is useful to combine spectral windows with very slight frequency differences caused by Doppler tracking, for example.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dirtol",
                    "name": "dirtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Direction shift tolerance for considering data as the same field Default: '' == 1 mas (milliarcsec) Example: dirtol='1arcsec' will not combine data for a field unless their phase center differ by less than 1 arcsec. Note: If the field names are different in the input data sets, the name in the output data set will be the first relevant data set in the list.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "respectname",
                    "name": "respectname",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, fields with a different name are not merged even if their direction agrees (within dirtol) Default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timesort",
                    "name": "timesort",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, sort by TIME in ascending order Default: False (data in order as read in) Example: timesort=True Note: There is no constraint on data that is simultaneously observed for more than one field; for example multi-source correlation of VLBA data.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "copypointing",
                    "name": "copypointing",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Make a proper copy of the POINTING subtable Default:True (can be time consuming!) If False, the result is an empty POINTING table.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "visweightscale",
                    "name": "visweightscale",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of the weight scaling factors to be applied to the individual MSs Default:  (empty list) - no scaling The weights of the individual MSs will be scaled in the concatenated output MS by the factors in this list. SIGMA will be scaled by 1/sqrt(factor). Useful for handling heterogeneous arrays. Use plotms to inspect the Wt\" column as a reference for determining the scaling factors. Example: [1.,3.,3.] - scale the weights of the second and third MS by a factor 3 and the SIGMA column of these MS by a factor 1",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "forcesingleephemfield",
                    "name": "forcesingleephemfield",
                    "value": "",
                    "defaultValue": "",
                    "description": "Make sure that there is only one joint ephemeris for every field in this list Default: '' (standard treatment of all ephemeris fields) By default, concat will only merge two ephemeris fields if the first ephemeris covers the time range of the second. Otherwise, two separate fields with separate ephemerides are placed in the output MS. In order to override this behaviour and make concat merge the non-overlapping or only partially overlapping input ephemerides, the name or id of the field in question needs to be placed into the list in parameter 'forcesingleephemfield'. Example: eptune'] - will make sure that there is only one joint ephemeris for field Neptune in",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -11,
            "text": "conjugatevis",
            "description": "Overwrite the outputvis if it exists? Default: False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.conjugatevis",
                    "defaultValue": "casatasks.conjugatevis",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwlist",
                    "name": "spwlist",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window selection Default: (all spws will be conjugated) Example: spw=[1,2]",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: 'conjugated\\_'+vis Example: outputvis='conjugated.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite the outputvis if it exists? Default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -12,
            "text": "cvel",
            "description": "If true, Hanning smooth data before regridding to remove Gibbs ringing. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.cvel",
                    "defaultValue": "casatasks.cvel",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input measurement set ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output measurement set ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "passall",
                    "name": "passall",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Pass through (write to output MS) non-selected data with no change ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of time to select from data ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "scan number range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "(sub)array indices ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "channel",
                    "defaultValue": "channel",
                    "description": "Regridding mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Number of channels in output spw (-1=all). Used for regridding, together with \\'start\\' and \\'width\\'. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Start of the output visibilities. Used for regridding, together with \\'width\\' and \\'nchan\\'. It can be in different units, depending on the regridding mode: first input channel (mode=\\'channel\\'), first velocity (mode=\\'velocity\\'), or first frequency (mode=\\'frequency\\'). Example values: \\'5\\', \\'0.0km/s\\', \\'1.4GHz\\', for channel, velocity, and frequency modes, respectively. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Channel width of the output visibilities. Used for regridding, together with \\'start\\', and \\'nchan\\'. It can be in different units, depending on the regridding mode: number of input channels (mode=\\'channel\\'), velocity (mode=\\'velocity\\'), or frequency (mode=\\'frequency\\'. Example values: \\'2\\', \\'1.0km/s\\', \\'1.0kHz\\', for channel, velocity, and frequency modes, respectively. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Spectral interpolation method ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Phase center direction to be used for the spectral coordinate transformation: direction measure or field index ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "rest frequency (see help) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output frame (not case-sensitive, \\'\\'=keep input frame) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "velocity definition ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hanning",
                    "name": "hanning",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, Hanning smooth data before regridding to remove Gibbs ringing. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -13,
            "text": "cvel2",
            "description": "Hanning smooth data to remove Gibbs ringing. Default: False Options: False|True",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.cvel2",
                    "defaultValue": "casatasks.cvel2",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file or Multi-MS Default: none Example: vis='ngc5921_out.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepmms",
                    "name": "keepmms",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If the input is a Multi-MS the output will also be a Multi-MS. Default: True By default it will create a Multi-MS when the input is a Multi-MS. The output Multi-MS will have the same partition axis of the input MMS. See 'help partition' for more information on the MMS format. NOTE: It is not possible to combine the spws if the input MMS was partitioned with separationaxis='spw'. In this case, the task will abort with an error.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "passall",
                    "name": "passall",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "HIDDEN parameter. Pass through (write to output MS) non-selected data with no change ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: ''=all spectral windows and channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work. NOTE: mstransform does not support multiple channel ranges per spectral window.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers antenna='!ea03,ea12,ea17': all baselines except those that include EVLA antennas ea03, ea12, or ea17.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on correlation Default: '' (all) Example: correlation='XX,YY'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='*BANDPASS*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select (sub)array(s) by array ID number. Default = '' (all)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Multi-feed numbers: Not yet implemented. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Which data column(s) to process. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "channel",
                    "defaultValue": "channel",
                    "description": "Regridding mode (channel/velocity/frequency/channel_b). Default: 'channel' Options: 'channel', 'velocity', 'frequency', 'channel_b' * mode = 'channel'; Use with nchan, start, width to specify output spw. Produces equidistant grid based on first selected channel. * mode = 'velocity', means channels are specified in velocity. * mode = 'frequency', means channels are specified in frequency. * mode = 'channel_b', alternative 'channel' mode. Does not force an equidistant grid. Faster. Examples: spw = '0,1'; mode = 'channel' will produce a single spw containing all channels in spw 0 and 1 spw='0:5~28^2'; mode = 'channel' will produce a single spw made with channels (5,7,9,...,25,27) spw = '0'; mode = 'channel': nchan=3; start=5; width=4 will produce an spw with 3 output channels - new channel 1 contains data from channels (5+6+7+8) - new channel 2 contains data from channels (9+10+11+12) - new channel 3 contains data from channels (13+14+15+16) spw = '0:0~63^3'; mode='channel'; nchan=21; start = 0; width = 1 will produce an spw with 21 channels - new channel 1 contains data from channel 0 - new channel 2 contains data from channel 2 - new channel 21 contains data from channel 61 spw = '0:0~40^2'; mode = 'channel'; nchan = 3; start = 5; width = 4 will produce an spw with three output channels - new channel 1 contains channels (5,7) - new channel 2 contains channels (13,15) - new channel 3 contains channels (21,23)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Number of channels in the output spw (-1=all). Subparameter of mode='channel|velocity|frequency|channel_b' Default: -1 = all channels Used for regridding, together with 'start' and 'width'. Example: nchan=3",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Start or end input channel (zero-based), depending on the sign of the width parameter Subparameter of mode='channel|velocity|frequency|channel_b' Used for regridding, together with 'width' and 'nchan'. It can be in different units, depending on the regridding mode: - first input channel (mode='channel'), - first velocity (mode='velocity'), or - first frequency (mode='frequency'). Example values: '5', '0.0km/s', '1.4GHz', for channel, velocity, and frequency modes, respectively.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Channel width of the output visibilities. Subparameter of mode='channel|velocity|frequency|channel_b' Used for regridding, together with 'start', and 'nchan'. It can be in different units, depending on the regridding mode: number of input channels (mode='channel'), velocity (mode='velocity'), or frequency (mode='frequency'. Example values: '2', '1.0km/s', '1.0kHz', for channel, velocity, and frequency modes, respectively. Note: the sign indicates whether the start parameter is lower(+) or upper(-) end of the range.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Spectral interpolation method Subparameter of mode='channel|velocity|frequency|channel_b' Default = 'linear' Options: linear, nearest, cubic, spline, fftshift",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Phase center direction to be used for the spectral coordinate transformation. Default: '' (first selected field) Options: FIELD_ID (int) or center coordinate measure (str). Phase direction measure  or fieldid. To be used in mosaics to indicate the center direction to be used in the spectral coordinate transformation. Examples: phasecenter=6 phasecenter='J2000 19h30m00 -40d00m00'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rest frequency to use for output visibilities. Default='' Occasionally it is necessary to set this (for example some VLA spectral line data).  For example for NH_3 (1,1) put restfreq='23.694496GHz'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output reference frame (not case-sensitive). Default: '' (keep original reference frame) Options: LSRK, LSRD, BARY, GALACTO, LGROUP, CMB, GEO, TOPO, or SOURCE SOURCE is meant for solar system work and corresponds to GEO + radial velocity correction for ephemeris objects. Example: outframe='BARY'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "Definition of velocity (in mode) Default = 'radio'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hanning",
                    "name": "hanning",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Hanning smooth data to remove Gibbs ringing. Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -14,
            "text": "delmod",
            "description": "Delete the MODEL_DATA scr col (if it exists) Default: False Note: it is not possible to delete the MODEL_DATA column per field. If otf=F and scr=F, delmod will provide a listing of the header field records.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.delmod",
                    "defaultValue": "casatasks.delmod",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "otf",
                    "name": "otf",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Delete the on-the-fly model data keywords Default=True The 'otf' representation is the 'scratch-less' model data, stored as keywords in the MS header containing model data formation instructions.  It is generated by the setjy, ft, and tclean tasks (usescratch=False), and if present, overrides the MODEL_DATA column (if present). If a user wishes to use the MODEL_DATA column _after_ having operated with the 'otf' representation, this task can be used to delete the 'otf' represenatation to make the MODEL_DATA column visible.  (Create the MODEL_DATA column by using usescratch=True in setjy, ft, or clean; or by running the clearcal task with addmodel=True.)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Subparameter of otf Default: '' (all fields' models will be deleted)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scr",
                    "name": "scr",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Delete the MODEL_DATA scr col (if it exists) Default: False Note: it is not possible to delete the MODEL_DATA column per field. If otf=F and scr=F, delmod will provide a listing of the header field records.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -15,
            "text": "exportasdm",
            "description": "Produce log output? Default: True Options: True|False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.exportasdm",
                    "defaultValue": "casatasks.exportasdm",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "asdm",
                    "name": "asdm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output ASDM directory (on disk) Default: none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "Which data column(s) to use for processing (case-insensitive). Default: 'corrected' Options: 'data', 'model', 'corrected', 'all','float_data', 'lag_data', 'float_data,data', 'lag_data,data' Example: datacolumn='data' NOTE: 'all' = whichever of the above that are present. If the requested column does not exist, the task will exit with an error.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "archiveid",
                    "name": "archiveid",
                    "value": "S0",
                    "defaultValue": "S0",
                    "description": "The X0 in uid://X0/X1/X2 Default: 'S0'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rangeid",
                    "name": "rangeid",
                    "value": "X1",
                    "defaultValue": "X1",
                    "description": "The X1 in uid://X0/X1/X2 Default: 'X1'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "subscanduration",
                    "name": "subscanduration",
                    "value": "24h",
                    "defaultValue": "24h",
                    "description": "Maximum duration of a subscan in the output ASDM Default: 24h",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sbduration",
                    "name": "sbduration",
                    "value": "2700s",
                    "defaultValue": "2700s",
                    "description": "Maximum duration of a scheduling block (and therefore exec block) in the output ASDM Default: '2700s' The sbduration parameter controls the number of execution blocks (EBs) into which exportasdm subdivides the visibilities from your input MS. If the total observation time in the MS is shorter than what is given in sbduration, a single EB will be created.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "apcorrected",
                    "name": "apcorrected",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Data to be marked as having atmospheric phase correction Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Produce log output? Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -16,
            "text": "exportfits",
            "description": "Drop all degenerate axes (e.g. Stokes and/or Frequency)? Default: False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.exportfits",
                    "defaultValue": "casatasks.exportfits",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input CASA image Default: none Example: fitsimage='3C273XC1.image'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsimage",
                    "name": "fitsimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output image FITS file Default: none Example: fitsimage='3C273XC1.fits'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "velocity",
                    "name": "velocity",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use velocity (rather than frequency) as spectral axis Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "optical",
                    "name": "optical",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use the optical (rather than radio) velocity convention Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bitpix",
                    "name": "bitpix",
                    "value": "-32",
                    "defaultValue": "-32",
                    "description": "Bits per pixel Default: -32 Example: bitpix=16",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpix",
                    "name": "minpix",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Minimum pixel value (if minpix > maxpix, value is automatically determined) ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxpix",
                    "name": "maxpix",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Maximum pixel value (if minpix > maxpix, value is automatically determined) Default: -1",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite output file if it exists? Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dropstokes",
                    "name": "dropstokes",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Drop the Stokes axis? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokeslast",
                    "name": "stokeslast",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Put Stokes axis last in header? Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "history",
                    "name": "history",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Write history to the FITS image? Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dropdeg",
                    "name": "dropdeg",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Drop all degenerate axes (e.g. Stokes and/or Frequency)? Default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -17,
            "text": "exportuvfits",
            "description": "Overwrite output file if it exists? Default: False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.exportuvfits",
                    "defaultValue": "casatasks.exportuvfits",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsfile",
                    "name": "fitsfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output UV FITS file Default: none Example: vis='ngc5921XC1.fits'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "corrected",
                    "defaultValue": "corrected",
                    "description": "Visibility file data column Default: corrected Options: 'data'(raw)|'corrected'|'model'|'weight' Example: datacolumn='model'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' --> all fields Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30 type 'help par.selection' for more examples.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "writesyscal",
                    "name": "writesyscal",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Write GC and TY tables. Not yet available. Default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "multisource",
                    "name": "multisource",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Write in multi-source format? Default: True Set to False if only one source is selected. Note: diffmap does not work on multisource uvfits files, so if planning on using diffmap on the resulting uvfits file, select a single source and set multisource = False. Otherwise use True. (If multiple sources are selected, a multi-source file will be written no matter what the setting of this parameter).",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combinespw",
                    "name": "combinespw",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Export the spectral windows as IFs? Default: True If True, export the spectral windows as IFs. All spectral windows must have same shape. Otherwise multiple windows will use multiple FREQIDs.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "writestation",
                    "name": "writestation",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Write station name instead of antenna name Default: True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "padwithflags",
                    "name": "padwithflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Fill in missing data with flags to fit IFs Subparameter of combinespw=True Default: True If True, and combinespw is True, fill in missing data as needed to fit the IF structure. This is appropriate if the MS had a few frequency-dependent flags applied, and was then time-averaged by split, or when exporting for use by difmap. If the spectral windows were observed at different times, padwithflags=True will add a large number of flags, making the output file significantly longer. It does not yet support spectral windows with different widths.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite output file if it exists? Default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -18,
            "text": "feather",
            "description": "Filter out the high spatial frequencies of the SD image Default: False If True the high spatial frequency in the SD image is rejected. Any data outside the maximum uv distance that the SD has illuminated  is filtered",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.feather",
                    "defaultValue": "casatasks.feather",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output feathered image Default: none Example: imagename='orion_combined.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "highres",
                    "name": "highres",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of high resolution (interferometer) image Default: none Example: imagename='orion_vla.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lowres",
                    "name": "lowres",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of low resolution (single dish) image Default: none Example: imagename='orion_gbt.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdfactor",
                    "name": "sdfactor",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Value by which to scale the Single Dish image. Default: 1.0 Basically modifying the flux scale of the SD image",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "effdishdiam",
                    "name": "effdishdiam",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "New effective SingleDish diameter to use in m Default: -1.0 (leave as is) Obviously one can only reduce the dish effective dish diameter in feathering.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lowpassfiltersd",
                    "name": "lowpassfiltersd",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Filter out the high spatial frequencies of the SD image Default: False If True the high spatial frequency in the SD image is rejected. Any data outside the maximum uv distance that the SD has illuminated  is filtered",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -19,
            "text": "fixplanets",
            "description": "If using pointing table information, use it from this timestamp Default: 'first' Examples: * 'median' will use the median timestamp for the given field using only the unflagged maintable rows * '2012/07/11/08:41:32' will use the given timestamp (must be within the observaton",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.fixplanets",
                    "defaultValue": "casatasks.fixplanets",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fixuvw",
                    "name": "fixuvw",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Recalculate Fourier-plane u,v,w coordinates? Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "direction",
                    "name": "direction",
                    "value": "",
                    "defaultValue": "",
                    "description": "If set, do not use pointing table but set direction to this value Default: '' (use pointing table) Example: 'J2000 19h30m00 -40d00m00' The direction can either be given explicitly or as the path to a JPL Horizons ephemeris. Alternatively, the ephemeris table can also be provided as mime format file. For more information, see the task pages of fixplanets in CASA Docs (https://casa.nrao.edu/casadocs/).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refant",
                    "name": "refant",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Reference antenna name(s); a prioritized list may be specified Default: 0 (antenna ID 0) Examples: refant='4' (antenna with index 4) refant='VA04' (VLA antenna #4) refant='EA02,EA23,EA13' (EVLA antenna EA02, use EA23 and EA13 as alternates if/when EA02 drops out) Use taskname=listobs for antenna listing",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reftime",
                    "name": "reftime",
                    "value": "first",
                    "defaultValue": "first",
                    "description": "If using pointing table information, use it from this timestamp Default: 'first' Examples: * 'median' will use the median timestamp for the given field using only the unflagged maintable rows * '2012/07/11/08:41:32' will use the given timestamp (must be within the observaton",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -20,
            "text": "fixvis",
            "description": "when applying a phase center shift, modify visibilities only in this/these column(s) Default: 'all' (DATA, CORRECTED, and MODEL) Example: datacolumn='DATA,CORRECTED' (will not",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.fixvis",
                    "defaultValue": "casatasks.fixvis",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: '' (same as vis) Example: outputvis='ngc5921_out.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refcode",
                    "name": "refcode",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference frame to convert UVW coordinates to Default: '' (refcode of PHASE_DIR in the FIELD table) Example: refcode='B1950'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reuse",
                    "name": "reuse",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Base UVW calculation on the old values? Default: True Options: True|False Note: ignored if parameter 'phasecenter' is set",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "If set to a valid direction: change the phase center for the given field to this value If given without the equinox, e.g. '0h01m00s +00d12m00s', the parameter is interpreted as a pair of offsets in RA and DEC to the present phasecenter. Example: phasecenter='J2000 9h25m00s -05d12m00s' Note: The RA offset can be given in units of time or angle. If given as a time (i.e. as a single number with a time unit as in, e.g., 12s or in the XXhXXmXXs or XX:XX:XX.XXX formats), it is applied as is. If given as an angle (e.g., 0.01deg), it is divided by the cos(DEC) before it is applied.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "distances",
                    "name": "distances",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "(experimental) List of the distances (as quanta) of the fields selected by field. Default:  (the distances of all fields are assumed to be infinity.) If not a list but just a single value is given, this is applied to all fields. Examples: distances=['2E6km', '3E6km'] distances='15au'",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "when applying a phase center shift, modify visibilities only in this/these column(s) Default: 'all' (DATA, CORRECTED, and MODEL) Example: datacolumn='DATA,CORRECTED' (will not",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -21,
            "text": "flagcmd",
            "description": "Overwrite an existing file given in 'outfile' to save the flag commands. Subparameter of savepars=True. options: True/False default: True; it will remove the existing file given in 'outfile' and save the current flag commands to a new file with the same name. When set to False, the task will exit with an error message if the file exist.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.flagcmd",
                    "defaultValue": "casatasks.flagcmd",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file or calibration table. default: '' (none) example: vis='uid___A002_X2a5c2f_X54.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inpmode",
                    "name": "inpmode",
                    "value": "table",
                    "defaultValue": "table",
                    "description": "Input mode for flag commands(table/list/xml) options: 'table','list','xml' default: 'table' (the input commands from FLAG_CMD table of the MS) inpmode='xml' inputs online flags from Flag.xml file in the MS. This mode has become largely obsolete with the deprecation of the importevla task (see the flagcmd task pages in CASA Docs for more information). This mode will not work for ALMA MS or cal tables. NOTE: You can only apply the flags from a list or xml; you will not be able to unapply them. Transfer the flag commands to the FLAG_CMD table if you want to unapply the flags (see 'inpfile' description below).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inpfile",
                    "name": "inpfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Source of flag commands. Subparameter of inpmode='table/list'. Path to MS containing FLAG_CMD (table), or name of an ASCII file, list of files or a list of Python strings to apply to MS or cal table (list). options:  with flag commands or  with filenames or '' with a filename. (String values must contain quotes around them or the parser will not work.) default: '' (read from FLAG_CMD table in the MS specified via 'vis') Main use is to read flags from internal FLAG_CMD, but one use case is to read the flag commands from an MS given in inpfile and apply them to another MS or cal table given in vis.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tablerows",
                    "name": "tablerows",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of rows of the FLAG_CMD table to read. Subparameter of inpmode='table/list'. default:  (read all rows) example: [0,1,2,10] NOTE: currently only takes integer lists, not parseable strings with ranges.  Use the Python range function to generate ranges, e.g. tablerows = range(0,30) + range(50,55) instead of '0~29,50~54' for now.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reason",
                    "name": "reason",
                    "value": "any",
                    "defaultValue": "any",
                    "description": "Select flag commands based on REASON(s). Subparameter of inpmode. default: 'any' (all flags regardless of reason) Examples: reason='FOCUS_ERROR' reason=OCUS_ERROR','SUBREFLECTOR_ERROR'] If inpfile is a list of files, the reasons given in this parameter will apply to all the files. NOTE: what is within the string is literally matched, e.g. reason='' matches only blank reasons, and reason ='FOCUS_ERROR,SUBREFLECTOR_ERROR' matches this compound reason string only",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "useapplied",
                    "name": "useapplied",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Select commands whose rows have APPLIED column set to True. Subparameter of inpmode='table'. options: True,False default: False If useapplied=True it will read in both applied and unapplied flags. IMPORTANT: The APPLIED column is set to True after a flag command is applied to the MS. In order to re-apply the same flag command, this parameter should be set to True.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tbuff",
                    "name": "tbuff",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Time buffer (sec) to pad flags. Subparameter of inpmode='xml'. default: 0.0",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ants",
                    "name": "ants",
                    "value": "",
                    "defaultValue": "",
                    "description": "Allowed flag antenna names to select by. Subparameter of inpmode='xml'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "action",
                    "name": "action",
                    "value": "apply",
                    "defaultValue": "apply",
                    "description": "Action to perform in MS and/or in inpfile options: apply/unapply/list/plot/clear/extract default: 'apply' Examples: -- action='apply': This operation will apply the commands chosen by inpmode. If inpmode='table' and inpfile='' then the APPLIED column in FLAG_CMD will be set to True. -- action='unapply': unapply flags in MS. (Not available for cal tables). This operation will unapply the commands chosen by inpmode='table' ONLY. After unapplying the commands, the task will update the APPLIED column to False. -- action='list': list and/or save flag commands. This operation will list the commands chosen by inpmode on the screen and save them to the MS or to a file without applying. It will save the commands to outfile if the parameter savepars is set to True. If outfile is None, it will save the commands to the MS given in 'vis'. -- action='plot': plot flags (ant vs. time). (Not available for cal tables). This operation will plot the flags chosen by inpmode to a matplotlib gui or to a file.  These will be sorted by antenna vs. time.  Most useful for showing the online flags. -- action='clear': clear flags from FLAG_CMD in the MS. (Not available for cal tables) This operation will delete the selected flag rows from the internal FLAG_CMD table of the MS. -- action='extract': extract internal flag dictionary. (Not available for cal tables) This option will return the internal flagging dictionary to python. There is no extant description of the format of this dictionary, as it is an internal device used by the flagcmd task. This action is provided for the convenience of advanced users. WARNING: choosing this action='clear' will disregard anything you set in inpmode and will always work on the FLAG_CMD table in vis. This can be used to totally delete rows from the FLAG_CMD table, when setting clearall=True.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Automatically backup the FLAG column before execution. Subparameter of action='apply/unapply'. options: True,False default: True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clearall",
                    "name": "clearall",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Delete all rows from FLAG_CMD. Subparameter of action='clear'. default: False (will not clear)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rowlist",
                    "name": "rowlist",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "FLAG_CMD rows to clear. Subparameter of action='clear'. default:  (all flags in table) example: [0,1,2,10] WARNING: this can be dangerous, and you must set clearall=True  to use this!!! This will delete the specified rows from the internal FLAG_CMD table for vis regardless of what mode is set to (useful for when you import from xml or file), and decide to redo it). This action will NOT unapply the commands. NOTE: currently only takes integer lists, not parseable strings with ranges.  Use the Python range function to generate ranges, e.g. rowlist = range(0,30) + range(50,55) instead of '0~29,50~54' for now.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "plotfile",
                    "name": "plotfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output file to save plot default: '' (plot to matplotlib window) WARNING: will only reliably plot individual flags per antenna and timerange (e.g. direct from xml)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "savepars",
                    "name": "savepars",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Save the flag commands to the FLAG_CMD table of the MS or to an output text file. options: True/False default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output file to save commands. Subparameter of savepars=True. default: ' '; it will save the commands in the FLAG_CMD table of the MS. example: outfile='flags.txt' will save the parameters in a text file.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Overwrite an existing file given in 'outfile' to save the flag commands. Subparameter of savepars=True. options: True/False default: True; it will remove the existing file given in 'outfile' and save the current flag commands to a new file with the same name. When set to False, the task will exit with an error message if the file exist.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -22,
            "text": "flagdata",
            "description": "Internal hidden parameter. Do not modify. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.flagdata",
                    "defaultValue": "casatasks.flagdata",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "manual",
                    "defaultValue": "manual",
                    "description": "Flagging mode Default: 'manual' Options: 'list', 'manual', 'clip', 'quack', 'shadow', 'elevation', 'tfcrop', 'rflag', 'antint', 'extend', 'unflag', 'summary' \\* 'list': Flag according to the data selection and flag commands specified in the input list. The input list may come from a text file, a list of text files or from a Python list of strings. Each input line may contain data selection parameters and any parameter specific to the mode given in the line. Default values will be used for the parameters that are not present in the line. Each line will be taken as a command to the task. If data is pre-selected using any of the selection parameters, then flagging will apply only to that subset of the MS. For optimization and whenever possible, the task will create a union of the data selection parameters present in the list and select only that portion of the MS. NOTE1: the flag commands will be applied only when action='apply'. If action='calculate' the flags will be calculated, but not applied. This is useful if display is set to something other than 'none'. If action='' or 'none', the flag commands will not be applied either. An empty action is useful only to save the parameters of the list to a file or to the FLAG_CMD sub-table. NOTE2: In list mode the parameter quackincrement=True is not supported as part of any quack flag command, unless it is the first command of the list. See more about this in the quack mode section of this help. \\* 'manual': Flag according to the data selection specified. This is the default mode \\* 'clip': Clip data according to values of the following subparameters. The polarization expression is given by the correlation parameter. For calibration tables, the solutions are also given by the correlation parameter. \\* 'quack': Option to remove specified part of scan beginning/end. \\* 'shadow': Option to flag data of shadowed antennas. This mode is not available for cal tables. All antennas in the antenna-subtable of the MS (and the corresponding diameters) will be considered for shadow-flag calculations. For a given timestep, an antenna is flagged if any of its baselines (projected onto the uv-plane) is shorter than  radius_1 + radius_2 - tolerance. The value of 'w' is used to determine which antenna is behind the other. The phase-reference center is used for antenna-pointing direction. \\* 'elevation': Option to flag based on antenna elevation. This mode is not available for cal tables. \\* 'tfcrop': Flag using the TFCrop autoflag algorithm. For each field, spw, timerange (specified by ntime), and baseline, (1) Average visibility amplitudes along time dimension to form an average spectrum (2) Calculate a robust piece-wise polynomial fit for the band-shape at the base of RFI spikes. Calculate 'stddev' of (data - fit). (3) Flag points deviating from the fit by more than N-stddev (4) Repeat (1-3) along the other dimension. This algorithm is designed to operate on un-calibrated data (step (2)), as well as calibrated data. It is recommended to extend the flags after running this algorithm. See the sub-parameter extendflags below. \\* 'rflag': Detect outliers based on the RFlag algorithm (ref. E.Greisen, AIPS, 2011). The polarization expression is given by the correlation parameter. Iterate through the data in chunks of time. For each chunk, calculate local statistics, and apply flags based on user supplied (or auto-calculated) thresholds. Step 1 : Time analysis (for each channel) -- calculate local rms of real and imag visibilities, within a sliding time window -- calculate the median rms across time windows, deviations of local rms from this median, and the median deviation -- flag if local rms is larger than timedevscale x (medianRMS + medianDev) Step 2 : Spectral analysis (for each time) -- calculate avg of real and imag visibilities and their rms across channels -- calculate the deviation of each channel from this avg, and the median-deviation -- flag if deviation is larger than freqdevscale x medianDev It is recommended to extend the flags after running this algorithm. See the sub-parameter extendflags below. Note that by default the flag implementation in CASA is able to calculate the thresholds and apply them on-the-fly (OTF). There is a significant performancegain with this approach, as the visibilities don't have to be read twice,and therefore is highly recommended. Otherwise it is possible toreproduce the AIPS usage pattern by doing a first run with 'calculate' mode and a second run with 'apply' mode. The advantage of this approach is that the thresholdsare calculated using the data from all scans, instead of calculating them for one scan only. For more information and examples of 'rflag', see the task pages of rflag in CASA Docs (https://casa.nrao.edu/casadocs/) \\* 'antint': Flag integrations if all baselines to a specified antenna are flagged This mode flag all integrations in which a specified antenna is flagged. This mode operates for an spectral window. It flags any integration in which all baselines to a specified antenna are flagged, but only if this condition is satisfied in a fraction of channels within the spectral window of interest greater than a nominated fraction. For simplicity, it assumes that all polarization products must be unflagged for a baseline to be deemed unflagged. The antint mode implements the flagging approach introduced in 'antintflag' (https://doi.org/10.5281/zenodo.163546) The motivating application for introducing this mode is removal of data that will otherwise lead to changes in reference antenna during gain calibration, which will in turn lead to corrupted polarization. \\* 'extend': Extend and/or grow flags beyond what the basic algorithms detect. This mode will extend the accumulated flags available in the MS, regardless of which algorithm created them. It is recommended that any autoflag (tfcrop, rflag) algorithm be followed up by a flag extension. Extensions will apply only within the selected data, according to the settings of extendpols,growtime,growfreq,growaround, flagneartime,flagnearfreq. Note : Runtime summary counts in the logger can sometimes report larger flag percentages than what is actually flagged. This is because extensions onto already-flagged data-points are counted as new flags. An accurate flag count can be obtained via the summary mode. \\* 'unflag': Unflag according to the data selection specified. \\* 'summary': List the number of rows and flagged data points for the MS's meta-data. The resulting summary will be returned as a Python dictionary.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "autocorr",
                    "name": "autocorr",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Flag only the auto-correlations? Subparameter of mode='manual' Default: False Options: False|True NOTE: this parameter is only active when set to True. If set to False it does NOT mean do not flag auto-correlations\". When set to True, it will only flag data from a processor of type CORRELATOR.\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inpfile",
                    "name": "inpfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input ASCII file, list of files or Python list of strings with flag commands. Subparameter of mode='list' Default: '' Options:  with flag commands or with filenames or '' with a filename. The parser will be strict and accept only valid flagdata parameters in the list. The parser evaluates the commands in the list and considers only existing Python types.It will check each parameter name and type and exit with an error if any of them is wrong. NOTE: There should be no whitespace between KEY=VALUE since the parser first breaks command lines on whitespace, then on =\". Use only one whitespace to separate the parameters (no commas).\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reason",
                    "name": "reason",
                    "value": "any",
                    "defaultValue": "any",
                    "description": "Select flag commands based on REASON(s) Subparameter of mode='list' Default: 'any' (all flags regardless of reason) Can be a string, or list of strings Examples: reason='FOCUS_ERROR' reason=OCUS_ERROR','SUBREFLECTOR_ERROR'] If inpfile is a list of files, the reasons given in this parameter will apply to all the files. NOTE: what is within the string is literally matched, e.g. reason='' matches only blank reasons, and reason = 'FOCUS_ERROR,SUBREFLECTOR_ERROR' matches this compound reason string only.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tbuff",
                    "name": "tbuff",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "A time buffer or list of time buffers to pad the timerange parameters in flag commands. Subparameter of mode='list' Default: 0.0 (it will not apply any time padding) When a list of 2 time buffers is given, it will subtract the first value from the lower time and the second value will be added to the upper time in the range. The 2 time buffer values can be different, allowing to have an irregular time buffer padding to time ranges. If the list contains only one time buffer, it will use it to subtract from t0 and add to t1. If more than one list of input files is given, tbuff will apply to all of the flag commands that have timerange parameters in the files. Each tbuff value should be a Float number given in seconds. Examples: tbuff=[0.5, 0.8] inpfile=nline.txt','userflags.txt'] The timeranges in the online.txt file are first converted to seconds. Then, 0.5 is subtracted from t0 and 0.8 is added to t1, where t0 and t1 are the two intervals given in timerange. Similarly, tbuff will be applied to any timerange in userflags.txt. IMPORTANT: This parameter assumes that timerange = t0 ~ t1, therefore it will not work if only t0 or t1 is given. NOTE: The most common use-case for tbuff is to apply the online flags that are created by importasdm when savecmds=True. The value of a regular time buffer should be tbuff=0.5\\*max(integration time).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels) Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work. NOTE: For modes clip, tfcrop and rflag, channel-ranges can be excluded from flagging by leaving them out of the selection range. This is a way to protect known spectral-lines from being flagged by the autoflag algorithms. For example, if spectral-lines fall in channels 6~9, set the selection range to spw='0:0~5;10~63'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers NOTE: for some antenna-based calibration tables, selecting baselines with the & syntax do not apply.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. Default = '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilo-lambda uvrange='0~1000km'; uvrange in kilometers NOTE: uvrange selection is not supported for cal tables.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on correlation Default: '' ==> all Options: Any of 'ABS', 'ARG', 'REAL', 'IMAG', 'NORM' followed by any of 'ALL', 'I', 'XX', 'YY', 'RR', 'LL', 'WVR' ('WVR' = water vapour radiometer of ALMA data). Example: correlation=XX,YY\". For modes clip, tfcrop or rflag, the default means ABS_ALL. If the input is cal table that does not contain a complex data column, the default will fall back to REAL_ALL. For calibration tables, the solutions are: 'Sol1', 'Sol2', Sol3, Sol4. NOTE: correlation selection is not supported for modes other than clip, tfcrop or rflag in cal tables.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='\\*BANDPASS\\*'  (selects data labelled with BANDPASS intent) NOTE: intent selection is not supported for cal tables.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on the antenna array Default: '' (all) NOTE: array selection is not supported for cal tables.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on the feed: Not yet implemented ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipminmax",
                    "name": "clipminmax",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Range to use for clipping Subparameter of mode='clip' Default:  (it will flag only NaN and Infs) It will always flag the NaN/Inf data, even when a range is specified. Example: [0.0,1.5]",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "DATA",
                    "defaultValue": "DATA",
                    "description": "Data column to image (data or observed, corrected) Subparameter of mode='clip|tfcrop|rflag' Default:'corrected' Options: data, corrected, model, weight, etc. If 'corrected' does not exist, it will use 'data' instead",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipoutside",
                    "name": "clipoutside",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Clip outside the range? Subparameter of mode='clip' Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "channelavg",
                    "name": "channelavg",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Pre-average data across channels before analyzing visibilities for flagging Subparameter of mode='clip|tfcrop|rflag' Default: False Options: False|True Pre-average data across channels before analyzing visibilities for flagging. Partially flagged data is  not be included in the average unless all data contributing to a given output channel is flagged. If present, WEIGHT_SPECTRUM / SIGMA_SPECTRUM are used to compute a weighted average (WEIGHT_SPECTRUM for CORRECTED_DATA and SIGMA_SPECTRUM for DATA). NOTE: Pre-average across channels is not supported for calibration tables",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanbin",
                    "name": "chanbin",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Bin width for channel average in number of input channels Subparameter of mode='clip|tfcrop|rflag' Default: 1 Bin width for channel average in number of input channels. If a list is given, each bin applies to one of the selected SPWs. When chanbin is set to 1 all input channels are used for the average to produce a single output channel, this behaviour aims to preserve backwards compatibility with the previous pre-averaging feature of clip mode.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timeavg",
                    "name": "timeavg",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Pre-average data across time before analyzing visibilities for flagging. Subparameter of mode='clip|tfcrop|rflag' Default: False Options: False|True Pre-average data across time before analyzing visibilities for flagging. Partially flagged data is  not be included in the average unless all data contributing to a given output channel is flagged. If present, WEIGHT_SPECTRUM / SIGMA_SPECTRUM are used to compute a weighted average (WEIGHT_SPECTRUM for  CORRECTED_DATA and SIGMA_SPECTRUM for DATA). Otherwise WEIGHT/SIGMA are used to average together data from different integrations. NOTE: Pre-average across time is not supported for calibration tables",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "0s",
                    "defaultValue": "0s",
                    "description": "Bin width for time average in seconds Subparameter of mode='clip|tfcrop|rflag' Default: '0s'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipzeros",
                    "name": "clipzeros",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Clip zero-value data Subparameter of mode='clip' Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "quackinterval",
                    "name": "quackinterval",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Time in seconds from scan beginning or end to flag. Subparameter of mode='quack' Default: 0.0 Note: Make time slightly smaller than the desired time.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "quackmode",
                    "name": "quackmode",
                    "value": "beg",
                    "defaultValue": "beg",
                    "description": "Quack mode flags the region of the scan given by one of the options below using the time set at quackinterval. Subparameter of mode='quack' Default: 'beg' Options: 'beg' : flag an interval at the beginning of scan 'endb': flag an interval at the end of scan 'tail': flag all but an interval at the beginning of scan 'end' : flag all but an interval at end of scan Visual representation of quack mode flagging one scan with 1s duration. The following diagram shows what is flagged for each quack mode when quackinterval is set to 0.25s. The flagged part is represented by crosses (+++++++++) scan with 1s duration -------------------------------------------- beg +++++++++++--------------------------------- endb ---------------------------------+++++++++++ tail -----------+++++++++++++++++++++++++++++++++ end +++++++++++++++++++++++++++++++++-----------",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "quackincrement",
                    "name": "quackincrement",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Increment quack flagging in time taking into account flagged data or not. Subparameter of mode='quack' Default: False Options: False|True False: the quack interval is counted from the scan boundaries, as determined by the quackmode parameter, regardless of if data has been flagged or not. True: the quack interval is counted from the first unflagged data in the scan. NOTE: on adding quack to a command in 'list' mode: quackincrement = True works based on the state of prior flagging, and unless it is the first item in the list the agent doing the quacking in list mode doesn't know about the state of prior flags. In this case, the command with quackincrement=True will be ignored and the task will issue a WARNING.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tolerance",
                    "name": "tolerance",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Amount of shadowing allowed (or tolerated), in meters. Subparameter of mode='shadow' Default: 0.0 A positive number allows antennas to overlap in projection. A negative number forces antennas apart in projection. Zero implies a distance of radius_1+radius_2 between antenna centers.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "addantenna",
                    "name": "addantenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "File name or dictionary with additional antenna names, positions and diameters Subparameter of mode='shadow' Default: '' It can be either a file name with additional antenna names, positions and diameters, or a Python dictionary with the same information. You can use the flaghelper functions to create the dictionary from a file. To create a dictionary inside casapy. > import flaghelper as fh > antdic = fh.readAntennaList(antfile) Where antfile is a text file in disk that contains information such as: name=VLA01 diameter=25.0 position=[-1601144.96146691, -5041998.01971858, 3554864.76811967] name=VLA02 diameter=25.0 position=[-1601105.7664601889, -5042022.3917835914, 3554847.245159178]",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lowerlimit",
                    "name": "lowerlimit",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Lower limiting elevation (in degrees) Subparameter of mode='elevation' Default: 0.0 Lower limiting elevation in degrees. Data coming from a baseline where one or both antennas were pointing at a strictly lower elevation (as function of time), will be flagged.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "upperlimit",
                    "name": "upperlimit",
                    "value": "90.0",
                    "defaultValue": "90.0",
                    "description": "Upper limiting elevation (in degrees) Subparameter of mode='elevation' Default: 90.0 Upper limiting elevation in degrees. Data coming from a baseline where one or both antennas were pointing at a strictly higher elevation (as function of time), will be flagged.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ntime",
                    "name": "ntime",
                    "value": "scan",
                    "defaultValue": "scan",
                    "description": "Timerange (in seconds or minutes) over which to buffer data before running the algorithm. Subparameter of mode='tfcrop|rflag|extend' Default: 'scan' Options: 'scan' or any other float value or string containing the units. The dataset will be iterated through in time-chunks defined here. Example: ntime='1.5min'; 1.2 (taken in seconds) WARNING: if ntime='scan' and combinescans=True, all the scans will be loaded at once, thus requesting a lot of memory depending on the available spws.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combinescans",
                    "name": "combinescans",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Accumulate data across scans depending on the value of ntime. Subparameter of mode='tfcrop|rflag|extend' Default: False Options: False|True This parameter should be set to True only when ntime is specified as a time-interval (not 'scan'). When set to True, it will remove SCAN from the sorting columns, therefore it will only accumulate across scans if ntime is not set to 'scan'.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timecutoff",
                    "name": "timecutoff",
                    "value": "4.0",
                    "defaultValue": "4.0",
                    "description": "Flagging thresholds in units of deviation from the fit Subparameter of mode='tfcrop' Default: 4.0 Flag all data-points further than N-stddev from the fit. This threshold catches time-varying RFI spikes (narrow and broad-band), but will not catch RFI that is persistent in time. Flagging is done in upto 5 iterations. The stddev calculation is adaptive and converges to a value that reflects only the data and no RFI. At each iteration, the same relative threshold is applied to detect flags. (Step (3) of the algorithm).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqcutoff",
                    "name": "freqcutoff",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Flag threshold in frequency. Subparameter of mode='tfcrop' Default: 3.0 Flag all data-points further than N-stddev from the fit. Same as timecutoff, but along the frequency-dimension. This threshold catches narrow-band RFI that may or may not be persistent in time.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timefit",
                    "name": "timefit",
                    "value": "line",
                    "defaultValue": "line",
                    "description": "Fitting function for the time direction (poly/line) Subparameter of mode='tfcrop' Default: 'line' Options: line|poly 'line': fit is a robust straight-line fit across the entire timerange (defined by 'ntime'). 'poly': fit is a robust piece-wise polynomial fit across the timerange. NOTE: A robust fit is computed in upto 5 iterations. At each iteration, the stddev between the data and the fit is computed, values beyond N-stddev are flagged, and the fit and stddev are re-calculated with the remaining points. This stddev calculation is adaptive, and converges to a value that reflects only the data and no RFI. It also provides a varying set of flagging thresholds, that allows deep flagging only when the fit best represents the true data. Choose 'poly' only if the visibilities are expected to vary significantly over the timerange selected by 'ntime', or if there is a lot of strong but intermittent RFI.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqfit",
                    "name": "freqfit",
                    "value": "poly",
                    "defaultValue": "poly",
                    "description": "Fitting function for the frequency direction (poly/line) Subparameter of mode='tfcrop' Default: 'poly' Options: line|poly Same as for the 'timefit' parameter. Choose 'line' only if you are operating on bandpass-corrected data, or residuals,and expect that the bandshape is linear. The 'poly' option works better on uncalibrated bandpasses with narrow-band RFI spikes.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxnpieces",
                    "name": "maxnpieces",
                    "value": "7",
                    "defaultValue": "7",
                    "description": "Number of pieces in the polynomial-fits (for freqfit\" or \"timefit\" = \"poly\") Subparameter of mode='tfcrop' Default: 7 Options: 1-9 This parameter is used only if 'timefit' or 'freqfit' are chosen as 'poly'. If there is significant broad-band RFI, reduce this number. Using too many pieces could result in the RFI being fitted in the 'clean' bandpass. In later stages of the fit, a third-order polynomial is fit per piece, so for best results, please ensure that nchan",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagdimension",
                    "name": "flagdimension",
                    "value": "freqtime",
                    "defaultValue": "freqtime",
                    "description": "Choose the directions along which to perform flagging Subparameter of mode='tfcrop' Default: 'freqtime' (first flag along frequency, and then along time) Options: 'time', 'freq', 'timefreq', 'freqtime' For most cases, 'freqtime' or 'timefreq' are appropriate, and differences between these choices are apparant only if RFI in one dimension is significantly stronger than the other. The goal is to flag the dominant RFI first. If there are very few (less than 5) channels of data, then choose 'time'. Similarly for 'freq'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usewindowstats",
                    "name": "usewindowstats",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "Use sliding-window statistics to find additional flags. Subparameter of mode='tfcrop' Default: 'none' Options: 'none', 'sum', 'std', 'both' NOTE: This is experimental! The 'sum' option chooses to flag a point, if the mean-value in a window centered on that point deviates from the fit by more than N-stddev/2.0. NOTE: stddev is calculated between the data and fit as explained in Step (2). This option is an attempt to catch broad-band or time-persistent RFI  that the above polynomial fits will mistakenly fit as the clean band. It is an approximation to the sumThreshold method found to be effective by Offringa et.al (2010) for LOFAR data. The 'std' option chooses to flag a point, if the 'local' stddev calculated in a window centered on that point is larger than N-stddev/2.0. This option is an attempt to catch noisy RFI that is not excluded in the polynomial fits, and which increases the global stddev, and results in fewer flags (based on the N-stddev threshold).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "halfwin",
                    "name": "halfwin",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Half-width of sliding window to use with usewindowstats\" (1,2,3). Subparameter of mode='tfcrop' Default: 1  (a 3-point window size) Options: 1, 2, 3 NOTE: This is experimental!\"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "extendflags",
                    "name": "extendflags",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Extend flags along time, frequency and correlation. Subparameter of mode='tfcrop|rflag' Default: True Options: True|False NOTE: It is usually helpful to extend the flags along time, frequency, and correlation using this parameter, which will run the extend\" mode after \"tfcrop\" and extend the flags if more than 50% of the timeranges are already flagged, and if more than 80% of the channels are already flagged. It will also extend the flags to the other polarizations. The user may also set extendflags to False and run the \"extend\" mode in a second step within the same flagging run: Example: cmd=ode='tfcrop' freqcutoff=3.0 usewindowstats='sum' extendflags=False\", \"mode='extend' extendpols=True growtime=50.0 growaround=True\"] flagdata(vis, mode='list', inpfile=cmd)\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "winsize",
                    "name": "winsize",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "Number of timesteps in the sliding time window ( fparm(1) in AIPS ) Subparameter of mode='rflag' Default: 3",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timedev",
                    "name": "timedev",
                    "value": "",
                    "defaultValue": "",
                    "description": "Time-series noise estimate ( noise in AIPS ) Subparameter of mode='rflag' Default: Examples: timedev = 0.5 : Use this noise-estimate to calculate flags. Do not recalculate. timedev = 1,9,0.2], [1,10,0.5] ] :  Use noise-estimate of 0.2 for field 1, spw 9, and noise-estimate of 0.5 for field 1, spw 10. timedev =  : Auto-calculate noise estimates. 'tdevfile.txt' : Auto-calculate noise estimates and write them into a file with the name given (any string will be interpreted as a file name which will be checked for existence).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqdev",
                    "name": "freqdev",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral noise estimate ( scutoff in AIPS ) Subparameter of mode='rflag' Default: This step depends on having a relatively-flat bandshape. Same parameter-options as 'timedev'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timedevscale",
                    "name": "timedevscale",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "Threshold scaling for timedev( fparm(9) in AIPS ). For Step 1 (time analysis), flag a point if local rms around it is larger than 'timedevscale' x 'timedev' (fparm(0) in AIPS) Subparameter of mode='rflag' Default: 5.0 This scale parameter is only applied when flagging (action='apply') and displaying reports (display option). It is not used when the thresholds are simply calculated and saved into files (action='calculate', as in the two-passes usage pattern of AIPS)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqdevscale",
                    "name": "freqdevscale",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "Threshold scaling for freqdev (fparm(10) in AIPS ). For Step 2 (spectral analysis), flag a point if local rms around it is larger than 'freqdevscale' x 'freqdev' (fparm(10) in AIPS) Subparameter of mode='rflag' Default: 5.0 Similarly as with timedevscale, freqdevscale is used when applying flags and displaying reports. It is not used when the thresholds are simply calculated and saved into files (action='calculate', as in the two-passes usage pattern of AIPS)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spectralmax",
                    "name": "spectralmax",
                    "value": "1000000.0",
                    "defaultValue": "1000000.0",
                    "description": "Flag whole spectrum if 'freqdev' is greater than spectralmax ( fparm(6) in AIPS ) Subparameter of mode='rflag' Default: 1E6",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spectralmin",
                    "name": "spectralmin",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Flag whole spectrum if 'freqdev' is less than spectralmin ( fparm(5) in AIPS ) Subparameter of mode='rflag' Default: 0.0",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antint_ref_antenna",
                    "name": "antint_ref_antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Antenna of interest. Baselines with this antenna will be checked for flagged channels. Subparameter of mode='antint' Note that this is not the same as the general 'antenna' parameter of flagdata. The parameter antint_ref_antenna is mandatory with the 'antint' mode and chooses the antenna for which the fraction of channels flagged will be checked.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minchanfrac",
                    "name": "minchanfrac",
                    "value": "0.6",
                    "defaultValue": "0.6",
                    "description": "Minimum fraction of flagged channels required for a baseline to be deemed as flagged Subparameter of mode='antint' Takes values between 0-1 (float). In this mode flagdata does the following for every point in time. It checks the fraction of channels flagged for any of the polarization products and for every baseline to the antenna of interest. If the fraction is higher than this 'minchanfrac' threshold then the data are flagged for this pont in time (this includes all the rows selected with the flagdata command that have that timestamp). This parameter will be ignored if spw specifies a channel.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Print timestamps of flagged integrations to the log Subparameter of mode='antint' Examples: flagdata(vis, ..., spw='9', antint_ref_antenna='ea01') flagdata(vis, ..., spw='9', antint_ref_antenna='ea01', minchanfrac=0.3, verbose=True) ==> reduce the fraction of channels that are required to be flagged, and print information for every integration that is flagged.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "extendpols",
                    "name": "extendpols",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Extend flags to all selected correlations Subparameter of mode='extend' Default: True Options: True|False For example, to extend flags from RR to only RL and LR, a data-selection of correlation='RR,LR,RL' is required along with extendpols=True.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "growtime",
                    "name": "growtime",
                    "value": "50.0",
                    "defaultValue": "50.0",
                    "description": "For any channel, flag the entire timerange in the current 2D chunk (set by 'ntime') if more than X% of the timerange is already flagged. Subparameter of mode='extend' Default: 50.0 Options:  0.0 - 100.0 This option catches the low-intensity parts of time-persistent RFI.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "growfreq",
                    "name": "growfreq",
                    "value": "50.0",
                    "defaultValue": "50.0",
                    "description": "For any timestep, flag all channels in the current 2D chunk (set by  data-selection) if more than X% of the channels are already flagged. Subparameter of mode='extend' Default: 50.0 Options:  0.0 - 100.0 This option catches broad-band RFI that is partially identified by earlier steps.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "growaround",
                    "name": "growaround",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Flag a point based on the number of flagged points around it. Subparameter of mode='extend' Default: False Options: False|True For every un-flagged point on the 2D time/freq plane, if more than four surrounding points are already flagged, flag that point. This option catches some wings of strong RFI spikes.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagneartime",
                    "name": "flagneartime",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Flag points before and after every flagged one, in the time-direction. Subparameter of mode='extend' Default: False Options: False|True NOTE: This can result in excessive flagging.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagnearfreq",
                    "name": "flagnearfreq",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Flag points before and after every flagged one, in the frequency-direction Subparameter of mode='extend' Default: False Options: False|True NOTE:  This can result in excessive flagging",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minrel",
                    "name": "minrel",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Minimum number of flags (relative) to include in histogram Subparameter of mode='summary' Default: 0.0",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxrel",
                    "name": "maxrel",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Maximum number of flags (relative) to include in histogram Subparameter of mode='summary' Default: 1.0",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minabs",
                    "name": "minabs",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Minimum number of flags (absolute, inclusive) to include in histogram Subparameter of mode='summary' Default: 0",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxabs",
                    "name": "maxabs",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Maximum number of flags (absolute, inclusive) to include in histogram Subparameter of mode='summary' Default: -1 To indicate infinity, use any negative number.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwchan",
                    "name": "spwchan",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List the number of flags per spw and per channel. Subparameter of mode='summary' Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwcorr",
                    "name": "spwcorr",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List the number of flags per spw and per correlation. Subparameter of mode='summary' Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "basecnt",
                    "name": "basecnt",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List the number of flags per baseline Subparameter of mode='summary' Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fieldcnt",
                    "name": "fieldcnt",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Produce a separated breakdown per field Subparameter of mode='summary' Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "name",
                    "name": "name",
                    "value": "Summary",
                    "defaultValue": "Summary",
                    "description": "Name for this summary, to be used as a key in the returned Python dictionary Subparameter of mode='summary' Default: 'Summary' It is possible to call the summary mode multiple times in list mode. When calling the summary mode as a command in a list, one can give different names to each one of them so that they can be easily pulled out of the summary's dictionary. In summary mode, the task returns a dictionary of flagging statistics. Example 1: s = flagdata(..., mode='summary') Then s will be a dictionary which contains sotal']   : total number of data slagged'] : amount of flagged data Example 2: Two summary commands in list mode, intercalating a manual flagging command. s = flagdata(..., mode='list', inpfile=ode='summary' name='InitFlags', \"mode='manual' autocorr=True\", \"mode='summary' name='Autocorr'\"]) The dictionary returned in 's' will contain two dictionaries, one for each of the two summary modes. seport0']ame'] : 'InitFlags' seport1']ame'] : 'Autocorr'\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "action",
                    "name": "action",
                    "value": "apply",
                    "defaultValue": "apply",
                    "description": "Action to perform in MS/cal table or in the input list of parameters. Default: 'apply' Options:  'none', 'apply','calculate' - 'apply': Apply the flags to the MS. - 'calculate': Only calculate the flags but do not write them to the MS. This is useful if used together with the display to analyse the results before writing to the MS. - '': When set to empty, the underlying tool will not be executed and no flags will be produced. No data selection will be done either. This is useful when used together with the parameter savepars to only save the current parameters (or list of parameters) to the FLAG_CMD sub-table or to an external file.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "display",
                    "name": "display",
                    "value": "",
                    "defaultValue": "",
                    "description": "Display data and/or end-of-MS reports at runtime. Subparameter of action='apply|calculate' Default: 'none' Options: 'none', 'data', 'report', 'both' - 'none': will not display anything. - 'data': display data and flags per-chunk at run-time, within an interactive GUI. This option opens a GUI to show the 2D time-freq planes of the data with old and new flags, for all correlations per baseline. -- The GUI allows stepping through all baselines (prev/next) in the current chunk (set by 'ntime'), and stepping to the next-chunk. -- The 'flagdata' task can be quit from the GUI, in case it becomes obvious that the current set of parameters is just wrong. -- There is an option to stop the display but continue flagging. - 'report': displays end-of-MS reports on the screen. - 'both': displays data per chunk and end-of-MS reports on the screen",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Automatically backup flags before the run? Default: True Options: True|False Flagversion names are chosen automatically, and are based on the mode being used.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "savepars",
                    "name": "savepars",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Save the current parameters to the FLAG_CMD table of the MS or to an output text file? Default: False Options: False|True Note that when display is set to anything other than 'none', savepars will be disabled. This is done because in an interactive mode, the user may skip data which may invalidate the initial input parameters and there is no way to save the interactive commands. When the input is a calibration table it is only possible to save the parameters to a file.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cmdreason",
                    "name": "cmdreason",
                    "value": "",
                    "defaultValue": "",
                    "description": "A string containing a reason to save to the FLAG_CMD table or to an output text file given by the outfile sub-parameter. Subparameter of savepars=True Default: '' (no reason will be added to output) If the input  contains any reason, they will be replaced with this one. At the moment it is not possible to add more than one reason. Example: cmdreason='CLIP_ZEROS'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output file to save current parameters. If empty, save to FLAG_CMD Subparameter of savepars=True Default: '' (save the parameters to the FLAG_CMD table of the MS) Example: outfile='flags.txt' will save the parameters in a text file.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Overwrite the existing file given in 'outfile' Default: True Options: True|False The default True will remove the existing file given in 'outfile' and save the current flag commands to a new file with the same name. When set to False, the task will exit with an error message if the file exist.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "writeflags",
                    "name": "writeflags",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Internal hidden parameter. Do not modify. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -23,
            "text": "flagmanager",
            "description": "Merge option: replace will save or over-write the flags ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.flagmanager",
                    "defaultValue": "casatasks.flagmanager",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "list",
                    "defaultValue": "list",
                    "description": "Operation: list, save, restore, delete, rename ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "versionname",
                    "name": "versionname",
                    "value": "",
                    "defaultValue": "",
                    "description": "Flag version name ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "oldname",
                    "name": "oldname",
                    "value": "",
                    "defaultValue": "",
                    "description": "Flag version to rename ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "comment",
                    "name": "comment",
                    "value": "",
                    "defaultValue": "",
                    "description": "Short description of a versionname ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "merge",
                    "name": "merge",
                    "value": "replace",
                    "defaultValue": "replace",
                    "description": "Merge option: replace will save or over-write the flags ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -24,
            "text": "fluxscale",
            "description": "Display statistics and/or spectral fitting results. Default: False Options: False|True Currently only a histogram of the correction factors to derive the final flux density for each",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.fluxscale",
                    "defaultValue": "casatasks.fluxscale",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input calibration table Default: none Example: caltable='ngc5921.gcal'. This cal table was obtained from task gaincal.=",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fluxtable",
                    "name": "fluxtable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output, flux-scaled calibration table (required) Default: none Example: fluxtable='ngc5921.gcal2' The gains in this table have been adjusted by the derived flux density each calibrator.  The MODEL_DATA column has NOT been updated for the flux density of the calibrator.  Use setjy to do this if it is a point source.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reference",
                    "name": "reference",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Reference field name(s) (transfer flux scale FROM) Default: none Example: reference='1328+307' The names of the fields with a known flux densities or visibilities that have been placed in the MODEL column by setjy or ft for a model not in the CASA system. The syntax is similar to field.  Hence field index or names can be used.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "transfer",
                    "name": "transfer",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Transfer field name(s) (transfer flux scale TO) Default: '' (all sources in caltable that are not specified as reference sources.  Do not include unknown target sources) The names of the fields with unknown flux densities. These should be point-like calibrator sources The syntax is similar to field.  Hence source index or names can be used. Examples: transfer='1445+099, 3C84'; transfer = '0,4' NOTE: All fields in reference and transfer must have solutions in the caltable.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listfile",
                    "name": "listfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of listfile that contains the fit information. Default: '' (no fit listfile will be created) The list file contains the flux density, flux density error, S/N, and number of solutions (all antennas and feeds) for each spectral window. NOTE: The nominal spectral window frequencies will be included in the future.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Append fluxscaled solutions to the fluxtable? Default: False (the fluxtable must not exist) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refspwmap",
                    "name": "refspwmap",
                    "value": "[-1]",
                    "defaultValue": "[-1]",
                    "description": "Vector of spectral windows enabling scaling across spectral windows Default: [-1] (none) Example with 4 spectral windows: If the reference fields were observed only in spw=1 and 3, and the transfer fields were observed in all 4 spws (0,1,2,3), specify refspwmap=[1,1,3,3]. This will ensure that transfer fields observed in spws 0,1,2,3 will be referenced to reference field solutions only in spw 1 or 3.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainthreshold",
                    "name": "gainthreshold",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Threshold in the input gain solutions to be used in fractional deviation from median values. Default: -1 (no threshold) Example: gainthreshold=0.15 (only used the gain solutions within 15% (inclusive) of the median gain value (per field and per spw).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of antenna Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of antenna Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of antenna Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "incremental",
                    "name": "incremental",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Create an incremental caltable containing only gain correction factors ( flux density= 1/(gain correction factor)**2)? Default: False Options: False|True Example: incremental=True (output a caltable containing flux scale factors.) NOTE: If you use the incremental option, note that BOTH this incremental fluxscale table AND an amplitude vs. time table should be supplied in applycal.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitorder",
                    "name": "fitorder",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Polynomial order of the spectral fitting for valid flux densities Default: 1 It falls back to a lower fitorder if there are not enough solutions to fit with the requested fitorder.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "display",
                    "name": "display",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Display statistics and/or spectral fitting results. Default: False Options: False|True Currently only a histogram of the correction factors to derive the final flux density for each",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -25,
            "text": "fringefit",
            "description": "Apply parallactic angle correction on the fly.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.fringefit",
                    "defaultValue": "casatasks.fringefit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output gain calibration table ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Solution interval: egs. \\'inf\\', \\'60s\\' (see help) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data axes which to combine for solve (obs, scan, spw, and/or field) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refant",
                    "name": "refant",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference antenna name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minsnr",
                    "name": "minsnr",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Reject solutions below this signal-to-noise ratio (at the FFT stage) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "zerorates",
                    "name": "zerorates",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Zero delay-rates in solution table Write a solution table with delay-rates zeroed, for the case of manual phase calibration\", so that the calibration table can be applied to the full dataset without the extrapolation of a non-zero delay-rate term affecting the data\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "globalsolve",
                    "name": "globalsolve",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Refine estimates of delay and rate with global least-squares solver ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "100",
                    "defaultValue": "100",
                    "description": "Maximum number of iterations for least-squares solver ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "delaywindow",
                    "name": "delaywindow",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Constrain FFT delay search to a window specified as a two-element list with units of nanoseconds Default: one, None] Examples: [-10, 10]",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ratewindow",
                    "name": "ratewindow",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Constrain FFT rate search to a window specified as a two-element list with units of seconds per second Default: one, None] Examples: [-1e-13, 1e-13]",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Append solutions to the (existing) table Default: False (overwrite existing table or make new table) Appended solutions must be derived from the same MS as the existing caltable, and solution spws must have the same meta-info (according to spw selection and solint) or be non-overlapping.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "corrdepflags",
                    "name": "corrdepflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "f False (default), if any correlation is flagged, treat all correlations in the visibility vector as flagged when solving (per channel, per baseline). If True, use unflagged correlations in a visibility vector, even if one or more other correlations are flagged. Default: False (treat correlation vectors with one or more correlations flagged as entirely flagged) Traditionally, CASA has observed a strict interpretation of correlation-dependent flags: if one or more correlations (for any baseline and channel) is flagged, then all available correlations for the same baseline and channel are treated as flagged.  However, it is desirable in some circumstances to relax this stricture, e.g., to preserve use of data from antennas with only one good polarization (e.g., one polarization is bad or entirely absent).  Solutions for the bad or missing polarization will be rendered as flagged.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Control means of specifying the caltables Default: False (Use gaintable, gainfield, interp, spwmap, calwt) Options: False|True If True, specify a file containing cal library in callib",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specify a file containing cal library directives Subparameter of docallib=True",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Gain calibration table(s) to apply on the fly Default: '' (none) Subparameter of docallib=False Examples: gaintable='ngc5921.gcal' gaintable=gc5921.ampcal','ngc5921.phcal']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) Default: '' (all sources on the sky) 'nearest' ==> nearest (on sky) available field in table otherwise, same syntax as field Examples: gainfield='0~2,5' means use fields 0,1,2,5 from gaintable gainfield=['0~3','4~6'] means use field 0 through 3",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation parameters (in timereq]) for each gaintable, as a list of strings. Default: '' --> 'linear,linear' for all gaintable(s) Options: Time: 'nearest', 'linear' Freq: 'nearest', 'linear', 'cubic', 'spline' Specify a list of strings, aligned with the list of caltable specified in gaintable, that contain the required interpolation parameters for each caltable. * When frequency interpolation is relevant (B, Df, Xf), separate time-dependent and freq-dependent interp types with a comma (freq after the comma). * Specifications for frequency are ignored when the calibration table has no channel-dependence. * Time-dependent interp options ending in 'PD' enable a phase delay\" correction per spw for non-channel-dependent calibration types. * For multi-obsId datasets, 'perobs' can be appended to the time-dependent interpolation specification to enforce obsId boundaries when interpolating in time. * Freq-dependent interp options can have 'flag' appended to enforce channel-dependent flagging, and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window mappings to form for gaintable(s) Only used if callib=False default:  (apply solutions from each calibration spw to the same MS spw only) Any available calibration spw can be mechanically mapped to any MS spw. Examples: spwmap=[0,0,1,1] means apply calibration from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3. spwmap=0,0,1,1],[0,1,0,1]] (use a list of lists for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "paramactive",
                    "name": "paramactive",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Control which parameters are solved for; a vector of (exactly) three booleans for delay, delay-rate and dispersive delay (in that order) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parang",
                    "name": "parang",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Apply parallactic angle correction on the fly.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -26,
            "text": "ft",
            "description": "Story visibilities in MODEL_DATA column? Default: False Options: False|True If True, model visibilities will be stored in the scratch column MODEL_DATA; if False, the model visibilities will be generated  on the fly (this mode may save some disk space equivalent to the volume of the observed data).",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.ft",
                    "defaultValue": "casatasks.ft",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) BUT, only one source can be specified in a multi-source vis. Examples: field = '1328+307'  specifies source '1328+307' field = '4' specified field with index 4",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "model",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input model image(s) Default: '' (none) Example: model='/usr/lib/casapy/data/nrao/VLA/CalModels/3C286_X.im' NOTE: The model visibilities are scaled from the model frequency to the observed frequency of the data.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nterms",
                    "name": "nterms",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of terms used to model the sky frequency dependence Default: 1 (one model image is required) Example: nterms=3 - represents a 2nd order Taylor-polynomial in frequency and should be used in conjuction with coefficient model images as model=xx.model.tt0','xxx.model.tt1', 'xxx.model.tt2']",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reffreq",
                    "name": "reffreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference-frequency about which this Taylor-expansion is defined. Default: '' (reads the reference frequency from the model image) Example: reffreq = '1.5GHz'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "complist",
                    "name": "complist",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of component list Default: none Example: complist='test.cl' WARNING: component lists are difficult to make",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "incremental",
                    "name": "incremental",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Add model visibility to the existing model visibilties stored in the MS Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usescratch",
                    "name": "usescratch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Story visibilities in MODEL_DATA column? Default: False Options: False|True If True, model visibilities will be stored in the scratch column MODEL_DATA; if False, the model visibilities will be generated  on the fly (this mode may save some disk space equivalent to the volume of the observed data).",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -27,
            "text": "gaincal",
            "description": "Apply parallactic angle correction Default: False If True, apply the parallactic angle correction",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.gaincal",
                    "defaultValue": "casatasks.gaincal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output gain calibration table Default: none Example: caltable='ngc5921.gcal'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels) Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61, INCLUSIVE spw='\\*:5~61'; all spw with channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw='0:0~10;15~60'; spectral window 0 with channels 0-10,15-60. (NOTE ';' to separate channel selections) spw='0:0~10^2,1:20~30^5'; spw 0, channels 0,2,4,6,8,10, spw 1, channels 20,25,30",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='*BANDPASS*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. Default = '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilo-lambda uvrange='0~1000km'; uvrange in kilometers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True Default: '' = all Check 'go listobs' to insure the scan numbers are in order.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Solution interval Default: 'inf' (infinite, up to boundaries controlled by combine); Options: 'inf' (~infinite), 'int' (per integration), any float or integer value with or without units Examples: solint='1min'; solint='60s', solint=60 (i.e., 1 minute); solint='0s'; solint=0; solint='int' (i.e., per integration); solint-'-1s'; solint='inf' (i.e., ~infinite, up to boundaries enforced by combine)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data axes which to combine for solve Default: 'scan' (solutions will break at obs, field, and spw boundaries) Options: '','obs','scan','spw',field', or any comma-separated combination in a single string Example: combine='scan,spw' - Extend solutions over scan boundaries (up to the solint), and combine spws for solving",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "preavg",
                    "name": "preavg",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Pre-averaging interval (sec) Default: -1.0 (none) Rarely needed.  Will average data over periods shorter than the solution interval first.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refant",
                    "name": "refant",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference antenna name(s); a prioritized list may be specified Default: '' (No refant applied) Examples: refant='4' (antenna with index 4) refant='VA04' (VLA antenna #4) refant='EA02,EA23,EA13' (EVLA antenna EA02, use EA23 and EA13 as alternates if/when EA02 drops out) Use taskname=listobs for antenna listing",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refantmode",
                    "name": "refantmode",
                    "value": "flex",
                    "defaultValue": "flex",
                    "description": "Reference antenna mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minblperant",
                    "name": "minblperant",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "Minimum number of baselines required per antenna for each solve Default: 4 Antennas with fewer baselines are excluded from solutions. Example: minblperant=10 --> Antennas participating on 10 or more baselines are included in the solve minblperant = 1 will solve for all baseline pairs, even if only one is present in the data set.  Unless closure errors are expected, use taskname=gaincal rather than taskname=blcal to obtain more options in data analysis.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minsnr",
                    "name": "minsnr",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Reject solutions below this SNR Default: 3.0",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solnorm",
                    "name": "solnorm",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Normalize (squared) solution amplitudes (G, T only) Default: False (no normalization)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "normtype",
                    "name": "normtype",
                    "value": "mean",
                    "defaultValue": "mean",
                    "description": "Solution normalization calculation type: mean or median Default: 'mean'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintype",
                    "name": "gaintype",
                    "value": "G",
                    "defaultValue": "G",
                    "description": "Type of gain solution (G,T,GSPLINE,K,KCROSS) Default: 'G' Example: gaintype='GSPLINE' - 'G' means determine gains for each polarization and sp_wid - 'T' obtains one solution for both polarizations; Hence. their phase offset must be first removed using a prior G. - 'GSPLINE' makes a spline fit to the calibrator data. It is useful for noisy data and fits a smooth curve through the calibrated amplitude and phase. However, at present GSPLINE is somewhat experimental. Use with caution and check solutions. - 'K' solves for simple antenna-based delays via FFTs of the spectra on baselines to the reference antenna.  (This is not global fringe-fitting.) If combine includes 'spw', multi-band delays are determined; otherwise, per-spw single-band delays will be determined. - 'KCROSS' solves for a global cross-hand delay. Use parang=T and apply prior gain and bandpass solutions.  Multi-band delay solves (combine='spw') not yet supported for KCROSS.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smodel",
                    "name": "smodel",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Point source Stokes parameters for source model (experimental). Default:  (use MODEL_DATA column) Example: [1,0,0,0] (I=1, unpolarized)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calmode",
                    "name": "calmode",
                    "value": "ap",
                    "defaultValue": "ap",
                    "description": "Type of solution ('ap', 'p', 'a') Default: 'ap' (amp and phase) Options: 'p' (phase) ,'a' (amplitude), 'ap' (amplitude and phase) Example: calmode='p'\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solmode",
                    "name": "solmode",
                    "value": "",
                    "defaultValue": "",
                    "description": "Robust solving mode: Options: '', 'L1', 'R', 'L1R'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rmsthresh",
                    "name": "rmsthresh",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "RMS Threshold sequence Subparameter of solmode='R' or 'L1R' See CASA Docs for more information (https://casa.nrao.edu/casadocs/)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "corrdepflags",
                    "name": "corrdepflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "f False (default), if any correlation is flagged, treat all correlations in the visibility vector as flagged when solving (per channel, per baseline). If True, use unflagged correlations in a visibility vector, even if one or more other correlations are flagged. Default: False (treat correlation vectors with one or more correlations flagged as entirely flagged) Traditionally, CASA has observed a strict interpretation of correlation-dependent flags: if one or more correlations (for any baseline and channel) is flagged, then all available correlations for the same baseline and channel are treated as flagged.  However, it is desirable in some circumstances to relax this stricture, e.g., to preserve use of data from antennas with only one good polarization (e.g., one polarization is bad or entirely absent).  Solutions for the bad or missing polarization will be rendered as flagged.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Append solutions to the (existing) table Default: False (overwrite existing table or make new table) Appended solutions must be derived from the same MS as the existing caltable, and solution spws must have the same meta-info (according to spw selection and solint) or be non-overlapping.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "splinetime",
                    "name": "splinetime",
                    "value": "3600.0",
                    "defaultValue": "3600.0",
                    "description": "Spline timescale(sec); All spw\\'s are first averaged. Subparameter of gaintype='GSPLINE' Default: 3600 (1 hour) Example: splinetime=1000 Typical splinetime should cover about 3 to 5 calibrator scans.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "npointaver",
                    "name": "npointaver",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "Tune phase-unwrapping algorithm Subparameter of gaintype='GSPLINE' Default: 3; Keep at this value",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasewrap",
                    "name": "phasewrap",
                    "value": "180.0",
                    "defaultValue": "180.0",
                    "description": "Wrap the phase for jumps greater than this value (degrees) Subparameter of gaintype='GSPLINE' Default: 180; Keep at this value",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Control means of specifying the caltables Default: False (Use gaintable, gainfield, interp, spwmap, calwt) Options: False|True If True, specify a file containing cal library in callib",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specify a file containing cal library directives Subparameter of docallib=True",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Gain calibration table(s) to apply on the fly Default: '' (none) Subparameter of docallib=False Examples: gaintable='ngc5921.gcal' gaintable=gc5921.ampcal','ngc5921.phcal']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) Default: '' (all sources on the sky) 'nearest' ==> nearest (on sky) available field in table otherwise, same syntax as field Examples: gainfield='0~2,5' means use fields 0,1,2,5 from gaintable gainfield=['0~3','4~6'] means use field 0 through 3",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation parmameters (in timereq]) for each gaintable, as a list of strings. Default: '' --> 'linear,linear' for all gaintable(s) Options: Time: 'nearest', 'linear' Freq: 'nearest', 'linear', 'cubic', 'spline' Specify a list of strings, aligned with the list of caltable specified in gaintable, that contain the required interpolation parameters for each caltable. - When frequency interpolation is relevant (B, Df, Xf), separate time-dependent and freq-dependent interp types with a comma (freq after the comma). - Specifications for frequency are ignored when the calibration table has no channel-dependence. - Time-dependent interp options ending in 'PD' enable a phase delay\" correction per spw for non-channel-dependent calibration types. - For multi-obsId datasets, 'perobs' can be appended to the time-dependent interpolation specification to enforce obsId boundaries when interpolating in time. - Freq-dependent interp options can have 'flag' appended to enforce channel-dependent flagging, and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window mappings to form for gaintable(s) Only used if callib=False default:  (apply solutions from each calibration spw to the same MS spw only) Any available calibration spw can be mechanically mapped to any MS spw. Examples: spwmap=[0,0,1,1] means apply calibration from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3. spwmap=0,0,1,1],[0,1,0,1]] (use a list of lists for multiple gaintables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parang",
                    "name": "parang",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Apply parallactic angle correction Default: False If True, apply the parallactic angle correction",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -28,
            "text": "gencal",
            "description": "Assume uniform calibration values across the array Subparameter of caltype='tsys' Default: True Options: True|False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.gencal",
                    "defaultValue": "casatasks.gencal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input calibration table Default: none If a calibration table does not exist, it will be created. Specifying an existing table will result in the parameters being applied cumulatively. Only a single time-stamp for all calibrations are supported, currently.  Do not use a caltable created by gaincal, bandpass, etc. Example: caltable='test.G'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltype",
                    "name": "caltype",
                    "value": "",
                    "defaultValue": "",
                    "description": "The calibration parameter type being specified Default: none Options: 'amp', 'ph', 'sbd', 'mbd', 'antpos', 'antposvla', 'tsys', 'evlagain', 'opac', 'gc', 'gceff', 'eff', 'tecim', 'jyperk' - 'amp' = gain (G) amplitude (1 real parameter per pol, antenna, spw) - 'ph'  = gain (G) phase (deg) (1 real parameter per pol, antenna, spw) - 'sbd' = single-band delays (nsec) (1 real parameter per pol, antenna, spw) - 'mbd' = multi-band delay (nsec) (1 real parameter per pol, antenna, spw) - 'antpos' = antenna position corrections (m) (3 real ITRF offset parameters per antenna; spw, pol selection will be ignored) With antenna='', this triggers an automated lookup of antenna positions for EVLA and ALMA. - 'antposvla' = antenna position corrections (m) specified in the old VLA-centric coordinate system - 'tsys' = Tsys from the SYSCAL table (ALMA) - 'evlagain' = EVLA switched-power gains (experimental) - 'opac' = Tropospheric opacity (1 real parameter per antenna, spw) - 'gc' = Antenna zenith-angle dependent gain curve (auto-lookup) - 'gceff' = Gain curve and efficiency (auto-lookup) - 'eff' = Antenna efficiency (auto-lookup) - 'jyperk' = Jy/K factor via Jy/K DB Web API Example: caltype='ph'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input ancilliary file Subparameter of caltype='gc|gceff|tecim|jyperk' Default: none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "endpoint",
                    "name": "endpoint",
                    "value": "asdm",
                    "defaultValue": "asdm",
                    "description": "Input endpoint of the Jy/K DB Web API. Subparameter of caltype='jyperk' Default: 'asdm' Options: 'asdm', 'model-fit', 'interpolation' The 'interpolation' option may not work for the data after 2019.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timeout",
                    "name": "timeout",
                    "value": "180",
                    "defaultValue": "180",
                    "description": "Maximum waiting time ec] for the Web API access. Subparameter of caltype='jyperk' Default: 180",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "retry",
                    "name": "retry",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "Number of retry when the Web API access fails. Subparameter of caltype='jyperk' Default: 3",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "retry_wait_time",
                    "name": "retry_wait_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Waiting time ec] until next query, when the Web API access fails. Subparameter of caltype='jyperk' Default: 5",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels) Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pol",
                    "name": "pol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Polarization selection for specified parameters Default: pol='' (specified parameters apply to all polarizations) Example: pol='R' (specified parameters to apply to R only)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parameter",
                    "name": "parameter",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "The calibration values The calibration parameters, specified as a list, to store in the caltable for the spw, antenna, and pol selection.  The required length of the list is determined by the caltype and the spw, antenna, pol selection.  One set\" of parameters (e.g., one value for 'amp', 'ph', etc., three values for 'antpos') specified the same value for all indicated spw, antenna, and pol. OR, When specifying a long list of calibration parameter values, these should be ordered first (fastest) by pol (if pol!=''), then by antenna (if antenna!=''), and finally (sloweset) by spw (if spw!='').  Unspecified selection axes must not be enumerated in the parameter list\"",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uniform",
                    "name": "uniform",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Assume uniform calibration values across the array Subparameter of caltype='tsys' Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -29,
            "text": "hanningsmooth",
            "description": "Which data column(s) to use for processing (case-insensitive). Default: 'all' (= whichever of the options that are present) Options: 'data', 'model', 'corrected', 'all','float_data', 'lag_data', 'float_data,data', 'lag_data,data'",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.hanningsmooth",
                    "defaultValue": "casatasks.hanningsmooth",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: '' (same as vis) Example: outputvis='ngc5921_out.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepmms",
                    "name": "keepmms",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Create a Multi-MS as the output if the input is a Multi-MS. Default: True Options: True|False By default it will create a Multi-MS when the input is a Multi-MS. The output Multi-MS will have the same partition axis of the input MMS. See CASA Docs for more information on the MMS format.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: ''=all spectral windows and channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work. NOTE: mstransform does not support multiple channel ranges per spectral window (';').",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers antenna='!ea03,ea12,ea17': all baselines except those that include EVLA antennas ea03, ea12, or ea17.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on correlation Default: '' ==> all Example: correlation=XX,YY\".\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='*BANDPASS*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "(Sub)array number range Default: '' (all)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. Default = '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilo-lambda uvrange='0~1000km'; uvrange in kilometers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on the feed NOT IMPLEMENTED YET! Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Which data column(s) to use for processing (case-insensitive). Default: 'all' (= whichever of the options that are present) Options: 'data', 'model', 'corrected', 'all','float_data', 'lag_data', 'float_data,data', 'lag_data,data'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -30,
            "text": "imbaseline",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imbaseline",
                    "defaultValue": "casatasks.imbaseline",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input spectral line image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "linefile",
                    "name": "linefile",
                    "value": "",
                    "defaultValue": "",
                    "description": "output continuum subtracted image file name. If it is not specified, it will be imagename + _bs\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "output_cont",
                    "name": "output_cont",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "output continuum image. Name will be imagename + .cont\" \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bloutput",
                    "name": "bloutput",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of file in which best-fit parameters are written. No output if \" (default). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maskmode",
                    "name": "maskmode",
                    "value": "list",
                    "defaultValue": "list",
                    "description": "mode of setting additional channel masks. list\" and \"auto\" are available now. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to be included in the fitting ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "thresh",
                    "name": "thresh",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "S/N threshold for linefinder ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "avg_limit",
                    "name": "avg_limit",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "channel averaging for broad lines ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minwidth",
                    "name": "minwidth",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "the minimum channel width to detect as a line ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "edge",
                    "name": "edge",
                    "value": "[int(0)",
                    "defaultValue": "[int(0)",
                    "description": "channels to drop at beginning and end of spectrum ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blfunc",
                    "name": "blfunc",
                    "value": "",
                    "defaultValue": "",
                    "description": "baseline model function oly, \"chebyshev\", \"cspline\", \"sinusoid\", or \"variable\"(expert mode)] \"",
                    "type": "int(0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "order",
                    "name": "order",
                    "value": "poly",
                    "defaultValue": "poly",
                    "description": "order of baseline model function ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "npiece",
                    "name": "npiece",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "number of element polynomials for cubic spline curve ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applyfft",
                    "name": "applyfft",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "automatically set wave numbers of sinusoids ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fftthresh",
                    "name": "fftthresh",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "threshold to select wave numbers of sinusoids ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "addwn",
                    "name": "addwn",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "additional wave numbers to use ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rejwn",
                    "name": "rejwn",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "wave numbers NOT to use ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blparam",
                    "name": "blparam",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "text file that stores per spectrum fit parameters ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipniter",
                    "name": "clipniter",
                    "value": "",
                    "defaultValue": "",
                    "description": "maximum iteration number for iterative fitting ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipthresh",
                    "name": "clipthresh",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "clipping threshold for iterative fitting ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dirkernel",
                    "name": "dirkernel",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Type of kernel to use to direction plane smoothing. Acceptable values are none\" to omit image smoothing(default), \"boxcar\" for a boxcar kernel, \"gaussian\" for a gaussian kernel, \"image\" to use an image as the kernel. \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "major",
                    "name": "major",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "Major axis for the kernels. Standard quantity representation. Must be specified for dirkernel=boxcar\" or \"gaussian\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minor",
                    "name": "minor",
                    "value": "",
                    "defaultValue": "",
                    "description": "Minor axis. Standard quantity representation. Must be specified for dirkernel=boxcar\" or \"gaussian\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pa",
                    "name": "pa",
                    "value": "",
                    "defaultValue": "",
                    "description": "Position angle used only for gaussian kernel. Standard quantity representation. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "kimage",
                    "name": "kimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel image name. Only used if dirkernel=image\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scale",
                    "name": "scale",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scale factor. -1.0 means auto-scale. Only used if dirkernel=image\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spkernel",
                    "name": "spkernel",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Type of spectral smoothing kernel. Acceptable values are none\" to omit smoothing(default), \"gaussian\" for a gaussian kernel, \"boxcar\" for a boxcar kernel. \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "kwidth",
                    "name": "kwidth",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "smoothing kernel width in channel. Only used if spkernel=gaussian\" or \"boxcar\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -31,
            "text": "imcollapse",
            "description": "Stretch the mask if necessary and possible? Default: False Options: False|True Stretch the input mask if necessary and possible. Only used if a mask is specified.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imcollapse",
                    "defaultValue": "casatasks.imcollapse",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image Default: none Example: imagename='ngc5921.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "function",
                    "name": "function",
                    "value": "",
                    "defaultValue": "",
                    "description": "Function used to compute aggregation of pixel values along the collapsed axis. Default: none Options: flux, madm, max, mean, median, min, npts, rms, stddev, sum, variance, xmadm Minimum match is supported for the function parameter (eg, function=r\" will compute the rms of the pixel values). If one specifies function='flux', the following constraints must be true: 1. The image must have a direction coordinate, 2. The image must have at least one beam, 3. The specified axes must be exactly the direction coordinate axes, 4. Only one of the non-directional axes may be non-degenerate, 5. The iamge brightness unit must be conformant with x*yJy",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axes",
                    "name": "axes",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Zero-based axis number(s) or minimal match strings to collapse. Default: Axes can be specified as a single integer or array of integers indicating the zero-based axes along which to collapse the image. Axes may also be specified as a single or array of strings which minimally and uniquely match (ignoring case) world axes names in the image (eg dec\" or i, \"d\"] for collapsing along the declination axis or along the right ascension and declination axes, respectively).\"",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output CASA image. Must be specified. Default: none Example: outfile='collapsed.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default: '' (use the entire direction plane) Example: box=100,100,200,200\"\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default: '' (use the full image)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default: '' (use all channels)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default: '' (use all stokes planes)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default: none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite output image if it exists? Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? Default: False Options: False|True Stretch the input mask if necessary and possible. Only used if a mask is specified.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -32,
            "text": "imcontsub",
            "description": "Stokes planes to use. Default: '' (use all Stokes planes)",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imcontsub",
                    "defaultValue": "casatasks.imcontsub",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input image cube. Default: none Example: imagename='ngc5921_task.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "linefile",
                    "name": "linefile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of continuum-subtracted output spectral line cube Default: none Example: outline='ngc5921_line.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "contfile",
                    "name": "contfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output continuum cube Default: none Example: contfile='ngc5921_cont.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitorder",
                    "name": "fitorder",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Polynomial order for the continuum estimation Default: 0 Example: fitorder=2",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default: '' (use the full image)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default: '' (use the entire direction plane)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default: '' (use all channels)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default: '' (use all Stokes planes)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -33,
            "text": "imdev",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imdev",
                    "defaultValue": "casatasks.imdev",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input image name ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image file name. If left blank (the default), no image is written but a new image tool referencing the collapsed image is returned. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region(s) to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default setting is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite (unprompted) pre-existing output file? Ignored if outfile\" is left blank. \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? Default value is False. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "grid",
                    "name": "grid",
                    "value": "[int(1)",
                    "defaultValue": "[int(1)",
                    "description": "x,y grid spacing. Array of exactly two positive integers. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "anchor",
                    "name": "anchor",
                    "value": "",
                    "defaultValue": "",
                    "description": "x,y anchor pixel location. Either ref\" to use the image reference pixel, or an array of exactly two integers. \"",
                    "type": "int(1)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "xlength",
                    "name": "xlength",
                    "value": "ref",
                    "defaultValue": "ref",
                    "description": "Either x coordinate length of box, or diameter of circle. Circle is used if ylength is empty string. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ylength",
                    "name": "ylength",
                    "value": "1pix",
                    "defaultValue": "1pix",
                    "description": "y coordinate length of box. Use a circle if ylength is empty string. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "1pix",
                    "defaultValue": "1pix",
                    "description": "Interpolation algorithm to use. One of nearest\", \"linear\", or \"cubic\". Minimum match supported. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stattype",
                    "name": "stattype",
                    "value": "cubic",
                    "defaultValue": "cubic",
                    "description": "Statistic to compute. See full description for supported statistics. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "statalg",
                    "name": "statalg",
                    "value": "sigma",
                    "defaultValue": "sigma",
                    "description": "Statistics computation algorithm to use. Supported values are chauvenet\" and \"classic\", Minimum match is supported. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "zscore",
                    "name": "zscore",
                    "value": "classic",
                    "defaultValue": "classic",
                    "description": "For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenets criterion. Ignored if algorithm is not \"chauvenet\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxiter",
                    "name": "maxiter",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algortihm is not chauvenet\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -34,
            "text": "imfit",
            "description": "File name to which to write table of fit parameters. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imfit",
                    "defaultValue": "casatasks.imfit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region(s) to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use first Stokes plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "includepix",
                    "name": "includepix",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Range of pixel values to include for fitting. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "excludepix",
                    "name": "excludepix",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Range of pixel values to exclude for fitting. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "residual",
                    "name": "residual",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output residual image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "model",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output model image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "estimates",
                    "name": "estimates",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of file containing initial estimates of component parameters. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of file to write fit results. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If logfile exists, append to it if True or overwrite it if False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "newestimates",
                    "name": "newestimates",
                    "value": "",
                    "defaultValue": "",
                    "description": "File to write fit results which can be used as initial estimates for next run. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "complist",
                    "name": "complist",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output component list table. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite component list table if it exists? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dooff",
                    "name": "dooff",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Also fit a zero level offset? Default is False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "offset",
                    "name": "offset",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Initial estimate of zero-level offset. Only used if doff is True. Default is 0.0 ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fixoffset",
                    "name": "fixoffset",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Keep the zero level offset fixed during fit? Default is False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rms",
                    "name": "rms",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "RMS to use in calculation of uncertainties. Numeric or valid quantity (record or string). If numeric, it is given units of the input image. If quantity, units must conform to image units. If not positive, the rms of the residual image, in the region of the fit, is used. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "noisefwhm",
                    "name": "noisefwhm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Noise correlation beam FWHM. If numeric value, interpreted as pixel widths. If quantity (dictionary, string), it must have angular units. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "summary",
                    "name": "summary",
                    "value": "",
                    "defaultValue": "",
                    "description": "File name to which to write table of fit parameters. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -35,
            "text": "imhead",
            "description": "Give a full listing of beams or just a short summary? Only used when the image has multiple beams and mode=summary\". \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imhead",
                    "defaultValue": "casatasks.imhead",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input image cube. Default: none Example: imagename='ngc5921_task.image'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "summary",
                    "defaultValue": "summary",
                    "description": "Mode of operation. Default: summary Options: add\", \"del\", \"get\", \"history\", \"list\", \"put\", or \"summary\". * add: Add a new metadata value to the image. The behavior of mode=\"add\" depends on the keyword. In general, the return value will be True if the operation succeeds, or False if it fails or is not supported. If unsuccessful or not supported, a message is normally logged which describes the failure. In most cases, you probably want to use mode='put' rather than mode='add'. We continue to support mode='add' mainly for backward compatibility. * del: Delete a key or reset its value to a fidicual value if possible. Ignores all but imagename, mode, and hdkey parameters. In general, the return value will be True if the operation succeeds, or False if it fails or is not supported. If unsuccessful or not supported, a warning message is normally logged which describes the failure. * get: Return the specified keyword value. Ignores all but imagename, mode, and hdkey parameters. * history: Log image history. Ignores all but imagename and mode parameters. * list: Show supported keywords and their values. Ignores all but imagename and mode parameters. put: Modify the specified value associated with the keyword. True is returned if the metadatum was successfully modified, False otherwise. Normally, a diagnostic message is logged if there is a failure. Only the parameter specified is modified; eg, no modification of reference direction occurs to implicitly account for precession to a new reference frame. * summary: Log a summary of the image and return a dictionary of various metadata values. Ignores all but imagename and mode parameters. IMPORTANT: Lists of keywords for the various modes of operation are given in the imhead task pages of CASA Docs (https:",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hdkey",
                    "name": "hdkey",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword to use with get, put, add, or del. Subparameter of mode=get|put|add|del Only get\" will work if the image is read-only (eg, a FITS image). Example: hdkey='telescope'\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hdvalue",
                    "name": "hdvalue",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword value used for modes 'put' and 'add'. Subparameter of mode='put|add' ('del') Also used for mode=del\" when hdvalue=\"masks. Example: hdvalue='VLA'\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Give a full listing of beams or just a short summary? Only used when the image has multiple beams and mode=summary\". \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -36,
            "text": "imhistory",
            "description": "Message to append. Subparameter of mode='append' Default: none Only used of mode=append\".\"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imhistory",
                    "defaultValue": "casatasks.imhistory",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input (CASA or FITS) image Default: none Example: imagename='ngc5921.im'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "list",
                    "defaultValue": "list",
                    "description": "Operating mode. Default: 'list' (retrieve history) Options: 'list|append' ('append' to append a record to history)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Write history to logger if mode=list\"? Subparameter of mode='list' Default: True Options: True|False\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "origin",
                    "name": "origin",
                    "value": "imhistory",
                    "defaultValue": "imhistory",
                    "description": "Origin of appended message. Subparameter of mode='append' Default: 'imhistory' The user can specify any string. This string will appear as a tag at the start of the appended line in the image history. Only used for mode=append\".\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "message",
                    "name": "message",
                    "value": "",
                    "defaultValue": "",
                    "description": "Message to append. Subparameter of mode='append' Default: none Only used of mode=append\".\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -37,
            "text": "immath",
            "description": "Precision for the output image pixels if mode=evalexpr\" or \"spix\". \"float\" or \"double\" (minimum match supported) \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.immath",
                    "defaultValue": "casatasks.immath",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "a list of input images ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "evalexpr",
                    "defaultValue": "evalexpr",
                    "description": "mode for math operation (evalexpr, spix, pola, poli, lpoli, tpoli) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "immath_results.im",
                    "defaultValue": "immath_results.im",
                    "description": "File where the output is saved ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "expr",
                    "name": "expr",
                    "value": "IM0",
                    "defaultValue": "IM0",
                    "description": "Mathematical expression using images ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "varnames",
                    "name": "varnames",
                    "value": "",
                    "defaultValue": "",
                    "description": "a list of variable names to use with the image files ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sigma",
                    "name": "sigma",
                    "value": "0.0mJy/beam",
                    "defaultValue": "0.0mJy/beam",
                    "description": "standard deviation of noise for debiasing ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "polithresh",
                    "name": "polithresh",
                    "value": "",
                    "defaultValue": "",
                    "description": "Threshold in linear polarization intensity image below which to mask pixels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? See help stretch.par ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagemd",
                    "name": "imagemd",
                    "value": "",
                    "defaultValue": "",
                    "description": "An image name from which metadata should be copied. The input can be either an image listed under imagename or any other image on disk. Leaving this parameter unset may copy header metadata from any of the input images, which one is not guaranteed. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "prec",
                    "name": "prec",
                    "value": "float",
                    "defaultValue": "float",
                    "description": "Precision for the output image pixels if mode=evalexpr\" or \"spix\". \"float\" or \"double\" (minimum match supported) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -38,
            "text": "immoments",
            "description": "Stretch the mask if necessary and possible? ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.immoments",
                    "defaultValue": "casatasks.immoments",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "moments",
                    "name": "moments",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "List of moments you would like to compute ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axis",
                    "name": "axis",
                    "value": "spectral",
                    "defaultValue": "spectral",
                    "description": "The momement axis: ra, dec, lat, long, spectral, or stokes ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region(s) to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "includepix",
                    "name": "includepix",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Range of pixel values to include ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "excludepix",
                    "name": "excludepix",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Range of pixel values to exclude ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image file name (or root for multiple moments) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -39,
            "text": "impbcor",
            "description": "Stretch the mask if necessary and possible? Default: False Options: False|True",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.impbcor",
                    "defaultValue": "casatasks.impbcor",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input (CASA, FITS, MIRIAD) image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbimage",
                    "name": "pbimage",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name of the image (CASA, FITS, MIRIAD) of the primary beam pattern or an array of pixel values. Default: ''",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output CASA image. Default: none. Must be specified.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If output file is specified, controls if an already existing file by the same name can be overwritten. Default: True Options: True|False If true, the user is not prompted, the file if it exists is automatically overwritten.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default: '' (use the entire direction plane)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default: '' (use the full image)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default: '' (use all channels)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default: '' (use all Stokes planes)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default: none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "divide",
                    "defaultValue": "divide",
                    "description": "Divide or multiply the image by the primary beam image. Default: 'divide' Minimal match supported.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cutoff",
                    "name": "cutoff",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Primary beam cutoff. Default: -1.0 (no cutoff) If mode is d\", all values less than this will be masked. If \"m\", all values greater will be masked. Less than 0, no cutoff (default)\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -40,
            "text": "importasap",
            "description": "Turn on parallel execution Default: False (serial execution) Options: False|True",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importasap",
                    "defaultValue": "casatasks.importasap",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input ASAP Scantable data Default: none Example: infile='mydata.asap'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: '' (same as vis) Example: outputvis='myms.ms' NOTE: Note the .ms is NOT added",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Back up flag column before applying flags. Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Over write an existing MS(s) Default: False (do not overwrite) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parallel",
                    "name": "parallel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Turn on parallel execution Default: False (serial execution) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -41,
            "text": "importasdm",
            "description": "Timestep (days) for the tabulation of polynomial ephemerides. A value less than or equal to 0 disables tabulation. Default: 0 Presently, VLA data can contain polynomial ephemerides. ALMA data uses tabulated values.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importasdm",
                    "defaultValue": "casatasks.importasdm",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "asdm",
                    "name": "asdm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input ASDM file (directory) Default: none Example: asdm='ExecBlock3'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Root ms name. Default: none Note that a prefix (.ms) is NOT appended to this name.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "createmms",
                    "name": "createmms",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Create a Multi-MS partitioned according to the given separation axis. Default: False Options: False|True For more detailed documentation on partition, Multi-MS and the MPI use in CASA, please see CASA Docs (https://casa.nrao.edu/casadocs/).",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "separationaxis",
                    "name": "separationaxis",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "Axis to do parallelization across Default: 'auto' Options: 'scan', 'spw', 'baseline', 'auto' * auto: will partition per scan/spw to obtain optimal load balancing with the following criteria: 1 - Maximize the scan/spw/field distribution across sub-MSs 2 - Generate sub-MSs with similar size * 'scan' or 'spw': will partition the MS into scan or spw. The individual sub-MSs may not be balanced with respect to the number of rows. * 'baseline': mostly useful for Single-Dish data. This axis will partition the MS based on the available baselines. If the user wants only auto-correlations, use the ocorr_mode='ao'. Note that if numsubms='auto', partition will try to create as many subMSs as the number of available servers in the cluster. If the user wants to have one subMS for each baseline, set the numsubms parameter to a number higher than the number of baselines to achieve this.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "numsubms",
                    "name": "numsubms",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "The number of sub-MSs to create in the Multi-Ms. Default: 'auto' Options: any integer number (example: numsubms=4) The default 'auto' is to partition using the number of available servers given when launching CASA. If the task is unable to determine the number of running servers, or the user did not start CASA using mpicasa, numsubms will use 8 as the default. Example: Launch CASA with 5 engines, where 4 of them will be used to create the MMS (the first engine is used as the MPIClient): mpicasa -n 5 casa --nogui --log2term CASA> importasdm('uid__A1', createmms=True)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "corr_mode",
                    "name": "corr_mode",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Correlation mode to be considered on input. Default: 'all' Options: ao, co, ac, or all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "srt",
                    "name": "srt",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Spectral resolution type. Default: 'all' Options: fr, ca, bw, or all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "time_sampling",
                    "name": "time_sampling",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Specifies the time sampling (INTEGRATION and/or SUBINTEGRATION) to be considered on input. Default: 'all' Options: i, si, or all A quoted string containing a sequence of i, si, or all separated by whitespaces is expected",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ocorr_mode",
                    "name": "ocorr_mode",
                    "value": "ca",
                    "defaultValue": "ca",
                    "description": "Output data for correlation mode AUTO_ONLY (ao) or CROSS_ONLY (co) or CROSS_AND_AUTO (ca) Default: 'ca' Options: ao, co, ca",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "compression",
                    "name": "compression",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Produce compressed columns in the resulting measurement set. Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lazy",
                    "name": "lazy",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Make the MS DATA column read the ASDM Binary data directly (faster import, smaller MS). Default: False Options: False|True Instead of writing a copy of the visibilities into a standard DATA column, lazy=True will make importasdm only write a lookup-table such that later access to the DATA column will read the ASDM binary visibility data directly. This requires that the ASDM not be removed from its location as long the the DATA column is needed. Use method ms.asdmref() to query and manipulate the reference to the ASDM. lazy=True will save ca. 50% disk space and accelerate the DATA column access by ca. 10%. lazy=True will only work when there is visibility data in the ASDM, not with pure radiometer data.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "asis",
                    "name": "asis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Creates verbatim copies of the ASDM tables in the output measurement set. Default: none The value given to this option must be a list of table names separated by space characters; the wildcard character '*' is  allowed in table names.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wvr_corrected_data",
                    "name": "wvr_corrected_data",
                    "value": "no",
                    "defaultValue": "no",
                    "description": "Specifies which values are considerd in the ASDM binary data to fill the DATA column in the MAIN table of the MS. Default: no Options: no|yes|both * no: uncorrected data * yes: corrected data * both: for corrected and uncorrected data. Note if both is selected, two measurement sets are created, one with uncorrected data and the other with corrected data (which name is suffixed by '-wvr-corrected')",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scans",
                    "name": "scans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Processes only the scans specified in the option's value. Default: none (all scans) This value is a semicolon separated list of scan specifications. A scan specification consists in an exec bock index  followed by the character ':' followed by a comma separated list of scan indexes or scan index ranges. A scan index is relative to the exec block it belongs to. Scan indexes are  1-based while exec blocks's are 0-based. Examples: '0:1' '2:2~6' '0:1;1:2~6,8;2:,3:24~30' '1,2' '3:' alone will be interpreted as 'all the scans of the exec block#3'. An scan index or a scan index range not preceded by an exec block index will be interpreted as 'all the scans with such indexes in all the exec blocks'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ignore_time",
                    "name": "ignore_time",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "All the rows of the tables Feed, History, Pointing, Source, SysCal, CalDevice, SysPower, and Weather are processed independently of the time range of the selected exec block / scan. Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "process_syspower",
                    "name": "process_syspower",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "s processed if and only if this parameter is set to true. Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "process_caldevice",
                    "name": "process_caldevice",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "The CalDevice table is processed if and only if this parameter is set to true. Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "process_pointing",
                    "name": "process_pointing",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "The Pointing table is processed if and only if this parameter is set to true. Default: True Options: True|False If set to False, the POINTING table is empty in the resulting MS",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "process_flags",
                    "name": "process_flags",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Create online flags based on the Flag.xml, Antenna.xml and SpectralWindow.xml files and copy them to the FLAG_CMD sub-table of the MS. Default: True Options: True|False The flags will NOT be applied unless  the parameter applyflags is set to True. Optionally, the flags can also be saved to an external ASCII file if savecmds is set to True.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tbuff",
                    "name": "tbuff",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Time padding buffer (seconds) Subparameter of process_flags=True Default: 0.0 NOTE: this time is in seconds. You should currently set the value of tbuff to be 1.5x the correlator integration time if greater than 1 second. For example, if the SDM has integrations of 3 seconds, set tbuff=4.5.  Likewise, set tbuff=15.0 for 10-sec integrations.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applyflags",
                    "name": "applyflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Apply the online flags to the MS. Subparameter of process_flags=True Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "savecmds",
                    "name": "savecmds",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Save the flag commands to an ASCII file given by the parameter outfile. Subparameter of process_flags=True Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Filename or list of filenames where to save the online flag commands. Subparameter of process_flags=True Default: '' (it will save on a filename composed from the MS name(s).) E.g., for vis='uid_A02.ms', the outfile will be 'uid_A02_cmd.txt'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Back up flag column before applying flags. Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Produce log output as asdm2MS is being run Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Over write an existing MS(s) or MS(s), if the option wvr_corrected_data='both' Default: False  (do not overwrite) Options: False|True NOTE: the overwrite parameter affects all the output of the task. If any of the following exist, it will not overwrite them. MS(s), .flagversions, online flag files. When set to True, it will overwrite the MS, .flagversions and online flag file.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bdfflags",
                    "name": "bdfflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Set the MS FLAG column according to the ASDM _binary_ flags Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "with_pointing_correction",
                    "name": "with_pointing_correction",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Add (ASDM::Pointing::encoder - ASDM::Pointing::pointingDirection) to the value to be written in MS::Pointing::direction Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "convert_ephem2geo",
                    "name": "convert_ephem2geo",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "if True, convert any attached ephemerides to the GEO reference frame (time-spacing not changed) Default: True Options: True|False ALMA uses ephemerides with observer location equal to the ALMA site. For later processing of the radial velocity information in, e.g. cvel,  a geocentric ephemeris is needed. Setting this option to True will perform the conversion of positions and velocities on all attached ephemerides in the imported MS. This will neither change the time-spacing nor the duration of the ephemeris. No interpolation in time is done.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "polyephem_tabtimestep",
                    "name": "polyephem_tabtimestep",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Timestep (days) for the tabulation of polynomial ephemerides. A value less than or equal to 0 disables tabulation. Default: 0 Presently, VLA data can contain polynomial ephemerides. ALMA data uses tabulated values.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -42,
            "text": "importatca",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importatca",
                    "defaultValue": "casatasks.importatca",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "files",
                    "name": "files",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name of input ATCA RPFits file(s) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output MeasurementSet Default: none Example: vis='mydata.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "options",
                    "name": "options",
                    "value": "",
                    "defaultValue": "",
                    "description": "Processing options Default: none Options: birdie, reweight, noxycorr, fastmosaic, hires, noac (comma separated list) - birdie: (pre-CABB data only) discard edge channels and channels affected by internal RFI - reweight: (pre-CABB data only) suppress ringing of RFI spikes by reweighting of the lag spectrum - noxycorr: do not apply the xy phase correction as derived from the switched noise calibration, by default this is applied during loading of the data - fastmosaic: use this option if you are loading mosaic data with many pointings and only one or two integrations per pointing; this option changes the tiling of the data to avoid excessive I/O - hires: use this option if you have data in time binning mode (as used for pulsars) but you want to make it look like data with very short integration time (no bins) - noac: discard the auto-correlation data",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "[-1]",
                    "defaultValue": "[-1]",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels) Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nscans",
                    "name": "nscans",
                    "value": "[int(0)",
                    "defaultValue": "[int(0)",
                    "description": "Number of scans to skip followed by number of scans to read Default: [0, 0]",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lowfreq",
                    "name": "lowfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Lowest reference frequency to select Default: 0.1GHz",
                    "type": "int(0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "highfreq",
                    "name": "highfreq",
                    "value": "{'value': 0.1, 'unit': 'GHz'}",
                    "defaultValue": "{'value': 0.1, 'unit': 'GHz'}",
                    "description": "Highest reference frequency to select Default: 999GHz",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fields",
                    "name": "fields",
                    "value": "{'value': 999.0, 'unit': 'GHz'}",
                    "defaultValue": "{'value': 999.0, 'unit': 'GHz'}",
                    "description": "List of field names to select ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "edge",
                    "name": "edge",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "The edge parameter specifies how many edge channels to discard as a percentage of the number of channels in each band. Default: 8 (e.g., discard 82 channels from the top and bottom of a 2048 channel spectrum) For combined zooms, this specifies the percentage",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "8.0",
                    "defaultValue": "8.0",
                    "description": "",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -43,
            "text": "importfits",
            "description": "List of values to be used to define the synthesized beam MAJ,BMIN,BPA] (as in the FITS keywords) Default:  (i.e.take from FITS file) Example: beam=['0.35arcsec', '0.24arcsec',",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importfits",
                    "defaultValue": "casatasks.importfits",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsimage",
                    "name": "fitsimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input image FITS file Default: none Example: fitsimage='3C273XC1.fits'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output CASA image Default: none Example: fitsimage='3C273XC1.image'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "whichrep",
                    "name": "whichrep",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "If fits image has multiple coordinate reps, choose one. Default: 0 (means first) Example: whichrep=1",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "whichhdu",
                    "name": "whichhdu",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "If fits file contains multiple images, choose one Default: -1 (use the first valid one) NOTE: 0 = first HDU, -1 = first valid image Example: whichhdu=1",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "zeroblanks",
                    "name": "zeroblanks",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Set blanked pixels to zero (not NaN) Default: True Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite output file if it exists? Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "defaultaxes",
                    "name": "defaultaxes",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Add the default 4D coordinate axes where they are missing Default: False Options: False|True IMPORTANT: value True requires setting defaultaxesvalues",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "defaultaxesvalues",
                    "name": "defaultaxesvalues",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of values to assign to added degenerate axes when defaultaxes==True (ra,dec,freq,stokes) Default: For existing axes, empty strings can be given as values. For the directions and spectral values, any valid angle/frequency expressions can be given. Example: defaultaxesvalues=['19h30m00', '-02d30m00', '88.5GHz', 'Q']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "beam",
                    "name": "beam",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of values to be used to define the synthesized beam MAJ,BMIN,BPA] (as in the FITS keywords) Default:  (i.e.take from FITS file) Example: beam=['0.35arcsec', '0.24arcsec',",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -44,
            "text": "importfitsidi",
            "description": "This frame will be used to set the spectral reference frame for all spectral windows in the output MS Default: GEO (geocentric) Options: GEO|TOPO|LSRK|BARY NOTE: if specframe is set to TOPO, the reference location will be taken from the Observatories table in the CASA data repository for the given name of the observatory. You can edit that table",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importfitsidi",
                    "defaultValue": "casatasks.importfitsidi",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsidifile",
                    "name": "fitsidifile",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name(s) of input FITS-IDI file(s) Default: none (must be supplied) Examples: fitsidifile='3C273XC1.IDI' fitsidifile=['3C273XC1.IDI1','3C273XC1.IDI2']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: none Example: outputvis='3C273XC1.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "constobsid",
                    "name": "constobsid",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If True, give constant obs ID==0 to the data from all input fitsidi files (False = separate obs id for each file) Default: False (new obs id for each input file) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scanreindexgap_s",
                    "name": "scanreindexgap_s",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Min time gap (seconds) between integrations to start a new scan Default: 0. (no reindexing) If > 0., a new scan is started whenever the gap between two integrations is > the given value (seconds) or when a new field starts or when the ARRAY_ID changes.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "specframe",
                    "name": "specframe",
                    "value": "GEO",
                    "defaultValue": "GEO",
                    "description": "This frame will be used to set the spectral reference frame for all spectral windows in the output MS Default: GEO (geocentric) Options: GEO|TOPO|LSRK|BARY NOTE: if specframe is set to TOPO, the reference location will be taken from the Observatories table in the CASA data repository for the given name of the observatory. You can edit that table",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -45,
            "text": "importgmrt",
            "description": "Name of input visibility file Default: none",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importgmrt",
                    "defaultValue": "casatasks.importgmrt",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsfile",
                    "name": "fitsfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input UV FITS file Default: none Example: fitsimage='3C273XC1.fits'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagfile",
                    "name": "flagfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "List of files containing flagging information. Default: none Examples: flagfile='3c273XC1.flag' flagfile=['3c273Cc1_1.flag','3c273Cc2_1.flag',']",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -46,
            "text": "importmiriad",
            "description": "Display increasingly verbose debug messages Default: 0 Example: debug=1",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importmiriad",
                    "defaultValue": "casatasks.importmiriad",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mirfile",
                    "name": "mirfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input Miriad visibility file Default: none Example: mirfile='mydata.uv'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output MeasurementSet Default: none Example: vis='mydata.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tsys",
                    "name": "tsys",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use the Tsys to set the visibility weights Default: False Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "[-1]",
                    "defaultValue": "[-1]",
                    "description": "Select spectral window/channels Default: '' (all spectral windows and channels) Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vel",
                    "name": "vel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select velocity reference Default: telescope dependent, ATCA -> TOPO, CARMA -> LSRK Options: TOPO|LSRK|LSRD Example: vel='LSRK'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "linecal",
                    "name": "linecal",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "(CARMA) Apply line calibration Default: False Options: False|True Only useful for CARMA data",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wide",
                    "name": "wide",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "(CARMA) Select wide window averages Select which of the wide-band channels should be loaded Only useful for CARMA data",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "debug",
                    "name": "debug",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Display increasingly verbose debug messages Default: 0 Example: debug=1",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -47,
            "text": "importnro",
            "description": "Turn on parallel execution Default: False (serial execution) Options: False|True",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importnro",
                    "defaultValue": "casatasks.importnro",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input NOSTAR data Default: none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Root name of the ms to be created. Note the .ms is NOT added Default: none Example: outputvis='myms.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Over write an existing MS(s) Default: False (do not overwrite) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parallel",
                    "name": "parallel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Turn on parallel execution Default: False (serial execution) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -48,
            "text": "importuvfits",
            "description": "VLA/EVLA/CARMA only; \\'new\\' or \\'old\\'; \\'VA04\\' or \\'04\\' for VLA ant 4",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importuvfits",
                    "defaultValue": "casatasks.importuvfits",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsfile",
                    "name": "fitsfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input UV FITS file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antnamescheme",
                    "name": "antnamescheme",
                    "value": "old",
                    "defaultValue": "old",
                    "description": "VLA/EVLA/CARMA only; \\'new\\' or \\'old\\'; \\'VA04\\' or \\'04\\' for VLA ant 4",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -49,
            "text": "importvla",
            "description": "Use the EVLA's center frequency and bandwidths for frequencies specified via wavelength or band. Default: False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.importvla",
                    "defaultValue": "casatasks.importvla",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "archivefiles",
                    "name": "archivefiles",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name of input VLA archive file(s) Default: none.  Must be supplied Examples: archivefiles = 'AP314_A959519.xp1' archivefiles=P314_A950519.xp1', 'AP314_A950519.xp2']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: none.  Must be supplied Example: vis='NGC7538.ms' NOTE: Will not over-write existing ms of same name. A backup flag-file version 'Original' will be made in vis.flagversions.  See help flagmanager.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bandname",
                    "name": "bandname",
                    "value": "",
                    "defaultValue": "",
                    "description": "VLA frequency band name: Default: '' (obtain all bands in the archive file) Options: '4'=48-96 MHz,'P'=298-345 MHz,'L'=1.15-1.75 GHz, 'C'=4.2-5.1 GHz,'X'=6.8-9.6 GHz,'U'=13.5-16.3 GHz, 'K'=20.8-25.8 GHz,'Q'=38-51 GHz Example: bandname='K'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "frequencytol",
                    "name": "frequencytol",
                    "value": "150000.0Hz",
                    "defaultValue": "150000.0Hz",
                    "description": "Tolerance in frequency shift in making spectral windows Default: = 150000.0Hz' Example: frequencytol = 1500000.0 (units = Hz) For Doppler shifted data, less than 10000 Hz may may produce too many unnecessary spectral windows.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "project",
                    "name": "project",
                    "value": "",
                    "defaultValue": "",
                    "description": "Project name to import from archive files Default: '' (all projects in file) Example: project='AL519' Project = 'al519' or AL519 will work. WARNING: Do not include leading zeros; project = 'AL0519' will not work.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "starttime",
                    "name": "starttime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Time after which data will be considered for importing Default: '' (all) syntax: starttime = '2003/1/31/05:05:23'. Date must be included!",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stoptime",
                    "name": "stoptime",
                    "value": "",
                    "defaultValue": "",
                    "description": "Time before which data will be considered for importing Default: '' (all) syntax: starttime = '2003/1/31/08:05:23'. Date must be included!",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applytsys",
                    "name": "applytsys",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Apply data scaling and weight scaling by nominal sensitivity (~Tsys) Default: True (strongly recommended) Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "autocorr",
                    "name": "autocorr",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Import autocorrelations to MS Default: False (no autocorrelations) Options: False|True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antnamescheme",
                    "name": "antnamescheme",
                    "value": "new",
                    "defaultValue": "new",
                    "description": "'old' or 'new' antenna names. Default: 'new' Options: new|old * 'new' gives antnenna names 'VA04' or 'EA13 for VLA telescopse 04 and 13 (EVLA) * 'old' gives names '04' or '13'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepblanks",
                    "name": "keepblanks",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Should sources with blank names be filled into the data base? Default: False (do not fill) Options: False|True These scans are tipping scans (as of June 1, 2009) and should not be filled in the visibility data set.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "evlabands",
                    "name": "evlabands",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use the EVLA's center frequency and bandwidths for frequencies specified via wavelength or band. Default: False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -50,
            "text": "impv",
            "description": "Stretch the mask if necessary and possible? Default False ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.impv",
                    "defaultValue": "casatasks.impv",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image name. If empty, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "coords",
                    "defaultValue": "coords",
                    "description": "If coords\", use start and end values. If \"length\", use center, length, and pa values. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "",
                    "defaultValue": "",
                    "description": "The starting pixel in the direction plane (array of two values). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "end",
                    "name": "end",
                    "value": "",
                    "defaultValue": "",
                    "description": "The ending pixel in the direction plane (array of two values). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "center",
                    "name": "center",
                    "value": "",
                    "defaultValue": "",
                    "description": "The center point in the direction plane (array of two values). If specified, length and pa must also be specified and neither of start nor end may be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "length",
                    "name": "length",
                    "value": "",
                    "defaultValue": "",
                    "description": "The length of the segment in the direction plane. If specified, center and pa must also be specified and neither of start nor end may be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pa",
                    "name": "pa",
                    "value": "",
                    "defaultValue": "",
                    "description": "The position angle of the segment in the direction plane, measured from north through east. If specified, center and length must also be specified and neither of start nor end may be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Width of slice for averaging pixels perpendicular to the slice. Must be an odd positive integer or valid quantity. See help for details. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "unit",
                    "name": "unit",
                    "value": "arcsec",
                    "defaultValue": "arcsec",
                    "description": "Unit for the offset axis in the resulting image. Must be a unit of angular measure. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite the output if it exists? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is entire image. No selection is permitted in the direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use.  Channels must be contiguous. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Planes must be contiguous. Default is to use all stokes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? Default False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -51,
            "text": "imrebin",
            "description": "Remove pixels from the end of an axis to be rebinned if there are not enough to form an integral bin? ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imrebin",
                    "defaultValue": "casatasks.imrebin",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image name. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "factor",
                    "name": "factor",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Binning factors for each axis. Use imhead or ia.summary to determine axis ordering. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. Stokes planes cannot be rebinned. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dropdeg",
                    "name": "dropdeg",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Drop degenerate axes? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite the output if it exists? Default False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "crop",
                    "name": "crop",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Remove pixels from the end of an axis to be rebinned if there are not enough to form an integral bin? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -52,
            "text": "imreframe",
            "description": "restfrequency to use for velocity values (e.g 1.420GHz\" for the HI line) \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imreframe",
                    "defaultValue": "casatasks.imreframe",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "output",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the output image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "lsrk",
                    "defaultValue": "lsrk",
                    "description": "Spectral frame in which the frequency or velocity values will be reported by default ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "epoch",
                    "name": "epoch",
                    "value": "",
                    "defaultValue": "",
                    "description": "Epoch to be associated with this image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "restfrequency to use for velocity values (e.g 1.420GHz\" for the HI line) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -53,
            "text": "imregrid",
            "description": "Overwrite (unprompted) pre-existing output file?",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imregrid",
                    "defaultValue": "casatasks.imregrid",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the source image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "template",
                    "name": "template",
                    "value": "get",
                    "defaultValue": "get",
                    "description": "A dictionary, refcode, or name of an image that provides the output shape and coordinate system ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "output",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name for the regridded image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "asvelocity",
                    "name": "asvelocity",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Regrid spectral axis in velocity space rather than frequency space? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axes",
                    "name": "axes",
                    "value": "[-1]",
                    "defaultValue": "[-1]",
                    "description": "The pixel axes to regrid. -1 => all. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "shape",
                    "name": "shape",
                    "value": "[-1]",
                    "defaultValue": "[-1]",
                    "description": "Shape of the output image. Only used if template is an image. If not specified (-1), the output image shape will be the same as the template image shape along the axes that are regridded and the same as input image shape along the axes which are not regridded. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "The interpolation method.  One of nearest\", \"linear\", \"cubic\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "decimate",
                    "name": "decimate",
                    "value": "10",
                    "defaultValue": "10",
                    "description": "Decimation factor for coordinate grid computation ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "replicate",
                    "name": "replicate",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Replicate image rather than regrid? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite (unprompted) pre-existing output file?",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -54,
            "text": "imsmooth",
            "description": "Alternate way of describing a Gaussian. If specified, must be a dictionary with keys major\", \"minor\", and \"pa\" (or \"positionangle\"). Do not specify beam if specifying major, minor, and pa. \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imsmooth",
                    "defaultValue": "casatasks.imsmooth",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image. Must be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "kernel",
                    "name": "kernel",
                    "value": "gauss",
                    "defaultValue": "gauss",
                    "description": "Type of kernel to use. Acceptable values are b\", \"box\", or \"boxcar\" for a boxcar kernel, \"g\", \"gauss\", or \"gaussian\" for a gaussian kernel, \"c\", \"common\", or \"commonbeam\" to use the common beam of an image with multiple beams as the gaussian to which to convolve all the planes, \"i\" or \"image\" to use an image as the kernel. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "major",
                    "name": "major",
                    "value": "",
                    "defaultValue": "",
                    "description": "Major axis for the kernels. Standard quantity representation. Must be specified for kernel=boxcar\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minor",
                    "name": "minor",
                    "value": "",
                    "defaultValue": "",
                    "description": "Minor axis. Standard quantity representation. Must be specified for kernel=boxcar\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pa",
                    "name": "pa",
                    "value": "",
                    "defaultValue": "",
                    "description": "Position angle used only for gaussian kernel. Standard quantity representation. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "targetres",
                    "name": "targetres",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If gaussian kernel, specified parameters are to be resolution of output image (True) or parameters of gaussian to convolve with input image (False). ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "kimage",
                    "name": "kimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Kernel image name. Only used if kernel=i\" or \"image\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scale",
                    "name": "scale",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Scale factor. -1.0 means auto-scale. Only used if kernel=i\" or \"image\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image name. Must be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, stretch the mask if necessary and possible. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, overwrite (unprompted) pre-existing output file. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "beam",
                    "name": "beam",
                    "value": "",
                    "defaultValue": "",
                    "description": "Alternate way of describing a Gaussian. If specified, must be a dictionary with keys major\", \"minor\", and \"pa\" (or \"positionangle\"). Do not specify beam if specifying major, minor, and pa. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -55,
            "text": "imstat",
            "description": "For biweight, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, do a fast, simple computation (see description). Ignored if the algorithm is not biweight\". \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imstat",
                    "defaultValue": "casatasks.imstat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axes",
                    "name": "axes",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of axes to evaluate statistics over. Default is all axes. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region(s) to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listit",
                    "name": "listit",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Print stats and bounding box to logger? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Print additional messages to logger? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of file to write fit results. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If logfile exists, append to it if True or overwrite it if False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "algorithm",
                    "name": "algorithm",
                    "value": "classic",
                    "defaultValue": "classic",
                    "description": "Algorithm to use. Supported values are biweight\", \"chauvenet\", \"classic\", \"fit-half\", and \"hinges-fences\". Minimum match is supported. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fence",
                    "name": "fence",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Fence value for hinges-fences. A negative value means use the entire data set (ie default to the classic\" algorithm). Ignored if algorithm is not \"hinges-fences\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "center",
                    "name": "center",
                    "value": "mean",
                    "defaultValue": "mean",
                    "description": "Center to use for fit-half. Valid choices are mean\", \"median\", and \"zero\". Ignored if algorithm is not \"fit-half\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lside",
                    "name": "lside",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "For fit-half, use values <= center for real data if True? If False, use values >= center as real data. Ignored if algorithm is not fit-half\". \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "zscore",
                    "name": "zscore",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "For chauvenet, this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenets criterion. Ignored if algorithm is not \"chauvenet\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxiter",
                    "name": "maxiter",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "For chauvenet, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if algorithm is not chauvenet\". \"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clmethod",
                    "name": "clmethod",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "Method to use for calculating classical statistics. Supported methods are auto\", \"tiled\", and \"framework\". Ignored if algorithm is not \"classic\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "For biweight, this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, do a fast, simple computation (see description). Ignored if the algorithm is not biweight\". \"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -56,
            "text": "imsubimage",
            "description": "If dropdeg=True, these are the degenerate axes to keep. Nondegenerate axes are implicitly always kept. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imsubimage",
                    "defaultValue": "casatasks.imsubimage",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input image name.  Default is unset. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image name.  Default is unset. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dropdeg",
                    "name": "dropdeg",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Drop degenerate axes ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite (unprompted) pre-existing output file? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Post additional informative messages to the logger ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepaxes",
                    "name": "keepaxes",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "If dropdeg=True, these are the degenerate axes to keep. Nondegenerate axes are implicitly always kept. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -57,
            "text": "imtrans",
            "description": "New zero-based axes order. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imtrans",
                    "defaultValue": "casatasks.imtrans",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image which must be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output CASA image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "order",
                    "name": "order",
                    "value": "",
                    "defaultValue": "",
                    "description": "New zero-based axes order. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -58,
            "text": "imval",
            "description": "Stokes planes to use. Planes specified must be contiguous. Default is to use all Stokes planes. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.imval",
                    "defaultValue": "casatasks.imval",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Empty string (default) means use rules for box/chans/stokes specification. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region(s) to select in direction plane. Empty string (default) means use the reference pixel. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Planes specified must be contiguous. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -59,
            "text": "initweights",
            "description": "Initialize the WEIGHT_SPECTRUM column ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.initweights",
                    "defaultValue": "casatasks.initweights",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wtmode",
                    "name": "wtmode",
                    "value": "nyq",
                    "defaultValue": "nyq",
                    "description": "Initialization mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tsystable",
                    "name": "tsystable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Tsys calibration table to apply on the fly ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select a subset of calibrators from Tsys table ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation type in timereq]. default==\\'linear,linear\\' ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral windows combinations to form for gaintable(s) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dowtsp",
                    "name": "dowtsp",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Initialize the WEIGHT_SPECTRUM column ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -60,
            "text": "listcal",
            "description": "Rows per page ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listcal",
                    "defaultValue": "casatasks.listcal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input calibration table to list ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Field name or index ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Antenna name or index ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral window and channel ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listfile",
                    "name": "listfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Disk file to write output ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pagerows",
                    "name": "pagerows",
                    "value": "50",
                    "defaultValue": "50",
                    "description": "Rows per page ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -61,
            "text": "listfits",
            "description": "Name of input fits file ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listfits",
                    "defaultValue": "casatasks.listfits",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitsfile",
                    "name": "fitsfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input fits file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -62,
            "text": "listhistory",
            "description": "Name of input visibility file (MS) ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listhistory",
                    "defaultValue": "casatasks.listhistory",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -63,
            "text": "listobs",
            "description": "If True, tacitly overwrite listfile if it exists. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listobs",
                    "defaultValue": "casatasks.listobs",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on spectral-window/frequency/channel. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on field names or field index numbers. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on antenna/baselines. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on uv range. Default: entire range. Default units: meters. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on time range. Default is entire range. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on correlation. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on scan numbers. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on observation intent. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on multi-feed numbers: Not yet implemented ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on (sub)array numbers. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on observation ID. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Controls level of information detail reported. True reports more than False. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listfile",
                    "name": "listfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of disk file to write output. Default is none (output is written to logger only). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listunfl",
                    "name": "listunfl",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List unflagged row counts? If true, it can have significant negative performance impact. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cachesize",
                    "name": "cachesize",
                    "value": "50.0",
                    "defaultValue": "50.0",
                    "description": "EXPERIMENTAL. Maximum size in megabytes of cache in which data structures can be held. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If True, tacitly overwrite listfile if it exists. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -64,
            "text": "listpartition",
            "description": "Name of ASCII file to save output: ''==>to terminal ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listpartition",
                    "defaultValue": "casatasks.listpartition",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of Multi-MS or normal MS. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "createdict",
                    "name": "createdict",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Create and return a dictionary with Sub-MS information ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listfile",
                    "name": "listfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of ASCII file to save output: ''==>to terminal ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -65,
            "text": "listsdm",
            "description": "Name of input SDM directory ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listsdm",
                    "defaultValue": "casatasks.listsdm",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdm",
                    "name": "sdm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input SDM directory ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -66,
            "text": "listvis",
            "description": "Output file ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.listvis",
                    "defaultValue": "casatasks.listvis",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "options",
                    "name": "options",
                    "value": "ap",
                    "defaultValue": "ap",
                    "description": "List options: ap only ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "Column to list: data, float_data, corrected, model, residual ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Field names or index to be listed ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": " *",
                    "defaultValue": " *",
                    "description": "Spectral window channels ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Other data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Antenna/baselines ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Time range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Correlations ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan numbers ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Multi-feed numbers (Not yet implemented) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Array numbers (Not yet implemented) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "uv range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "average",
                    "name": "average",
                    "value": "",
                    "defaultValue": "",
                    "description": "Averaging mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showflags",
                    "name": "showflags",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Show flagged data (Not yet implemented) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pagerows",
                    "name": "pagerows",
                    "value": "50",
                    "defaultValue": "50",
                    "description": "Rows per page ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listfile",
                    "name": "listfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -67,
            "text": "makemask",
            "description": "List of chans/freqs (in output) on which to expand the mask ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.makemask",
                    "defaultValue": "casatasks.makemask",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "list",
                    "defaultValue": "list",
                    "description": "Mask method (list, copy,expand,delete,setdefaultmask) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inpimage",
                    "name": "inpimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inpmask",
                    "name": "inpmask",
                    "value": "",
                    "defaultValue": "",
                    "description": "mask(s) to be processed: image masks,T/F internal masks(Need to include parent image names),regions(for copy mode) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "output",
                    "name": "output",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output mask (imagename or imagename:internal_maskname) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite output if exists? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inpfreqs",
                    "name": "inpfreqs",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of chans/freqs (in inpmask) to read masks from ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfreqs",
                    "name": "outfreqs",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of chans/freqs (in output) on which to expand the mask ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -68,
            "text": "mstransform",
            "description": "Hidden parameter for use in the pipeline context only",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.mstransform",
                    "defaultValue": "casatasks.mstransform",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input Measurement set or Multi-MS. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output Measurement Set or Multi-MS. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "createmms",
                    "name": "createmms",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Create a multi-MS output from an input MS. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "separationaxis",
                    "name": "separationaxis",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "Axis to do parallelization across(scan,spw,auto,baseline). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "numsubms",
                    "name": "numsubms",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "The number of Sub-MSs to create (auto or any number) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tileshape",
                    "name": "tileshape",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "List with 1 or 3 elements giving the tile shape of the disk data columns. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using ID(s) or name(s). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan numbers. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Correlation: '' ==> all, correlation=XX,YY\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by time range. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan intent. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select (sub)array(s) by array ID number. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Multi-feed numbers: Not yet implemented. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "corrected",
                    "defaultValue": "corrected",
                    "description": "Which data column(s) to process. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "realmodelcol",
                    "name": "realmodelcol",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Make real a virtual MODEL column. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepflags",
                    "name": "keepflags",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Keep *completely flagged rows* or drop them from the output. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usewtspectrum",
                    "name": "usewtspectrum",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Force creation of the columns WEIGHT_SPECTRUM and SIGMA_SPECTRUM in the output MS, even if not present in the input MS. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combinespws",
                    "name": "combinespws",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Combine the input spws into a new output spw. Only supported when the number of channels is the same for all the spws. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanaverage",
                    "name": "chanaverage",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Average data in channels. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanbin",
                    "name": "chanbin",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Width (bin) of input channels to average to form an output channel. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hanning",
                    "name": "hanning",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Hanning smooth data to remove Gibbs ringing. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "regridms",
                    "name": "regridms",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Transform channel labels and visibilities to a different spectral reference frame. Notice that u,v,w data is not transformed. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "channel",
                    "defaultValue": "channel",
                    "description": "Regridding mode (channel/velocity/frequency/channel_b). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Number of channels in the output spw (-1=all). Used for regridding, together with \\'start\\' and \\'width\\'. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Start of the output visibilities. Used for regridding, together with \\'width\\' and \\'nchan\\'. It can be in different units, depending on the regridding mode: first input channel (mode=\\'channel\\'), first velocity (mode=\\'velocity\\'), or first frequency (mode=\\'frequency\\'). Example values: \\'5\\', \\'0.0km/s\\', \\'1.4GHz\\', for channel, velocity, and frequency modes, respectively. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Channel width of the output visibilities. Used for regridding, together with \\'start\\', and \\'nchan\\'. It can be in different units, depending on the regridding mode: number of input channels (mode=\\'channel\\'), velocity (mode=\\'velocity\\'), or frequency (mode=\\'frequency\\'. Example values: \\'2\\', \\'1.0km/s\\', \\'1.0kHz\\', for channel, velocity, and frequency modes, respectively. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nspw",
                    "name": "nspw",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of output spws to create in output MS. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Spectral interpolation method. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Phase center direction to be used for the spectral coordinate transformation: direction measure or field index ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rest frequency to use for output. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output reference frame (''=keep input frame). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "Velocity definition. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "preaverage",
                    "name": "preaverage",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Pre-average channels before regridding, when the ratio between the output and and input widths is greater than 2. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timeaverage",
                    "name": "timeaverage",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Average data in time. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "0s",
                    "defaultValue": "0s",
                    "description": "Bin width for time averaging. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timespan",
                    "name": "timespan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Span the timebin across scan, state or both. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxuvwdistance",
                    "name": "maxuvwdistance",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Maximum separation of start-to-end baselines that can be included in an average. (meters) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Enable on-the-fly (OTF) calibration as in task applycal ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "",
                    "defaultValue": "",
                    "description": "Path to calibration library file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "douvcontsub",
                    "name": "douvcontsub",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Enable continuum subtraction as in task uvcontsub ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitspw",
                    "name": "fitspw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral window:channel selection for fitting the continuum ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitorder",
                    "name": "fitorder",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Polynomial order for the fits ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "want_cont",
                    "name": "want_cont",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Produce continuum estimate instead of continuum subtracted data ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "denoising_lib",
                    "name": "denoising_lib",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Use new denoising library (based on GSL) instead of casacore fitting routines ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nthreads",
                    "name": "nthreads",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of OMP threads to use (currently maximum limited by number of polarizations) ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of iterations for re-weighted linear fit ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "disableparallel",
                    "name": "disableparallel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Hidden parameter for internal use only. Do not change it! ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ddistart",
                    "name": "ddistart",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Hidden parameter for internal use only. Do not change it! ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "taql",
                    "name": "taql",
                    "value": "",
                    "defaultValue": "",
                    "description": "Table query for nested selections ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "monolithic_processing",
                    "name": "monolithic_processing",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Hidden parameter for internal use only. Do not change it! ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reindex",
                    "name": "reindex",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Hidden parameter for use in the pipeline context only",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -69,
            "text": "nrobeamaverage",
            "description": "name of output file",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.nrobeamaverage",
                    "defaultValue": "casatasks.nrobeamaverage",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "float_data",
                    "defaultValue": "float_data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected_data\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by IF IDs (spectral windows), e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by time range, e.g. 09:14:0~09:54:0\" (\"\"=all) (see examples in help) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "beam",
                    "name": "beam",
                    "value": "",
                    "defaultValue": "",
                    "description": "beam IDs to be averaged over, e.g. 1,3\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "0s",
                    "defaultValue": "0s",
                    "description": "bin width for time averaging. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -70,
            "text": "partition",
            "description": "Table query for nested selections",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.partition",
                    "defaultValue": "casatasks.partition",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input measurement set ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output measurement set ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "createmms",
                    "name": "createmms",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Should this create a multi-MS output ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "separationaxis",
                    "name": "separationaxis",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "Axis to do parallelization across(scan, spw, baseline, auto) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "numsubms",
                    "name": "numsubms",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "The number of SubMSs to create (auto or any number) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Create a backup of the FLAG column in the MMS. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Which data column(s) to process. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using ID(s) or name(s). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan numbers. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Correlation: '' ==> all, correlation=XX,YY\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by time range. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan intent. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select (sub)array(s) by array ID number. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Multi-feed numbers: Not yet implemented. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "disableparallel",
                    "name": "disableparallel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Create a multi-MS in parallel. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ddistart",
                    "name": "ddistart",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Do not change this parameter. For internal use only. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "taql",
                    "name": "taql",
                    "value": "",
                    "defaultValue": "",
                    "description": "Table query for nested selections",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -71,
            "text": "phaseshift",
            "description": "Direction coordinates of new phase center, specified as absolute world coordinates including frame, eg phasecenter = 'J2000 19h53m50 40d06m00' phasecenter = 'B1950 292.5deg -40.0deg' phasecenter = 'ICRS 13:05:27.2780 -049.28.04.458' phasecenter = 'GALACTIC 47.5rad -60.22rad' Time dependent systems (eg, AZEL) are not supported, nor are ephemeris objects. This will change the phase of the baseline visibilities so that the final image is centered at the new location. Additionally the uvw coordinates and the the PHASE_DIR column from the FIELD sub-table will be changed accordingly. This operation will be done for all selected fields, so all fields in the output MS will have as center the new location. The new phase center is not constrained to",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.phaseshift",
                    "defaultValue": "casatasks.phaseshift",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none, must be specified Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: None, must be specified Example: outputvis='ngc5921_out.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepmms",
                    "name": "keepmms",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Create a Multi-MS as the output if the input is a Multi-MS. Default: True Options: True|False By default it will create a Multi-MS when the input is a Multi-MS. The output Multi-MS will have the same partition axis of the input MMS. See CASA Docs for more information on the MMS format.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: ''=all spectral windows and channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='*BANDPASS*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "(Sub)array number range Default: '' (all)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "Which data column(s) to process (case-insensitive). Default: 'all' (= whichever of the options that are present) Options: 'data', 'model', 'corrected', 'all','float_data', 'lag_data', 'float_data,data', 'lag_data,data' Example: datacolumn='data'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Direction coordinates of new phase center, specified as absolute world coordinates including frame, eg phasecenter = 'J2000 19h53m50 40d06m00' phasecenter = 'B1950 292.5deg -40.0deg' phasecenter = 'ICRS 13:05:27.2780 -049.28.04.458' phasecenter = 'GALACTIC 47.5rad -60.22rad' Time dependent systems (eg, AZEL) are not supported, nor are ephemeris objects. This will change the phase of the baseline visibilities so that the final image is centered at the new location. Additionally the uvw coordinates and the the PHASE_DIR column from the FIELD sub-table will be changed accordingly. This operation will be done for all selected fields, so all fields in the output MS will have as center the new location. The new phase center is not constrained to",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -72,
            "text": "plotants",
            "description": "Show plot on gui. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.plotants",
                    "defaultValue": "casatasks.plotants",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "figfile",
                    "name": "figfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Save the plotted figure to this file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antindex",
                    "name": "antindex",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Label antennas with name and antenna ID ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logpos",
                    "name": "logpos",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Whether to plot logarithmic positions ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "exclude",
                    "name": "exclude",
                    "value": "",
                    "defaultValue": "",
                    "description": "Antenna name/id selection to exclude from plot ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "checkbaselines",
                    "name": "checkbaselines",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Whether to check baselines in the main table. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "title",
                    "name": "title",
                    "value": "",
                    "defaultValue": "",
                    "description": "Title for the plot ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showgui",
                    "name": "showgui",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Show plot on gui. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -73,
            "text": "plotbandpass",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.plotbandpass",
                    "defaultValue": "casatasks.plotbandpass",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input table name, either a bandpass solution or a Tsys solution ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "A comma-delimited string list of antennas (either names or integer indices) for which to display solutions.  Default = all antennas. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "A comma-delimited string list of fields (either names or integer indices) for which to display solutions.  Default = all fields. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "A comma-delimited string list of spws for which to display solutions.  Default = all spws. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "yaxis",
                    "name": "yaxis",
                    "value": "amp",
                    "defaultValue": "amp",
                    "description": "The quantity to plot on the y-axis (amp\", \"phase\", \"both\", \"tsys\", append \"db\" for dB). \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "xaxis",
                    "name": "xaxis",
                    "value": "chan",
                    "defaultValue": "chan",
                    "description": "The quantity to plot on the x-axis (chan\" or \"freq\"). \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "figfile",
                    "name": "figfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "The name of the plot file to produce. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "plotrange",
                    "name": "plotrange",
                    "value": "[float(0)",
                    "defaultValue": "[float(0)",
                    "description": "The axes limits to use 0,x1,y0,y1]. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable2",
                    "name": "caltable2",
                    "value": "",
                    "defaultValue": "",
                    "description": "A second cal table, of type BPOLY or B, to overlay on a B table ",
                    "type": "float(0)",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overlay",
                    "name": "overlay",
                    "value": "",
                    "defaultValue": "",
                    "description": "Show multiple solutions in same frame in different colors (time, antenna, spw, baseband, or time,antenna) ",
                    "type": "float(0)",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showflagged",
                    "name": "showflagged",
                    "value": "",
                    "defaultValue": "",
                    "description": "Show the values of the solution, even if flagged ",
                    "type": "float(0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timeranges",
                    "name": "timeranges",
                    "value": "",
                    "defaultValue": "",
                    "description": "Show only these timeranges, the first timerange being 0 ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "buildpdf",
                    "name": "buildpdf",
                    "value": "",
                    "defaultValue": "",
                    "description": "If True, assemble all the pngs into a pdf ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable3",
                    "name": "caltable3",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "A third cal table, of type BPOLY, to overlay on the first two tables ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "markersize",
                    "name": "markersize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of points ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "density",
                    "name": "density",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "dpi to use in creating PNGs and PDFs (default=108) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interactive",
                    "name": "interactive",
                    "value": "",
                    "defaultValue": "",
                    "description": "if False, then run to completion automatically without pause ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showpoints",
                    "name": "showpoints",
                    "value": "3",
                    "defaultValue": "3",
                    "description": "Draw points for the data (default=F for amp, T for phase) ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showlines",
                    "name": "showlines",
                    "value": "108",
                    "defaultValue": "108",
                    "description": "Draw lines connecting the data (default=T for amp, F for phase) ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "subplot",
                    "name": "subplot",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "11..81,22,32 or 42 for RowsxColumns (default=22), any 3rd digit is ignored ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "zoom",
                    "name": "zoom",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "intersect\" will zoom to overlap region of caltable with caltable2 \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "poln",
                    "name": "poln",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "Polarizations to plot: \" = all, or RR\",\"RL\",\"LR\",\"LL\",\"XX\",\"XY\",\"YX\",\"YY\",\"RR,LL\",\"XX,YY\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showatm",
                    "name": "showatm",
                    "value": "22",
                    "defaultValue": "22",
                    "description": "Compute and overlay the atmospheric transmission curve ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pwv",
                    "name": "pwv",
                    "value": "",
                    "defaultValue": "",
                    "description": "Define the pwv to use for the showatm option: auto\" or value in mm \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gs",
                    "name": "gs",
                    "value": "",
                    "defaultValue": "",
                    "description": "For buildpdf=T, full path for ghostscript command (in case it is not found) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "convert",
                    "name": "convert",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "For buildpdf=T, full path for the ImageMagick convert command (in case it is not found) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanrange",
                    "name": "chanrange",
                    "value": "auto",
                    "defaultValue": "auto",
                    "description": "Set xrange (5~100\") over which to autoscale y-axis for xaxis=\"freq\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solutionTimeThresholdSeconds",
                    "name": "solutionTimeThresholdSeconds",
                    "value": "gs",
                    "defaultValue": "gs",
                    "description": "Consider 2 solutions simultaneous if within this interval in seconds ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "debug",
                    "name": "debug",
                    "value": "convert",
                    "defaultValue": "convert",
                    "description": "Print verbose messages for debugging purposes ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phase",
                    "name": "phase",
                    "value": "",
                    "defaultValue": "",
                    "description": "The y-axis limits to use for phase plots when yaxis=both\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "30.0",
                    "defaultValue": "30.0",
                    "description": "name of the ms for this table, in case it does not match the string in the caltable ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showtsky",
                    "name": "showtsky",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Compute and overlay the sky temperature curve instead of transmission ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showfdm",
                    "name": "showfdm",
                    "value": "",
                    "defaultValue": "",
                    "description": "when showing TDM spws, draw the locations of the corresponding FDM spws ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showatmfield",
                    "name": "showatmfield",
                    "value": "",
                    "defaultValue": "",
                    "description": "for overlay=time\", use first observation of this fieldID or name \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lo1",
                    "name": "lo1",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "specify the LO1 setting (in GHz) for the observation ('' = automatic) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showimage",
                    "name": "showimage",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "also show the atmospheric curve for the image sideband (in black) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showatmpoints",
                    "name": "showatmpoints",
                    "value": "",
                    "defaultValue": "",
                    "description": "Draw atmospheric curve with points instead of a line ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parentms",
                    "name": "parentms",
                    "value": "",
                    "defaultValue": "",
                    "description": "if showimage=T, name of the parent ms (only needed if the ms has been previously split) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pdftk",
                    "name": "pdftk",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "For buildpdf=T, full path for pdftk command (in case it is not found) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "channeldiff",
                    "name": "channeldiff",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Set to a value > 0 (sigma) to plot derivatives of the solutions ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "edge",
                    "name": "edge",
                    "value": "",
                    "defaultValue": "",
                    "description": "The number of edge channels to ignore in finding outliers (for channeldiff>0) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "resample",
                    "name": "resample",
                    "value": "pdftk",
                    "defaultValue": "pdftk",
                    "description": "The channel expansion factor to use when computing MAD of derivative (for channeldiff>0) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "platformingThreshold",
                    "name": "platformingThreshold",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "if platformingSigma=0, then declare platforming if the amplitude derivative exceeds this percentage of the median ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "platformingSigma",
                    "name": "platformingSigma",
                    "value": "8",
                    "defaultValue": "8",
                    "description": "declare platforming if the amplitude derivative exceeds this many times the MAD ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "basebands",
                    "name": "basebands",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "A baseband number or list of baseband numbers for which to display solutions.  Default = all. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showBasebandNumber",
                    "name": "showBasebandNumber",
                    "value": "10.0",
                    "defaultValue": "10.0",
                    "description": "Put the baseband converter number (BBC_NO) in the title of each plot ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scans",
                    "name": "scans",
                    "value": "10.0",
                    "defaultValue": "10.0",
                    "description": "A scan or list of scans for which to display solutions.  Default = all. Does not work with overlay=time\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "figfileSequential",
                    "name": "figfileSequential",
                    "value": "",
                    "defaultValue": "",
                    "description": "naming scheme for pngs: False: name by spw/antenna (default), True: figfile.000.png, figfile.001.png, etc. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanrangeSetXrange",
                    "name": "chanrangeSetXrange",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If True, then chanrange also sets the xrange to display ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -74,
            "text": "plotprofilemap",
            "description": "Number of panels ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.plotprofilemap",
                    "defaultValue": "casatasks.plotprofilemap",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input image name (CASA image or FITS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "figfile",
                    "name": "figfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output figure name ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite existing figfile ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "transparent",
                    "name": "transparent",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Output transparent figure ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pol",
                    "name": "pol",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Polarization component to be plotted ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spectralaxis",
                    "name": "spectralaxis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Type of spectral axis ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rest frequency ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "plotrange",
                    "name": "plotrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral axis range to plot ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "title",
                    "name": "title",
                    "value": "",
                    "defaultValue": "",
                    "description": "Title of the plot ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "linecolor",
                    "name": "linecolor",
                    "value": "b",
                    "defaultValue": "b",
                    "description": "Line color ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "linestyle",
                    "name": "linestyle",
                    "value": "-",
                    "defaultValue": "-",
                    "description": "Line style ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "linewidth",
                    "name": "linewidth",
                    "value": "0.2",
                    "defaultValue": "0.2",
                    "description": "Line width in points ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "separatepanel",
                    "name": "separatepanel",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Separate plots ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "plotmasked",
                    "name": "plotmasked",
                    "value": "empty",
                    "defaultValue": "empty",
                    "description": "Masked data handling ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maskedcolor",
                    "name": "maskedcolor",
                    "value": "gray",
                    "defaultValue": "gray",
                    "description": "Line color for masked data ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showaxislabel",
                    "name": "showaxislabel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Show axis labels on the bottom left panel ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showtick",
                    "name": "showtick",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Show axis ticks ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showticklabel",
                    "name": "showticklabel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Show axis tick labels on the bottom left panel ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "figsize",
                    "name": "figsize",
                    "value": "",
                    "defaultValue": "",
                    "description": "Size of the figure ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "numpanels",
                    "name": "numpanels",
                    "value": "",
                    "defaultValue": "",
                    "description": "Number of panels ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -75,
            "text": "plotweather",
            "description": "(Optional) the name of the plot file",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.plotweather",
                    "defaultValue": "casatasks.plotweather",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "MS name ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "seasonal_weight",
                    "name": "seasonal_weight",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "weight of the seasonal model ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "doPlot",
                    "name": "doPlot",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "set this to True to create a plot ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "plotName",
                    "name": "plotName",
                    "value": "",
                    "defaultValue": "",
                    "description": "(Optional) the name of the plot file",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -76,
            "text": "polcal",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.polcal",
                    "defaultValue": "casatasks.polcal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output gain calibration table ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default units meters) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "inf",
                    "defaultValue": "inf",
                    "description": "Solution interval ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "obs",
                    "defaultValue": "obs",
                    "description": "Data axes which to combine for solve (obs, scan, spw, and/or field) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "preavg",
                    "name": "preavg",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pre-averaging interval (sec) ",
                    "type": "scan'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refant",
                    "name": "refant",
                    "value": "300.0",
                    "defaultValue": "300.0",
                    "description": "Reference antenna name(s) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minblperant",
                    "name": "minblperant",
                    "value": "",
                    "defaultValue": "",
                    "description": "Minimum baselines _per antenna_ required for solve ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minsnr",
                    "name": "minsnr",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "Reject solutions below this SNR ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "poltype",
                    "name": "poltype",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Type of instrumental polarization solution (see help) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smodel",
                    "name": "smodel",
                    "value": "D+QU",
                    "defaultValue": "D+QU",
                    "description": "Point source Stokes parameters for source model. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Append solutions to the (existing) table ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "docallib",
                    "name": "docallib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use callib or traditional cal apply parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "callib",
                    "name": "callib",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Cal Library filename ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gaintable",
                    "name": "gaintable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Gain calibration table(s) to apply ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfield",
                    "name": "gainfield",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Select a subset of calibrators from gaintable(s) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Interpolation mode (in time) to use for each gaintable ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window mappings to form for gaintable(s) Only used if callib=False default:  (apply solutions from each calibration spw to the same MS spw only) Any available calibration spw can be mechanically mapped to any MS spw. Examples: spwmap=[0,0,1,1] means apply calibration from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3. spwmap=0,0,1,1],[0,1,0,1]] (use a list of lists for multiple",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -77,
            "text": "polfromgain",
            "description": "Manual position angle offset ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.polfromgain",
                    "defaultValue": "casatasks.polfromgain",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tablein",
                    "name": "tablein",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input calibration table ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output calibration table (forces polarization correction if specified) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "paoffset",
                    "name": "paoffset",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Manual position angle offset ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -78,
            "text": "predictcomp",
            "description": "Print the zero baseline flux ? ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.predictcomp",
                    "defaultValue": "casatasks.predictcomp",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "objname",
                    "name": "objname",
                    "value": "",
                    "defaultValue": "",
                    "description": "Object name ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "standard",
                    "name": "standard",
                    "value": "Butler-JPL-Horizons 2010",
                    "defaultValue": "Butler-JPL-Horizons 2010",
                    "description": "Flux density standard ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "epoch",
                    "name": "epoch",
                    "value": "",
                    "defaultValue": "",
                    "description": "Epoch ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minfreq",
                    "name": "minfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Minimum frequency ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxfreq",
                    "name": "maxfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Maximum frequency ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nfreqs",
                    "name": "nfreqs",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Number of frequencies ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "prefix",
                    "name": "prefix",
                    "value": "",
                    "defaultValue": "",
                    "description": "Prefix for the component list directory name. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antennalist",
                    "name": "antennalist",
                    "value": "",
                    "defaultValue": "",
                    "description": "Plot for this configuration ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showplot",
                    "name": "showplot",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Plot S vs \\|u\\| to the screen? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "savefig",
                    "name": "savefig",
                    "value": "",
                    "defaultValue": "",
                    "description": "Save a plot of S vs \\|u\\| to this filename ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "symb",
                    "name": "symb",
                    "value": ".",
                    "defaultValue": ".",
                    "description": "A matplotlib plot symbol code ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "include0amp",
                    "name": "include0amp",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Force the amplitude axis to start at 0? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "include0bl",
                    "name": "include0bl",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Force the baseline axis to start at 0? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blunit",
                    "name": "blunit",
                    "value": "",
                    "defaultValue": "",
                    "description": "unit of the baseline axis ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showbl0flux",
                    "name": "showbl0flux",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Print the zero baseline flux ? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -79,
            "text": "rerefant",
            "description": "Reference antenna name(s) ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.rerefant",
                    "defaultValue": "casatasks.rerefant",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tablein",
                    "name": "tablein",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input calibration table ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output calibration table (overwrite tablein if unspecified) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refantmode",
                    "name": "refantmode",
                    "value": "flex",
                    "defaultValue": "flex",
                    "description": "Refant algorithm to use ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refant",
                    "name": "refant",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference antenna name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -80,
            "text": "rmfit",
            "description": "Maximum input position angle error in degrees to allow in solution determination. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.rmfit",
                    "defaultValue": "casatasks.rmfit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of the input image(s). Must be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rm",
                    "name": "rm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output rotation measure image name. If not specified, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rmerr",
                    "name": "rmerr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output rotation measure error image name. If not specified, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pa0",
                    "name": "pa0",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output position angle (degrees) at zero wavelength image name. If not specified, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pa0err",
                    "name": "pa0err",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output position angle (degrees) at zero wavelength error image name. If not specified, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nturns",
                    "name": "nturns",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output number of turns image name. If not specified, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chisq",
                    "name": "chisq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output reduced chi squared image name. If not specified, no image is written. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sigma",
                    "name": "sigma",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Estimate of the thermal noise.  A value less than 0 means auto estimate. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rmfg",
                    "name": "rmfg",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Foreground rotation measure in rad/m/m to subtract. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rmmax",
                    "name": "rmmax",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Maximum rotation measure in rad/m/m for which to solve. IMPORTANT TO SPECIFY. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxpaerr",
                    "name": "maxpaerr",
                    "value": "1e+30",
                    "defaultValue": "1e+30",
                    "description": "Maximum input position angle error in degrees to allow in solution determination. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -81,
            "text": "rmtables",
            "description": "Name of the tables",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.rmtables",
                    "defaultValue": "casatasks.rmtables",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tablenames",
                    "name": "tablenames",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name of the tables",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -82,
            "text": "sdatmcor",
            "description": "User-defined temperature profile ]. The value is directly passed to initialization method for ATM model. String, list of strings, and list of float values are acceptable. For list inputs, float values are interpreted as the value in Kelvin while the string values should be the numeric value with unit. For string input, the value should be comma separated list of strings consisting of numeric value and unit. Number of values should be identical to the number for layerboundaries. Example: [250, 240] ['250K', '240K']",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdatmcor",
                    "defaultValue": "casatasks.sdatmcor",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input MS. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output MS. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "allow to overwrite the output file if already exists. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select fields. Use field id(s) or name(s). If field string is a non-negative integer, it is assumed to be a field index otherwise, it is assumed to be a field name. Default: ''= all fields Example: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral windows Note that spw specifies the list of spw ids to apply correction. Spw ids to output should be specified by outputspw. Note also that channel selection is not available for this task. Default: ''=all spectral windows Example: spw='0~2,4'; spectral windows 0,1,2,4 spw='<2';   spectral windows less than 2 (i.e. 0,1) spw='0,10'; spw 0,10",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Default: '' (all) Example: scan='1~5'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline If antenna string is a non-negative integer, it is assumed to be an antenna index, otherwise, it is considered an antenna name. If specified selection doesn't contain any autocorrelation, the selection will be tweaked to include autocorrelation data. For example, 'PM02' will be interpreted as 'PM02&&&'. Default: '' (all) Example: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,9'; all baselines with antennas 5,6,9 index number",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Correlation (polarization) types or expression Default: '' (all correlations) Example: correlation='XX,YY'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of time to select from data timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' Note: if YYYY/MM/DD is missing date defaults to first day in data set Default: '' (all) Example: timerange='09:14:0~09:54:0' picks 40 min on first day timerange='25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='> 10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan Intent(s) Default: '' (all) Example: intent='TARGET_SOURCE' intent='TARGET_SOURCE1,TARGET_SOURCE2' intent='TARGET_POINTING*'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Observation ID range Default: '' (all observations) Example: observation='0~5'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "feed selection Default: '' (all feeds) Example: feed='0,1'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Complicated data selection using TaQL Complicated data selection that cannot be supported by other data selection parameters should be specified here using TaQL. See Casacore Note 199 for detailed syntax of TaQL: https://casacore.github.io/casacore-notes/199.html Default: '' (all data) Example: msselect='ABS(DATA) < 1 && ANTENNA1 == ANTENNA2 + 1' msselect='ROWNUMBER() < 100'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputspw",
                    "name": "outputspw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select spws to output, same syntax of spw.(\" = all) Note that outputspw specifies the list of spw ids to output. Spw ids to be corrected should be specified by spw. Note also that channel selection is not available for this task.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gainfactor",
                    "name": "gainfactor",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Gain factor to multiply correction term. In ALMA data reduction, intensity of calibrated spectra, antenna temperature Ta* in unit of Kelvin, is converted to Jansky (Jy) by multiplying conversion factor. This parameter is intended to apply exactly the same multiplicative factor to correction term. If no conversion is applied to spectral data, gainfactor should be 1.0, which means that the correction is in unit of Ta*. The value can be float, dict, or string. Default is 1.0. Float value is interpreted as fixed factor, which is applied to all spws. Dict should be the pair of spw id (key) and the factor to be applied (value). Key should be string rather than int. If string is given, it should be the name of caltable. For caltable, inverse square of stored value is applied. Default: 1.0 Example: 10.0 {'17': 45.0, '19': 43.5, '21': 42.0, '23': 40.0} 'k2jycal.tbl'",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dtem_dh",
                    "name": "dtem_dh",
                    "value": "",
                    "defaultValue": "",
                    "description": "temperature gradient /km], e.g. -5.6. (\" = Tool default) The value is directly passed to initialization method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in K/km. String value should be the numeric value with unit such as '-5.6K/km'. Default: '' (tool default, -5.6K/km, is used)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "h0",
                    "name": "h0",
                    "value": "",
                    "defaultValue": "",
                    "description": "scale height for water m], e.g. 2.0. (\" = Tool default) The value is directly passed to initialization method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in kilometer. String value should be the numeric value with unit compatible with length, such as '2km' or '2000m'.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "atmtype",
                    "name": "atmtype",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Atmospheric type. The value is directly passed to initialization method for ATM model. The type should be specified as integer. Available options are, 1: tropical 2: mid latitude summer (default) 3: mid latitude winter 4: subarctic summer 5: subarctic winter",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "atmdetail",
                    "name": "atmdetail",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Expose parameters for detailed configuration of ATM model if True. The following parameters are exposed to the user if atmdetail is True: altitude temperature pressure humidity pwv dp dpm layerboundaries layertemperature",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "altitude",
                    "name": "altitude",
                    "value": "",
                    "defaultValue": "",
                    "description": "Site altitude ]. The value is directly passed to initialization method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in meter. String value should be the numeric value with unit compatible with length, such as '5km' or '5000m'. Default value is taken from the input MS (ANTENNA table).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "temperature",
                    "name": "temperature",
                    "value": "",
                    "defaultValue": "",
                    "description": "Ambient temperature ]. The value is directly passed to initialization method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in Kelvin. String value should be the numeric value with unit, such as '270K'. Default value is taken from the input MS (ASDM_CALATMOSPHERE table).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pressure",
                    "name": "pressure",
                    "value": "",
                    "defaultValue": "",
                    "description": "Ambient pressure bar]. The value is directly passed to initialization method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in mbar. String value should be the numeric value with unit compatible with pressure, such as '1000mbar' or '1000hPa'. Default value is taken from the input MS (ASDM_CALATMOSPHERE table).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "humidity",
                    "name": "humidity",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Relative humidity ercent]. If the value is explicitly specified, it should range from 0 to 100. Default value (-1) indicates that the value is taken from the input MS (ASDM_CALATMOSPHERE table).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pwv",
                    "name": "pwv",
                    "value": "",
                    "defaultValue": "",
                    "description": "Zenith water vapor m]. The value is directly passed to configuration method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in millimeter. String value should be the numeric value with the unit compatible with length, such as '0.3mm' Default value is taken from the input MS (ASDM_CALWVR table).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dp",
                    "name": "dp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Initial pressure step. The value is directly passed to initialization method for ATM model. Float and string types are acceptable. Float value is interpreted as the value in mbar. String value should be the numeric value with unit compatible with pressure, such as '10mbar' or '10hPa'. Default value ('') indicates to use tool default (10mbar).",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dpm",
                    "name": "dpm",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Pressure multiplicative factor for steps. The value is directly passed to initialization method for ATM model. Default value (-1) indicates to use tool default (1.2).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "layerboundaries",
                    "name": "layerboundaries",
                    "value": "",
                    "defaultValue": "",
                    "description": "Altitude of user-defined temperature profile. The value is directly passed to initialization method for ATM model. String, list of strings, and list of float values are acceptable. For list inputs, float values are interpreted as the value in meter while the string values should be the numeric value with the unit compatible with length. For string input, the value should be comma separated list of strings consisting of numeric value and the unit compatible with length. Number of values should be identical to the number for layertemperature. Default value ('') indicates to use tool default. Example: [1000, 2000] ['1km', '2km'] '1km,2km'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "layertemperature",
                    "name": "layertemperature",
                    "value": "",
                    "defaultValue": "",
                    "description": "User-defined temperature profile ]. The value is directly passed to initialization method for ATM model. String, list of strings, and list of float values are acceptable. For list inputs, float values are interpreted as the value in Kelvin while the string values should be the numeric value with unit. For string input, the value should be comma separated list of strings consisting of numeric value and unit. Number of values should be identical to the number for layerboundaries. Example: [250, 240] ['250K', '240K']",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -83,
            "text": "sdbaseline",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdbaseline",
                    "defaultValue": "casatasks.sdbaseline",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna name or ID, e.g. PM03\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by IF IDs (spectral windows), e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by time range, e.g. 09:14:0~09:54:0\" (\"\"=all) (see examples in help) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pol",
                    "name": "pol",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by polarization IDs, e.g. XX,YY\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by observational intent, e.g. *ON_SOURCE*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reindex",
                    "name": "reindex",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Re-index indices in subtables based on data selection. Ignored when blmode='apply'. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maskmode",
                    "name": "maskmode",
                    "value": "list",
                    "defaultValue": "list",
                    "description": "mode of setting additional channel masks. list\" and \"auto\" are available now. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "thresh",
                    "name": "thresh",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "S/N threshold for linefinder ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "avg_limit",
                    "name": "avg_limit",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "channel averaging for broad lines ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minwidth",
                    "name": "minwidth",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "the minimum channel width to detect as a line ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "edge",
                    "name": "edge",
                    "value": "[int(0)",
                    "defaultValue": "[int(0)",
                    "description": "channels to drop at beginning and end of spectrum ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blmode",
                    "name": "blmode",
                    "value": "",
                    "defaultValue": "",
                    "description": "baselining mode it or \"apply\"] \"",
                    "type": "int(0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dosubtract",
                    "name": "dosubtract",
                    "value": "fit",
                    "defaultValue": "fit",
                    "description": "subtract baseline from input data rue, False] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blformat",
                    "name": "blformat",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "format(s) of file(s) in which best-fit parameters are written ext, \"csv\", \"table\" or \"\"] \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bloutput",
                    "name": "bloutput",
                    "value": "text",
                    "defaultValue": "text",
                    "description": "name(s) of file(s) in which best-fit parameters are written ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "bltable",
                    "name": "bltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of baseline table to apply ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blfunc",
                    "name": "blfunc",
                    "value": "",
                    "defaultValue": "",
                    "description": "baseline model function oly, \"chebyshev\", \"cspline\", \"sinusoid\", or \"variable\"(expert mode)] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "order",
                    "name": "order",
                    "value": "poly",
                    "defaultValue": "poly",
                    "description": "order of baseline model function ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "npiece",
                    "name": "npiece",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "number of element polynomials for cubic spline curve ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applyfft",
                    "name": "applyfft",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "automatically set wave numbers of sinusoids ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fftmethod",
                    "name": "fftmethod",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "method for automatically set wave numbers of sinusoids ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fftthresh",
                    "name": "fftthresh",
                    "value": "fft",
                    "defaultValue": "fft",
                    "description": "threshold to select wave numbers of sinusoids ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "addwn",
                    "name": "addwn",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "additional wave numbers to use ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rejwn",
                    "name": "rejwn",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "wave numbers NOT to use ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipthresh",
                    "name": "clipthresh",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "clipping threshold for iterative fitting ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipniter",
                    "name": "clipniter",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "maximum iteration number for iterative fitting ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "blparam",
                    "name": "blparam",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "text file that stores per spectrum fit parameters ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "",
                    "defaultValue": "",
                    "description": "output fitting parameters to logger ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "updateweight",
                    "name": "updateweight",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "update WEIGHT column based on sigmavalue computed over unmasked range ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sigmavalue",
                    "name": "sigmavalue",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "value used for computing weight tddev or \"rms\"] \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showprogress",
                    "name": "showprogress",
                    "value": "stddev",
                    "defaultValue": "stddev",
                    "description": "(NOT SUPPORTED YET) show progress status for large data ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minnrow",
                    "name": "minnrow",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "(NOT SUPPORTED YET) minimum number of input spectra to show progress status ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "1000",
                    "defaultValue": "1000",
                    "description": "name of output file ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "",
                    "defaultValue": "",
                    "description": "overwrite the output file if already exists ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -84,
            "text": "sdcal",
            "description": "select data by observation intent, e.g. OBSERVE_TARGET#ON_SOURCE\" (\"\"=all) \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdcal",
                    "defaultValue": "casatasks.sdcal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset (must be MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calmode",
                    "name": "calmode",
                    "value": "ps",
                    "defaultValue": "ps",
                    "description": "SD calibration mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fraction",
                    "name": "fraction",
                    "value": "10%",
                    "defaultValue": "10%",
                    "description": "fraction of the OFF data to mark ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "noff",
                    "name": "noff",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "number of the OFF data to mark ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "width of the pixel for edge detection ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "elongated",
                    "name": "elongated",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "whether observed area is elongated in one direction or not ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applytable",
                    "name": "applytable",
                    "value": "",
                    "defaultValue": "",
                    "description": "(List of) sky and/or tsys tables ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interpolation type in timereq]. Valid options for time are nearest\", \"linear\", and \"cubic\", while valid options for frequency include \"nearest\", \"linear\", \"cspline\", or any numeric string that indicates an order of polynomial interpolation. You can specify interpolation type for time and frequency separately by joining two of the above options by comma (e.g., \"linear,cspline\"). \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "{}",
                    "defaultValue": "{}",
                    "description": "A dictionary indicating spw combinations to apply Tsys calibration to target. The key should be spw for Tsys calibration and its associated value must be a list of science spws to be applied. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file (See a WARNING in help) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite the output file if already exists ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\" = all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by spw IDs (spectral windows), e.g., 3,5,7\" (\"\" = all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by observation intent, e.g. OBSERVE_TARGET#ON_SOURCE\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -85,
            "text": "sdfit",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdfit",
                    "defaultValue": "casatasks.sdfit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected_data\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna name or ID, e.g. PM03\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by IF IDs (spectral windows), e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by time range, e.g. 09:14:0~09:54:0\" (\"\"=all) (see examples in help) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pol",
                    "name": "pol",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by polarization IDs, e.g. XX,YY\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by observational intent, e.g. *ON_SOURCE*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "",
                    "defaultValue": "",
                    "description": "bin width for time averaging ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timespan",
                    "name": "timespan",
                    "value": "",
                    "defaultValue": "",
                    "description": "span the timebin across scan\", \"state\", \"field\", or a combination of them (e.g., \"scan,state\") \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "polaverage",
                    "name": "polaverage",
                    "value": "",
                    "defaultValue": "",
                    "description": "polarization averaging mode (\", stokes\" or \"geometric\"). \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitfunc",
                    "name": "fitfunc",
                    "value": "gaussian",
                    "defaultValue": "gaussian",
                    "description": "function for fitting ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitmode",
                    "name": "fitmode",
                    "value": "list",
                    "defaultValue": "list",
                    "description": "mode for setting additional channel masks. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nfit",
                    "name": "nfit",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "list of number of lines to fit in maskline region. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "thresh",
                    "name": "thresh",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "S/N threshold for linefinder ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "avg_limit",
                    "name": "avg_limit",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "channel averaging for broad lines ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minwidth",
                    "name": "minwidth",
                    "value": "4",
                    "defaultValue": "4",
                    "description": "the minimum channel width to detect as a line ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "edge",
                    "name": "edge",
                    "value": "[int(0)",
                    "defaultValue": "[int(0)",
                    "description": "channels to drop at beginning and end of spectrum ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file ",
                    "type": "int(0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "",
                    "defaultValue": "",
                    "description": "overwrite the output file if already exists ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -86,
            "text": "sdfixscan",
            "description": "overwrite the output file if already exists ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdfixscan",
                    "defaultValue": "casatasks.sdfixscan",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infiles",
                    "name": "infiles",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "list of name of input SD images (FITS or CASA image) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "fft_mask",
                    "defaultValue": "fft_mask",
                    "description": "image processing mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "numpoly",
                    "name": "numpoly",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "order of polynomial fit for Pressed-out method ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "beamsize",
                    "name": "beamsize",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "beam size for Pressed-out method ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smoothsize",
                    "name": "smoothsize",
                    "value": "2.0",
                    "defaultValue": "2.0",
                    "description": "size of smoothing beam for Pressed-out method ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "direction",
                    "name": "direction",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "scan direction (p.a.) counterclockwise from the horizontal axis in unit of degree ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maskwidth",
                    "name": "maskwidth",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "mask width for Basket-Weaving (on percentage) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tmax",
                    "name": "tmax",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "maximum threshold value for processing ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tmin",
                    "name": "tmin",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "minimum threshold value for processing ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite the output file if already exists ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -87,
            "text": "sdgaincal",
            "description": "overwrite the output file if already exists ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdgaincal",
                    "defaultValue": "casatasks.sdgaincal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset (must be MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calmode",
                    "name": "calmode",
                    "value": "doublecircle",
                    "defaultValue": "doublecircle",
                    "description": "gain calibration mode ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "radius",
                    "name": "radius",
                    "value": "",
                    "defaultValue": "",
                    "description": "radius of central region to be used for calibration ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smooth",
                    "name": "smooth",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "smooth data or not ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna name or ID, e.g. PM03\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\" = all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by spw IDs (spectral windows), e.g., 3,5,7\" (\"\" = all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by observation intent, e.g. OBSERVE_TARGET#ON_SOURCE\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "applytable",
                    "name": "applytable",
                    "value": "",
                    "defaultValue": "",
                    "description": "(List of) sky and/or tsys tables for pre-application ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interp",
                    "name": "interp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Interp type in timereq], per gaintable. default==linear,linear ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwmap",
                    "name": "spwmap",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Spectral window mappings to form for applytable(s) Only used if callib=False default:  (apply solutions from each calibration spw to the same MS spw only) Any available calibration spw can be mechanically mapped to any MS spw. Examples: spwmap=[0,0,1,1] means apply calibration from cal spw = 0 to MS spw 0,1 and cal spw 1 to MS spws 2,3. spwmap=0,0,1,1],[0,1,0,1]] (use a list of lists for multiple applytables)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output caltable ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite the output file if already exists ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -88,
            "text": "sdimaging",
            "description": "Clip minimum and maximum value from each pixel. Note the benefit of clipping is lost when the number of integrations contributing to each gridded pixel is small, or where the incidence of spurious datapoints is approximately or greater than the number of beams (in area) encompassed by expected image. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdimaging",
                    "defaultValue": "casatasks.sdimaging",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infiles",
                    "name": "infiles",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "a list of names of input SD Measurementsets (only MS is allowed for this task) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite the output file if already exists rue, False] ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by IF IDs (spectral windows), e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna names or IDs, e.g, PM03\" (\"\" = all antennas) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "OBSERVE_TARGET#ON_SOURCE",
                    "defaultValue": "OBSERVE_TARGET#ON_SOURCE",
                    "description": "select data by observational intent, e.g. *ON_SOURCE*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "channel",
                    "defaultValue": "channel",
                    "description": "spectral gridding type ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "number of channels (planes) in output image (-1=all) ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "start of output spectral dimension, e.g. 0\", \"110GHz\", \"-20km",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "width of output spectral channels ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "velocity definition ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "",
                    "defaultValue": "",
                    "description": "velocity frame of output image (\"=current frame or LSRK for multiple-MS inputs) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gridfunction",
                    "name": "gridfunction",
                    "value": "BOX",
                    "defaultValue": "BOX",
                    "description": "gridding function for imaging (see description in help) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "convsupport",
                    "name": "convsupport",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "convolution support for gridding ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "truncate",
                    "name": "truncate",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "truncation radius for gridding ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gwidth",
                    "name": "gwidth",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "HWHM for gaussian ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "jwidth",
                    "name": "jwidth",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "c-parameter for jinc function ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "x and y image size in pixels, e.g., [64,64]. Single value: same for both spatial axes ( = number of pixels to cover whole pointings in MSes) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "",
                    "defaultValue": "",
                    "description": "x and y cell size, (e.g., [8arcsec\",\"8arcsec\"]. default unit arcmin. (\"\" = 1",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "image center direction: position or field index, e.g., J2000 17:30:15.0 -25.30.00.0\". (\"\" = the center of pointing directions in MSes) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "projection",
                    "name": "projection",
                    "value": "SIN",
                    "defaultValue": "SIN",
                    "description": "map projection type ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ephemsrcname",
                    "name": "ephemsrcname",
                    "value": "",
                    "defaultValue": "",
                    "description": "ephemeris source name, e.g. MARS\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pointingcolumn",
                    "name": "pointingcolumn",
                    "value": "direction",
                    "defaultValue": "direction",
                    "description": "pointing data column to use ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "rest frequency to assign to image, e.g., 114.5GHz\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "stokes parameters or polarization types to image, e.g. I\", \"XX\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minweight",
                    "name": "minweight",
                    "value": "0.1",
                    "defaultValue": "0.1",
                    "description": "Minimum weight ratio to the median of weight used in weight correction and weight beased masking ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "brightnessunit",
                    "name": "brightnessunit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Overwrite the brightness unit in image (\\'\\' = respect the unit in MS) 'K\\' or \\'Jy/beam\\'] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipminmax",
                    "name": "clipminmax",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Clip minimum and maximum value from each pixel. Note the benefit of clipping is lost when the number of integrations contributing to each gridded pixel is small, or where the incidence of spurious datapoints is approximately or greater than the number of beams (in area) encompassed by expected image. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -89,
            "text": "sdintimaging",
            "description": "Calculate PSF This parameter controls what the first major cycle does. calcpsf=False will assume that a .psf image already exists and that the minor cycle can begin without recomputing it.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdintimaging",
                    "defaultValue": "casatasks.sdintimaging",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usedata",
                    "name": "usedata",
                    "value": "sdint",
                    "defaultValue": "sdint",
                    "description": "Output image type: 'int' - use interferometric data only; 'sd' - use single dish data only; 'sdint' - use both single dish and interferic data",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdimage",
                    "name": "sdimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input single dish image This single dish Image cube must contain images per frequency channel (blanked for empty or flagged channels). If the associated sdpsf parameter is set to an empty string to signal an automatic calculation of the SD PSF cube,  this SD image cube must contain per-plane restoringbeams that represent the effect SDbeam per frequency.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdpsf",
                    "name": "sdpsf",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input single dish PSF image. This single dish PSF cube must contain the effective SD beam in the center of the image, for each frequency channel, normalized to peak 1.  The coordinate system should ideally be the same as the SD image cube and contain per-plane restoringbeams that represent the effect SD beam per frequency. If the sdpsf is set to a blank string (sdpsf=\") an approximate PSF cube will be automatically calculated internally by using per-plane restoring-beam information from the regridded sdimage to evaluate 2D Gaussians. In the future, we will provide an option to auto-generate Airy disk beams derived from the specified dish diameter.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdgain",
                    "name": "sdgain",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "A factor or gain to adjust single dish flux scale (to use in feather stage) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dishdia",
                    "name": "dishdia",
                    "value": "100.0",
                    "defaultValue": "100.0",
                    "description": "(Optional) effective dish diameter (if sdpsf is given as a dish diameter this will be ignored) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of input visibility file(s) default: none; example: vis='ngc5921.ms' vis=gc5921a.ms','ngc5921b.ms']; multiple MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Enable data selection parameters. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "to image or mosaic.  Use field id(s) or name(s). o listobs' to obtain the list id's or names] default: ''= all fields If field string is a non-negative integer, it is assumed to be a field index otherwise, it is assumed to be a field name field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C For multiple MS input, a list of field strings can be used: field = ['0~2','0~4']; field ids 0-2 for the first MS and 0-4 for the second field = '0~2'; field ids 0-2 for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "l window/channels NOTE: channels de-selected here will contain all zeros if selected by the parameter mode subparameters. default: ''=all spectral windows and channels spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='0:5~61'; spw 0, channels 5 to 61 spw='<2';   spectral windows less than 2 (i.e. 0,1) spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. For multiple MS input, a list of spw strings can be used: spw=['0','0~3']; spw ids 0 for the first MS and 0-3 for the second spw='0~3' spw ids 0-3 for all input MS spw='3:10~20;50~60' for multiple channel ranges within spw id 3 spw='3:10~20;50~60,4:0~30' for different channel ranges for spw ids 3 and 4 spw='0:0~10,1:20~30,2:1;2;3'; spw 0, channels 0-10, spw 1, channels 20-30, and spw 2, channels, 1,2 and 3 spw='1~4;6:15~48' for channels 15 through 48 for spw ids 1,2,3,4 and 6",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of time to select from data default: '' (all); examples, timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' Note: if YYYY/MM/DD is missing date defaults to first day in data set timerange='09:14:0~09:54:0' picks 40 min on first day timerange='25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='> 10:24:00' data after this time For multiple MS input, a list of timerange strings can be used: timerange=['09:14:0~09:54:0','> 10:24:00'] timerange='09:14:0~09:54:0''; apply the same timerange for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default unit is meters) default: '' (all); example: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='> 4klambda';uvranges greater than 4 kilo lambda For multiple MS input, a list of uvrange strings can be used: uvrange=['0~1000klambda','100~1000klamda'] uvrange='0~1000klambda'; apply 0-1000 kilo-lambda for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline default: '' (all) If antenna string is a non-negative integer, it is assumed to be an antenna index, otherwise, it is considered an antenna name. antenna='5\\&6'; baseline between antenna index 5 and index 6. antenna='VA05\\&VA06'; baseline between VLA antenna 5 and 6. antenna='5\\&6;7\\&8'; baselines 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,9'; all baselines with antennas 5,6,9 index number For multiple MS input, a list of antenna strings can be used: antenna=['5','5\\&6']; antenna='5'; antenna index 5 for all input MSes antenna='!DV14'; use all antennas except DV14",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range default: '' (all) example: scan='1~5' For multiple MS input, a list of scan strings can be used: scan=['0~100','10~200'] scan='0~100; scan ids 0-100 for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Observation ID range default: '' (all) example: observation='1~5'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan Intent(s) default: '' (all) example: intent='TARGET_SOURCE' example: intent='TARGET_SOURCE1,TARGET_SOURCE2' example: intent='TARGET_POINTING\\*'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "corrected",
                    "defaultValue": "corrected",
                    "description": "Data column to image (data or observed, corrected) default:'corrected' ( If 'corrected' does not exist, it will use 'data' instead )",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pre-name of output images example : imagename='try' Output images will be (a subset of) : try.psf              - Point spread function try.residual      - Residual image try.image         - Restored image try.model         - Model image (contains only flux components) try.sumwt        - Single pixel image containing sum-of-weights. (for natural weighting, sensitivity=1/sqrt(sumwt)) try.pb              - Primary beam model (values depend on the gridder used) Widefield projection algorithms (gridder=mosaic,awproject) will compute the following images too. try.weight        - FT of gridded weights or the un-normalized sum of PB-square (for all pointings) Here, PB = sqrt(weight) normalized to a maximum of 1.0 For multi-term wideband imaging, all relevant images above will have additional .tt0,.tt1, etc suffixes to indicate Taylor terms, plus the following extra output images. try.alpha            - spectral index try.alpha.error   - estimate of error on spectral index try.beta              - spectral curvature (if nterms \\> 2) Tip : Include a directory name in 'imagename' for all output images to be sent there instead of the current working directory : imagename='mydir/try' Tip : Restarting an imaging run without changing 'imagename' implies continuation from the existing model image on disk. - If 'startmodel' was initially specified it needs to be set to \" for the restart run (or tclean will exit with an error message). - By default, the residual image and psf will be recomputed but if no changes were made to relevant parameters between the runs, set calcres=False, calcpsf=False to resume directly from the minor cycle without the (unnecessary) first major cycle. To automatically change 'imagename' with a numerical increment, set restart=False (see tclean docs for 'restart'). Note : All imaging runs will by default produce restored images. For a niter=0 run, this will be redundant and can optionally be turned off via the 'restoration=T/F' parameter.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Number of pixels example: imsize = [350,250] imsize = 500 is equivalent to [500,500] To take proper advantage of internal optimized FFT routines, the number of pixels must be even and factorizable by 2,3,5 only. To find the nearest optimal imsize to that desired by the user, please use the following tool method: from casatools import synthesisutils su = synthesisutils() su.getOptimumSize(345) Output :  360",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Cell size example: cell=['0.5arcsec,'0.5arcsec'] or cell=['1arcmin', '1arcmin'] cell = '1arcsec' is equivalent to ['1arcsec','1arcsec']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Phase center of the image (string or field id); if the phasecenter is the name known major solar system object ('MERCURY', 'VENUS', 'MARS', 'JUPITER', 'SATURN', 'URANUS', 'NEPTUNE', 'PLUTO', 'SUN', 'MOON') or is an ephemerides table then that source is tracked and the background sources get smeared. There is a special case, when phasecenter='TRACKFIELD', which will use the ephemerides or polynomial phasecenter in the FIELD table of the MS's as the source center to track. example: phasecenter=6 phasecenter='J2000 19h30m00 -40d00m00' phasecenter='J2000 292.5deg  -40.0deg' phasecenter='J2000 5.105rad  -0.698rad' phasecenter='ICRS 13:05:27.2780 -049.28.04.458' phasecenter='myComet_ephem.tab' phasecenter='MOON' phasecenter='TRACKFIELD'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "I",
                    "defaultValue": "I",
                    "description": "Stokes Planes to make default='I'; example: stokes='IQUV'; Options: 'I','Q','U','V','IV','QU','IQ','UV','IQUV','RR','LL','XX','YY','RRLL','XXYY','pseudoI' Note : Due to current internal code constraints, if any correlation pair is flagged, by default, no data for that row in the MS will be used. So, in an MS with XX,YY, if only YY is flagged, neither a Stokes I image nor an XX image can be made from those data points. In such a situation, please split out only the unflagged correlation into a separate MS. Note : The 'pseudoI' option is a partial solution, allowing Stokes I imaging when either of the parallel-hand correlations are unflagged. The remaining constraints shall be removed (where logical) in a future release.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "projection",
                    "name": "projection",
                    "value": "SIN",
                    "defaultValue": "SIN",
                    "description": "Coordinate projection Examples : SIN,   NCP A list of supported (but untested) projections can be found here : http://casa.nrao.edu/active/docs/doxygen/html/classcasa_1_1Projection.html#a3d5f9ec787e4eabdce57ab5edaf7c0cd",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "startmodel",
                    "name": "startmodel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of starting model image The contents of the supplied starting model image will be copied to the imagename.model before the run begins. example : startmodel = 'singledish.im' For deconvolver='mtmfs', one image per Taylor term must be provided. example : startmodel = ry.model.tt0', 'try.model.tt1'] startmodel = ry.model.tt0']  will use a starting model only for the zeroth order term. startmodel = ry.model.tt1']  will use a starting model only for the first order term. This starting model can be of a different image shape and size from what is currently being imaged. If so, an image regrid is first triggered to resample the input image onto the target coordinate system. A common usage is to set this parameter equal to a single dish image Negative components in the model image will be included as is. ote : If an error occurs during image resampling/regridding, please try using task imregrid to resample the starting model image onto a CASA image with the target shape and coordinate system before supplying it via startmodel ]",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "specmode",
                    "name": "specmode",
                    "value": "mfs",
                    "defaultValue": "mfs",
                    "description": "Spectral definition mode (mfs,cube,cubedata, cubesource) mode='mfs' : Continuum imaging with only one output image channel. (mode='cont' can also be used here) mode='cube' : Spectral line imaging with one or more channels Parameters start, width,and nchan define the spectral coordinate system and can be specified either in terms of channel numbers, frequency or velocity in whatever spectral frame is specified in 'outframe'. All internal and output images are made with outframe as the base spectral frame. However imaging code internally uses the fixed spectral frame, LSRK for automatic internal software Doppler tracking so that a spectral line observed over an extended time range will line up appropriately. Therefore the output images have additional spectral frame conversion layer in LSRK on the top the base frame. (Note : Even if the input parameters are specified in a frame other than LSRK, the viewer still displays spectral axis in LSRK by default because of the conversion frame layer mentioned above. The viewer can be used to relabel the spectral axis in any desired frame - via the spectral reference option under axis label properties in the data display options window.) mode='cubedata' : Spectral line imaging with one or more channels There is no internal software Doppler tracking so a spectral line observed over an extended time range may be smeared out in frequency. There is strictly no valid spectral frame with which to label the output images, but they will list the frame defined in the MS. mode='cubesource': Spectral line imaging while tracking moving source (near field or solar system objects). The velocity of the source is accounted and the frequency reported is in the source frame. As there is not SOURCE frame defined, the frame reported will be REST (as it may not be in the rest frame emission region may be moving w.r.t the systemic velocity frame)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reffreq",
                    "name": "reffreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference frequency of the output image coordinate system Example :  reffreq='1.5GHz'    as a string with units. By default, it is calculated as the middle of the selected frequency range. For deconvolver='mtmfs' the Taylor expansion is also done about this specified reference frequency.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Number of channels in the output image For default (=-1), the number of channels will be automatically determined based on data selected by 'spw' with 'start' and 'width'. It is often easiest to leave nchan at the default value. example: nchan=100",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "",
                    "defaultValue": "",
                    "description": "First channel (e.g. start=3,start=\\'1.1GHz\\',start=\\'15343km/s\\') of output cube images specified by data channel number (integer), velocity (string with a unit),  or frequency (string with a unit). Default:''; The first channel is automatically determined based on the 'spw' channel selection and 'width'. When the channel number is used along with the channel selection in 'spw' (e.g. spw='0:6~100'), 'start' channel number is RELATIVE (zero-based) to the selected channels in 'spw'. So for the above example, start=1 means that the first image channel is the second selected data channel, which is channel 7. For specmode='cube', when velocity or frequency is used it is interpreted with the frame defined in outframe. he parameters of the desired output cube can be estimated by using the 'transform' functionality of 'plotms'] examples: start='5.0km/s'; 1st channel, 5.0km/s in outframe start='22.3GHz'; 1st channel, 22.3GHz in outframe",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channel width (e.g. width=2,width=\\'0.1MHz\\',width=\\'10km/s\\') of output cube images specified by data channel number (integer), velocity (string with a unit), or or frequency (string with a unit). Default:''; data channel width The sign of width defines the direction of the channels to be incremented. For width specified in velocity or frequency with '-' in front  gives image channels in decreasing velocity or frequency, respectively. For specmode='cube', when velocity or frequency is used it is interpreted with the reference frame defined in outframe. examples: width='2.0km/s'; results in channels with increasing velocity width='-2.0km/s';  results in channels with decreasing velocity width='40kHz'; results in channels with increasing frequency width=-2; results in channels averaged of 2 data channels incremented from high to low channel numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "LSRK",
                    "defaultValue": "LSRK",
                    "description": "Spectral reference frame in which to interpret \\'start\\' and \\'width\\' Options: '','LSRK','LSRD','BARY','GEO','TOPO','GALACTO','LGROUP','CMB' example: outframe='bary' for Barycentric frame REST -- Rest frequency LSRD -- Local Standard of Rest (J2000) -- as the dynamical definition (IAU, [9,12,7] km/s in galactic coordinates) LSRK -- LSR as a kinematical (radio) definition -- 20.0 km/s in direction ra,dec = [270,+30] deg (B1900.0) BARY -- Barycentric (J2000) GEO --- Geocentric TOPO -- Topocentric GALACTO -- Galacto centric (with rotation of 220 km/s in direction l,b = [90,0] deg. LGROUP -- Local group velocity -- 308km/s towards l,b = [105,-7] deg (F. Ghigo) CMB -- CMB velocity -- 369.5km/s towards l,b = [264.4, 48.4] deg (F. Ghigo) DEFAULT = LSRK",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "Velocity type (radio, z, ratio, beta, gamma, optical) For start and/or width specified in velocity, specifies the velocity definition Options: 'radio','optical','z','beta','gamma','optical' NOTE: the viewer always defaults to displaying the 'radio' frame, but that can be changed in the position tracking pull down. The different types (with F = f/f0, the frequency ratio), are: Z = (-1 + 1/F) RATIO = (F) \\* RADIO = (1 - F) OPTICAL == Z BETA = ((1 - F2)/(1 + F2)) GAMMA = ((1 + F2)/2F) \\* RELATIVISTIC == BETA (== v/c) DEFAULT == RADIO Note that the ones with an '\\*' have no real interpretation (although the calculation will proceed) if given as a velocity.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of rest frequencies or a rest frequency in a string. Specify rest frequency to use for output image. Currently it uses the first rest frequency in the list for translation of velocities. The list will be stored in the output images. Default: ; look for the rest frequency stored in the MS, if not available, use center frequency of the selected channels examples: restfreq=['1.42GHz'] restfreq='1.42GHz'",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Spectral interpolation (nearest,linear,cubic) Interpolation rules to use when binning data channels onto image channels and evaluating visibility values at the centers of image channels. Note : 'linear' and 'cubic' interpolation requires data points on both sides of each image frequency. Errors  are therefore possible at edge  channels, or near flagged data channels. When image channel width is much larger than the data channel width there is nothing much to be gained using linear or cubic thus not worth the extra computation involved.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "perchanweightdensity",
                    "name": "perchanweightdensity",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "When calculating weight density for Briggs style weighting in a cube, this parameter determines whether to calculate the weight density for each channel independently (the default, True) or a common weight density for all of the selected data. This parameter has no meaning for continuum (specmode='mfs') imaging but for cube imaging perchanweightdensity=True is a recommended option that provides more uniform sensitivity per channel for cubes, but with generally larger psfs than the perchanweightdensity=False (prior behavior) option. When using Briggs style weight with perchanweightdensity=True, the imaging weight density calculations use only the weights of data that contribute specifically to that channel. On the other hand, when perchanweightdensity=False, the imaging weight density calculations sum all of the weights from all of the data channels selected whose (u,v) falls in a given uv cell on the weight density grid. Since the aggregated weights, in any given uv cell, will change depending on the number of channels included when imaging, the psf calculated for a given frequency channel will also necessarily change, resulting in variability in the psf for a given frequency channel when perchanweightdensity=False. In general, perchanweightdensity=False results in smaller psfs for the same value of robustness compared to perchanweightdensity=True, but the rms noise as a function of channel varies and increases toward the edge channels; perchanweightdensity=True provides more uniform sensitivity per channel for cubes. This may make it harder to find estimates of continuum when perchanweightdensity=False. If you intend to image a large cube in many smaller subcubes and subsequently concatenate, it is advisable to use perchanweightdensity=True to avoid surprisingly varying sensitivity and psfs across the concatenated cube.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gridder",
                    "name": "gridder",
                    "value": "standard",
                    "defaultValue": "standard",
                    "description": "Gridding options (standard, wproject, widefield, mosaic, awproject) The following options choose different gridding convolution functions for the process of convolutional resampling of the measured visibilities onto a regular uv-grid prior to an inverse FFT. Model prediction (degridding) also uses these same functions. Several wide-field effects can be accounted for via careful choices of convolution functions. Gridding (degridding) runtime will rise in proportion to the support size of these convolution functions (in uv-pixels). standard : Prolate Spheroid with 3x3 uv pixel support size his mode can also be invoked using 'ft' or 'gridft' ] wproject : W-Projection algorithm to correct for the widefield non-coplanar baseline effect. ornwell et.al 2008] wprojplanes is the number of distinct w-values at which to compute and use different gridding convolution functions (see help for wprojplanes). Convolution function support size can range from 5x5 to few 100 x few 100. his mode can also be invoked using 'wprojectft' ] widefield : Facetted imaging with or without W-Projection per facet. A set of facets x facets subregions of the specified image are gridded separately using their respective phase centers (to minimize max W). Deconvolution is done on the joint full size image, using a PSF from the first subregion. wprojplanes=1 : standard prolate spheroid gridder per facet. wprojplanes > 1 : W-Projection gridder per facet. nfacets=1, wprojplanes > 1 : Pure W-Projection and no facetting nfacets=1, wprojplanes=1 : Same as standard,ft,gridft A combination of facetting and W-Projection is relevant only for very large fields of view. mosaic : A-Projection with azimuthally symmetric beams without sidelobes, beam rotation or squint correction. Gridding convolution functions per visibility are computed from FTs of PB models per antenna. This gridder can be run on single fields as well as mosaics. VLA : PB polynomial fit model (Napier and Rots, 1982) EVLA : PB polynomial fit model (Perley, 2015) ALMA : Airy disks for a 10.7m dish (for 12m dishes) and 6.25m dish (for 7m dishes) each with 0.75m blockages (Hunter/Brogan 2011). Joint mosaic imaging supports heterogeneous arrays for ALMA. Typical gridding convolution function support sizes are between 7 and 50 depending on the desired accuracy (given by the uv cell size or image field of view). his mode can also be invoked using 'mosaicft' or 'ftmosaic' ] awproject : A-Projection with azimuthally asymmetric beams and including beam rotation, squint correction, conjugate frequency beams and W-projection. hatnagar et.al, 2008] Gridding convolution functions are computed from aperture illumination models per antenna and optionally combined with W-Projection kernels and a prolate spheroid. This gridder can be run on single fields as well as mosaics. The awproject gridder is current not supported in the sdintimaging task. This feature will be added in the near future. VLA : Uses ray traced model (VLA and EVLA) including feed leg and subreflector shadows, off-axis feed location (for beam squint and other polarization effects), and a Gaussian fit for the feed beams (Ref: Brisken 2009) ALMA : Similar ray-traced model as above (but the correctness of its polarization properties remains un-verified). Typical gridding convolution function support sizes are between 7 and 50 depending on the desired accuracy (given by the uv cell size or image field of view). When combined with W-Projection they can be significantly larger. his mode can also be invoked using 'awprojectft' ] imagemosaic : (untested implementation) Grid and iFT each pointing separately and combine the images as a linear mosaic (weighted by a PB model) in the image domain before a joint minor cycle. VLA/ALMA PB models are same as for gridder='mosaicft' ------ Notes on PB models : (1) Several different sources of PB models are used in the modes listed above. This is partly for reasons of algorithmic flexibility and partly due to the current  lack of a common beam model repository or consensus on what beam models are most appropriate. (2) For ALMA and gridder='mosaic', ray-traced (TICRA) beams are also available via the vpmanager tool. For example, call the following before the tclean run. vp.setpbimage(telescope=ALMA\", compleximage='",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "facets",
                    "name": "facets",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of facets on a side A set of (facets x facets) subregions of the specified image are gridded separately using their respective phase centers (to minimize max W). Deconvolution is done on the joint full size image, using a PSF from the first subregion/facet.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "psfphasecenter",
                    "name": "psfphasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "For mosaic use psf centered on this optional direction. You may need to use this if for example the mosaic does not have any pointing in the center of the image. Another reason; as the psf is approximate for a mosaic, this may help to deconvolve a non central bright source well and quickly. example: psfphasecenter=6 #center psf on field 6 psfphasecenter='J2000 19h30m00 -40d00m00' psfphasecenter='J2000 292.5deg -40.0deg' psfphasecenter='J2000 5.105rad -0.698rad' psfphasecenter='ICRS 13:05:27.2780 -049.28.04.458'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wprojplanes",
                    "name": "wprojplanes",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of distinct w-values at which to compute and use different gridding convolution functions for W-Projection An appropriate value of wprojplanes depends on the presence/absence of a bright source far from the phase center, the desired dynamic range of an image in the presence of a bright far out source, the maximum w-value in the measurements, and the desired trade off between accuracy and computing cost. As a (rough) guide, VLA L-Band D-config may require a value of 128 for a source 30arcmin away from the phase center. A-config may require 1024 or more. To converge to an appropriate value, try starting with 128 and then increasing it if artifacts persist. W-term artifacts (for the VLA) typically look like arc-shaped smears in a synthesis image or a shift in source position between images made at different times. These artifacts are more pronounced the further the source is from the phase center. There is no harm in simply always choosing a large value (say, 1024) but there will be a significant performance cost to doing so, especially for gridder='awproject' where it is combined with A-Projection. wprojplanes=-1 is an option for gridder='widefield' or 'wproject' in which the number of planes is automatically computed.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vptable",
                    "name": "vptable",
                    "value": "",
                    "defaultValue": "",
                    "description": "vpmanager vptable=\" : Choose default beams for different telescopes ALMA : Airy disks EVLA : old VLA models. Other primary beam models can be chosen via the vpmanager tool. Step 1 :  Set up the vpmanager tool and save its state in a table vp.setpbpoly(telescope='EVLA', coeff=[1.0, -1.529e-3, 8.69e-7, -1.88e-10]) vp.saveastable('myvp.tab') Step 2 : Supply the name of that table in tclean. tclean(....., vptable='myvp.tab',....) Please see the documentation for the vpmanager for more details on how to choose different beam models. Work is in progress to update the defaults for EVLA and ALMA. Note : AWProjection currently does not use this mechanism to choose beam models. It instead uses ray-traced beams computed from parameterized aperture illumination functions, which are not available via the vpmanager. So, gridder='awproject' does not allow the user to set this parameter.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mosweight",
                    "name": "mosweight",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "When doing Brigg's style weighting (including uniform) to perform the weight density calculation for each field indepedently if True. If False the weight density is calculated from the average uv distribution of all the fields. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "aterm",
                    "name": "aterm",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Use aperture illumination functions during gridding This parameter turns on the A-term of the AW-Projection gridder. Gridding convolution functions are constructed from aperture illumination function models of each antenna.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "psterm",
                    "name": "psterm",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Include the Prolate Spheroidal (PS) funtion as the anti-aliasing operator in the gridding convolution functions used for gridding. Setting this parameter to true is necessary when aterm is set to false.  It can be set to false when aterm is set to true, though with this setting effects of aliasing may be there in the image, particularly near the edges. When set to true, the .pb images will contain the fourier transform of the of the PS funtion. The table below enumarates the functional effects of the psterm, aterm and wprojplanes settings. PB referes to the Primary Beam and FT() refers to the Fourier transform operation. Operation       aterm   psterm  wprojplanes  Contents of the .pb image ---------------------------------------------------------------------- AW-Projection    True    True      >1                FT(PS) x PB False                       PB A-Projection     True    True       1                FT(PS) x PB False                       PB W-Projection     False   True      >1                FT(PS) Standard         False   True       1                FT(PS)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wbawp",
                    "name": "wbawp",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Use frequency dependent A-terms Scale aperture illumination functions appropriately with frequency when gridding and combining data from multiple channels.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cfcache",
                    "name": "cfcache",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convolution function cache directory name Name of a directory in which to store gridding convolution functions. This cache is filled at the beginning of an imaging run. This step can be time consuming but the cache can be reused across multiple imaging runs that use the same image parameters (cell size, image size , spectral data selections, wprojplanes, wbawp, psterm, aterm).  The effect of the wbawp, psterm and aterm settings is frozen-in in the cfcache. Using an existing cfcache made with a different setting of these parameters will not reflect the current settings. In a parallel execution, the construction of the cfcache is also parallelized and the time to compute scales close to linearly with the number of compute cores used.   With the re-computation of Convolution Functions (CF) due to PA rotation turned-off (the computepastep parameter), the total number of in the cfcache can be computed as o. of wprojplanes x No. of selected spectral windows x 4] By default, cfcache = imagename + '.cf'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usepointing",
                    "name": "usepointing",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "The usepointing flag informs the gridder that it should utilize the pointing table to use the correct direction in which the antenna is pointing with respect to the pointing phasecenter.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "computepastep",
                    "name": "computepastep",
                    "value": "360.0",
                    "defaultValue": "360.0",
                    "description": "Parallactic angle interval after the AIFs are recomputed (deg) This parameter controls the accuracy of the aperture illumination function used with AProjection for alt-az mount dishes where the AIF rotates on the sky as the synthesis image is built up.  Once the PA in the data changes by the given interval, AIFs are re-computed at the new PA. A value of 360.0 deg (the default) implies no re-computation due to PA rotation. AIFs are computed for the PA value of the first valid data received and used for all of the data.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rotatepastep",
                    "name": "rotatepastep",
                    "value": "360.0",
                    "defaultValue": "360.0",
                    "description": "Parallactic angle interval after which the nearest AIF is rotated (deg) Instead of recomputing the AIF for every timestep's parallactic angle, the nearest existing AIF is used and rotated after the PA changed by rotatepastep value. A value of 360.0 deg (the default) disables rotation of the AIF. For example, computepastep=360.0 and rotatepastep=5.0 will compute the AIFs at only the starting parallactic angle and all other timesteps will use a rotated version of that AIF at the nearest 5.0 degree point.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pointingoffsetsigdev",
                    "name": "pointingoffsetsigdev",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Corrections for heterogenous and time-dependent pointing offsets via AWProjection are controlled by this parameter. It is a vector of 2 ints or doubles each of which is interpreted in units of arcsec. Based on the first threshold, a clustering algorithm is applied to entries from the POINTING subtable of the MS to determine how distinct antenna groups for which the pointing offset must be computed separately.  The second number controls how much a pointing change across time can be ignored and after which an antenna rebinning is required. Note : The default value of this parameter is , due a programmatic constraint. If run with this value, it will internally pick [600,600] and exercise the option of using large tolerances (10arcmin) on both axes. Please choose a setting explicitly for runs that need to use this parameter. Note : This option is available only for gridder='awproject' and usepointing=True and and has been validated primarily with VLASS on-the-fly mosaic data where POINTING subtables have been modified after the data are recorded. Examples of parameter usage : [100.0,100.0] : Pointing offsets of 100 arcsec or less are considered small enough to be ignored.  Using large values for both indicates a homogeneous array. [10.0, 100.0] : Based on entries in the POINTING subtable, antennas are grouped into clusters based on a 10arcsec bin size. All antennas in a bin are given a pointing offset calculated as the average of the offsets of all antennas in the bin. On the time axis, offset changes upto 100 arcsec will be ignored. [10.0,10.0] : Calculate separate pointing offsets for each antenna group (with a 10 arcsec bin size). As a function of time, recalculate the antenna binning if the POINTING table entries change by more than 10 arcsec w.r.to the previously computed binning. [1.0, 1.0] :  Tight tolerances will imply a fully heterogenous situation where each antenna gets its own pointing offset. Also, time-dependent offset changes greater than 1 arcsec will trigger recomputes of the phase gradients. This is the most general situation and is also the most expensive option as it constructs and uses separate phase gradients for all baselines and timesteps. For VLASS 1.1 data with two kinds of pointing offsets, the recommended setting is [ 30.0, 30.0 ]. For VLASS 1.2 data with only the time-dependent pointing offsets, the recommended setting is [ 300.0, 30.0 ] to turn off the antenna grouping but to retain the time dependent corrections required from one timestep to the next.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pblimit",
                    "name": "pblimit",
                    "value": "0.2",
                    "defaultValue": "0.2",
                    "description": "PB gain level at which to cut off normalizations Divisions by .pb during normalizations have a cut off at a .pb gain level given by pblimit. Outside this limit, image values are set to zero. Additionally, by default, an internal T/F mask is applied to the .pb, .image and .residual images to mask out (T) all invalid pixels outside the pblimit area. Note : This internal T/F mask cannot be used as a deconvolution mask. To do so, please follow the steps listed above in the Notes for the 'gridder' parameter. Note : To prevent the internal T/F mask from appearing in anything other than the .pb and .image.pbcor images, 'pblimit' can be set to a negative number. The absolute value will still be used as a valid 'pblimit'. A tclean restart using existing output images on disk that already have this T/F mask in the .residual and .image but only pblimit set to a negative value, will remove this mask after the next major cycle.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "deconvolver",
                    "name": "deconvolver",
                    "value": "hogbom",
                    "defaultValue": "hogbom",
                    "description": "Name of minor cycle algorithm (hogbom,clark,multiscale,mtmfs,mem,clarkstokes,asp) Each of the following algorithms operate on residual images and psfs from the gridder and produce output model and restored images. Minor cycles stop and a major cycle is triggered when cyclethreshold or cycleniter are reached. For all methods, components are picked from the entire extent of the image or (if specified) within a mask. hogbom : An adapted version of Hogbom Clean ogbom, 1974] - Find the location of the peak residual - Add this delta function component to the model image - Subtract a scaled and shifted PSF of the same size as the image from regions of the residual image where the two overlap. - Repeat clark : An adapted version of Clark Clean lark, 1980] - Find the location of max(I^2+Q^2+U^2+V^2) - Add delta functions to each stokes plane of the model image - Subtract a scaled and shifted PSF within a small patch size from regions of the residual image where the two overlap. - After several iterations trigger a Clark major cycle to subtract components from the visibility domain, but without de-gridding. - Repeat ( Note : 'clark' maps to imagermode='' in the old clean task. 'clark_exp' is another implementation that maps to imagermode='mosaic' or 'csclean' in the old clean task but the behavior is not identical. For now, please use deconvolver='hogbom' if you encounter problems. ) clarkstokes : Clark Clean operating separately per Stokes plane (Note : 'clarkstokes_exp' is an alternate version. See above.) multiscale : MultiScale Clean ornwell, 2008] - Smooth the residual image to multiple scale sizes - Find the location and scale at which the peak occurs - Add this multiscale component to the model image - Subtract a scaled,smoothed,shifted PSF (within a small patch size per scale) from all residual images - Repeat from step 2 mtmfs : Multi-term (Multi Scale) Multi-Frequency Synthesis au and Cornwell, 2011] - Smooth each Taylor residual image to multiple scale sizes - Solve a NTxNT system of equations per scale size to compute Taylor coefficients for components at all locations - Compute gradient chi-square and pick the Taylor coefficients and scale size at the location with maximum reduction in chi-square - Add multi-scale components to each Taylor-coefficient model image - Subtract scaled,smoothed,shifted PSF (within a small patch size per scale) from all smoothed Taylor residual images - Repeat from step 2 mem : Maximum Entropy Method ornwell and Evans, 1985] - Iteratively solve for values at all individual pixels via the MEM method. It minimizes an objective function of chi-square plus entropy (here, a measure of difference between the current model and a flat prior model). (Note : This MEM implementation is not very robust. Improvements will be made in the future.) asp : ASP Clean hatnagar and Cornwell, 2004]",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scales",
                    "name": "scales",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of scale sizes (in pixels) for multi-scale and mtmfs algorithms. -->  scales=[0,6,20] This set of scale sizes should represent the sizes (diameters in units of number of pixels) of dominant features in the image being reconstructed. The smallest scale size is recommended to be 0 (point source), the second the size of the synthesized beam and the third 3-5 times the synthesized beam, etc. For example, if the synthesized beam is 10 FWHM and cell=2\",try scales = [0,5,15]. For numerical stability, the largest scale must be smaller than the image (or mask) size and smaller than or comparable to the scale corresponding to the lowest measured spatial frequency (as a scale size much larger than what the instrument is sensitive to is unconstrained by the data making it harder to recovery from errors during the minor cycle).\"",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nterms",
                    "name": "nterms",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Number of Taylor coefficients in the spectral model - nterms=1 : Assume flat spectrum source - nterms=2 : Spectrum is a straight line with a slope - nterms=N : A polynomial of order N-1 From a Taylor expansion of the expression of a power law, the spectral index is derived as alpha = taylorcoeff_1 / taylorcoeff_0 Spectral curvature is similarly derived when possible. The optimal number of Taylor terms depends on the available signal to noise ratio, bandwidth ratio, and spectral shape of the source as seen by the telescope (sky spectrum x PB spectrum). nterms=2 is a good starting point for wideband EVLA imaging and the lower frequency bands of ALMA (when fractional bandwidth is greater than 10%) and if there is at least one bright source for which a dynamic range of greater than few 100 is desired. Spectral artifacts for the VLA often look like spokes radiating out from a bright source (i.e. in the image made with standard mfs imaging). If increasing the number of terms does not eliminate these artifacts, check the data for inadequate bandpass calibration. If the source is away from the pointing center, consider including wide-field corrections too. (Note : In addition to output Taylor coefficient images .tt0,.tt1,etc images of spectral index (.alpha), an estimate of error on spectral index (.alpha.error) and spectral curvature (.beta, if nterms is greater than 2) are produced. - These alpha, alpha.error and beta images contain internal T/F masks based on a threshold computed as peakresidual/10. Additional masking based on .alpha/.alpha.error may be desirable. - .alpha.error is a purely empirical estimate derived from the propagation of error during the division of two noisy numbers (alpha = xx.tt1/xx.tt0) where the 'error' on tt1 and tt0 are simply the values picked from the corresponding residual images. The absolute value of the error is not always accurate and it is best to interpret the errors across the image only in a relative sense.)",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smallscalebias",
                    "name": "smallscalebias",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "A numerical control to bias the scales when using multi-scale or mtmfs algorithms. The peak from each scale's smoothed residual is multiplied by ( 1 - smallscalebias \\* scale/maxscale ) to increase or decrease the amplitude relative to other scales, before the scale with the largest peak is chosen. Smallscalebias can be varied between -1.0 and 1.0. A score of 0.0 gives all scales equal weight (default). A score larger than 0.0 will bias the solution towards smaller scales. A score smaller than 0.0 will bias the solution towards larger scales. The effect of smallscalebias is more pronounced when using multi-scale relative to mtmfs.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restoration",
                    "name": "restoration",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "e. Construct a restored image : imagename.image by convolving the model image with a clean beam and adding the residual image to the result. If a restoringbeam is specified, the residual image is also smoothed to that target resolution before adding it in. If a .model does not exist, it will make an empty one and create the restored image from the residuals ( with additional smoothing if needed ). With algorithm='mtmfs', this will construct Taylor coefficient maps from the residuals and compute .alpha and .alpha.error.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restoringbeam",
                    "name": "restoringbeam",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "ize to use. - restoringbeam='' or A Gaussian fitted to the PSF main lobe (separately per image plane). - restoringbeam='10.0arcsec' Use a circular Gaussian of this width for all planes - restoringbeam=['8.0arcsec','10.0arcsec','45deg'] Use this elliptical Gaussian for all planes - restoringbeam='common' Automatically estimate a common beam shape/size appropriate for all planes. Note : For any restoring beam different from the native resolution the model image is convolved with the beam and added to residuals that have been convolved to the same target resolution.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbcor",
                    "name": "pbcor",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "the output restored image A new image with extension .image.pbcor will be created from the evaluation of   .image / .pb  for all pixels above the specified pblimit. Note : Stand-alone PB-correction can be triggered by re-running tclean with the appropriate imagename and with niter=0, calcpsf=False, calcres=False, pbcor=True, vptable='vp.tab' ( where vp.tab is the name of the vpmanager file. See the inline help for the 'vptable' parameter ) Note : Multi-term PB correction that includes a correction for the spectral index of the PB has not been enabled for the 4.7 release. Please use the widebandpbcor task instead. ( Wideband PB corrections are required when the amplitude of the brightest source is known accurately enough to be sensitive to the difference in the PB gain between the upper and lower end of the band at its location. As a guideline, the artificial spectral index due to the PB is -1.4 at the 0.5 gain level and less than -0.2 at the 0.9 gain level at the middle frequency )",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "weighting",
                    "name": "weighting",
                    "value": "natural",
                    "defaultValue": "natural",
                    "description": "Weighting scheme (natural,uniform,briggs,superuniform,radial, briggsabs) During gridding of the dirty or residual image, each visibility value is multiplied by a weight before it is accumulated on the uv-grid. The PSF's uv-grid is generated by gridding only the weights (weightgrid). weighting='natural' : Gridding weights are identical to the data weights from the MS. For visibilities with similar data weights, the weightgrid will follow the sample density pattern on the uv-plane. This weighting scheme provides the maximum imaging sensitivity at the expense of a possibly fat PSF with high sidelobes. It is most appropriate for detection experiments where sensitivity is most important. weighting='uniform' : Gridding weights per visibility data point are the original data weights divided by the total weight of all data points that map to the same uv grid cell : ' data_weight / total_wt_per_cell '. The weightgrid is as close to flat as possible resulting in a PSF with a narrow main lobe and suppressed sidelobes. However, since heavily sampled areas of the uv-plane get down-weighted, the imaging sensitivity is not as high as with natural weighting. It is most appropriate for imaging experiments where a well behaved PSF can help the reconstruction. weighting='briggs' :  Gridding weights per visibility data point are given by 'data_weight / ( A \\* total_wt_per_cell + B ) ' where A and B vary according to the 'robust' parameter. robust = -2.0 maps to A=1,B=0 or uniform weighting. robust = +2.0 maps to natural weighting. (robust=0.5 is equivalent to robust=0.0 in AIPS IMAGR.) Robust/Briggs weighting generates a PSF that can vary smoothly between 'natural' and 'uniform' and allow customized trade-offs between PSF shape and imaging sensitivity. weighting='briggsabs' : Experimental option. Same as Briggs except the formula is different A= robust\\*robust and B is dependent on the noise per visibility estimated. Giving noise='0Jy' is a not a reasonable option. In this mode (or formula)  robust values from -2.0 to 0.0 only make sense (2.0 and -2.0 will get the same weighting) weighting='superuniform' : This is similar to uniform weighting except that the total_wt_per_cell is replaced by the total_wt_within_NxN_cells around the uv cell of interest.  ( N = subparameter 'npixels' ) This method tends to give a PSF with inner sidelobes that are suppressed as in uniform weighting but with far-out sidelobes closer to natural weighting. The peak sensitivity is also closer to natural weighting. weighting='radial' : Gridding weights are given by ' data_weight \\* uvdistance ' This method approximately minimizes rms sidelobes for an east-west synthesis array. For more details on weighting please see Chapter3 of Dan Briggs' thesis (http://www.aoc.nrao.edu/dissertations/dbriggs)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "robust",
                    "name": "robust",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "Robustness parameter for Briggs weighting. robust = -2.0 maps to uniform weighting. robust = +2.0 maps to natural weighting. (robust=0.5 is equivalent to robust=0.0 in AIPS IMAGR.)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "noise",
                    "name": "noise",
                    "value": "1.0Jy",
                    "defaultValue": "1.0Jy",
                    "description": "noise parameter for briggs abs mode weighting ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "npixels",
                    "name": "npixels",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Number of pixels to determine uv-cell size for super-uniform weighting (0 defaults to -/+ 3 pixels) npixels -- uv-box used for weight calculation a box going from -npixel/2 to +npixel/2 on each side around a point is used to calculate weight density. npixels=2 goes from -1 to +1 and covers 3 pixels on a side. npixels=0 implies a single pixel, which does not make sense for superuniform weighting. Therefore, if npixels=0 it will be forced to 6 (or a box of -3pixels to +3pixels) to cover 7 pixels on a side.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvtaper",
                    "name": "uvtaper",
                    "value": "['']",
                    "defaultValue": "['']",
                    "description": "uv-taper on outer baselines in uv-plane Apply a Gaussian taper in addition to the weighting scheme specified via the 'weighting' parameter. Higher spatial frequencies are weighted down relative to lower spatial frequencies to suppress artifacts arising from poorly sampled areas of the uv-plane. It is equivalent to smoothing the PSF obtained by other weighting schemes and can be specified either as a Gaussian in uv-space (eg. units of lambda) or as a Gaussian in the image domain (eg. angular units like arcsec). uvtaper = maj, bmin, bpa] NOTE: the on-sky FWHM in arcsec is roughly  the uv taper/200 (klambda). default: uvtaper=; no Gaussian taper applied example: uvtaper=['5klambda']  circular taper FWHM=5 kilo-lambda uvtaper=['5klambda','3klambda','45.0deg'] uvtaper=['10arcsec'] on-sky FWHM 10 arcseconds uvtaper=['300.0'] default units are lambda in aperture plane",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Maximum number of iterations A stopping criterion based on total iteration count. Currently the parameter type is defined as an integer therefore the integer value larger than 2147483647 will not be set properly as it causes an overflow. Iterations are typically defined as the selecting one flux component and partially subtracting it out from the residual image. niter=0 : Do only the initial major cycle (make dirty image, psf, pb, etc) niter larger than zero : Run major and minor cycles. Note : Global stopping criteria vs major-cycle triggers In addition to global stopping criteria, the following rules are used to determine when to terminate a set of minor cycle iterations and trigger major cycles erived from Cotton-Schwab Clean, 1984] 'cycleniter' : controls the maximum number of iterations per image plane before triggering a major cycle. 'cyclethreshold' : Automatically computed threshold related to the max sidelobe level of the PSF and peak residual. Divergence, detected as an increase of 10% in peak residual from the minimum so far (during minor cycle iterations) The first criterion to be satisfied takes precedence. Note :  Iteration counts for cubes or multi-field images : For images with multiple planes (or image fields) on which the deconvolver operates in sequence, iterations are counted across all planes (or image fields). The iteration count is compared with 'niter' only after all channels/planes/fields have completed their minor cycles and exited either due to 'cycleniter' or 'cyclethreshold'. Therefore, the actual number of iterations reported in the logger can sometimes be larger than the user specified value in 'niter'. For example, with niter=100, cycleniter=20,nchan=10,threshold=0, a total of 200 iterations will be done in the first set of minor cycles before the total is compared with niter=100 and it exits. Note : Additional global stopping criteria include - no change in peak residual across two major cycles - a 50% or more increase in peak residual across one major cycle",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gain",
                    "name": "gain",
                    "value": "0.1",
                    "defaultValue": "0.1",
                    "description": "Loop gain Fraction of the source flux to subtract out of the residual image for the CLEAN algorithm and its variants. A low value (0.2 or less) is recommended when the sky brightness distribution is not well represented by the basis functions used by the chosen deconvolution algorithm. A higher value can be tried when there is a good match between the true sky brightness structure and the basis function shapes.  For example, for extended emission, multiscale clean with an appropriate set of scale sizes will tolerate a higher loop gain than Clark clean (for example).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "threshold",
                    "name": "threshold",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Stopping threshold (number in units of Jy, or string) A global stopping threshold that the peak residual (within clean mask) across all image planes is compared to. threshold = 0.005  : 5mJy threshold = '5.0mJy' Note : A 'cyclethreshold' is internally computed and used as a major cycle trigger. It is related what fraction of the PSF can be reliably used during minor cycle updates of the residual image. By default the minor cycle iterations terminate once the peak residual reaches the first sidelobe level of the brightest source. 'cyclethreshold' is computed as follows using the settings in parameters 'cyclefactor','minpsffraction','maxpsffraction','threshold' : psf_fraction = max_psf_sidelobe_level \\* 'cyclefactor' psf_fraction = max(psf_fraction, 'minpsffraction'); psf_fraction = min(psf_fraction, 'maxpsffraction'); cyclethreshold = peak_residual \\* psf_fraction cyclethreshold = max( cyclethreshold, 'threshold' ) If nsigma is set (>0.0), the N-sigma threshold is calculated (see the description under nsigma), then cyclethreshold is further modified as, cyclethreshold = max( cyclethreshold, nsgima_threshold ) 'cyclethreshold' is made visible and editable only in the interactive GUI when tclean is run with interactive=True.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nsigma",
                    "name": "nsigma",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Multiplicative factor for rms-based threshold stopping N-sigma threshold is calculated as nsigma \\* rms value per image plane determined from a robust statistics. For nsigma > 0.0, in a minor cycle, a maximum of the two values, the N-sigma threshold and cyclethreshold, is used to trigger a major cycle (see also the descreption under 'threshold'). Set nsigma=0.0 to preserve the previous tclean behavior without this feature. The top level parameter, fastnoise is relevant for the rms noise calculation which is used to determine the threshold.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cycleniter",
                    "name": "cycleniter",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Maximum number of minor-cycle iterations (per plane) before triggering a major cycle For example, for a single plane image, if niter=100 and cycleniter=20, there will be 5 major cycles after the initial one (assuming there is no threshold based stopping criterion). At each major cycle boundary, if the number of iterations left over (to reach niter) is less than cycleniter, it is set to the difference. Note : cycleniter applies per image plane, even if cycleniter x nplanes gives a total number of iterations greater than 'niter'. This is to preserve consistency across image planes within one set of minor cycle iterations.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cyclefactor",
                    "name": "cyclefactor",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Scaling on PSF sidelobe level to compute the minor-cycle stopping threshold. Please refer to the Note under the documentation for 'threshold' that discussed the calculation of 'cyclethreshold' cyclefactor=1.0 results in a cyclethreshold at the first sidelobe level of the brightest source in the residual image before the minor cycle starts. cyclefactor=0.5 allows the minor cycle to go deeper. cyclefactor=2.0 triggers a major cycle sooner.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpsffraction",
                    "name": "minpsffraction",
                    "value": "0.05",
                    "defaultValue": "0.05",
                    "description": "PSF fraction that marks the max depth of cleaning in the minor cycle Please refer to the Note under the documentation for 'threshold' that discussed the calculation of 'cyclethreshold' For example, minpsffraction=0.5 will stop cleaning at half the height of the peak residual and trigger a major cycle earlier.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxpsffraction",
                    "name": "maxpsffraction",
                    "value": "0.8",
                    "defaultValue": "0.8",
                    "description": "PSF fraction that marks the minimum depth of cleaning in the minor cycle Please refer to the Note under the documentation for 'threshold' that discussed the calculation of 'cyclethreshold' For example, maxpsffraction=0.8 will ensure that at least the top 20 percent of the source will be subtracted out in the minor cycle even if the first PSF sidelobe is at the 0.9 level (an extreme example), or if the cyclefactor is set too high for anything to get cleaned.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interactive",
                    "name": "interactive",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Modify masks and parameters at runtime interactive=True will trigger an interactive GUI at every major cycle boundary (after the major cycle and before the minor cycle). Options for runtime parameter modification are : Interactive clean mask : Draw a 1/0 mask (appears as a contour) by hand. If a mask is supplied at the task interface or if automasking is invoked, the current mask is displayed in the GUI and is available for manual editing. Note : If a mask contour is not visible, please check the cursor display at the bottom of GUI to see which parts of the mask image have ones and zeros. If the entire mask=1 no contours will be visible. Operation buttons :  -- Stop execution now (restore current model and exit) -- Continue on until global stopping criteria are reached without stopping for any more interaction -- Continue with minor cycles and return for interaction after the next major cycle. Iteration control : -- max cycleniter :  Trigger for the next major cycle The display begins with in( cycleniter, niter - itercount ) ] and can be edited by hand. -- iterations left :  The display begins with iter-itercount ] and can be edited to increase or decrease the total allowed niter. -- threshold : Edit global stopping threshold -- cyclethreshold : The display begins with the automatically computed value (see Note in help for 'threshold'), and can be edited by hand. All edits will be reflected in the log messages that appear once minor cycles begin. or scripting purposes, replacing True/False with 1/0 will get tclean to return an imaging summary dictionary to python ]",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usemask",
                    "name": "usemask",
                    "value": "user",
                    "defaultValue": "user",
                    "description": "Type of mask(s) to be used for deconvolution user: (default) mask image(s) or user specified region file(s) or string CRTF expression(s) subparameters: mask, pbmask pb: primary beam mask subparameter: pbmask Example: usemask=pb\", pbmask=0.2 Construct a mask at the 0.2 pb gain level. (Currently, this option will work only with gridders that produce .pb (i.e. mosaic and awproject) or if an externally produced .pb image exists on disk) auto-multithresh : auto-masking by multiple thresholds for deconvolution subparameters : sidelobethreshold, noisethreshold, lownoisethreshold, negativethrehsold,  smoothfactor, minbeamfrac, cutthreshold, pbmask, growiterations, dogrowprune, minpercentchange, verbose Additional top level parameter relevant to auto-multithresh: fastnoise if pbmask is >0.0, the region outside the specified pb gain level is excluded from image statistics in determination of the threshold. Note: By default the intermediate mask generated by automask at each deconvolution cycle is over-written in the next cycle but one can save them by setting the environment variable, SAVE_ALL_AUTOMASKS=\"true\". (e.g. in the CASA prompt, os.environAVE_ALL_AUTOMASKS']=\"true\" ) The saved CASA mask image name will be imagename.mask.autothresh#, where # is the iteration cycle number.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask (a list of image name(s) or region file(s) or region string(s) The name of a CASA image or region file or region string that specifies a 1/0 mask to be used for deconvolution. Only locations with value 1 will be considered for the centers of flux components in the minor cycle. If regions specified fall completely outside of the image, tclean will throw an error. Manual mask options/examples : mask='xxx.mask'  : Use this CASA image named xxx.mask and containing ones and zeros as the mask. If the mask is only different in spatial coordinates from what is being made it will be resampled to the target coordinate system before being used. The mask has to have the same shape in velocity and Stokes planes as the output image. Exceptions are single velocity and/or single Stokes plane masks. They will be expanded to cover all velocity and/or Stokes planes of the output cube. ote : If an error occurs during image resampling or if the expected mask does not appear, please try using tasks 'imregrid' or 'makemask' to resample the mask image onto a CASA image with the target shape and coordinates and supply it via the 'mask' parameter. ] mask='xxx.crtf' : A text file with region strings and the following on the first line ( #CRTFv0 CASA Region Text Format version 0 ) This is the format of a file created via the viewer's region tool when saved in CASA region file format. mask='circle40pix,40pix],10pix]'  : A CASA region string. mask=xx.mask','xxx.crtf', 'circle40pix,40pix],10pix]']  : a list of masks Note : Mask images for deconvolution must contain 1 or 0 in each pixel. Such a mask is different from an internal T/F mask that can be held within each CASA image. These two types of masks are not automatically interchangeable, so please use the makemask task to copy between them if you need to construct a 1/0 based mask from a T/F one. Note : Work is in progress to generate more flexible masking options and enable more controls.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbmask",
                    "name": "pbmask",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Sub-parameter for usemask='auto-multithresh': primary beam mask Examples : pbmask=0.0 (default, no pb mask) pbmask=0.2 (construct a mask at the 0.2 pb gain level)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sidelobethreshold",
                    "name": "sidelobethreshold",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Sub-parameter for auto-multithresh\":  mask threshold based on sidelobe levels:  sidelobethreshold \\* max_sidelobe_level \\* peak residual \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "noisethreshold",
                    "name": "noisethreshold",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "Sub-parameter for auto-multithresh\":  mask threshold based on the noise level: noisethreshold \\* rms + location (=median) The rms is calculated from MAD with rms = 1.4826\\*MAD.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lownoisethreshold",
                    "name": "lownoisethreshold",
                    "value": "1.5",
                    "defaultValue": "1.5",
                    "description": "Sub-parameter for auto-multithresh\":  mask threshold to grow previously masked regions via binary dilation:   lownoisethreshold \\* rms in residual image + location (=median) The rms is calculated from MAD with rms = 1.4826\\*MAD.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "negativethreshold",
                    "name": "negativethreshold",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Sub-parameter for auto-multithresh\": mask threshold  for negative features: -1.0* negativethreshold \\* rms + location(=median) The rms is calculated from MAD with rms = 1.4826\\*MAD.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smoothfactor",
                    "name": "smoothfactor",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Sub-parameter for auto-multithresh\":  smoothing factor in a unit of the beam \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minbeamfrac",
                    "name": "minbeamfrac",
                    "value": "0.3",
                    "defaultValue": "0.3",
                    "description": "Sub-parameter for auto-multithresh\":  minimum beam fraction in size to prune masks smaller than mimbeamfrac \\* beam <=0.0 : No pruning\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cutthreshold",
                    "name": "cutthreshold",
                    "value": "0.01",
                    "defaultValue": "0.01",
                    "description": "Sub-parameter for auto-multithresh\": threshold to cut the smoothed mask to create a final mask: cutthreshold \\* peak of the smoothed mask \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "growiterations",
                    "name": "growiterations",
                    "value": "75",
                    "defaultValue": "75",
                    "description": "Sub-parameter for auto-multithresh\": Maximum number of iterations to perform using binary dilation for growing the mask \"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dogrowprune",
                    "name": "dogrowprune",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Experimental sub-parameter for auto-multithresh\": Do pruning on the grow mask \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpercentchange",
                    "name": "minpercentchange",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "If the change in the mask size in a particular channel is less than minpercentchange, stop masking that channel in subsequent cycles. This check is only applied when noise based threshold is used and when the previous clean major cycle had a cyclethreshold value equal to the clean threshold. Values equal to -1.0 (or any value less than 0.0) will turn off this check (the default). Automask will still stop masking if the current channel mask is an empty mask and the noise threshold was used to determine the mask. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "he summary of automasking at the end of each automasking process is printed in the logger.  Following information per channel will be listed in the summary. chan: channel number masking?: F - stop updating automask for the subsequent iteration cycles RMS: robust rms noise peak: peak in residual image thresh_type: type of threshold used (noise or sidelobe) thresh_value: the value of threshold used N_reg: number of the automask regions N_pruned: number of the automask regions removed by pruning N_grow: number of the grow mask regions N_grow_pruned: number of the grow mask regions removed by pruning N_neg_pix: number of pixels for negative mask regions Note that for a large cube, extra logging may slow down the process.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fastnoise",
                    "name": "fastnoise",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Only relevant when automask (user='multi-autothresh') and/or n-sigma stopping threshold (nsigma>0.0) are/is used. If it is set to True,  a simpler but faster noise calucation is used. In this case, the threshold values are determined based on classic statistics (using all unmasked pixels for the calculations). If it is set to False,  the new noise calculation method is used based on pre-existing mask. Case 1: no exiting mask Calculate image statistics using Chauvenet algorithm Case 2: there is an existing mask Calculate image statistics by classical method on the region outside the mask and inside the primary beam mask. In all cases above RMS noise is calculated from MAD.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restart",
                    "name": "restart",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "images (and start from an existing model image) or automatically increment the image name and make a new image set. True : Re-use existing images. If imagename.model exists the subsequent run will start from this model (i.e. predicting it using current gridder settings and starting from the residual image).  Care must be taken when combining this option with startmodel. Currently, only one or the other can be used. startmodel='', imagename.model exists : - Start from imagename.model startmodel='xxx', imagename.model does not exist : - Start from startmodel startmodel='xxx', imagename.model exists : - Exit with an error message requesting the user to pick only one model.  This situation can arise when doing one run with startmodel='xxx' to produce an output imagename.model that includes the content of startmodel, and wanting to restart a second run to continue deconvolution. Startmodel should be set to '' before continuing. If any change in the shape or coordinate system of the image is desired during the restart, please change the image name and use the startmodel (and mask) parameter(s) so that the old model (and mask) can be regridded to the new coordinate system before starting. False : A convenience feature to increment imagename with '_1', '_2', etc as suffixes so that all runs of tclean are fresh starts (without having to change the imagename parameter or delete images). This mode will search the current directory for all existing imagename extensions, pick the maximum, and adds 1. For imagename='try' it will make try.psf, try_2.psf, try_3.psf, etc. This also works if you specify a directory name in the path : imagename='outdir/try'.  If './outdir' does not exist, it will create it. Then it will search for existing filenames inside that directory. If outlier fields are specified, the incrementing happens for each of them (since each has its own 'imagename').  The counters are synchronized across imagefields, to make it easier to match up sets of output images.  It adds 1 to the 'max id' from all outlier names on disk.  So, if you do two runs with only the main field (imagename='try'), and in the third run you add an outlier with imagename='outtry', you will get the following image names for the third run :  'try_3' and 'outtry_3' even though 'outry' and 'outtry_2' have not been used.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calcres",
                    "name": "calcres",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Calculate initial residual image This parameter controls what the first major cycle does. calcres=False with niter greater than 0 will assume that a .residual image already exists  and that the minor cycle can begin without recomputing it. calcres=False with niter=0 implies that only the PSF will be made and no data will be gridded. calcres=True requires that calcpsf=True or that the .psf and .sumwt images already exist on disk (for normalization purposes). Usage example : For large runs (or a pipeline scripts) it may be useful to first run tclean with niter=0 to create an initial .residual to look at and perhaps make a custom mask for. Imaging can be resumed without recomputing it.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calcpsf",
                    "name": "calcpsf",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Calculate PSF This parameter controls what the first major cycle does. calcpsf=False will assume that a .psf image already exists and that the minor cycle can begin without recomputing it.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -90,
            "text": "sdpolaverage",
            "description": "name of output file",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdpolaverage",
                    "defaultValue": "casatasks.sdpolaverage",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected_data\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna name or ID, e.g. PM03\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by IF IDs (spectral windows), e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by time range, e.g. 09:14:0~09:54:0\" (\"\"=all) (see examples in help) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by observational intent, e.g. *ON_SOURCE*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "polaverage",
                    "name": "polaverage",
                    "value": "",
                    "defaultValue": "",
                    "description": "polarization averaging mode (\", stokes\" or \"geometric\"). \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -91,
            "text": "sdsidebandsplit",
            "description": "Rejection limit of solution. The value must be greater than 0.0 and less than 1.0. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdsidebandsplit",
                    "defaultValue": "casatasks.sdsidebandsplit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "a list of names of input images. At least two valid images are required for processing ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Prefix of output image name. A suffix, .signalband\" or \".imageband\" is added to output image name depending on the side band side being solved.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite option ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "signalshift",
                    "name": "signalshift",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "a list of channel number shifts in signal side band. The number of elements must be equal to that of imagename",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imageshift",
                    "name": "imageshift",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "t of channel number shifts in image side band. The number of elements must be either zero or equal to that of imagename. In case of zero length array, the values are obtained from signalshift assuming the shifts are the same magnitude in opposite direction.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "getbothside",
                    "name": "getbothside",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "sideband separation (True) or supression (False) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refchan",
                    "name": "refchan",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "reference channel of spectral axis in image sideband ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refval",
                    "name": "refval",
                    "value": "",
                    "defaultValue": "",
                    "description": "frequency at the reference channel of spectral axis in image sideband (e.g., 100GHz\") \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "otherside",
                    "name": "otherside",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "solve the solution of the other side band side and subtract the solution ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "threshold",
                    "name": "threshold",
                    "value": "0.2",
                    "defaultValue": "0.2",
                    "description": "Rejection limit of solution. The value must be greater than 0.0 and less than 1.0. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -92,
            "text": "sdsmooth",
            "description": "overwrite the output file if already exists ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdsmooth",
                    "defaultValue": "casatasks.sdsmooth",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna name or ID, e.g. PM03\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by spectral window IDs, e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by time range, e.g. 09:14:0~09:54:0\" (\"\"=all) (see examples in help) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pol",
                    "name": "pol",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by polarization IDs, e.g. 0,1\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by observational intent, e.g. *ON_SOURCE*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reindex",
                    "name": "reindex",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Re-index indices in subtables based on data selection ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "kernel",
                    "name": "kernel",
                    "value": "gaussian",
                    "defaultValue": "gaussian",
                    "description": "spectral smoothing kernel type ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "kwidth",
                    "name": "kwidth",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "smoothing kernel width in channel ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite the output file if already exists ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -93,
            "text": "sdtimeaverage",
            "description": "name of output file",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.sdtimeaverage",
                    "defaultValue": "casatasks.sdtimeaverage",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infile",
                    "name": "infile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of input SD dataset ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "float_data",
                    "defaultValue": "float_data",
                    "description": "name of data column to be used ata, \"float_data\", or \"corrected_data\"] \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. 3C2*\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by spectral windows and channels, e.g. 3,5,7\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by time range, e.g. 09:14:0~09:54:0\" (\"\"=all) (see examples in help) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. 21~23\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "antenna IDs to be averaged over, e.g. PM03\" (\"\"=all) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "all",
                    "defaultValue": "all",
                    "description": "bin width for time averaging. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timespan",
                    "name": "timespan",
                    "value": "scan",
                    "defaultValue": "scan",
                    "description": "span across scan, state or both. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "name of output file",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -94,
            "text": "setjy",
            "description": "to be used internally for MMS",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.setjy",
                    "defaultValue": "casatasks.setjy",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields, but run setjy one field at a time) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C*'; field id 3, all names starting with 4C Field name(s)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: '' (all spectral windows) NOTE: setjy only selects by spectral window, and ignores channel selections.  Fine-grained control could be achieved using (and possibly constructing) a cube for model.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Other parameters for selecting part(s) of the MS to operate on. Default: False Options: False|True Currently all time-oriented and most likely only of interest when using a Solar System object as a calibrator.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True Default: '' = all Example:scan='1~5' For multiple MS input, a list of scan strings can be used: scan=['0~100','10~200'] scan='0~100; scan ids 0-100 for all input MSes Check 'go listobs' to insure the scan numbers are in order.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (all Example: using wildcard characters, intent=*CALIBRATE_AMPLI*\" will match field(s) contains CALIBRATE_AMPLI in a list of intents WARNING: If a source with a specific field id has scans that can be distinguishable with intent selection, one should set usescatch=True. Otherwise, any existing model of the source may be cleared and overwritten even if the part of the scans not selected by intent.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scalebychan",
                    "name": "scalebychan",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Scale the flux density on a per channel basis? Default: True Options: True|False This determines whether the fluxdensity set in the model is calculated on a per channel basis. If False then it only one fluxdensity value is calculated per spw.  (Either way, all channels in spw are modified.)  It is effectively True if fluxdensity >  0.0.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "standard",
                    "name": "standard",
                    "value": "Perley-Butler 2017",
                    "defaultValue": "Perley-Butler 2017",
                    "description": "Flux density standard, used if fluxdensity less than 0.0 Default: 'Perley-Butler 2017' Options: 'Baars', 'Perley 90', 'Perley-Taylor 95', 'Perley-Taylor 99', 'Perley-Butler 2010', 'Perley-Butler 2013', 'Perley-Butler 2017', 'Scaife-Heald 2012', 'Stevens-Reynolds 2016', 'Butler-JPL-Horizons 2010', 'Butler-JPL-Horizons 2012', 'manual' 'fluxscale' All but the last four options are for extragalactic calibrators. The two 'Butler-JPL' standards are for Solar System objects. Note that Scaife-Heald 2012 is for the low frequencies (mostly valid for the frequency range, 30-300MHz). Flux density calculation with Solar System objects depends on ephemerides. The setjy task looks for the data in os.getenv('CASAPATH').split() + '/data/ephemerides/JPL-Horizons'. If no ephemeris for the right object at the right time is present, the calculation will fail.  Ask the helpdesk to make an ephemeris. For more information on individual calibrators, see CASA Docs (https://casa.nrao.edu/casadocs/)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "model",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Model image (I only) for setting the model visibilities. Subparameter of standard=Perley-Butler 2010\", \"Perley-Butler 2013\", and \"Perley-Butler 2017\" Default: '' (do not use a model image) The model can be a cube, and its channels do not have to exactly match those of vis.  It is recommended to use model for sources that are resolved by the observation, but the Butler-JPL-Horizons standard supplies a basic model of what several Solar System objects look like. Each field must be done separately when using a model image. Both the amplitude and phase are calculated.  At the AOC or CV, the models are located in casairs']ata'] + '",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listmodels",
                    "name": "listmodels",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List the available models for VLA calibrators or Tb models for Solar System objects Subparameter of standard=Perley-Butler 2010\", \"Perley-Butler 2013\", and \"Perley-Butler 2017\" Default: False Options: False|True If True, do nothing but list candidates for model (for extragalactic calibrators) that are present on the system. It looks for *.im* *.mod* in . including its sub-directories but skipping any directory name start with \".\", CalModels, and CalModels directories in the casairs']ata'] tree. It does not check whether they are appropriate for the MS! If standard='Butler-JPL-Horizons 2012', Tb models (frequency-dependend brightness temperature models) for Solar System objects used in the standard. For standard='Butler-JPL-Horizons 2010', the recognized Solar System objects are listed.\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fluxdensity",
                    "name": "fluxdensity",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Specified flux density in Jy ,Q,U,V] Subparameter of standard=manual\" Default: -1 (uses [1,0,0,0] flux density for unrecognized sources, and standard flux densities for ones recognized by the default standard Perley-Butler 2010). Only one flux density can be specified at a time. The phases are set to zero. setjy will try to use the standard if fluxdensity is not positive. Examples: fluxdensity=-1  will use the default standard for recognized calibrators (like 3C286, 3C147 and 3C48) and insert 1.0  for selected fields with unrecognized sources. field = '1'; fluxdensity=[3.2,0,0,0] will put in a flux density of I=3.2 for field='1' At present (June 2000), this is the only method to insert apolarized flux density model. Example: fluxdensity=[2.63,0.21,-0.33,0.02] will put in I,Q,U,V flux densities of 2.63,0.21,-0.33, and 0.02, respectively, in the model column.\"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spix",
                    "name": "spix",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Spectral index for I flux density Subparameter of standard=manual\" Default:  =>0.0 (no effect) Options: a float or a list of float values S = fluxdensity * (freq",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reffreq",
                    "name": "reffreq",
                    "value": "1GHz",
                    "defaultValue": "1GHz",
                    "description": "Reference frequency for spix Subparameter of standard=manual\" Default: '1GHz' (this is only here to prevent division by 0!) Given with a unit with an optional frequency frame (if the frame is not given, LSRK is assumed). There should be no space between the value and the unit  (e.g. '100.0GHz' or 'TOPO 100.0GHz' are correct but with  '100.0 GHz' you will see a warning message that it will be defaulted to LSRK). Example: '86.0GHz', 'TOPO 86.0GHz', '4.65e9Hz' NOTE: If the flux density is being scaled by spectral index, then reffreq must be set to whatever reference frequency is correct for the given fluxdensity and spix.  It cannot be determined from vis.  On the other hand, if spix is 0, then any positive frequency can be used (and ignored).\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "polindex",
                    "name": "polindex",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Coefficients of the frequency-dependent linear polarization index (polarization fraction) Subparameter of standard=manual\" Default: Expressed as pol. index = sqrt(Q^2+U^2)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "polangle",
                    "name": "polangle",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Coefficients of the frequency-dependent linear polarization angle (in radians) Subparameter of standard=manual\" Default: Expressed as pol. angle = 0.5*arctan(U",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rotmeas",
                    "name": "rotmeas",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Rotation measure (in rad/m^2) Subparameter of standard=manual\" Default: 0.0 Note on the use of polindex, polangle and rotmeas When the frequnecy-dependent polindex and polangle are used, be sure to include all the coefficients of both polindex and polangle to describe frequency depencency. Otherwise frequency-dependent Q and U flux densities are not calculated correctly. If rotmeas is given, the calculated Q and U flux densities are then corrected for the Faraday rotation.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fluxdict",
                    "name": "fluxdict",
                    "value": "{}",
                    "defaultValue": "{}",
                    "description": "Output dictionary from fluxscale Subparameter of standard=fluxscale\" Using the flexibly results, the flux density, spectral index, and reference frequency are extracted and set to fluxdensity, spix, and reffreq parameters, respectively. The field and spw selections can be used to specify subset of the fluxdict to be used to set the model. If they are left as default (field=\"\", spw=\"\") all fields and",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "useephemdir",
                    "name": "useephemdir",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use directions in the ephemeris table for the solar system object? Subparameter of standard=Butler-JPL-Horizons 2012\", Default: False Options: False|True\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "nearest",
                    "defaultValue": "nearest",
                    "description": "Method to be used to interpolate in time for the time variable sources (3C48,3C138,3C147). Subparameter of standard=Perley-Butler 2013\", and \"Perley-Butler 2017\" Default: 'nearest' Options: 'nearest|linear|cubic|spline' This parameter is ignored for other non-variable sources in the standard.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usescratch",
                    "name": "usescratch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Will create if necessary and use the MODEL_DATA Default: False Options: False|True * If False: 'virtual' model is created. The model information is saved either in the SOURCE_MODEL column in the SOURCE table (if one exists) or in the keyword of the main table in the MS and model visibilities are evaluated on the fly when calculating  calibration or plotting in plotms. * If True: the model visibility will be evaluated and saved on disk in the MODEL_DATA column. This will increase your ms in size by a factor of 1.5 (w.r.t. the case where  you only have the DATA and the CORRECTED_DATA column). Use True if you need to interact with the MODEL_DATA in python, say. Also, use True if you need finer than field and spw  selections using scans/time (and when use with intent selection, please see WARNING section in the intent parameter description). By running usescratch=T, it will remove the existing virtual model from previous runs. usescratch=F will not remove the existing MODEL_DATA but in subsequent process the virtual model with matching field and spw combination will be used if it exists regardless of the presence of the MODEL_DATA column. NOTE: for usescratch=False, timerange, scan, and observation are ignored (i.e. time-specific virtual model is not possible.). VERY IMPORTANT: The current implementation of time-dependent models (e.g. ephemerides sources) within setjy is incompatible with the use of the virtual model column. Please use ephemerides source models only with usescratch=True",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ismms",
                    "name": "ismms",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "to be used internally for MMS",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -95,
            "text": "simalma",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.simalma",
                    "defaultValue": "casatasks.simalma",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "project",
                    "name": "project",
                    "value": "sim",
                    "defaultValue": "sim",
                    "description": "root prefix for output file names ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dryrun",
                    "name": "dryrun",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "dryrun=True will only produce the informative report, not run simobserve/analyze ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "skymodel",
                    "name": "skymodel",
                    "value": "",
                    "defaultValue": "",
                    "description": "model image to observe ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inbright",
                    "name": "inbright",
                    "value": "",
                    "defaultValue": "",
                    "description": "scale surface brightness of brightest pixel e.g. 1.2Jy",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "indirection",
                    "name": "indirection",
                    "value": "",
                    "defaultValue": "",
                    "description": "set new direction e.g. J2000 19h00m00 -40d00m00\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "incell",
                    "name": "incell",
                    "value": "",
                    "defaultValue": "",
                    "description": "set new cell/pixel size e.g. 0.1arcsec\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "incenter",
                    "name": "incenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "set new frequency of center channel e.g. 89GHz\" (required even for 2D model) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inwidth",
                    "name": "inwidth",
                    "value": "",
                    "defaultValue": "",
                    "description": "set new channel width e.g. 10MHz\" (required even for 2D model) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "complist",
                    "name": "complist",
                    "value": "",
                    "defaultValue": "",
                    "description": "componentlist to observe ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "compwidth",
                    "name": "compwidth",
                    "value": "8GHz",
                    "defaultValue": "8GHz",
                    "description": "bandwidth of components ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "setpointings",
                    "name": "setpointings",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If True, calculate a map of pointings and write *ptgfile*. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ptgfile",
                    "name": "ptgfile",
                    "value": " $project.ptg.txt",
                    "defaultValue": " $project.ptg.txt",
                    "description": "list of pointing positions ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "integration",
                    "name": "integration",
                    "value": "10s",
                    "defaultValue": "10s",
                    "description": "integration (sampling) time ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "direction",
                    "name": "direction",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "J2000 19h00m00 -40d00m00\" or \"\" to center on model \"",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mapsize",
                    "name": "mapsize",
                    "value": "['', '']",
                    "defaultValue": "['', '']",
                    "description": "angular size of map or \" to cover model ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antennalist",
                    "name": "antennalist",
                    "value": "[ alma.cycle1.1.cfg",
                    "defaultValue": "[ alma.cycle1.1.cfg",
                    "description": "antenna position files of ALMA 12m and 7m arrays ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hourangle",
                    "name": "hourangle",
                    "value": "",
                    "defaultValue": "",
                    "description": "hour angle of observation center e.g. -3:00:00, or transit\" \"",
                    "type": "'aca.cycle1.cfg']",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "totaltime",
                    "name": "totaltime",
                    "value": "transit",
                    "defaultValue": "transit",
                    "description": "total time of observation; vector corresponding to antennalist ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tpnant",
                    "name": "tpnant",
                    "value": "[ 20min",
                    "defaultValue": "[ 20min",
                    "description": "Number of total power antennas to use (0-4) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tptime",
                    "name": "tptime",
                    "value": "",
                    "defaultValue": "",
                    "description": "total observation time for total power ",
                    "type": "'1h']",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pwv",
                    "name": "pwv",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Precipitable Water Vapor in mm. 0 for noise-free simulation ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "image",
                    "name": "image",
                    "value": "0s",
                    "defaultValue": "0s",
                    "description": "image simulated data ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "output image size in pixels (x,y) or 0 to match model ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imdirection",
                    "name": "imdirection",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "set output image direction, (otherwise center on the model) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "[int(128)",
                    "defaultValue": "[int(128)",
                    "description": "cell size with units or \" to equal model ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "",
                    "defaultValue": "",
                    "description": "maximum number of iterations (0 for dirty image) ",
                    "type": "int(128)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "threshold",
                    "name": "threshold",
                    "value": "",
                    "defaultValue": "",
                    "description": "flux level (+units) to stop cleaning ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "graphics",
                    "name": "graphics",
                    "value": "",
                    "defaultValue": "",
                    "description": "display graphics at each stage to creen|file|both|none] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Print extra information to the logger and terminal. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "0.1mJy",
                    "defaultValue": "0.1mJy",
                    "description": "overwrite files starting with $project ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "both",
                    "defaultValue": "both",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -96,
            "text": "simanalyze",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.simanalyze",
                    "defaultValue": "casatasks.simanalyze",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "project",
                    "name": "project",
                    "value": "sim",
                    "defaultValue": "sim",
                    "description": "root prefix for input and output file names. This must be the directory of results generated by running simobserve or simalma. In particular $project/$project.skymodel will be required in order to compare output and input images.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "image",
                    "name": "image",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Controls whether tclean is called to image the MeasurementSet data. If true, input one or more simulated MSs using the vis parameter. These can include a total power MS. This task will grid any total power MS, invert and deconvolve any interferometric MS(s) (using the simutil method imtclean), and feather the results. If this parameter is set to False (e.g., if the user has created a synthesized image themselves or simanalyze has previously been run with image=True) the user should provide that image as input to the imagename parameter. This task will then attempt to find an appropriate skymodel image (such as the optionally rescaled \\*.skymodel produced by simobserve or simalma and used to create the MS). ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "default",
                    "defaultValue": "default",
                    "description": "Name of image to image/analyze, expected to be of the same form as those generated by simobserve. Defaults to the first file found with the name $project/\\*.image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "skymodel",
                    "name": "skymodel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of a specific .skymodel image created by simobserve or simalma and used by one of those tasks to create a MS. If unspecified, will try to find one similar to your specified output image name. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "default",
                    "defaultValue": "default",
                    "description": "Name of the Measurement Set(s) to image, specified as a string or string containing a comma separating the names. If set to default\", will attempt to find and image all MeasurementSets (interferometric and single dish) in the project directory. Note that if you created MeasurementSets using simobserve, the names will include the antenna configuration. Example of a single MS: vis=\"mysim.alma.out03.ms\". Example of multiple MSs: vis=\"mysim.alma.out03.ms,mysim.aca.tp.ms\". Example of using the $project syntax: vis=\"$project.noisy.ms,$project.noisy.sd.ms\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "modelimage",
                    "name": "modelimage",
                    "value": "",
                    "defaultValue": "",
                    "description": "Sometimes it is preferable to use a low resolution (single dish or synthesis) image as a starting model during clean deconvolution of a higher resolution interferometric MS.  That is accomplished by specifying the low-resolution image as input to this parameter, and the MS to be deconvolved as input to the vis parameter. This parameter is passed to the startmodel parameter of tclean via the simutil method imtclean. Note that this is separate from the functionality controlled by the featherimage parameter and that it is not necessarily the original skymodel that was used in simobserve or simalma. Also note that the modelimage will not be used if the MS to be imaged is total power. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "[int(0)",
                    "defaultValue": "[int(0)",
                    "description": "A list of integers corresponding to the number of pixels in (x,y) dimensions of output image. If 0, will attempt to match model image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imdirection",
                    "name": "imdirection",
                    "value": "",
                    "defaultValue": "",
                    "description": "A string corresponding to a direction to adopt as phase center, including epoch, right ascension, and declination. If unset, will adopt center on the model. ",
                    "type": "int(0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "",
                    "defaultValue": "",
                    "description": "Specify the cell size with units, e.g., 10arcsec\". If left unset (an empty string), the model cell size will be used. This is the default setting. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interactive",
                    "name": "interactive",
                    "value": "",
                    "defaultValue": "",
                    "description": "Controls how the simutil method imtclean will call the tclean task. If this parameter is set to True, make sure to set the parameter niter to a value >0. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Controls the value of the niter parameter in tclean call, and thus the maximum number of iterations per minor cycle. Set to 0 to produce a dirty image. Can also be modified through the viewer GUI via the interactive parameter. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "threshold",
                    "name": "threshold",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Set the quantity corresponding to the target flux level at which to stop cleaning. This value is passed to tclean via the simutil method imtclean. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "weighting",
                    "name": "weighting",
                    "value": "0.1mJy",
                    "defaultValue": "0.1mJy",
                    "description": "Set the weighting scheme to apply to visibilities during image reconstruction. If set to briggs, will use the tclean default robust parameter (0.5) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "natural",
                    "defaultValue": "natural",
                    "description": "Accepts a list of cleanbox(es), mask image file name(s), region(s), and/or a primary beam coverage level. Input to this parameter will specify areas to be searched for clean components. tclean tends to perform better and is less likely to diverge if the component placement is limited by a mask to where real emission is expected. See the tclean task documentation for more information about masking. Example of a pixel range mask: mask=[110,110,150,145] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outertaper",
                    "name": "outertaper",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Accepts a list of strings in the form of a quantity that sets an other threshold on baselines in the uv-plane. Usually used to achieve a lower effective angular resolution and recover more extended emission in reconstructed image. If left unset via empty list (the default) no outer taper will be applied. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbcor",
                    "name": "pbcor",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Controls whether primary beam correction is applied in the call to task tclean. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Stokes parameters to include in the call to tclean via the simutil method imtclean. Note that forming Stokes Q and U images requires the presence of cross-hand polarizations (e.g., RL and LR for circularly polarized systems such as the VLA) in the input data. Stokes V requires both parallel hands (RR and LL) for circularly-polarized systems or the cross-hands (XY and YX) for linearly polarized systems such as ALMA and ATCA. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "featherimage",
                    "name": "featherimage",
                    "value": "I",
                    "defaultValue": "I",
                    "description": "String corresponding to the name of an image (e.g., total power data) to feather with the interferometric synthesis image. Sometimes it is preferable to grid the single dish MS using the sdimaging task for more control. In that case, the user can input the resulting single dish imaging under featherimage, only pass interferometric data as input to the vis parameter, and this task will clean the interferometric and feather with the featherimage. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "analyze",
                    "name": "analyze",
                    "value": "",
                    "defaultValue": "",
                    "description": "Used to create an image of the difference between the input skymodel and the simulated output image (whether that output image is being generated in the same call to simanalyze, with image=True, or has already been generated, and simanalyze is being called with image=False). If True, only the first 6 selected subparameter outputs will be displayed. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showuv",
                    "name": "showuv",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Displays a plot of the simulated uv coverage ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showpsf",
                    "name": "showpsf",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Displays synthesized (dirty) beam. Ignored in single dish simulation. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showmodel",
                    "name": "showmodel",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Displays the sky model at original resolution of input image. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showconvolved",
                    "name": "showconvolved",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Displays the sky model convolved with output clean beam. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showclean",
                    "name": "showclean",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Displays the synthesized image produced by the call to task tclean. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showresidual",
                    "name": "showresidual",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Displays the residual image produced by the call to task tclean. Ignored in single dish simulations. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showdifference",
                    "name": "showdifference",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Displays a difference image between cleaned image output by the tclean call, and input model sky image convolved with synthesized beam determined by output of tclean call. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "showfidelity",
                    "name": "showfidelity",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Display a fidelity image. Note that the RMS is calculated in the lower quarter of the image. This is likely not the best choice, so you are encouraged to measure RMS yourself in an off-source region. Fidelity = abs(input) / maxbs(input-output), 0.7\\*rms(output) ] ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "graphics",
                    "name": "graphics",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Controls where graphics are displayed. Options are screen, file, both, or none. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "both",
                    "defaultValue": "both",
                    "description": "Controls task activity is reported in the log. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Controls whether the task will overwrite existing files starting with $project name. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dryrun",
                    "name": "dryrun",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Experimental feature for interfermetric data only. Controls whether information pertaining to the tclean call and analysis will be recorded and written to files for inspection and adaption. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Allows for a user-defined log file naming convention if the verbose parameter is set to True. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -97,
            "text": "simobserve",
            "description": "Overwrite files starting with $project Default: False Options: True|False",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.simobserve",
                    "defaultValue": "casatasks.simobserve",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "project",
                    "name": "project",
                    "value": "sim",
                    "defaultValue": "sim",
                    "description": "root prefix for output file names ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "skymodel",
                    "name": "skymodel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Model image to observe * simobserve uses a CASA or fits image. If you merely have a grid of numbers, you will need to write them out as fits or write a CASA script to read them in and use the ia tool to create an image and insert the data. * simobserve does NOT require a coordinate system in the header. If the coordinate information is incomplete, missing, or you would like to override it, set the appropriate in\" parameters. NOTE that setting those parameters simply changes the header values, ignoring any values already in the image. No regridding is performed. * You can also manipulate an image header manually with the \"imhead\" task. * If you have a proper Coordinate System, simobserve will do its best to generate visibilities from that.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inbright",
                    "name": "inbright",
                    "value": "",
                    "defaultValue": "",
                    "description": "Peak brightness to scale the image to, in Jy/pixel Subparameter of skymodel Default: '' (i.e., unchanged) Example: inbright='1.2Jy/pixel' Note: unchanged\" will take the numerical values in your image and assume they are in Jy",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "indirection",
                    "name": "indirection",
                    "value": "",
                    "defaultValue": "",
                    "description": "Central direction to place the sky model image Subparameter of skymodel Default: '' (use whatever is in the image already) Example: indirection='J2000 19h00m00 -40d00m00'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "incell",
                    "name": "incell",
                    "value": "",
                    "defaultValue": "",
                    "description": "set new cell/pixel size Subparameter of skymodel Default: '' (use whatever is in the image already) Example: incell='0.1arcsec'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "incenter",
                    "name": "incenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Frequency to use for the center channel (or only channel, if the skymodel is 2D) Subparameter of skymodel Default: '' (use whatever is in the image already) Example: incenter='89GHz'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "inwidth",
                    "name": "inwidth",
                    "value": "",
                    "defaultValue": "",
                    "description": "Set new channel width Subparameter of skymodel Default: '' (use whatever is in the image already) Should be a string representing a quantity with units e.g. inwidth='10MHz' NOTES: * Only works reliably with frequencies, not velocities * It is not possible to change the number of spectral planes of the sky model, only to relabel them with different frequencies That kind of regridding can be accomplished with the CASA toolkit.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "complist",
                    "name": "complist",
                    "value": "",
                    "defaultValue": "",
                    "description": "Component list model of the sky, added to or instead of skymodel. See https://casaguides.nrao.edu/index.php/Simulation_Guide_Component_Lists_(CASA_5.4) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "compwidth",
                    "name": "compwidth",
                    "value": "8GHz",
                    "defaultValue": "8GHz",
                    "description": "Bandwidth of components Subparameter of complist If simulating from components only, this defines the bandwidth of the MS and output images Example: compwidth='8GHz'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "comp_nchan",
                    "name": "comp_nchan",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Channelization of components Subparameter of complist If simulating from components only, this defines the number of channels of the MeasurementSet Example: comp_nchan=256",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "setpointings",
                    "name": "setpointings",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If true, calculate a map of pointings and write ptgfile. If false, read pointings from ptgfile. Default: True If graphics are on, display the pointings shown on the model image",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ptgfile",
                    "name": "ptgfile",
                    "value": " $project.ptg.txt",
                    "defaultValue": " $project.ptg.txt",
                    "description": "A text file specifying directions Subparameter of setpointings=False The text file should have the following format, with optional integration times: Epoch     RA          DEC      TIME(optional) J2000 23h59m28.10 -019d52m12.35 10.0 If the time column is not present in the file, it will use integration\" for all pointings. NOTE: at this time the file should contain only science pointings: simobserve will observe these, then optionally the calibrator, then the list of science pointings again, etc, until totaltime is used up.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "integration",
                    "name": "integration",
                    "value": "10s",
                    "defaultValue": "10s",
                    "description": "Time interval for each integration Subparameter of setpointings=False Example: integration='10s' NOTE: to simulate a scan\" longer than one integration, use  setpointings to generate a pointing file, and then edit the file to increase the time at each point to be larger than the parameter integration time.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "direction",
                    "name": "direction",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Mosaic center direction. Subparameter of setpointings=True Example: J2000 19h00m00 -40d00m00\" or \"\" to center on model If unset, will use the center of the skymodel image. * can optionally be a list of pointings, otherwise * simobserve will cover a region of size mapsize according to maptype\"",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mapsize",
                    "name": "mapsize",
                    "value": "['', '']",
                    "defaultValue": "['', '']",
                    "description": "Angular size of of mosaic map to simulate. Subparameter of setpointings=True Set to \" to cover model",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maptype",
                    "name": "maptype",
                    "value": "hexagonal",
                    "defaultValue": "hexagonal",
                    "description": "How to calculate the pointings for the mosaic observation? Subparameter of setpointings=True Options: hexagonal, square (raster), ALMA, etc ALMA\" for the same hex algorithm as the ALMA Cycle 1 OT or \"ALMA2012\" for the algorithm used in the Cycle 0 OT\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pointingspacing",
                    "name": "pointingspacing",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spacing in between pointings. Subparameter of setpointings=True Examples: pointingspacing=0.25PB\" pointingspacing=\"\" for ALMA default INT=lambda",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caldirection",
                    "name": "caldirection",
                    "value": "",
                    "defaultValue": "",
                    "description": "pt source calibrator xperimental] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calflux",
                    "name": "calflux",
                    "value": "1Jy",
                    "defaultValue": "1Jy",
                    "description": "pt source calibrator flux xperimental] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "obsmode",
                    "name": "obsmode",
                    "value": "int",
                    "defaultValue": "int",
                    "description": "Observation mode to simulate Options: int(interferometer)|sd(singledish)|\"(none) Observation mode to calculate visibilities from a skymodel image (which may have been modified above), an optional component list, and a pointing file (which also may have been generated above). This parameter takes two possible values: - interferometer (or int) - singledish (or sd) * If graphics are on, this observe step will display the array (similar to plotants), the uv coverage, the synthesized (dirty) beam, and ephemeris information * If simulating from a component list, you should specify compwidth\", the desired bandwidth; and specify \"comp_nchan\", the desired channelization if more than one output channel is desired\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "refdate",
                    "name": "refdate",
                    "value": "2014/01/01",
                    "defaultValue": "2014/01/01",
                    "description": "Date of simulated observation Subparameter of obsmode='int|sd' Not critical unless concatting simulations Example: refdate=2014",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hourangle",
                    "name": "hourangle",
                    "value": "transit",
                    "defaultValue": "transit",
                    "description": "Hour angle of observation center. Subparameter of obsmode='int|sd' Examples: hourangle=-3:00:00\", \"5h\", or \"transit\"\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "totaltime",
                    "name": "totaltime",
                    "value": "7200s",
                    "defaultValue": "7200s",
                    "description": "Total time of observation or number of repetitions Subparameter of obsmode='int|sd' Example: totaltime='7200s' If a number without units, interpreted as the number of times to repeat the mosaic.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antennalist",
                    "name": "antennalist",
                    "value": "",
                    "defaultValue": "",
                    "description": "Text file containing antenna positions. Subparameter of obsmode='int|\"' Each row has x y z coordinates and antenna diameter with optional station name and antenna name. Header lines are required to specify: # observatory=ALMA # coordsys=UTM If the Universal Transverse Mercator projection is specified, then other keywords are required: # datum=WGS84 # zone=19 # hemisphere=S If the observatory keyword is not defined, then the COFA keyword should be, using a coordinate pair: #COFA=-67.75,-23.02 * Standard array configurations are found in your CASA data repository, * If \", simobserve will not not produce an interferometric MS * A string of the form alma;0.5arcsec\" will be parsed into a full 12m ALMA configuration.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdantlist",
                    "name": "sdantlist",
                    "value": "aca.tp.cfg",
                    "defaultValue": "aca.tp.cfg",
                    "description": "single dish antenna position file Subparameter of obsmode='sd|\"'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sdant",
                    "name": "sdant",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Index of the antenna in the list to use for total power. Subparameter of obsmode='sd|\"' Default: first antenna on the list.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "LSRK",
                    "defaultValue": "LSRK",
                    "description": "spectral frame of MS to create Subparameter of obsmode='sd|\"'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "thermalnoise",
                    "name": "thermalnoise",
                    "value": "tsys-atm",
                    "defaultValue": "tsys-atm",
                    "description": "add thermal noise. Options: tsys-atm, tsys-manual, \" This parameter accepts two settings: - tsys-atm: J. Pardo's ATM library will be used to construct an atmospheric profile for the ALMA site: altitude 5000m, ground pressure 650mbar, relhum=20%, a water layer of user_pwv at altitude of 2km, the sky brightness temperature returned by ATM, and internally tabulated receiver temperatures. - tsys-manual: instead of using the ATM model, specify the zenith  sky brightness and opacity manually.  Noise is added and then the visibility flux scale is referenced above the atmosphere. If left unset (empty string) no thermalnoise corruption is performed. In either mode, noise is calculated using an antenna spillover efficiency of 0.96, taper of 0.86, surface accuracy of 25 and 300 microns for ALMA and EVLA respectively (using the Ruze formula for surface efficiency), correlator efficiencies of 0.95 and 0.91 for ALMA and EVLA, receiver temperatures for ALMA of 17, 30, 37, 51, 65, 83,147,196,175,230 K interpolated between 35, 75,110,145,185,230,345,409,675,867 GHz, for EVLA of 500, 70,  60,  55,  100, 130, 350 K interpolated between 0.33,1.47,4.89,8.44,22.5,33.5,43.3 GHz, for SMA of 67,  116, 134, 500 K interpolated between 212.,310.,383.,660. GHz. Note: These are only approximate numbers and do not take into account performance at edges of receiver bands, neither are they guaranteed to reflect the most recent measurements.  Caveat emptor. Use the sm tool to add noise if you want more precise control, and use the ALMA exposure time calculator for sensitivity numbers in proposals.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "user_pwv",
                    "name": "user_pwv",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "Precipitable water vapor if constructing an atmospheric model (in mm) Subparameter of thermalnoise='tsys-atm'",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "t_ground",
                    "name": "t_ground",
                    "value": "270.0",
                    "defaultValue": "270.0",
                    "description": "Ground/spillover temperature in K Subparameter of thermalnoise='tsys-atm|tsys-manual'",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "t_sky",
                    "name": "t_sky",
                    "value": "260.0",
                    "defaultValue": "260.0",
                    "description": "Atmospheric temperature in K Subparameter of thermalnoise='tsys-manual'",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tau0",
                    "name": "tau0",
                    "value": "0.1",
                    "defaultValue": "0.1",
                    "description": "Zenith opacity at observing frequency Subparameter of thermalnoise='tsys-manual' https://casaguides.nrao.edu/index.php/Corrupt for more information on noise, in particular how to add a phase screen using the toolkit",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "seed",
                    "name": "seed",
                    "value": "11111",
                    "defaultValue": "11111",
                    "description": "Random number seed Subparameter of thermalnoise='tsys-atm|tsys-manual'",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "leakage",
                    "name": "leakage",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "add cross polarization corruption of this fractional magnitude (interferometer only)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "graphics",
                    "name": "graphics",
                    "value": "both",
                    "defaultValue": "both",
                    "description": "View plots on the screen, saved to file, both, or neither Options: screen|file|both|none",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Print extra information to the logger and terminal Default: False Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Overwrite files starting with $project Default: False Options: True|False",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -98,
            "text": "slsearch",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.slsearch",
                    "defaultValue": "casatasks.slsearch",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tablename",
                    "name": "tablename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input spectral line table name to search. If not specified, use the default table in the system. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Results table name. Blank means do not write the table to disk. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqrange",
                    "name": "freqrange",
                    "value": "[float(84)",
                    "defaultValue": "[float(84)",
                    "description": "Frequency range in GHz. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "species",
                    "name": "species",
                    "value": "",
                    "defaultValue": "",
                    "description": "Species to search for. ",
                    "type": "float(90)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reconly",
                    "name": "reconly",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List only NRAO recommended frequencies. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chemnames",
                    "name": "chemnames",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Chemical names to search for. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "qns",
                    "name": "qns",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Resolved quantum numbers to search for. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intensity",
                    "name": "intensity",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "CDMS/JPL intensity range. -1 -> do not use an intensity range. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smu2",
                    "name": "smu2",
                    "value": "[-1.0]",
                    "defaultValue": "[-1.0]",
                    "description": "Quantum mechanical line strength. -1 -> do not use a smu2 range. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "loga",
                    "name": "loga",
                    "value": "[-1.0]",
                    "defaultValue": "[-1.0]",
                    "description": "log(A) (Einstein coefficient) range. -1 -> do not use a loga range. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "el",
                    "name": "el",
                    "value": "[-1.0]",
                    "defaultValue": "[-1.0]",
                    "description": "Lower energy state range in Kelvin. -1 -> do not use an el range. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "eu",
                    "name": "eu",
                    "value": "[-1.0]",
                    "defaultValue": "[-1.0]",
                    "description": "Upper energy state range in Kelvin. -1 -> do not use an eu range. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rrlinclude",
                    "name": "rrlinclude",
                    "value": "[-1.0]",
                    "defaultValue": "[-1.0]",
                    "description": "Include RRLs in the result set? ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rrlonly",
                    "name": "rrlonly",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Include only RRLs in the result set? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List result set to logger (and optionally logfile)? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "List result set to this logfile (only used if verbose=True). ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "",
                    "defaultValue": "",
                    "description": "If true, append to logfile if it already exists, if false overwrite logfile it it exists. Only used if verbose=True and logfile not blank. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -99,
            "text": "smoothcal",
            "description": "Smoothing time (sec) ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.smoothcal",
                    "defaultValue": "casatasks.smoothcal",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "tablein",
                    "name": "tablein",
                    "value": "",
                    "defaultValue": "",
                    "description": "Input calibration table ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "caltable",
                    "name": "caltable",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output calibration table (overwrite tablein if unspecified) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Field name list ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smoothtype",
                    "name": "smoothtype",
                    "value": "median",
                    "defaultValue": "median",
                    "description": "Smoothing filter to use ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smoothtime",
                    "name": "smoothtime",
                    "value": "60.0",
                    "defaultValue": "60.0",
                    "description": "Smoothing time (sec) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -100,
            "text": "specfit",
            "description": "Name of output image used for standard deviation. Ignored if sigma is empty. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.specfit",
                    "defaultValue": "casatasks.specfit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axis",
                    "name": "axis",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "The profile axis. Default: use the spectral axis if one exists, axis 0 otherwise (<0). ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none.. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ngauss",
                    "name": "ngauss",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of Gaussian elements.  Default: 1. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "poly",
                    "name": "poly",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Order of polynomial element.  Default: do not fit a polynomial (<0). ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "estimates",
                    "name": "estimates",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of file containing initial estimates.  Default: No initial estimates (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpts",
                    "name": "minpts",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Minimum number of unmasked points necessary to attempt fit. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "multifit",
                    "name": "multifit",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, fit a profile along the desired axis at each pixel in the specified region. If false, average the non-fit axis pixels and do a single fit to that average profile. Default False. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "model",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of model image. Default: do not write the model image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "residual",
                    "name": "residual",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of residual image. Default: do not write the residual image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "amp",
                    "name": "amp",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of amplitude solution image. Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "amperr",
                    "name": "amperr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of amplitude solution error image. Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "center",
                    "name": "center",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of center solution image. Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "centererr",
                    "name": "centererr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of center solution error image. Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fwhm",
                    "name": "fwhm",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of fwhm solution image. Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fwhmerr",
                    "name": "fwhmerr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of fwhm solution error image. Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "integral",
                    "name": "integral",
                    "value": "",
                    "defaultValue": "",
                    "description": "Prefix of ame of integral solution image. Name of image will have gaussian component number appended.  Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "integralerr",
                    "name": "integralerr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Prefix of name of integral error solution image. Name of image will have gaussian component number appended.  Default: do not write the image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wantreturn",
                    "name": "wantreturn",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Should a record summarizing the results be returned? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logresults",
                    "name": "logresults",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Output results to logger? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pampest",
                    "name": "pampest",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Initial estimate of PCF profile (gaussian or lorentzian) amplitudes. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pcenterest",
                    "name": "pcenterest",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Initial estimate PCF profile centers, in pixels. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pfwhmest",
                    "name": "pfwhmest",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Initial estimate PCF profile FWHMs, in pixels. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pfix",
                    "name": "pfix",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "PCF profile parameters to fix during fit. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmncomps",
                    "name": "gmncomps",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Number of components in each gaussian multiplet to fit ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmampcon",
                    "name": "gmampcon",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "The amplitude ratio constraints for non-reference components to reference component in gaussian multiplets. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmcentercon",
                    "name": "gmcentercon",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "The center offset constraints (in pixels) for non-reference components to reference component in gaussian multiplets. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmfwhmcon",
                    "name": "gmfwhmcon",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "The FWHM  ratio constraints for non-reference components to reference component in gaussian multiplets. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmampest",
                    "name": "gmampest",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "Initial estimate of individual gaussian amplitudes in gaussian multiplets. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmcenterest",
                    "name": "gmcenterest",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "Initial estimate of individual gaussian centers in gaussian multiplets, in pixels. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmfwhmest",
                    "name": "gmfwhmest",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "Initial estimate of individual gaussian FWHMss in gaussian multiplets, in pixels. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gmfix",
                    "name": "gmfix",
                    "value": "",
                    "defaultValue": "",
                    "description": "Parameters of individual gaussians in gaussian multiplets to fix during fit. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "File in which to log results. Default is not to write a logfile. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Append results to logfile? Logfile must be specified. Default is to append. False means overwrite existing file if it exists. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pfunc",
                    "name": "pfunc",
                    "value": "",
                    "defaultValue": "",
                    "description": "PCF singlet functions to fit. gaussian\" or \"lorentzian\" (minimal match supported). Unspecified means all gaussians. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "goodamprange",
                    "name": "goodamprange",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "Acceptable amplitude solution range. [0.0] => all amplitude solutions are acceptable. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "goodcenterrange",
                    "name": "goodcenterrange",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "Acceptable center solution range in pixels relative to region start. [0.0] => all center solutions are acceptable. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "goodfwhmrange",
                    "name": "goodfwhmrange",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "Acceptable FWHM solution range in pixels. [0.0] => all FWHM solutions are acceptable. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sigma",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation array or image name. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outsigma",
                    "name": "outsigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output image used for standard deviation. Ignored if sigma is empty. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -101,
            "text": "specflux",
            "description": "Overwrite exisitng ouput file if it exists? ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.specflux",
                    "defaultValue": "casatasks.specflux",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "function",
                    "name": "function",
                    "value": "flux density",
                    "defaultValue": "flux density",
                    "description": "Aggregate function to use for computing per channel values. Supported values are flux density\", \"mean\", \"median\", \"sum\". Minimal match supported. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "unit",
                    "name": "unit",
                    "value": "km/s",
                    "defaultValue": "km/s",
                    "description": "Unit to use for the spectral flux calculation. Must be conformant with a typical spectral axis unit. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "major",
                    "name": "major",
                    "value": "",
                    "defaultValue": "",
                    "description": "Major axis of overriding restoring beam. If specified, must be a valid quantity. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minor",
                    "name": "minor",
                    "value": "",
                    "defaultValue": "",
                    "description": "Minor axis of overriding restoring beam. If specified, must be a valid quantity ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "File which to write details. Default is to not write to a file. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite exisitng ouput file if it exists? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -102,
            "text": "specsmooth",
            "description": "Decimation method. \" means no decimation, copy\" and \"mean\" are also supported (minimum match). \"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.specsmooth",
                    "defaultValue": "casatasks.specsmooth",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output image name. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Channels must be contiguous. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Planes specified must be contiguous. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none.. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Overwrite the output if it exists? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? Default False ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axis",
                    "name": "axis",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "The profile axis. Default: use the spectral axis if one exists, axis 0 otherwise (<0). ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "function",
                    "name": "function",
                    "value": "hanning",
                    "defaultValue": "hanning",
                    "description": "Convolution function. hanning and boxcar are supported functions. Minimum match is supported. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Width of boxcar, in pixels. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dmethod",
                    "name": "dmethod",
                    "value": "copy",
                    "defaultValue": "copy",
                    "description": "Decimation method. \" means no decimation, copy\" and \"mean\" are also supported (minimum match). \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -103,
            "text": "splattotable",
            "description": "Output table name. Must be specified. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.splattotable",
                    "defaultValue": "casatasks.splattotable",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "filenames",
                    "name": "filenames",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Files containing Splatalogue lists. The downloaded files must be in a specific format for this task to succeed. Fro details, see the splattotable task pages on CASA Docs (https://casa.nrao.edu/casadocs/)",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "table",
                    "name": "table",
                    "value": "",
                    "defaultValue": "",
                    "description": "Output table name. Must be specified. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -104,
            "text": "split",
            "description": "Let the timebin span across scan, state or both. Default: '' (separate time bins by both of the above) Options: 'scan', 'state', 'state,scan' State is equivalent to sub-scans. One scan may have several state ids. For ALMA MSs, the sub-scans are limited to about 30s duration each. In these cases, the task will automatically add state to the combine parameter. To see the number of states in an MS, use the msmd tool. See help msmd. Examples: - combine = 'scan'; can be useful when the scan number goes up with each integration as in many WSRT MSs. - combine = can', 'state']: disregard scan and state numbers when time averaging. - combine = 'state,scan'; same as above. NOTE: It is not possible to do time average with combine='scan' if the input MMS was partitioned with separationaxis='scan' or 'auto'. In this",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.split",
                    "defaultValue": "casatasks.split",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file Default: none Example: vis='ngc5921.ms'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outputvis",
                    "name": "outputvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output visibility file Default: '' (same as vis) Example: outputvis='ngc5921_out.ms' IMPORTANT: if a .flagversions file with the name of the output MS exist, this task will exit with an error. The user needs to rename or remove the existing flagbackup or choose a different output name for the MS.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepmms",
                    "name": "keepmms",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Create a Multi-MS as the output if the input is a Multi-MS. Default: True Options: True|False By default it will create a Multi-MS when the input is a Multi-MS. The output Multi-MS will have the same partition axis of the input MMS. See CASA Docs for more information on the MMS format. NOTE: It is not possible to do time average with combine='scan' if the input MMS was partitioned with separationaxis='scan' or 'auto'. In this case, the task will abort with an error.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) Default: '' (all fields) Use 'go listobs' to obtain the list id's or names. If field string is a non-negative integer, it is assumed a field index,  otherwise, it is assumed a field name. Examples: field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels Default: ''=all spectral windows and channels Examples: spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='<2';  spectral windows less than 2 (i.e. 0,1) spw='0:5~61'; spw 0, channels 5 to 61 spw='0,10,3:3~45'; spw 0,10 all channels, spw 3 - chans 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. spw = '\\*:3~64'  channels 3 through 64 for all sp id's spw = ' :3~64' will NOT work. NOTE: mstransform does not support multiple channel ranges per spectral window (';').",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range Subparameter of selectdata=True Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline Subparameter of selectdata=True Default: '' (all) If antenna string is a non-negative integer, it is assumed an antenna index, otherwise, it is assumed as an antenna name Examples: antenna='5&6'; baseline between antenna index 5 and index 6. antenna='VA05&VA06'; baseline between VLA antenna 5 and 6. antenna='5&6;7&8'; baselines with indices 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,10'; all baselines with antennas 5,6,10 index numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on correlation Default: '' ==> all Example: correlation=XX,YY\".\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range Subparameter of selectdata=True Default = '' (all) Examples: timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' (Note: if YYYY/MM/DD is missing date defaults to first day in data set.) timerange='09:14:0~09:54:0' picks 40 min on first day timerange= '25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='>10:24:00' data after this time",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select observing intent Default: '' (no selection by intent) Example: intent='*BANDPASS*'  (selects data labelled with BANDPASS intent)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "(Sub)array number range Default: '' (all)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by baseline length. Default = '' (all) Examples: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='>4klambda';uvranges greater than 4 kilo-lambda uvrange='0~1000km'; uvrange in kilometers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s) Subparameter of selectdata=True Default: '' = all Example: observation='0~2,4'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "feed",
                    "name": "feed",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on the feed NOT IMPLEMENTED YET! Default: '' = all",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "corrected",
                    "defaultValue": "corrected",
                    "description": "Which data column(s) to use for processing (case-insensitive). Default: 'corrected' Options: 'data', 'model', 'corrected', 'all','float_data', 'lag_data', 'float_data,data', 'lag_data,data' Example: datacolumn='data' NOTE: 'all' = whichever of the above that are present. If the requested column does not exist, the task will exit with an error.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepflags",
                    "name": "keepflags",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Keep *completely flagged rows* instead of dropping them. Default: True (keep completely flagged rows in the output) Options: True|False Keepflags has no effect on partially flagged rows. All of the channels and correlations of a row must be flagged for it to be droppable, and a row must be well defined to be keepable. IMPORTANT: Regardless of this parameter, flagged data is never included in channel averaging. On the other hand, partially flagged rows will always be included in time averaging. The average value of the flagged data for averages containing ONLY flagged data in the relevant output channel will be written to the output with the corresponding flag set to True, while only unflagged data is used on averages where there is some unflagged data with the flag set to False.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of channels to average to form one output channel If a list is given, each bin will apply to one spw in the selection. Default: 1 (no channel average) Options: (int)|nt] Example: chanbin=[2,3] => average 2 channels of 1st selected spectral window and 3 in the second one.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "0s",
                    "defaultValue": "0s",
                    "description": "Bin width for time averaging Default: '0s' Bin width for time averaging. When timebin is greater than 0s, the task will average data in time. Flagged data will be included in the average calculation, unless the parameter keepflags is set to False. In this case only partially flagged rows will be used in the average.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Let the timebin span across scan, state or both. Default: '' (separate time bins by both of the above) Options: 'scan', 'state', 'state,scan' State is equivalent to sub-scans. One scan may have several state ids. For ALMA MSs, the sub-scans are limited to about 30s duration each. In these cases, the task will automatically add state to the combine parameter. To see the number of states in an MS, use the msmd tool. See help msmd. Examples: - combine = 'scan'; can be useful when the scan number goes up with each integration as in many WSRT MSs. - combine = can', 'state']: disregard scan and state numbers when time averaging. - combine = 'state,scan'; same as above. NOTE: It is not possible to do time average with combine='scan' if the input MMS was partitioned with separationaxis='scan' or 'auto'. In this",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -105,
            "text": "spxfit",
            "description": "Name of output image used for standard deviation. Ignored if sigma is empty. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.spxfit",
                    "defaultValue": "casatasks.spxfit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the input image(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "box",
                    "name": "box",
                    "value": "",
                    "defaultValue": "",
                    "description": "Rectangular region to select in direction plane. Default is to use the entire direction plane. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "region",
                    "name": "region",
                    "value": "",
                    "defaultValue": "",
                    "description": "Region selection. Default is to use the full image. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chans",
                    "name": "chans",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to use. Default is to use all channels. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "",
                    "defaultValue": "",
                    "description": "Stokes planes to use. Default is to use all Stokes planes. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axis",
                    "name": "axis",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "The profile axis. Default: use the spectral axis if one exists, axis 0 otherwise (<0). ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask to use. Default is none. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpts",
                    "name": "minpts",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Minimum number of unmasked points necessary to attempt fit. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "multifit",
                    "name": "multifit",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, fit a profile along the desired axis at each pixel in the specified region. If false, average the non-fit axis pixels and do a single fit to that average profile. Default False. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spxtype",
                    "name": "spxtype",
                    "value": "plp",
                    "defaultValue": "plp",
                    "description": "Type of function to fit. plp\" = power logarithmic polynomial, \"ltp\" = logarithmic transformed polynomial. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spxest",
                    "name": "spxest",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "REQUIRED. Initial estimates as array of numerical values for the spectral index function coefficients. eg [1.5, -0.8] if fitting a plp function thought to be close to 1.5*(x/div)**(-0.8) or [0.4055, -0.8] if fitting an lpt function thought to be close to ln(1.5) - 0.8*ln(x/div). ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spxfix",
                    "name": "spxfix",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Fix the corresponding spectral index function coefficients during the fit. True means hold fixed. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "div",
                    "name": "div",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Divisor (numerical value or quantity) to use in the logarithmic terms of the plp or ltp function. 0 means calculate a useful value on the fly. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spxsol",
                    "name": "spxsol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the spectral index function coefficient solution image to write. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spxerr",
                    "name": "spxerr",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the spectral index function coefficient error image to write. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "model",
                    "name": "model",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of model image. Default: do not write the model image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "residual",
                    "name": "residual",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of residual image. Default: do not write the residual image (\"). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wantreturn",
                    "name": "wantreturn",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Should a record summarizing the results be returned? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stretch",
                    "name": "stretch",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Stretch the mask if necessary and possible? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logresults",
                    "name": "logresults",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Output results to logger? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "logfile",
                    "name": "logfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "File in which to log results. Default is not to write a logfile. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "append",
                    "name": "append",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Append results to logfile? Logfile must be specified. Default is to append. False means overwrite existing file if it exists. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sigma",
                    "name": "sigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Standard deviation array or image name(s). ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outsigma",
                    "name": "outsigma",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output image used for standard deviation. Ignored if sigma is empty. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -106,
            "text": "statwt",
            "description": "Data column to use to compute weights. Supported values are data\", \"corrected\", \"residual\", and \"residual_data\" (case insensitive, minimum match supported).\"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.statwt",
                    "defaultValue": "casatasks.statwt",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of measurement set ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Enable data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on field names or field index numbers. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on spectral windows:channels. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on intents. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on array IDs. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Selection based on observation IDs. Default is all. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan numbers. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Ignore changes in these columns (scan, field, and/or state) when aggregating samples to compute weights. The value corr\" is also supported to aggregate samples across correlations. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Length for binning in time to determine statistics. Can either be integer to be multiplied by the representative integration time, a quantity (string) in time units ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "slidetimebin",
                    "name": "slidetimebin",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use a sliding window for time binning, as opposed to time block processing? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanbin",
                    "name": "chanbin",
                    "value": "spw",
                    "defaultValue": "spw",
                    "description": "Channel bin width for computing weights. Can either be integer, in which case it is interpreted as number of channels to include in each bin, or a string spw\" or quantity with frequency units. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minsamp",
                    "name": "minsamp",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Minimum number of unflagged visibilities required for computing weights in a sample. Must be >= 2. ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "statalg",
                    "name": "statalg",
                    "value": "classic",
                    "defaultValue": "classic",
                    "description": "Statistics algorithm to use for computing variances. Supported values are chauvenet\", \"classic\", \"fit-half\", and \"hinges-fences\". Minimum match is supported, although the full string must be specified for the subparameters to appear in the inputs list. \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fence",
                    "name": "fence",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "Fence value for statalg=hinges-fences\". A negative value means use the entire data set (ie default to the \"classic\" algorithm). Ignored if statalg is not \"hinges-fences\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "center",
                    "name": "center",
                    "value": "mean",
                    "defaultValue": "mean",
                    "description": "Center to use for statalg=fit-half\". Valid choices are \"mean\", \"median\", and \"zero\". Ignored if statalg is not \"fit-half\". \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lside",
                    "name": "lside",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "For statalg=fit-half\", real data are <=; center? If false, real data are >= center. Ignored if statalg is not \"fit-half\". \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "zscore",
                    "name": "zscore",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "For statalg=chauvenet\", this is the target maximum number of standard deviations data may have to be included. If negative, use Chauvenet\\'s criterion. Ignored if statalg is not \"chauvenet\". \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxiter",
                    "name": "maxiter",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "For statalg=chauvenet\", this is the maximum number of iterations to attempt. Iterating will stop when either this limit is reached, or the zscore criterion is met. If negative, iterate until the zscore criterion is met. Ignored if statalg is not \"chauvenet\". \"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitspw",
                    "name": "fitspw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channels to include in the computation of weights. Specified as an MS select channel selection string. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "excludechans",
                    "name": "excludechans",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If True: invert the channel selection in fitspw and exclude the fitspw selection from the computation of the weights. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wtrange",
                    "name": "wtrange",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Range of acceptable weights. Data with weights outside this range will be flagged. Empty array (default) means all weights are good. ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "flagbackup",
                    "name": "flagbackup",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Back up the state of flags before the run? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "preview",
                    "name": "preview",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Preview mode. If True, no data is changed, although the amount of data that would have been flagged is reported. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "corrected",
                    "defaultValue": "corrected",
                    "description": "Data column to use to compute weights. Supported values are data\", \"corrected\", \"residual\", and \"residual_data\" (case insensitive, minimum match supported).\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -107,
            "text": "tclean",
            "description": "Run major cycles in parallel (this feature is experimental) Parallel tclean will run only if casa has already been started using mpirun. Please refer to HPC documentation for details on how to start this on your system. Example :  mpirun -n 3 -xterm 0 `which casa` Continuum Imaging : -  Data are partitioned (in time) into NProc pieces -  Gridding/iFT is done separately per partition -  Images (and weights) are gathered and then normalized - One non-parallel minor cycle is run - Model image is scattered to all processes - Major cycle is done in parallel per partition Cube Imaging : - Data and Image coordinates are partitioned (in freq) into NProc pieces - Each partition is processed independently (major and minor cycles) - All processes are synchronized at major cycle boundaries for convergence checks - At the end, cubes from all partitions are concatenated along the spectral axis Note 1 :  Iteration control for cube imaging is independent per partition. - There is currently no communication between them to synchronize information such as peak residual and cyclethreshold. Therefore, different chunks may trigger major cycles at different levels. (Proper synchronization of iteration control is work in progress.)",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.tclean",
                    "defaultValue": "casatasks.tclean",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name(s) of input visibility file(s) default: none; example: vis='ngc5921.ms' vis=gc5921a.ms','ngc5921b.ms']; multiple MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Enable data selection parameters. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "to image or mosaic.  Use field id(s) or name(s). o listobs' to obtain the list id's or names] default: ''= all fields If field string is a non-negative integer, it is assumed to be a field index otherwise, it is assumed to be a field name field='0~2'; field ids 0,1,2 field='0,4,5~7'; field ids 0,4,5,6,7 field='3C286,3C295'; field named 3C286 and 3C295 field = '3,4C\\*'; field id 3, all names starting with 4C For multiple MS input, a list of field strings can be used: field = ['0~2','0~4']; field ids 0-2 for the first MS and 0-4 for the second field = '0~2'; field ids 0-2 for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "l window/channels NOTE: channels de-selected here will contain all zeros if selected by the parameter mode subparameters. default: ''=all spectral windows and channels spw='0~2,4'; spectral windows 0,1,2,4 (all channels) spw='0:5~61'; spw 0, channels 5 to 61 spw='<2';   spectral windows less than 2 (i.e. 0,1) spw='0,10,3:3~45'; spw 0,10 all channels, spw 3, channels 3 to 45. spw='0~2:2~6'; spw 0,1,2 with channels 2 through 6 in each. For multiple MS input, a list of spw strings can be used: spw=['0','0~3']; spw ids 0 for the first MS and 0-3 for the second spw='0~3' spw ids 0-3 for all input MS spw='3:10~20;50~60' for multiple channel ranges within spw id 3 spw='3:10~20;50~60,4:0~30' for different channel ranges for spw ids 3 and 4 spw='0:0~10,1:20~30,2:1;2;3'; spw 0, channels 0-10, spw 1, channels 20-30, and spw 2, channels, 1,2 and 3 spw='1~4;6:15~48' for channels 15 through 48 for spw ids 1,2,3,4 and 6",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Range of time to select from data default: '' (all); examples, timerange = 'YYYY/MM/DD/hh:mm:ss~YYYY/MM/DD/hh:mm:ss' Note: if YYYY/MM/DD is missing date defaults to first day in data set timerange='09:14:0~09:54:0' picks 40 min on first day timerange='25:00:00~27:30:00' picks 1 hr to 3 hr 30min on NEXT day timerange='09:44:00' pick data within one integration of time timerange='> 10:24:00' data after this time For multiple MS input, a list of timerange strings can be used: timerange=['09:14:0~09:54:0','> 10:24:00'] timerange='09:14:0~09:54:0''; apply the same timerange for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default unit is meters) default: '' (all); example: uvrange='0~1000klambda'; uvrange from 0-1000 kilo-lambda uvrange='> 4klambda';uvranges greater than 4 kilo lambda For multiple MS input, a list of uvrange strings can be used: uvrange=['0~1000klambda','100~1000klamda'] uvrange='0~1000klambda'; apply 0-1000 kilo-lambda for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline default: '' (all) If antenna string is a non-negative integer, it is assumed to be an antenna index, otherwise, it is considered an antenna name. antenna='5\\&6'; baseline between antenna index 5 and index 6. antenna='VA05\\&VA06'; baseline between VLA antenna 5 and 6. antenna='5\\&6;7\\&8'; baselines 5-6 and 7-8 antenna='5'; all baselines with antenna index 5 antenna='05'; all baselines with antenna number 05 (VLA old name) antenna='5,6,9'; all baselines with antennas 5,6,9 index number For multiple MS input, a list of antenna strings can be used: antenna=['5','5\\&6']; antenna='5'; antenna index 5 for all input MSes antenna='!DV14'; use all antennas except DV14",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range default: '' (all) example: scan='1~5' For multiple MS input, a list of scan strings can be used: scan=['0~100','10~200'] scan='0~100; scan ids 0-100 for all input MSes",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Observation ID range default: '' (all) example: observation='1~5'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan Intent(s) default: '' (all) example: intent='TARGET_SOURCE' example: intent='TARGET_SOURCE1,TARGET_SOURCE2' example: intent='TARGET_POINTING\\*'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "corrected",
                    "defaultValue": "corrected",
                    "description": "Data column to image (data or observed, corrected) default:'corrected' ( If 'corrected' does not exist, it will use 'data' instead )",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Pre-name of output images example : imagename='try' Output images will be (a subset of) : try.psf              - Point spread function try.residual      - Residual image try.image         - Restored image try.model         - Model image (contains only flux components) try.sumwt        - Single pixel image containing sum-of-weights. (for natural weighting, sensitivity=1/sqrt(sumwt)) try.pb              - Primary beam model (values depend on the gridder used) Widefield projection algorithms (gridder=mosaic,awproject) will compute the following images too. try.weight        - FT of gridded weights or the un-normalized sum of PB-square (for all pointings) Here, PB = sqrt(weight) normalized to a maximum of 1.0 For multi-term wideband imaging, all relevant images above will have additional .tt0,.tt1, etc suffixes to indicate Taylor terms, plus the following extra output images. try.alpha            - spectral index try.alpha.error   - estimate of error on spectral index try.beta              - spectral curvature (if nterms \\> 2) Tip : Include a directory name in 'imagename' for all output images to be sent there instead of the current working directory : imagename='mydir/try' Tip : Restarting an imaging run without changing 'imagename' implies continuation from the existing model image on disk. - If 'startmodel' was initially specified it needs to be set to \" for the restart run (or tclean will exit with an error message). - By default, the residual image and psf will be recomputed but if no changes were made to relevant parameters between the runs, set calcres=False, calcpsf=False to resume directly from the minor cycle without the (unnecessary) first major cycle. To automatically change 'imagename' with a numerical increment, set restart=False (see tclean docs for 'restart'). Note : All imaging runs will by default produce restored images. For a niter=0 run, this will be redundant and can optionally be turned off via the 'restoration=T/F' parameter.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "[100]",
                    "defaultValue": "[100]",
                    "description": "Number of pixels example: imsize = [350,250] imsize = 500 is equivalent to [500,500] To take proper advantage of internal optimized FFT routines, the number of pixels must be even and factorizable by 2,3,5 only. To find the nearest optimal imsize to that desired by the user, please use the following tool method: from casatools import synthesisutils su = synthesisutils() su.getOptimumSize(345) Output :  360",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Cell size example: cell=['0.5arcsec,'0.5arcsec'] or cell=['1arcmin', '1arcmin'] cell = '1arcsec' is equivalent to ['1arcsec','1arcsec']",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "Phase center of the image (string or field id); if the phasecenter is the name known major solar system object ('MERCURY', 'VENUS', 'MARS', 'JUPITER', 'SATURN', 'URANUS', 'NEPTUNE', 'PLUTO', 'SUN', 'MOON') or is an ephemerides table then that source is tracked and the background sources get smeared. There is a special case, when phasecenter='TRACKFIELD', which will use the ephemerides or polynomial phasecenter in the FIELD table of the MS's as the source center to track. example: phasecenter=6 phasecenter='J2000 19h30m00 -40d00m00' phasecenter='J2000 292.5deg  -40.0deg' phasecenter='J2000 5.105rad  -0.698rad' phasecenter='ICRS 13:05:27.2780 -049.28.04.458' phasecenter='myComet_ephem.tab' phasecenter='MOON' phasecenter='TRACKFIELD'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "I",
                    "defaultValue": "I",
                    "description": "Stokes Planes to make default='I'; example: stokes='IQUV'; Options: 'I','Q','U','V','IV','QU','IQ','UV','IQUV','RR','LL','XX','YY','RRLL','XXYY','pseudoI' Note : Due to current internal code constraints, if any correlation pair is flagged, by default, no data for that row in the MS will be used. So, in an MS with XX,YY, if only YY is flagged, neither a Stokes I image nor an XX image can be made from those data points. In such a situation, please split out only the unflagged correlation into a separate MS. Note : The 'pseudoI' option is a partial solution, allowing Stokes I imaging when either of the parallel-hand correlations are unflagged. The remaining constraints shall be removed (where logical) in a future release.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "projection",
                    "name": "projection",
                    "value": "SIN",
                    "defaultValue": "SIN",
                    "description": "Coordinate projection Examples : SIN,   NCP A list of supported (but untested) projections can be found here : http://casa.nrao.edu/active/docs/doxygen/html/classcasa_1_1Projection.html#a3d5f9ec787e4eabdce57ab5edaf7c0cd",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "startmodel",
                    "name": "startmodel",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of starting model image The contents of the supplied starting model image will be copied to the imagename.model before the run begins. example : startmodel = 'singledish.im' For deconvolver='mtmfs', one image per Taylor term must be provided. example : startmodel = ry.model.tt0', 'try.model.tt1'] startmodel = ry.model.tt0']  will use a starting model only for the zeroth order term. startmodel = ry.model.tt1']  will use a starting model only for the first order term. This starting model can be of a different image shape and size from what is currently being imaged. If so, an image regrid is first triggered to resample the input image onto the target coordinate system. A common usage is to set this parameter equal to a single dish image Negative components in the model image will be included as is. ote : If an error occurs during image resampling/regridding, please try using task imregrid to resample the starting model image onto a CASA image with the target shape and coordinate system before supplying it via startmodel ]",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "specmode",
                    "name": "specmode",
                    "value": "mfs",
                    "defaultValue": "mfs",
                    "description": "Spectral definition mode (mfs,cube,cubedata, cubesource) mode='mfs' : Continuum imaging with only one output image channel. (mode='cont' can also be used here) mode='cube' : Spectral line imaging with one or more channels Parameters start, width,and nchan define the spectral coordinate system and can be specified either in terms of channel numbers, frequency or velocity in whatever spectral frame is specified in 'outframe'. All internal and output images are made with outframe as the base spectral frame. However imaging code internally uses the fixed spectral frame, LSRK for automatic internal software Doppler tracking so that a spectral line observed over an extended time range will line up appropriately. Therefore the output images have additional spectral frame conversion layer in LSRK on the top the base frame. (Note : Even if the input parameters are specified in a frame other than LSRK, the viewer still displays spectral axis in LSRK by default because of the conversion frame layer mentioned above. The viewer can be used to relabel the spectral axis in any desired frame - via the spectral reference option under axis label properties in the data display options window.) mode='cubedata' : Spectral line imaging with one or more channels There is no internal software Doppler tracking so a spectral line observed over an extended time range may be smeared out in frequency. There is strictly no valid spectral frame with which to label the output images, but they will list the frame defined in the MS. mode='cubesource': Spectral line imaging while tracking moving source (near field or solar system objects). The velocity of the source is accounted and the frequency reported is in the source frame. As there is not SOURCE frame defined, the frame reported will be REST (as it may not be in the rest frame emission region may be moving w.r.t the systemic velocity frame)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reffreq",
                    "name": "reffreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference frequency of the output image coordinate system Example :  reffreq='1.5GHz'    as a string with units. By default, it is calculated as the middle of the selected frequency range. For deconvolver='mtmfs' the Taylor expansion is also done about this specified reference frequency.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Number of channels in the output image For default (=-1), the number of channels will be automatically determined based on data selected by 'spw' with 'start' and 'width'. It is often easiest to leave nchan at the default value. example: nchan=100",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "",
                    "defaultValue": "",
                    "description": "First channel (e.g. start=3,start=\\'1.1GHz\\',start=\\'15343km/s\\') of output cube images specified by data channel number (integer), velocity (string with a unit),  or frequency (string with a unit). Default:''; The first channel is automatically determined based on the 'spw' channel selection and 'width'. channels in 'spw'. Since the integer number in 'start' represents the data channel number, when the channel number is used along with the spectral window id selection in 'spw', 'start' specified as an integer should be carefully set otherwise it may result in the blank image channels if the 'start' channel (i.e. absolute channel number) is outside of the channel range specified in 'spw'. In such a case, 'start' can be left as a default (='') to ensure matching with the data spectral channel selection. For specmode='cube', when velocity or frequency is used it is interpreted with the frame defined in outframe. he parameters of the desired output cube can be estimated by using the 'transform' functionality of 'plotms'] examples: start='5.0km/s'; 1st channel, 5.0km/s in outframe start='22.3GHz'; 1st channel, 22.3GHz in outframe",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "",
                    "defaultValue": "",
                    "description": "Channel width (e.g. width=2,width=\\'0.1MHz\\',width=\\'10km/s\\') of output cube images specified by data channel number (integer), velocity (string with a unit), or or frequency (string with a unit). Default:''; data channel width The sign of width defines the direction of the channels to be incremented. For width specified in velocity or frequency with '-' in front  gives image channels in decreasing velocity or frequency, respectively. For specmode='cube', when velocity or frequency is used it is interpreted with the reference frame defined in outframe. examples: width='2.0km/s'; results in channels with increasing velocity width='-2.0km/s';  results in channels with decreasing velocity width='40kHz'; results in channels with increasing frequency width=-2; results in channels averaged of 2 data channels incremented from high to low channel numbers",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "LSRK",
                    "defaultValue": "LSRK",
                    "description": "Spectral reference frame in which to interpret \\'start\\' and \\'width\\' Options: '','LSRK','LSRD','BARY','GEO','TOPO','GALACTO','LGROUP','CMB' example: outframe='bary' for Barycentric frame REST -- Rest frequency LSRD -- Local Standard of Rest (J2000) -- as the dynamical definition (IAU, [9,12,7] km/s in galactic coordinates) LSRK -- LSR as a kinematical (radio) definition -- 20.0 km/s in direction ra,dec = [270,+30] deg (B1900.0) BARY -- Barycentric (J2000) GEO --- Geocentric TOPO -- Topocentric GALACTO -- Galacto centric (with rotation of 220 km/s in direction l,b = [90,0] deg. LGROUP -- Local group velocity -- 308km/s towards l,b = [105,-7] deg (F. Ghigo) CMB -- CMB velocity -- 369.5km/s towards l,b = [264.4, 48.4] deg (F. Ghigo) DEFAULT = LSRK",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "Velocity type (radio, z, ratio, beta, gamma, optical) For start and/or width specified in velocity, specifies the velocity definition Options: 'radio','optical','z','beta','gamma','optical' NOTE: the viewer always defaults to displaying the 'radio' frame, but that can be changed in the position tracking pull down. The different types (with F = f/f0, the frequency ratio), are: Z = (-1 + 1/F) RATIO = (F) \\* RADIO = (1 - F) OPTICAL == Z BETA = ((1 - F2)/(1 + F2)) GAMMA = ((1 + F2)/2F) \\* RELATIVISTIC == BETA (== v/c) DEFAULT == RADIO Note that the ones with an '\\*' have no real interpretation (although the calculation will proceed) if given as a velocity.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of rest frequencies or a rest frequency in a string. Specify rest frequency to use for output image. \\*Currently it uses the first rest frequency in the list for translation of velocities. The list will be stored in the output images. Default: ; look for the rest frequency stored in the MS, if not available, use center frequency of the selected channels examples: restfreq=['1.42GHz'] restfreq='1.42GHz'",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interpolation",
                    "name": "interpolation",
                    "value": "linear",
                    "defaultValue": "linear",
                    "description": "Spectral interpolation (nearest,linear,cubic) Interpolation rules to use when binning data channels onto image channels and evaluating visibility values at the centers of image channels. Note : 'linear' and 'cubic' interpolation requires data points on both sides of each image frequency. Errors  are therefore possible at edge  channels, or near flagged data channels. When image channel width is much larger than the data channel width there is nothing much to be gained using linear or cubic thus not worth the extra computation involved.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "perchanweightdensity",
                    "name": "perchanweightdensity",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "When calculating weight density for Briggs style weighting in a cube, this parameter determines whether to calculate the weight density for each channel independently (the default, True) or a common weight density for all of the selected data. This parameter has no meaning for continuum (specmode='mfs') imaging or for natural and radial weighting schemes. For cube imaging perchanweightdensity=True is a recommended option that provides more uniform sensitivity per channel for cubes, but with generally larger psfs than the perchanweightdensity=False (prior behavior) option. When using Briggs style weight with perchanweightdensity=True, the imaging weight density calculations use only the weights of data that contribute specifically to that channel. On the other hand, when perchanweightdensity=False, the imaging weight density calculations sum all of the weights from all of the data channels selected whose (u,v) falls in a given uv cell on the weight density grid. Since the aggregated weights, in any given uv cell, will change depending on the number of channels included when imaging, the psf calculated for a given frequency channel will also necessarily change, resulting in variability in the psf for a given frequency channel when perchanweightdensity=False. In general, perchanweightdensity=False results in smaller psfs for the same value of robustness compared to perchanweightdensity=True, but the rms noise as a function of channel varies and increases toward the edge channels; perchanweightdensity=True provides more uniform sensitivity per channel for cubes. This may make it harder to find estimates of continuum when perchanweightdensity=False. If you intend to image a large cube in many smaller subcubes and subsequently concatenate, it is advisable to use perchanweightdensity=True to avoid surprisingly varying sensitivity and psfs across the concatenated cube.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gridder",
                    "name": "gridder",
                    "value": "standard",
                    "defaultValue": "standard",
                    "description": "Gridding options (standard, wproject, widefield, mosaic, awproject) The following options choose different gridding convolution functions for the process of convolutional resampling of the measured visibilities onto a regular uv-grid prior to an inverse FFT. Model prediction (degridding) also uses these same functions. Several wide-field effects can be accounted for via careful choices of convolution functions. Gridding (degridding) runtime will rise in proportion to the support size of these convolution functions (in uv-pixels). standard : Prolate Spheroid with 7x7 uv pixel support size his mode can also be invoked using 'ft' or 'gridft' ] wproject : W-Projection algorithm to correct for the widefield non-coplanar baseline effect. ornwell et.al 2008] wprojplanes is the number of distinct w-values at which to compute and use different gridding convolution functions (see help for wprojplanes). Convolution function support size can range from 5x5 to few 100 x few 100. his mode can also be invoked using 'wprojectft' ] widefield : Facetted imaging with or without W-Projection per facet. A set of facets x facets subregions of the specified image are gridded separately using their respective phase centers (to minimize max W). Deconvolution is done on the joint full size image, using a PSF from the first subregion. wprojplanes=1 : standard prolate spheroid gridder per facet. wprojplanes > 1 : W-Projection gridder per facet. nfacets=1, wprojplanes > 1 : Pure W-Projection and no facetting nfacets=1, wprojplanes=1 : Same as standard,ft,gridft A combination of facetting and W-Projection is relevant only for very large fields of view. (In our current version of tclean, this combination runs only with parallel=False. mosaic : A-Projection with azimuthally symmetric beams without sidelobes, beam rotation or squint correction. Gridding convolution functions per visibility are computed from FTs of PB models per antenna. This gridder can be run on single fields as well as mosaics. VLA : PB polynomial fit model (Napier and Rots, 1982) EVLA : PB polynomial fit model (Perley, 2015) ALMA : Airy disks for a 10.7m dish (for 12m dishes) and 6.25m dish (for 7m dishes) each with 0.75m blockages (Hunter/Brogan 2011). Joint mosaic imaging supports heterogeneous arrays for ALMA. Typical gridding convolution function support sizes are between 7 and 50 depending on the desired accuracy (given by the uv cell size or image field of view). his mode can also be invoked using 'mosaicft' or 'ftmosaic' ] awproject : A-Projection with azimuthally asymmetric beams and including beam rotation, squint correction, conjugate frequency beams and W-projection. hatnagar et.al, 2008] Gridding convolution functions are computed from aperture illumination models per antenna and optionally combined with W-Projection kernels and a prolate spheroid. This gridder can be run on single fields as well as mosaics. VLA : Uses ray traced model (VLA and EVLA) including feed leg and subreflector shadows, off-axis feed location (for beam squint and other polarization effects), and a Gaussian fit for the feed beams (Ref: Brisken 2009) ALMA : Similar ray-traced model as above (but the correctness of its polarization properties remains un-verified). Typical gridding convolution function support sizes are between 7 and 50 depending on the desired accuracy (given by the uv cell size or image field of view). When combined with W-Projection they can be significantly larger. his mode can also be invoked using 'awprojectft' ] imagemosaic : (untested implementation) Grid and iFT each pointing separately and combine the images as a linear mosaic (weighted by a PB model) in the image domain before a joint minor cycle. VLA/ALMA PB models are same as for gridder='mosaicft' ------ Notes on PB models : (1) Several different sources of PB models are used in the modes listed above. This is partly for reasons of algorithmic flexibility and partly due to the current  lack of a common beam model repository or consensus on what beam models are most appropriate. (2) For ALMA and gridder='mosaic', ray-traced (TICRA) beams are also available via the vpmanager tool. For example, call the following before the tclean run. vp.setpbimage(telescope=ALMA\", compleximage='",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "facets",
                    "name": "facets",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of facets on a side A set of (facets x facets) subregions of the specified image are gridded separately using their respective phase centers (to minimize max W). Deconvolution is done on the joint full size image, using a PSF from the first subregion/facet. In our current version of tclean, facets>1 may be used only with parallel=False.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "psfphasecenter",
                    "name": "psfphasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "For mosaic use psf centered on this optional direction. You may need to use this if for example the mosaic does not have any pointing in the center of the image. Another reason; as the psf is approximate for a mosaic, this may help to deconvolve a non central bright source well and quickly. example: psfphasecenter=6 #center psf on field 6 psfphasecenter='J2000 19h30m00 -40d00m00' psfphasecenter='J2000 292.5deg -40.0deg' psfphasecenter='J2000 5.105rad -0.698rad' psfphasecenter='ICRS 13:05:27.2780 -049.28.04.458'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wprojplanes",
                    "name": "wprojplanes",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of distinct w-values at which to compute and use different gridding convolution functions for W-Projection An appropriate value of wprojplanes depends on the presence/absence of a bright source far from the phase center, the desired dynamic range of an image in the presence of a bright far out source, the maximum w-value in the measurements, and the desired trade off between accuracy and computing cost. As a (rough) guide, VLA L-Band D-config may require a value of 128 for a source 30arcmin away from the phase center. A-config may require 1024 or more. To converge to an appropriate value, try starting with 128 and then increasing it if artifacts persist. W-term artifacts (for the VLA) typically look like arc-shaped smears in a synthesis image or a shift in source position between images made at different times. These artifacts are more pronounced the further the source is from the phase center. There is no harm in simply always choosing a large value (say, 1024) but there will be a significant performance cost to doing so, especially for gridder='awproject' where it is combined with A-Projection. wprojplanes=-1 is an option for gridder='widefield' or 'wproject' in which the number of planes is automatically computed.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vptable",
                    "name": "vptable",
                    "value": "",
                    "defaultValue": "",
                    "description": "vpmanager vptable=\" : Choose default beams for different telescopes ALMA : Airy disks EVLA : old VLA models. Other primary beam models can be chosen via the vpmanager tool. Step 1 :  Set up the vpmanager tool and save its state in a table vp.setpbpoly(telescope='EVLA', coeff=[1.0, -1.529e-3, 8.69e-7, -1.88e-10]) vp.saveastable('myvp.tab') Step 2 : Supply the name of that table in tclean. tclean(....., vptable='myvp.tab',....) Please see the documentation for the vpmanager for more details on how to choose different beam models. Work is in progress to update the defaults for EVLA and ALMA. Note : AWProjection currently does not use this mechanism to choose beam models. It instead uses ray-traced beams computed from parameterized aperture illumination functions, which are not available via the vpmanager. So, gridder='awproject' does not allow the user to set this parameter.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mosweight",
                    "name": "mosweight",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "When doing Brigg's style weighting (including uniform) to perform the weight density calculation for each field indepedently if True. If False the weight density is calculated from the average uv distribution of all the fields. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "aterm",
                    "name": "aterm",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Use aperture illumination functions during gridding This parameter turns on the A-term of the AW-Projection gridder. Gridding convolution functions are constructed from aperture illumination function models of each antenna.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "psterm",
                    "name": "psterm",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Include the Prolate Spheroidal (PS) funtion as the anti-aliasing operator in the gridding convolution functions used for gridding. Setting this parameter to true is necessary when aterm is set to false.  It can be set to false when aterm is set to true, though with this setting effects of aliasing may be there in the image, particularly near the edges. When set to true, the .pb images will contain the fourier transform of the of the PS funtion. The table below enumarates the functional effects of the psterm, aterm and wprojplanes settings. PB referes to the Primary Beam and FT() refers to the Fourier transform operation. Operation       aterm   psterm  wprojplanes  Contents of the .pb image ---------------------------------------------------------------------- AW-Projection    True    True      >1                FT(PS) x PB False                       PB A-Projection     True    True       1                FT(PS) x PB False                       PB W-Projection     False   True      >1                FT(PS) Standard         False   True       1                FT(PS)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "wbawp",
                    "name": "wbawp",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Use frequency dependent A-terms Scale aperture illumination functions appropriately with frequency when gridding and combining data from multiple channels.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "conjbeams",
                    "name": "conjbeams",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Use conjugate frequency for wideband A-terms While gridding data from one frequency channel, choose a convolution function from a 'conjugate' frequency such that the resulting baseline primary beam is approximately constant across frequency. For a system in which the primary beam scales with frequency, this step will eliminate instrumental spectral structure from the measured data and leave only the sky spectrum for the minor cycle to model and reconstruct hatnagar et al., ApJ, 2013]. As a rough guideline for when this is relevant, a source at the half power point of the PB at the center frequency will see an artificial spectral index of -1.4 due to the frequency dependence of the PB ault and Wieringa, 1994]. If left uncorrected during gridding, this spectral structure must be modeled in the minor cycle (using the mtmfs algorithm) to avoid dynamic range limits (of a few hundred for a 2:1 bandwidth). This works for specmode='mfs' and its value is ignored for cubes",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cfcache",
                    "name": "cfcache",
                    "value": "",
                    "defaultValue": "",
                    "description": "Convolution function cache directory name Name of a directory in which to store gridding convolution functions. This cache is filled at the beginning of an imaging run. This step can be time consuming but the cache can be reused across multiple imaging runs that use the same image parameters (cell size, image size , spectral data selections, wprojplanes, wbawp, psterm, aterm).  The effect of the wbawp, psterm and aterm settings is frozen-in in the cfcache. Using an existing cfcache made with a different setting of these parameters will not reflect the current settings. In a parallel execution, the construction of the cfcache is also parallelized and the time to compute scales close to linearly with the number of compute cores used.   With the re-computation of Convolution Functions (CF) due to PA rotation turned-off (the computepastep parameter), the total number of in the cfcache can be computed as o. of wprojplanes x No. of selected spectral windows x 4] By default, cfcache = imagename + '.cf'",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usepointing",
                    "name": "usepointing",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "The usepointing flag informs the gridder that it should utilize the pointing table to use the correct direction in which the antenna is pointing with respect to the pointing phasecenter.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "computepastep",
                    "name": "computepastep",
                    "value": "360.0",
                    "defaultValue": "360.0",
                    "description": "Parallactic angle interval after the AIFs are recomputed (deg) This parameter controls the accuracy of the aperture illumination function used with AProjection for alt-az mount dishes where the AIF rotates on the sky as the synthesis image is built up.  Once the PA in the data changes by the given interval, AIFs are re-computed at the new PA. A value of 360.0 deg (the default) implies no re-computation due to PA rotation. AIFs are computed for the PA value of the first valid data received and used for all of the data.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "rotatepastep",
                    "name": "rotatepastep",
                    "value": "360.0",
                    "defaultValue": "360.0",
                    "description": "Parallactic angle interval after which the nearest AIF is rotated (deg) Instead of recomputing the AIF for every timestep's parallactic angle, the nearest existing AIF is used and rotated after the PA changed by rotatepastep value. A value of 360.0 deg (the default) disables rotation of the AIF. For example, computepastep=360.0 and rotatepastep=5.0 will compute the AIFs at only the starting parallactic angle and all other timesteps will use a rotated version of that AIF at the nearest 5.0 degree point.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pointingoffsetsigdev",
                    "name": "pointingoffsetsigdev",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Corrections for heterogenous and time-dependent pointing offsets via AWProjection are controlled by this parameter. It is a vector of 2 ints or doubles each of which is interpreted in units of arcsec. Based on the first threshold, a clustering algorithm is applied to entries from the POINTING subtable of the MS to determine how distinct antenna groups for which the pointing offset must be computed separately.  The second number controls how much a pointing change across time can be ignored and after which an antenna rebinning is required. Note : The default value of this parameter is , due a programmatic constraint. If run with this value, it will internally pick [600,600] and exercise the option of using large tolerances (10arcmin) on both axes. Please choose a setting explicitly for runs that need to use this parameter. Note : This option is available only for gridder='awproject' and usepointing=True and and has been validated primarily with VLASS on-the-fly mosaic data where POINTING subtables have been modified after the data are recorded. Examples of parameter usage : [100.0,100.0] : Pointing offsets of 100 arcsec or less are considered small enough to be ignored.  Using large values for both indicates a homogeneous array. [10.0, 100.0] : Based on entries in the POINTING subtable, antennas are grouped into clusters based on a 10arcsec bin size. All antennas in a bin are given a pointing offset calculated as the average of the offsets of all antennas in the bin. On the time axis, offset changes upto 100 arcsec will be ignored. [10.0,10.0] : Calculate separate pointing offsets for each antenna group (with a 10 arcsec bin size). As a function of time, recalculate the antenna binning if the POINTING table entries change by more than 10 arcsec w.r.to the previously computed binning. [1.0, 1.0] :  Tight tolerances will imply a fully heterogenous situation where each antenna gets its own pointing offset. Also, time-dependent offset changes greater than 1 arcsec will trigger recomputes of the phase gradients. This is the most general situation and is also the most expensive option as it constructs and uses separate phase gradients for all baselines and timesteps. For VLASS 1.1 data with two kinds of pointing offsets, the recommended setting is [ 30.0, 30.0 ]. For VLASS 1.2 data with only the time-dependent pointing offsets, the recommended setting is [ 300.0, 30.0 ] to turn off the antenna grouping but to retain the time dependent corrections required from one timestep to the next.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pblimit",
                    "name": "pblimit",
                    "value": "0.2",
                    "defaultValue": "0.2",
                    "description": "PB gain level at which to cut off normalizations Divisions by .pb during normalizations have a cut off at a .pb gain level given by pblimit. Outside this limit, image values are set to zero. Additionally, by default, an internal T/F mask is applied to the .pb, .image and .residual images to mask out (T) all invalid pixels outside the pblimit area. Note : This internal T/F mask cannot be used as a deconvolution mask. To do so, please follow the steps listed above in the Notes for the 'gridder' parameter. Note : To prevent the internal T/F mask from appearing in anything other than the .pb and .image.pbcor images, 'pblimit' can be set to a negative number. The absolute value will still be used as a valid 'pblimit' for normalization purposes. So, for example, pick pblimit=-0.1 (and not pblimit=-1). A tclean restart using existing output images on disk that already have this T/F mask in the .residual and .image but only pblimit set to a negative value, will remove this mask after the next major cycle. Note : An existing internal T/F mask may be removed from an image as follows (without needing to re-run tclean itself). ia.open('test.image'); ia.maskhandler(op='set', name=''); ia.done()",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "normtype",
                    "name": "normtype",
                    "value": "flatnoise",
                    "defaultValue": "flatnoise",
                    "description": "Normalization type (flatnoise, flatsky, pbsquare) Gridded (and FT'd) images represent the PB-weighted sky image. Qualitatively it can be approximated as two instances of the PB applied to the sky image (one naturally present in the data and one introduced during gridding via the convolution functions). xxx.weight : Weight image approximately equal to sum ( square ( pb ) ) xxx.pb : Primary beam calculated as  sqrt ( xxx.weight ) normtype='flatnoise' : Divide the raw image by sqrt(.weight) so that the input to the minor cycle represents the product of the sky and PB. The noise is 'flat' across the region covered by each PB. normtype='flatsky' : Divide the raw image by .weight so that the input to the minor cycle represents only the sky. The noise is higher in the outer regions of the primary beam where the sensitivity is low. normtype='pbsquare' : No normalization after gridding and FFT. The minor cycle sees the sky times pb square",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "deconvolver",
                    "name": "deconvolver",
                    "value": "hogbom",
                    "defaultValue": "hogbom",
                    "description": "Name of minor cycle algorithm (hogbom,clark,multiscale,mtmfs,mem,clarkstokes,asp) Each of the following algorithms operate on residual images and psfs from the gridder and produce output model and restored images. Minor cycles stop and a major cycle is triggered when cyclethreshold or cycleniter are reached. For all methods, components are picked from the entire extent of the image or (if specified) within a mask. hogbom : An adapted version of Hogbom Clean ogbom, 1974] - Find the location of the peak residual - Add this delta function component to the model image - Subtract a scaled and shifted PSF of the same size as the image from regions of the residual image where the two overlap. - Repeat clark : An adapted version of Clark Clean lark, 1980] - Find the location of max(I^2+Q^2+U^2+V^2) - Add delta functions to each stokes plane of the model image - Subtract a scaled and shifted PSF within a small patch size from regions of the residual image where the two overlap. - After several iterations trigger a Clark major cycle to subtract components from the visibility domain, but without de-gridding. - Repeat ( Note : 'clark' maps to imagermode='' in the old clean task. 'clark_exp' is another implementation that maps to imagermode='mosaic' or 'csclean' in the old clean task but the behavior is not identical. For now, please use deconvolver='hogbom' if you encounter problems. ) clarkstokes : Clark Clean operating separately per Stokes plane (Note : 'clarkstokes_exp' is an alternate version. See above.) multiscale : MultiScale Clean ornwell, 2008] - Smooth the residual image to multiple scale sizes - Find the location and scale at which the peak occurs - Add this multiscale component to the model image - Subtract a scaled,smoothed,shifted PSF (within a small patch size per scale) from all residual images - Repeat from step 2 mtmfs : Multi-term (Multi Scale) Multi-Frequency Synthesis au and Cornwell, 2011] - Smooth each Taylor residual image to multiple scale sizes - Solve a NTxNT system of equations per scale size to compute Taylor coefficients for components at all locations - Compute gradient chi-square and pick the Taylor coefficients and scale size at the location with maximum reduction in chi-square - Add multi-scale components to each Taylor-coefficient model image - Subtract scaled,smoothed,shifted PSF (within a small patch size per scale) from all smoothed Taylor residual images - Repeat from step 2 mem : Maximum Entropy Method ornwell and Evans, 1985] - Iteratively solve for values at all individual pixels via the MEM method. It minimizes an objective function of chi-square plus entropy (here, a measure of difference between the current model and a flat prior model). (Note : This MEM implementation is not very robust. Improvements will be made in the future.) asp : Adaptive Scale Pixel algorithm hatnagar and Cornwell, 2004] - Define a set of initial scales defined as 0, W, 2W 4W and 8W where W is a 2D Gaussian fitting width to the PSF - Smooth the residual image by a Gaussian beam at initial scales - Search for the global peak (F) among these smoothed residual images - form an active Aspen set: amplitude(F), amplitude location(x,y) - Optimize the Aspen set by minimizing the objective function RI-Aspen*PSF, where RI is the residual image and * is the convulition operation. - Compute the model image and update the residual image - Repeat from step 2 (Note : This is an experimental version of the ASP algorithm.)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scales",
                    "name": "scales",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of scale sizes (in pixels) for multi-scale and mtmfs algorithms. -->  scales=[0,6,20] This set of scale sizes should represent the sizes (diameters in units of number of pixels) of dominant features in the image being reconstructed. The smallest scale size is recommended to be 0 (point source), the second the size of the synthesized beam and the third 3-5 times the synthesized beam, etc. For example, if the synthesized beam is 10 FWHM and cell=2\",try scales = [0,5,15]. For numerical stability, the largest scale must be smaller than the image (or mask) size and smaller than or comparable to the scale corresponding to the lowest measured spatial frequency (as a scale size much larger than what the instrument is sensitive to is unconstrained by the data making it harder to recovery from errors during the minor cycle).\"",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nterms",
                    "name": "nterms",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Number of Taylor coefficients in the spectral model - nterms=1 : Assume flat spectrum source - nterms=2 : Spectrum is a straight line with a slope - nterms=N : A polynomial of order N-1 From a Taylor expansion of the expression of a power law, the spectral index is derived as alpha = taylorcoeff_1 / taylorcoeff_0 Spectral curvature is similarly derived when possible. The optimal number of Taylor terms depends on the available signal to noise ratio, bandwidth ratio, and spectral shape of the source as seen by the telescope (sky spectrum x PB spectrum). nterms=2 is a good starting point for wideband EVLA imaging and the lower frequency bands of ALMA (when fractional bandwidth is greater than 10%) and if there is at least one bright source for which a dynamic range of greater than few 100 is desired. Spectral artifacts for the VLA often look like spokes radiating out from a bright source (i.e. in the image made with standard mfs imaging). If increasing the number of terms does not eliminate these artifacts, check the data for inadequate bandpass calibration. If the source is away from the pointing center, consider including wide-field corrections too. (Note : In addition to output Taylor coefficient images .tt0,.tt1,etc images of spectral index (.alpha), an estimate of error on spectral index (.alpha.error) and spectral curvature (.beta, if nterms is greater than 2) are produced. - These alpha, alpha.error and beta images contain internal T/F masks based on a threshold computed as peakresidual/10. Additional masking based on .alpha/.alpha.error may be desirable. - .alpha.error is a purely empirical estimate derived from the propagation of error during the division of two noisy numbers (alpha = xx.tt1/xx.tt0) where the 'error' on tt1 and tt0 are simply the values picked from the corresponding residual images. The absolute value of the error is not always accurate and it is best to interpret the errors across the image only in a relative sense.)",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smallscalebias",
                    "name": "smallscalebias",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "A numerical control to bias the scales when using multi-scale or mtmfs algorithms. The peak from each scale's smoothed residual is multiplied by ( 1 - smallscalebias \\* scale/maxscale ) to increase or decrease the amplitude relative to other scales, before the scale with the largest peak is chosen. Smallscalebias can be varied between -1.0 and 1.0. A score of 0.0 gives all scales equal weight (default). A score larger than 0.0 will bias the solution towards smaller scales. A score smaller than 0.0 will bias the solution towards larger scales. The effect of smallscalebias is more pronounced when using multi-scale relative to mtmfs.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fusedthreshold",
                    "name": "fusedthreshold",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "ring Hogbom Clean (number in units of Jy) fusedthreshold = 0.0001  : 0.1 mJy This is a subparameter of the Asp Clean deconvolver. When peak residual is lower than the threshold, Asp Clean is switched to Hogbom Clean\" (i.e. only use the 0 scale for cleaning) for the following number of iterations until it switches back to Asp Clean. NumberIterationsInHogbom = 50 + 2 * (exp(0.05 * NthHogbom) - 1) , where NthHogbom is the number of times Hogbom Clean has been triggered. When the Asp Clean detects it is approaching convergence, it uses only the 0 scale for the following number of iterations for better computational efficiency. NumberIterationsInHogbom = 500 + 2 * (exp(0.05 * NthHogbom) - 1)\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "largestscale",
                    "name": "largestscale",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "xels) allowed for the initial guess for the Asp Clean deconvolver. largestscale = 100 The default initial scale sizes used by Asp Clean is , 2w, 4w, 8w], where `w` is the PSF width. The default `largestscale` is -1 which indicates users accept these initial scales. If `largestscale` is set, the initial scales would be , ... up to the `largestscale`]. This is only an initial guess, and actual fitted scale sizes may evolve from these initial values. It is recommended not to set `largestscale` unless Asp Clean picks a large scale that has no constraints from the data (the UV hole issue).",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restoration",
                    "name": "restoration",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "e. Construct a restored image : imagename.image by convolving the model image with a clean beam and adding the residual image to the result. If a restoringbeam is specified, the residual image is also smoothed to that target resolution before adding it in. If a .model does not exist, it will make an empty one and create the restored image from the residuals ( with additional smoothing if needed ). With algorithm='mtmfs', this will construct Taylor coefficient maps from the residuals and compute .alpha and .alpha.error.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restoringbeam",
                    "name": "restoringbeam",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "ize to use. - restoringbeam='' or A Gaussian fitted to the PSF main lobe (separately per image plane). - restoringbeam='10.0arcsec' Use a circular Gaussian of this width for all planes - restoringbeam=['8.0arcsec','10.0arcsec','45deg'] Use this elliptical Gaussian for all planes - restoringbeam='common' Automatically estimate a common beam shape/size appropriate for all planes. Note : For any restoring beam different from the native resolution the model image is convolved with the beam and added to residuals that have been convolved to the same target resolution.",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbcor",
                    "name": "pbcor",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "the output restored image A new image with extension .image.pbcor will be created from the evaluation of   .image / .pb  for all pixels above the specified pblimit. Note : Stand-alone PB-correction can be triggered by re-running tclean with the appropriate imagename and with niter=0, calcpsf=False, calcres=False, pbcor=True, vptable='vp.tab' ( where vp.tab is the name of the vpmanager file. See the inline help for the 'vptable' parameter ) Note : Multi-term PB correction that includes a correction for the spectral index of the PB has not been enabled for the 4.7 release. Please use the widebandpbcor task instead. ( Wideband PB corrections are required when the amplitude of the brightest source is known accurately enough to be sensitive to the difference in the PB gain between the upper and lower end of the band at its location. As a guideline, the artificial spectral index due to the PB is -1.4 at the 0.5 gain level and less than -0.2 at the 0.9 gain level at the middle frequency )",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outlierfile",
                    "name": "outlierfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of outlier-field image definitions A text file containing sets of parameter=value pairs, one set per outlier field. Example :   outlierfile='outs.txt' Contents of outs.txt : imagename=tst1 nchan=1 imsize=[80,80] cell=[8.0arcsec,8.0arcsec] phasecenter=J2000 19:58:40.895 +40.55.58.543 mask=circle40pix,40pix],10pix] imagename=tst2 nchan=1 imsize=[100,100] cell=[8.0arcsec,8.0arcsec] phasecenter=J2000 19:58:40.895 +40.56.00.000 mask=circle60pix,60pix],20pix] The following parameters are currently allowed to be different between the main field and the outlier fields (i.e. they will be recognized if found in the outlier text file). If a parameter is not listed, the value is picked from what is defined in the main task input. imagename, imsize, cell, phasecenter, startmodel, mask specmode, nchan, start, width, nterms, reffreq, gridder, deconvolver, wprojplanes Note : 'specmode' is an option, so combinations of mfs and cube for different image fields, for example, are supported. 'deconvolver' and 'gridder' are also options that allow different imaging or deconvolution algorithm per image field. For example, multiscale with wprojection and 16 w-term planes on the main field and mtmfs with nterms=3 and wprojection with 64 planes on a bright outlier source for which the frequency dependence of the primary beam produces a strong effect that must be modeled.   The traditional alternative to this approach is to first image the outlier, subtract it out of the data (uvsub) and then image the main field. Note : If you encounter a use-case where some other parameter needs to be allowed in the outlier file (and it is logical to do so), please send us feedback. The above is an initial list.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "weighting",
                    "name": "weighting",
                    "value": "natural",
                    "defaultValue": "natural",
                    "description": "Weighting scheme (natural,uniform,briggs,superuniform,radial, briggsabs, briggsbwtaper) During gridding of the dirty or residual image, each visibility value is multiplied by a weight before it is accumulated on the uv-grid. The PSF's uv-grid is generated by gridding only the weights (weightgrid). weighting='natural' : Gridding weights are identical to the data weights from the MS. For visibilities with similar data weights, the weightgrid will follow the sample density pattern on the uv-plane. This weighting scheme provides the maximum imaging sensitivity at the expense of a possibly fat PSF with high sidelobes. It is most appropriate for detection experiments where sensitivity is most important. weighting='uniform' : Gridding weights per visibility data point are the original data weights divided by the total weight of all data points that map to the same uv grid cell : ' data_weight / total_wt_per_cell '. The weightgrid is as close to flat as possible resulting in a PSF with a narrow main lobe and suppressed sidelobes. However, since heavily sampled areas of the uv-plane get down-weighted, the imaging sensitivity is not as high as with natural weighting. It is most appropriate for imaging experiments where a well behaved PSF can help the reconstruction. weighting='briggs' :  Gridding weights per visibility data point are given by 'data_weight / ( A \\* total_wt_per_cell + B ) ' where A and B vary according to the 'robust' parameter. robust = -2.0 maps to A=1,B=0 or uniform weighting. robust = +2.0 maps to natural weighting. (robust=0.5 is equivalent to robust=0.0 in AIPS IMAGR.) Robust/Briggs weighting generates a PSF that can vary smoothly between 'natural' and 'uniform' and allow customized trade-offs between PSF shape and imaging sensitivity. weighting='briggsabs' : Experimental option. Same as Briggs except the formula is different A= robust\\*robust and B is dependent on the noise per visibility estimated. Giving noise='0Jy' is a not a reasonable option. In this mode (or formula)  robust values from -2.0 to 0.0 only make sense (2.0 and -2.0 will get the same weighting) weighting='superuniform' : This is similar to uniform weighting except that the total_wt_per_cell is replaced by the total_wt_within_NxN_cells around the uv cell of interest.  ( N = subparameter 'npixels' ) This method tends to give a PSF with inner sidelobes that are suppressed as in uniform weighting but with far-out sidelobes closer to natural weighting. The peak sensitivity is also closer to natural weighting. weighting='radial' : Gridding weights are given by ' data_weight \\* uvdistance ' This method approximately minimizes rms sidelobes for an east-west synthesis array. weighting='briggsbwtaper' : A modified version of Briggs weighting for cubes where an inverse uv taper, which is proportional to the fractional bandwidth of the entire cube, is applied per channel. The objective is to modify cube (perchanweightdensity = True) imaging weights to have a similar density to that of the continuum imaging weights. This is currently an experimental weighting scheme being developed for ALMA. For more details on weighting please see Chapter3 of Dan Briggs' thesis (http://www.aoc.nrao.edu/dissertations/dbriggs)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "robust",
                    "name": "robust",
                    "value": "0.5",
                    "defaultValue": "0.5",
                    "description": "Robustness parameter for Briggs weighting. robust = -2.0 maps to uniform weighting. robust = +2.0 maps to natural weighting. (robust=0.5 is equivalent to robust=0.0 in AIPS IMAGR.)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "noise",
                    "name": "noise",
                    "value": "1.0Jy",
                    "defaultValue": "1.0Jy",
                    "description": "noise parameter for briggs abs mode weighting ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "npixels",
                    "name": "npixels",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Number of pixels to determine uv-cell size for super-uniform weighting (0 defaults to -/+ 3 pixels) npixels -- uv-box used for weight calculation a box going from -npixel/2 to +npixel/2 on each side around a point is used to calculate weight density. npixels=2 goes from -1 to +1 and covers 3 pixels on a side. npixels=0 implies a single pixel, which does not make sense for superuniform weighting. Therefore, if npixels=0 it will be forced to 6 (or a box of -3pixels to +3pixels) to cover 7 pixels on a side.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvtaper",
                    "name": "uvtaper",
                    "value": "['']",
                    "defaultValue": "['']",
                    "description": "uv-taper on outer baselines in uv-plane Apply a Gaussian taper in addition to the weighting scheme specified via the 'weighting' parameter. Higher spatial frequencies are weighted down relative to lower spatial frequencies to suppress artifacts arising from poorly sampled areas of the uv-plane. It is equivalent to smoothing the PSF obtained by other weighting schemes and can be specified either as a Gaussian in uv-space (eg. units of lambda) or as a Gaussian in the image domain (eg. angular units like arcsec). uvtaper = maj, bmin, bpa] NOTE: the on-sky FWHM in arcsec is roughly  the uv taper/200 (klambda). default: uvtaper=; no Gaussian taper applied example: uvtaper=['5klambda']  circular taper FWHM=5 kilo-lambda uvtaper=['5klambda','3klambda','45.0deg'] uvtaper=['10arcsec'] on-sky FWHM 10 arcseconds uvtaper=['300.0'] default units are lambda in aperture plane",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Maximum number of iterations A stopping criterion based on total iteration count. Currently the parameter type is defined as an integer therefore the integer value larger than 2147483647 will not be set properly as it causes an overflow. Iterations are typically defined as the selecting one flux component and partially subtracting it out from the residual image. niter=0 : Do only the initial major cycle (make dirty image, psf, pb, etc) niter larger than zero : Run major and minor cycles. Note : Global stopping criteria vs major-cycle triggers In addition to global stopping criteria, the following rules are used to determine when to terminate a set of minor cycle iterations and trigger major cycles erived from Cotton-Schwab Clean, 1984] 'cycleniter' : controls the maximum number of iterations per image plane before triggering a major cycle. 'cyclethreshold' : Automatically computed threshold related to the max sidelobe level of the PSF and peak residual. Divergence, detected as an increase of 10% in peak residual from the minimum so far (during minor cycle iterations) The first criterion to be satisfied takes precedence. Note :  Iteration counts for cubes or multi-field images : For images with multiple planes (or image fields) on which the deconvolver operates in sequence, iterations are counted across all planes (or image fields). The iteration count is compared with 'niter' only after all channels/planes/fields have completed their minor cycles and exited either due to 'cycleniter' or 'cyclethreshold'. Therefore, the actual number of iterations reported in the logger can sometimes be larger than the user specified value in 'niter'. For example, with niter=100, cycleniter=20,nchan=10,threshold=0, a total of 200 iterations will be done in the first set of minor cycles before the total is compared with niter=100 and it exits. Note : Additional global stopping criteria include - no change in peak residual across two major cycles - a 50% or more increase in peak residual across one major cycle",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gain",
                    "name": "gain",
                    "value": "0.1",
                    "defaultValue": "0.1",
                    "description": "Loop gain Fraction of the source flux to subtract out of the residual image for the CLEAN algorithm and its variants. A low value (0.2 or less) is recommended when the sky brightness distribution is not well represented by the basis functions used by the chosen deconvolution algorithm. A higher value can be tried when there is a good match between the true sky brightness structure and the basis function shapes.  For example, for extended emission, multiscale clean with an appropriate set of scale sizes will tolerate a higher loop gain than Clark clean (for example).",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "threshold",
                    "name": "threshold",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Stopping threshold (number in units of Jy, or string) A global stopping threshold that the peak residual (within clean mask) across all image planes is compared to. threshold = 0.005  : 5mJy threshold = '5.0mJy' Note : A 'cyclethreshold' is internally computed and used as a major cycle trigger. It is related what fraction of the PSF can be reliably used during minor cycle updates of the residual image. By default the minor cycle iterations terminate once the peak residual reaches the first sidelobe level of the brightest source. 'cyclethreshold' is computed as follows using the settings in parameters 'cyclefactor','minpsffraction','maxpsffraction','threshold' : psf_fraction = max_psf_sidelobe_level \\* 'cyclefactor' psf_fraction = max(psf_fraction, 'minpsffraction'); psf_fraction = min(psf_fraction, 'maxpsffraction'); cyclethreshold = peak_residual \\* psf_fraction cyclethreshold = max( cyclethreshold, 'threshold' ) If nsigma is set (>0.0), the N-sigma threshold is calculated (see the description under nsigma), then cyclethreshold is further modified as, cyclethreshold = max( cyclethreshold, nsgima_threshold ) 'cyclethreshold' is made visible and editable only in the interactive GUI when tclean is run with interactive=True.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nsigma",
                    "name": "nsigma",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Multiplicative factor for rms-based threshold stopping N-sigma threshold is calculated as nsigma \\* rms value per image plane determined from a robust statistics. For nsigma > 0.0, in a minor cycle, a maximum of the two values, the N-sigma threshold and cyclethreshold, is used to trigger a major cycle (see also the descreption under 'threshold'). Set nsigma=0.0 to preserve the previous tclean behavior without this feature. The top level parameter, fastnoise is relevant for the rms noise calculation which is used to determine the threshold. The parameter 'nsigma' may be an int, float, or a double.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cycleniter",
                    "name": "cycleniter",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Maximum number of minor-cycle iterations (per plane) before triggering a major cycle For example, for a single plane image, if niter=100 and cycleniter=20, there will be 5 major cycles after the initial one (assuming there is no threshold based stopping criterion). At each major cycle boundary, if the number of iterations left over (to reach niter) is less than cycleniter, it is set to the difference. Note : cycleniter applies per image plane, even if cycleniter x nplanes gives a total number of iterations greater than 'niter'. This is to preserve consistency across image planes within one set of minor cycle iterations.",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cyclefactor",
                    "name": "cyclefactor",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Scaling on PSF sidelobe level to compute the minor-cycle stopping threshold. Please refer to the Note under the documentation for 'threshold' that discussed the calculation of 'cyclethreshold' cyclefactor=1.0 results in a cyclethreshold at the first sidelobe level of the brightest source in the residual image before the minor cycle starts. cyclefactor=0.5 allows the minor cycle to go deeper. cyclefactor=2.0 triggers a major cycle sooner.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpsffraction",
                    "name": "minpsffraction",
                    "value": "0.05",
                    "defaultValue": "0.05",
                    "description": "PSF fraction that marks the max depth of cleaning in the minor cycle Please refer to the Note under the documentation for 'threshold' that discussed the calculation of 'cyclethreshold' For example, minpsffraction=0.5 will stop cleaning at half the height of the peak residual and trigger a major cycle earlier.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxpsffraction",
                    "name": "maxpsffraction",
                    "value": "0.8",
                    "defaultValue": "0.8",
                    "description": "PSF fraction that marks the minimum depth of cleaning in the minor cycle Please refer to the Note under the documentation for 'threshold' that discussed the calculation of 'cyclethreshold' For example, maxpsffraction=0.8 will ensure that at least the top 20 percent of the source will be subtracted out in the minor cycle even if the first PSF sidelobe is at the 0.9 level (an extreme example), or if the cyclefactor is set too high for anything to get cleaned.",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "interactive",
                    "name": "interactive",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Modify masks and parameters at runtime interactive=True will trigger an interactive GUI at every major cycle boundary (after the major cycle and before the minor cycle). Options for runtime parameter modification are : Interactive clean mask : Draw a 1/0 mask (appears as a contour) by hand. If a mask is supplied at the task interface or if automasking is invoked, the current mask is displayed in the GUI and is available for manual editing. Note : If a mask contour is not visible, please check the cursor display at the bottom of GUI to see which parts of the mask image have ones and zeros. If the entire mask=1 no contours will be visible. Operation buttons :  -- Stop execution now (restore current model and exit) -- Continue on until global stopping criteria are reached without stopping for any more interaction -- Continue with minor cycles and return for interaction after the next major cycle. Iteration control : -- max cycleniter :  Trigger for the next major cycle The display begins with in( cycleniter, niter - itercount ) ] and can be edited by hand. -- iterations left :  The display begins with iter-itercount ] and can be edited to increase or decrease the total allowed niter. -- threshold : Edit global stopping threshold -- cyclethreshold : The display begins with the automatically computed value (see Note in help for 'threshold'), and can be edited by hand. All edits will be reflected in the log messages that appear once minor cycles begin. or scripting purposes, replacing True/False with 1/0 will get tclean to return an imaging summary dictionary to python. More info at casadocs > Synthesis Imaging > Returned Dictionary. ]",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "usemask",
                    "name": "usemask",
                    "value": "user",
                    "defaultValue": "user",
                    "description": "Type of mask(s) to be used for deconvolution user: (default) mask image(s) or user specified region file(s) or string CRTF expression(s) subparameters: mask, pbmask pb: primary beam mask subparameter: pbmask Example: usemask=pb\", pbmask=0.2 Construct a mask at the 0.2 pb gain level. (Currently, this option will work only with gridders that produce .pb (i.e. mosaic and awproject) or if an externally produced .pb image exists on disk) auto-multithresh : auto-masking by multiple thresholds for deconvolution subparameters : sidelobethreshold, noisethreshold, lownoisethreshold, negativethrehsold,  smoothfactor, minbeamfrac, cutthreshold, pbmask, growiterations, dogrowprune, minpercentchange, verbose Additional top level parameter relevant to auto-multithresh: fastnoise if pbmask is >0.0, the region outside the specified pb gain level is excluded from image statistics in determination of the threshold. Note: By default the intermediate mask generated by automask at each deconvolution cycle is over-written in the next cycle but one can save them by setting the environment variable, SAVE_ALL_AUTOMASKS=\"true\". (e.g. in the CASA prompt, os.environAVE_ALL_AUTOMASKS']=\"true\" ) The saved CASA mask image name will be imagename.mask.autothresh#, where # is the iteration cycle number.\"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mask",
                    "name": "mask",
                    "value": "",
                    "defaultValue": "",
                    "description": "Mask (a list of image name(s) or region file(s) or region string(s) The name of a CASA image or region file or region string that specifies a 1/0 mask to be used for deconvolution. Only locations with value 1 will be considered for the centers of flux components in the minor cycle. If regions specified fall completely outside of the image, tclean will throw an error. Manual mask options/examples : mask='xxx.mask'  : Use this CASA image named xxx.mask and containing ones and zeros as the mask. If the mask is only different in spatial coordinates from what is being made it will be resampled to the target coordinate system before being used. The mask has to have the same shape in velocity and Stokes planes as the output image. Exceptions are single velocity and/or single Stokes plane masks. They will be expanded to cover all velocity and/or Stokes planes of the output cube. ote : If an error occurs during image resampling or if the expected mask does not appear, please try using tasks 'imregrid' or 'makemask' to resample the mask image onto a CASA image with the target shape and coordinates and supply it via the 'mask' parameter. ] mask='xxx.crtf' : A text file with region strings and the following on the first line ( #CRTFv0 CASA Region Text Format version 0 ) This is the format of a file created via the viewer's region tool when saved in CASA region file format. mask='circle40pix,40pix],10pix]'  : A CASA region string. mask=xx.mask','xxx.crtf', 'circle40pix,40pix],10pix]']  : a list of masks Note : Mask images for deconvolution must contain 1 or 0 in each pixel. Such a mask is different from an internal T/F mask that can be held within each CASA image. These two types of masks are not automatically interchangeable, so please use the makemask task to copy between them if you need to construct a 1/0 based mask from a T/F one. Note : Work is in progress to generate more flexible masking options and enable more controls.",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbmask",
                    "name": "pbmask",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Sub-parameter for usemask='auto-multithresh': primary beam mask Examples : pbmask=0.0 (default, no pb mask) pbmask=0.2 (construct a mask at the 0.2 pb gain level)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sidelobethreshold",
                    "name": "sidelobethreshold",
                    "value": "3.0",
                    "defaultValue": "3.0",
                    "description": "Sub-parameter for auto-multithresh\":  mask threshold based on sidelobe levels:  sidelobethreshold \\* max_sidelobe_level \\* peak residual \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "noisethreshold",
                    "name": "noisethreshold",
                    "value": "5.0",
                    "defaultValue": "5.0",
                    "description": "Sub-parameter for auto-multithresh\":  mask threshold based on the noise level: noisethreshold \\* rms + location (=median) The rms is calculated from MAD with rms = 1.4826\\*MAD.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "lownoisethreshold",
                    "name": "lownoisethreshold",
                    "value": "1.5",
                    "defaultValue": "1.5",
                    "description": "Sub-parameter for auto-multithresh\":  mask threshold to grow previously masked regions via binary dilation:   lownoisethreshold \\* rms in residual image + location (=median) The rms is calculated from MAD with rms = 1.4826\\*MAD.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "negativethreshold",
                    "name": "negativethreshold",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Sub-parameter for auto-multithresh\": mask threshold  for negative features: -1.0* negativethreshold \\* rms + location(=median) The rms is calculated from MAD with rms = 1.4826\\*MAD.\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "smoothfactor",
                    "name": "smoothfactor",
                    "value": "1.0",
                    "defaultValue": "1.0",
                    "description": "Sub-parameter for auto-multithresh\":  smoothing factor in a unit of the beam \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minbeamfrac",
                    "name": "minbeamfrac",
                    "value": "0.3",
                    "defaultValue": "0.3",
                    "description": "Sub-parameter for auto-multithresh\":  minimum beam fraction in size to prune masks smaller than mimbeamfrac \\* beam <=0.0 : No pruning\"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cutthreshold",
                    "name": "cutthreshold",
                    "value": "0.01",
                    "defaultValue": "0.01",
                    "description": "Sub-parameter for auto-multithresh\": threshold to cut the smoothed mask to create a final mask: cutthreshold \\* peak of the smoothed mask \"",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "growiterations",
                    "name": "growiterations",
                    "value": "75",
                    "defaultValue": "75",
                    "description": "Sub-parameter for auto-multithresh\": Maximum number of iterations to perform using binary dilation for growing the mask \"",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dogrowprune",
                    "name": "dogrowprune",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Experimental sub-parameter for auto-multithresh\": Do pruning on the grow mask \"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minpercentchange",
                    "name": "minpercentchange",
                    "value": "-1.0",
                    "defaultValue": "-1.0",
                    "description": "If the change in the mask size in a particular channel is less than minpercentchange, stop masking that channel in subsequent cycles. This check is only applied when noise based threshold is used and when the previous clean major cycle had a cyclethreshold value equal to the clean threshold. Values equal to -1.0 (or any value less than 0.0) will turn off this check (the default). Automask will still stop masking if the current channel mask is an empty mask and the noise threshold was used to determine the mask. ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "verbose",
                    "name": "verbose",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "he summary of automasking at the end of each automasking process is printed in the logger.  Following information per channel will be listed in the summary. chan: channel number masking?: F - stop updating automask for the subsequent iteration cycles RMS: robust rms noise peak: peak in residual image thresh_type: type of threshold used (noise or sidelobe) thresh_value: the value of threshold used N_reg: number of the automask regions N_pruned: number of the automask regions removed by pruning N_grow: number of the grow mask regions N_grow_pruned: number of the grow mask regions removed by pruning N_neg_pix: number of pixels for negative mask regions Note that for a large cube, extra logging may slow down the process.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fastnoise",
                    "name": "fastnoise",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Only relevant when automask (user='multi-autothresh') and/or n-sigma stopping threshold (nsigma>0.0) are/is used. If it is set to True,  a simpler but faster noise calucation is used. In this case, the threshold values are determined based on classic statistics (using all unmasked pixels for the calculations). If it is set to False,  the new noise calculation method is used based on pre-existing mask. Case 1: no exiting mask Calculate image statistics using Chauvenet algorithm Case 2: there is an existing mask Calculate image statistics by classical method on the region outside the mask and inside the primary beam mask. In all cases above RMS noise is calculated from MAD.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restart",
                    "name": "restart",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "images (and start from an existing model image) or automatically increment the image name and make a new image set. True : Re-use existing images. If imagename.model exists the subsequent run will start from this model (i.e. predicting it using current gridder settings and starting from the residual image).  Care must be taken when combining this option with startmodel. Currently, only one or the other can be used. startmodel='', imagename.model exists : - Start from imagename.model startmodel='xxx', imagename.model does not exist : - Start from startmodel startmodel='xxx', imagename.model exists : - Exit with an error message requesting the user to pick only one model.  This situation can arise when doing one run with startmodel='xxx' to produce an output imagename.model that includes the content of startmodel, and wanting to restart a second run to continue deconvolution. Startmodel should be set to '' before continuing. If any change in the shape or coordinate system of the image is desired during the restart, please change the image name and use the startmodel (and mask) parameter(s) so that the old model (and mask) can be regridded to the new coordinate system before starting. False : A convenience feature to increment imagename with '_1', '_2', etc as suffixes so that all runs of tclean are fresh starts (without having to change the imagename parameter or delete images). This mode will search the current directory for all existing imagename extensions, pick the maximum, and adds 1. For imagename='try' it will make try.psf, try_2.psf, try_3.psf, etc. This also works if you specify a directory name in the path : imagename='outdir/try'.  If './outdir' does not exist, it will create it. Then it will search for existing filenames inside that directory. If outlier fields are specified, the incrementing happens for each of them (since each has its own 'imagename').  The counters are synchronized across imagefields, to make it easier to match up sets of output images.  It adds 1 to the 'max id' from all outlier names on disk.  So, if you do two runs with only the main field (imagename='try'), and in the third run you add an outlier with imagename='outtry', you will get the following image names for the third run :  'try_3' and 'outtry_3' even though 'outry' and 'outtry_2' have not been used.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "savemodel",
                    "name": "savemodel",
                    "value": "none",
                    "defaultValue": "none",
                    "description": "Options to save model visibilities (none, virtual, modelcolumn) Often, model visibilities must be created and saved in the MS to be later used for self-calibration (or to just plot and view them). none : Do not save any model visibilities in the MS. The MS is opened in readonly mode. Model visibilities can be predicted in a separate step by restarting tclean with niter=0,savemodel=virtual or modelcolumn and not changing any image names so that it finds the .model on disk (or by changing imagename and setting startmodel to the original imagename). virtual : In the last major cycle, save the image model and state of the gridder used during imaging within the SOURCE subtable of the MS. Images required for de-gridding will also be stored internally. All future references to model visibilities will activate the (de)gridder to compute them on-the-fly.  This mode is useful when the dataset is large enough that an additional model data column on disk may be too much extra disk I/O, when the gridder is simple enough that on-the-fly recomputing of the model visibilities is quicker than disk I/O. For e.g. that gridder='awproject' does not support virtual model. modelcolumn : In the last major cycle, save predicted model visibilities in the MODEL_DATA column of the MS. This mode is useful when the de-gridding cost to produce the model visibilities is higher than the I/O required to read the model visibilities from disk. This mode is currently required for gridder='awproject'. This mode is also required for the ability to later pull out model visibilities from the MS into a python array for custom processing. Note 1 : The imagename.model  image on disk will always be constructed if the minor cycle runs. This savemodel parameter applies only to model visibilities created by de-gridding the model image. Note 2 :  It is possible for an MS to have both a virtual model as well as a model_data column, but under normal operation, the last used mode will get triggered.  Use the delmod task to clear out existing models from an MS if confusion arises. Note 3:    when parallel=True, use savemodel='none'; Other options are not yet ready for use in parallel. If model visibilities need to be saved (virtual or modelcolumn): please run tclean in serial mode with niter=0; after the parallel run",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calcres",
                    "name": "calcres",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Calculate initial residual image This parameter controls what the first major cycle does. calcres=False with niter greater than 0 will assume that a .residual image already exists  and that the minor cycle can begin without recomputing it. calcres=False with niter=0 implies that only the PSF will be made and no data will be gridded. calcres=True requires that calcpsf=True or that the .psf and .sumwt images already exist on disk (for normalization purposes). Usage example : For large runs (or a pipeline scripts) it may be useful to first run tclean with niter=0 to create an initial .residual to look at and perhaps make a custom mask for. Imaging can be resumed without recomputing it.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "calcpsf",
                    "name": "calcpsf",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Calculate PSF This parameter controls what the first major cycle does. calcpsf=False will assume that a .psf image already exists and that the minor cycle can begin without recomputing it.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "psfcutoff",
                    "name": "psfcutoff",
                    "value": "0.35",
                    "defaultValue": "0.35",
                    "description": "When the .psf image is created a 2 dimensional Gaussian is fit to the main lobe of the PSF. Which pixels in the PSF are fitted is determined by psfcutoff. The default value of psfcutoff is 0.35 and can varied from 0.01 to 0.99. Fitting algorithm: - A region of 41 x 41 pixels around the peak of the PSF is compared against the psfcutoff. Sidelobes are ignored by radially searching from the PSF peak. - Calculate the bottom left corner (blc) and top right corner (trc) from the points. Expand blc and trc with a number of pixels (5). - Create a new sub-matrix from blc and trc. - Interpolate matrix to a target number of points (3001) using CUBIC spline. - All the non-sidelobe points, in the interpolated matrix, that are above the psfcutoff are used to fit a Gaussian. A Levenberg-Marquardt algorithm is used. - If the fitting fails the algorithm is repeated with the psfcutoff decreased (psfcutoff=psfcutoff/1.5). A message in the log will apear if the fitting fails along with the new value of psfcutoff. This will be done up to 50 times if fitting fails. This Gaussian beam is defined by a major axis, minor axis, and position angle. During the restoration process, this Gaussian beam is used as the Clean beam. Varying psfcutoff might be useful for producing a better fit for highly non-Gaussian PSFs, however, the resulting fits should be carefully checked. This parameter should rarely be changed. (This is not the support size for clark clean.)",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "parallel",
                    "name": "parallel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Run major cycles in parallel (this feature is experimental) Parallel tclean will run only if casa has already been started using mpirun. Please refer to HPC documentation for details on how to start this on your system. Example :  mpirun -n 3 -xterm 0 `which casa` Continuum Imaging : -  Data are partitioned (in time) into NProc pieces -  Gridding/iFT is done separately per partition -  Images (and weights) are gathered and then normalized - One non-parallel minor cycle is run - Model image is scattered to all processes - Major cycle is done in parallel per partition Cube Imaging : - Data and Image coordinates are partitioned (in freq) into NProc pieces - Each partition is processed independently (major and minor cycles) - All processes are synchronized at major cycle boundaries for convergence checks - At the end, cubes from all partitions are concatenated along the spectral axis Note 1 :  Iteration control for cube imaging is independent per partition. - There is currently no communication between them to synchronize information such as peak residual and cyclethreshold. Therefore, different chunks may trigger major cycles at different levels. (Proper synchronization of iteration control is work in progress.)",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -108,
            "text": "testconcat",
            "description": "Copy all rows of the POINTING table.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.testconcat",
                    "defaultValue": "casatasks.testconcat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "Name(s) of input visibility files to be test-concatenated ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "testconcatvis",
                    "name": "testconcatvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of output MS containing the merged subtables ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqtol",
                    "name": "freqtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Frequency shift tolerance for considering data as the same spwid ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dirtol",
                    "name": "dirtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Direction shift tolerance for considering data as the same field ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "copypointing",
                    "name": "copypointing",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Copy all rows of the POINTING table.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -109,
            "text": "tsdimaging",
            "description": "Clip minimum and maximum value from each pixel. Note the benefit of clipping is lost when the number of integrations contributing to each gridded pixel is small, or where the incidence of spurious datapoints is approximately or greater than the number of beams (in area) encompassed by expected image. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.tsdimaging",
                    "defaultValue": "casatasks.tsdimaging",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "infiles",
                    "name": "infiles",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "a list of names of input SD Measurementsets (only MS is allowed for this task) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "prefix of output images (.image, .weight, .sumwt, .psf) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "overwrite",
                    "name": "overwrite",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "overwrite the output file if already exists rue, False] ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by field IDs and names, e.g. \\'3C2*\\' (\\'\\'=all) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by IF IDs (spectral windows), e.g. \\'3,5,7\\' (\\'\\'=all) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by antenna names or IDs, e.g, \\'PM03\\' (\\'\\' = all antennas) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by scan numbers, e.g. \\'21~23\\' (\\'\\'=all) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "OBSERVE_TARGET#ON_SOURCE",
                    "defaultValue": "OBSERVE_TARGET#ON_SOURCE",
                    "description": "select data by observational intent, e.g. \\'*ON_SOURCE*\\' (\\'\\'=all) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "select data by range of time, e.g. 20:15:00~20:16:00 (\\'\\'=all) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "channel",
                    "defaultValue": "channel",
                    "description": "spectral gridding type ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nchan",
                    "name": "nchan",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "number of channels (planes) in output image (-1=all) ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "start",
                    "name": "start",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "start of output spectral dimension, e.g. \\'0\\', \\'110GHz\\', \\'-20km/s\\' ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "width",
                    "name": "width",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "width of output spectral channels ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "veltype",
                    "name": "veltype",
                    "value": "radio",
                    "defaultValue": "radio",
                    "description": "velocity definition ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "specmode",
                    "name": "specmode",
                    "value": "cube",
                    "defaultValue": "cube",
                    "description": "Spectral definition mode (cube, cubedata, cubesource) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outframe",
                    "name": "outframe",
                    "value": "",
                    "defaultValue": "",
                    "description": "velocity frame of output image (''=current frame or LSRK for multiple-MS inputs) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gridfunction",
                    "name": "gridfunction",
                    "value": "BOX",
                    "defaultValue": "BOX",
                    "description": "gridding function for imaging (see description in help) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "convsupport",
                    "name": "convsupport",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "convolution support for gridding ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "truncate",
                    "name": "truncate",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "truncation radius for gridding ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "gwidth",
                    "name": "gwidth",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "HWHM for gaussian ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "jwidth",
                    "name": "jwidth",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "c-parameter for jinc function ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imsize",
                    "name": "imsize",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "x and y image size in pixels, e.g., [64,64]. Single value: same for both spatial axes ( = number of pixels to cover whole pointings in MSes) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "cell",
                    "name": "cell",
                    "value": "",
                    "defaultValue": "",
                    "description": "x and y cell size, (e.g., '8arcsec\\',\\'8arcsec\\']. default unit arcmin. ('' = 1/3 of FWHM of primary beam) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "phasecenter",
                    "name": "phasecenter",
                    "value": "",
                    "defaultValue": "",
                    "description": "image center direction: position or field index or ephemeris source info, e.g., \\'J2000 17:30:15.0 -25.30.00.0\\', \\'MARS\\'. (\\'\\' = the center of pointing directions in MSes) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "projection",
                    "name": "projection",
                    "value": "SIN",
                    "defaultValue": "SIN",
                    "description": "map projection type ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pointingcolumn",
                    "name": "pointingcolumn",
                    "value": "direction",
                    "defaultValue": "direction",
                    "description": "pointing data column to use ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "restfreq",
                    "name": "restfreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "rest frequency to assign to image, e.g., \\'114.5GHz\\'. When the default value \\'\\' is used, the task currently internally uses REST_FREQUENCY of SOURCE table or mean frequency of given spectral window as a default value. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "stokes",
                    "name": "stokes",
                    "value": "I",
                    "defaultValue": "I",
                    "description": "stokes parameters or polarization types to image, e.g. \\'I\\', \\'XX\\' ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "minweight",
                    "name": "minweight",
                    "value": "0.1",
                    "defaultValue": "0.1",
                    "description": "Minimum weight ratio to the median of weight used in weight correction and weight beased masking ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "brightnessunit",
                    "name": "brightnessunit",
                    "value": "",
                    "defaultValue": "",
                    "description": "Overwrite the brightness unit in image (\\'\\' = respect the unit in MS) 'K\\' or \\'Jy/beam\\'] ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "clipminmax",
                    "name": "clipminmax",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Clip minimum and maximum value from each pixel. Note the benefit of clipping is lost when the number of integrations contributing to each gridded pixel is small, or where the incidence of spurious datapoints is approximately or greater than the number of beams (in area) encompassed by expected image. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -110,
            "text": "uvcontsub",
            "description": "Create vis + .cont\" to hold the continuum estimate.\"",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.uvcontsub",
                    "defaultValue": "casatasks.uvcontsub",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input MS.  Output goes to vis + .contsub\" (will be overwritten if already exists) \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field(s) using id(s) or name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitspw",
                    "name": "fitspw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral window:channel selection for fitting the continuum ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "excludechans",
                    "name": "excludechans",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "exclude Spectral window:channel selection in fitspw for fitting ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data axes to combine for the continuum estimation (none, or spw and/or scan) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "solint",
                    "name": "solint",
                    "value": "int",
                    "defaultValue": "int",
                    "description": "Continuum fit timescale (int recommended!) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitorder",
                    "name": "fitorder",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Polynomial order for the fits ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral window selection for output ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "want_cont",
                    "name": "want_cont",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Create vis + .cont\" to hold the continuum estimate.\"",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -111,
            "text": "uvcontsub3",
            "description": "Select by observation ID(s)",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.uvcontsub3",
                    "defaultValue": "casatasks.uvcontsub3",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input MS.  Output goes to vis + .contsub\" \"",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitspw",
                    "name": "fitspw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral window:channel selection for fitting the continuum ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "combine",
                    "name": "combine",
                    "value": "",
                    "defaultValue": "",
                    "description": "Data axes to combine for the continuum estimation (none ('') or spw) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "fitorder",
                    "name": "fitorder",
                    "value": "0",
                    "defaultValue": "0",
                    "description": "Polynomial order for the fits ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field(s) using id(s) or name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Spectral window selection for output ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan numbers ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan intents ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select correlations ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select by observation ID(s)",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -112,
            "text": "uvmodelfit",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.uvmodelfit",
                    "defaultValue": "casatasks.uvmodelfit",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select field using field id(s) or field name(s) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select spectral window/channels ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Other data selection parameters ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on time range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data within uvrange (default units meters) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on antenna/baseline ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Scan number range ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "msselect",
                    "name": "msselect",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional complex data selection (ignore for now) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "niter",
                    "name": "niter",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Number of fitting iterations to execute ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "comptype",
                    "name": "comptype",
                    "value": "P",
                    "defaultValue": "P",
                    "description": "component model type: P(oint), G(aussian), or D(isk) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "sourcepar",
                    "name": "sourcepar",
                    "value": "[float(1.0)",
                    "defaultValue": "[float(1.0)",
                    "description": "Starting guess for component parameters (3 values for type P, 5 for G and D) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "varypar",
                    "name": "varypar",
                    "value": "",
                    "defaultValue": "",
                    "description": "Control which parameters to let vary in the fit ",
                    "type": "float(0.0)",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "outfile",
                    "name": "outfile",
                    "value": "",
                    "defaultValue": "",
                    "description": "Optional output component list table",
                    "type": "float(0.0)]",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -113,
            "text": "uvsub",
            "description": "reverse the operation (add rather than subtract) ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.uvsub",
                    "defaultValue": "casatasks.uvsub",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file (MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reverse",
                    "name": "reverse",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "reverse the operation (add rather than subtract) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -114,
            "text": "virtualconcat",
            "description": "If true, keep the POINTING table information in the output MMS. If false, don\\'t.",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.virtualconcat",
                    "defaultValue": "casatasks.virtualconcat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of names of input visibility files to be concatenated ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "concatvis",
                    "name": "concatvis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of the output visibility file (a multi-MS) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "freqtol",
                    "name": "freqtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Frequency shift tolerance for considering data as the same spwid ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "dirtol",
                    "name": "dirtol",
                    "value": "",
                    "defaultValue": "",
                    "description": "Direction shift tolerance for considering data as the same field ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "respectname",
                    "name": "respectname",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If true, fields with a different name are not merged even if their direction agrees ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "visweightscale",
                    "name": "visweightscale",
                    "value": "[]",
                    "defaultValue": "[]",
                    "description": "List of the weight scaling factors to be applied to the individual MSs ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "keepcopy",
                    "name": "keepcopy",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "If true, a copy of the input MSs is kept in their original place. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "copypointing",
                    "name": "copypointing",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If true, keep the POINTING table information in the output MMS. If false, don\\'t.",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -115,
            "text": "vishead",
            "description": "",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.vishead",
                    "defaultValue": "casatasks.vishead",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of input visibility file ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "mode",
                    "name": "mode",
                    "value": "summary",
                    "defaultValue": "summary",
                    "description": "Mode of operation for vishead ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "listitems",
                    "name": "listitems",
                    "value": "[ telescope",
                    "defaultValue": "[ telescope",
                    "description": "Keyword items to list. This parameter is only relevant in list mode. Note that the default list is a subset of the possible keywords. To get all the keywords set listitems= ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hdkey",
                    "name": "hdkey",
                    "value": "",
                    "defaultValue": "",
                    "description": "Keyword to get/put ",
                    "type": "'observer'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hdindex",
                    "name": "hdindex",
                    "value": "",
                    "defaultValue": "",
                    "description": "Index (counting from 0) if keyword is an array (used in get/put mode only). The empty string means all elements ",
                    "type": "'project'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "hdvalue",
                    "name": "hdvalue",
                    "value": "",
                    "defaultValue": "",
                    "description": "Value of the keywords to be put in the MS (used in put mode only)",
                    "type": "'field'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'freq_group_name'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'spw_name'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'schedule'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'schedule_type'",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "'release_date']",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "",
                    "name": "",
                    "value": "",
                    "defaultValue": "",
                    "description": "",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -116,
            "text": "visstat",
            "description": "If False, quantile-like statistics are not computed. These include the first and third quartiles, the median, and the median of the absolute deviation from the median. ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.visstat",
                    "defaultValue": "casatasks.visstat",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of MeasurementSet or Multi-MS ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "axis",
                    "name": "axis",
                    "value": "amplitude",
                    "defaultValue": "amplitude",
                    "description": "Values on which to compute statistics ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "datacolumn",
                    "name": "datacolumn",
                    "value": "data",
                    "defaultValue": "data",
                    "description": "Which data column to use (data, corrected, model, float_data) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "useflags",
                    "name": "useflags",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "Take flagging into account? ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spw",
                    "name": "spw",
                    "value": "",
                    "defaultValue": "",
                    "description": "spectral-window/frequency/channel ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Field names or field index numbers: \\'\\'==>all, field=\\'0~2,3C286\\' ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "selectdata",
                    "name": "selectdata",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "More data selection parameters (antenna, timerange etc) ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "antenna",
                    "name": "antenna",
                    "value": "",
                    "defaultValue": "",
                    "description": "antenna/baselines: \\'\\'==>all, antenna = \\'3,VA04\\' ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "uvrange",
                    "name": "uvrange",
                    "value": "",
                    "defaultValue": "",
                    "description": "uv range: \\'\\'==>all; uvrange = \\'0~100klambda\\', default units=meters ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timerange",
                    "name": "timerange",
                    "value": "",
                    "defaultValue": "",
                    "description": "time range: \\'\\'==>all, timerange=\\'09:14:0~09:54:0\\' ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "correlation",
                    "name": "correlation",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data based on correlation ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "scan",
                    "name": "scan",
                    "value": "",
                    "defaultValue": "",
                    "description": "scan numbers: \\'\\'==>all ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "array",
                    "name": "array",
                    "value": "",
                    "defaultValue": "",
                    "description": "(sub)array numbers: \\'\\'==>all ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "observation",
                    "name": "observation",
                    "value": "",
                    "defaultValue": "",
                    "description": "observation ID number(s): \\'\\' = all ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timeaverage",
                    "name": "timeaverage",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Average data in time. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timebin",
                    "name": "timebin",
                    "value": "0s",
                    "defaultValue": "0s",
                    "description": "Bin width for time averaging. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "timespan",
                    "name": "timespan",
                    "value": "",
                    "defaultValue": "",
                    "description": "Span the timebin across scan, state or both. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "maxuvwdistance",
                    "name": "maxuvwdistance",
                    "value": "0.0",
                    "defaultValue": "0.0",
                    "description": "Maximum separation of start-to-end baselines that can be included in an average. (meters) ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "disableparallel",
                    "name": "disableparallel",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Hidden parameter for internal use only. Do not change it! ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "ddistart",
                    "name": "ddistart",
                    "value": "-1",
                    "defaultValue": "-1",
                    "description": "Hidden parameter for internal use only. Do not change it! ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "taql",
                    "name": "taql",
                    "value": "",
                    "defaultValue": "",
                    "description": "Table query for nested selections ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "monolithic_processing",
                    "name": "monolithic_processing",
                    "value": "False",
                    "defaultValue": "False",
                    "description": "Hidden parameter for internal use only. Do not change it! ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "intent",
                    "name": "intent",
                    "value": "",
                    "defaultValue": "",
                    "description": "Select data by scan intent. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reportingaxes",
                    "name": "reportingaxes",
                    "value": "ddid",
                    "defaultValue": "ddid",
                    "description": "Which reporting axis to use (ddid, field, integration) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "doquantiles",
                    "name": "doquantiles",
                    "value": "True",
                    "defaultValue": "True",
                    "description": "If False, quantile-like statistics are not computed. These include the first and third quartiles, the median, and the median of the absolute deviation from the median. ",
                    "type": "Boolean",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -117,
            "text": "widebandpbcor",
            "description": "List of N weights (relative) ",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.widebandpbcor",
                    "defaultValue": "casatasks.widebandpbcor",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "vis",
                    "name": "vis",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name of measurement set. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "imagename",
                    "name": "imagename",
                    "value": "",
                    "defaultValue": "",
                    "description": "Name-prefix of multi-termimages to operate on. ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "nterms",
                    "name": "nterms",
                    "value": "2",
                    "defaultValue": "2",
                    "description": "Number of taylor terms to use ",
                    "type": "Integer",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "threshold",
                    "name": "threshold",
                    "value": "",
                    "defaultValue": "",
                    "description": "Intensity above which to re-calculate spectral index ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "action",
                    "name": "action",
                    "value": "pbcor",
                    "defaultValue": "pbcor",
                    "description": "PB-correction (pbcor) or only calc spectral-index (calcalpha) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "reffreq",
                    "name": "reffreq",
                    "value": "",
                    "defaultValue": "",
                    "description": "Reference frequency (if specified in clean) ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "pbmin",
                    "name": "pbmin",
                    "value": "0.2",
                    "defaultValue": "0.2",
                    "description": "PB threshold below which to not correct ",
                    "type": "Float",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "field",
                    "name": "field",
                    "value": "",
                    "defaultValue": "",
                    "description": "Fields to include in the PB calculation ",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "spwlist",
                    "name": "spwlist",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "List of N spw ids ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "chanlist",
                    "name": "chanlist",
                    "value": "[0]",
                    "defaultValue": "[0]",
                    "description": "List of N channel ids ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "weightlist",
                    "name": "weightlist",
                    "value": "[0.0]",
                    "defaultValue": "[0.0]",
                    "description": "List of N weights (relative) ",
                    "type": "Json",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -118,
            "text": "version",
            "description": "Output port parsing technique",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.version",
                    "defaultValue": "casatasks.version",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -119,
            "text": "version_string",
            "description": "Output port parsing technique",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.version_string",
                    "defaultValue": "casatasks.version_string",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -120,
            "text": "xml_interface_defs",
            "description": "Output port parsing technique",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.xml_interface_defs",
                    "defaultValue": "casatasks.xml_interface_defs",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        },
        {
            "category": "PythonApp",
            "drawOrderHint": 0,
            "key": -121,
            "text": "logstop",
            "description": "Output port parsing technique",
            "collapsed": false,
            "showPorts": false,
            "streaming": false,
            "subject": null,
            "selected": false,
            "expanded": false,
            "inputApplicationName": "",
            "outputApplicationName": "",
            "inputApplicationType": "None",
            "outputApplicationType": "None",
            "inputPorts": [],
            "outputPorts": [],
            "inputLocalPorts": [],
            "outputLocalPorts": [],
            "inputAppFields": [],
            "outputAppFields": [],
            "fields": [
                {
                    "text": "Application Class",
                    "name": "appclass",
                    "value": "dlg.apps.pyfunc.PyFuncApp",
                    "defaultValue": "dlg.apps.pyfunc.PyFuncApp",
                    "description": "The python class that implements this application",
                    "type": "String",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Execution Time",
                    "name": "execution_time",
                    "value": "5",
                    "defaultValue": "5",
                    "description": "Estimate of execution time (in seconds) for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "No. of CPUs",
                    "name": "num_cpus",
                    "value": "1",
                    "defaultValue": "1",
                    "description": "Number of CPUs used for this application.",
                    "type": "Integer",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Group start",
                    "name": "group_start",
                    "value": "false",
                    "defaultValue": "false",
                    "description": "Is this node the start of a group?",
                    "type": "Boolean",
                    "fieldType": "ComponentParameter",
                    "readonly": false,
                    "options": [],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Function Name",
                    "name": "func_name",
                    "value": "casatasks.logstop",
                    "defaultValue": "casatasks.logstop",
                    "description": "Python function name",
                    "type": "String",
                    "fieldType": "ApplicationArgument",
                    "readonly": true,
                    "options": [],
                    "precious": false,
                    "positional": true
                },
                {
                    "text": "Input Parser",
                    "name": "input_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Input port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                },
                {
                    "text": "Output Parser",
                    "name": "output_parser",
                    "value": "pickle",
                    "defaultValue": "pickle",
                    "description": "Output port parsing technique",
                    "type": "Select",
                    "fieldType": "ApplicationArgument",
                    "readonly": false,
                    "options": [
                        "pickle",
                        "eval",
                        "npy",
                        "path",
                        "dataurl"
                    ],
                    "precious": false,
                    "positional": false
                }
            ],
            "applicationArgs": [],
            "git_url": "casatasks",
            "sha": "0.1"
        }
    ],
    "linkDataArray": []
}