<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp" kind="class" language="Python" prot="public">
    <compoundname>dlg::apps::dockerapp::DockerApp</compoundname>
    <basecompoundref prot="public" virt="non-virtual">BarrierAppDROP</basecompoundref>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a08c213fff519d4efe1c07979bb54ad05" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_image</definition>
        <argsstring></argsstring>
        <name>_image</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="188" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a8e149a52f5fe562507d72e284c86ef88" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_command</definition>
        <argsstring></argsstring>
        <name>_command</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="195" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a2d02605c7b4dc695ce921629e5d5a0c0" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_user</definition>
        <argsstring></argsstring>
        <name>_user</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="203" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a0cd96aff0c7e31c80a69f1590fea5eb4" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_ensureUserAndSwitch</definition>
        <argsstring></argsstring>
        <name>_ensureUserAndSwitch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="208" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="208" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a5663d0bf493b0e3a1c9518741b9f10c0" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_removeContainer</definition>
        <argsstring></argsstring>
        <name>_removeContainer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="214" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a8fc2a7b7f4ec90b9d8caf10d82df8c0b" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_additionalBindings</definition>
        <argsstring></argsstring>
        <name>_additionalBindings</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="219" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a98ac424eed898fb54e53ffb5706c0013" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_containerIp</definition>
        <argsstring></argsstring>
        <name>_containerIp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="247" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="247" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a547ef8b3a55decf4d39404f51dedce3f" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_containerId</definition>
        <argsstring></argsstring>
        <name>_containerId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="248" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="248" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a6780aa34c8f9c7445d2c0baa2377f03b" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_waiters</definition>
        <argsstring></argsstring>
        <name>_waiters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="249" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="249" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a22d114ade14985f5e14e504fcaf39ef8" prot="private" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::_exitCode</definition>
        <argsstring></argsstring>
        <name>_exitCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="370" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="370" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a63b019cbf7ac40c0c45d90bf53b2d10a" prot="public" static="no" mutable="no">
        <type></type>
        <definition>dlg.apps.dockerapp.DockerApp::containerIp</definition>
        <argsstring></argsstring>
        <name>containerIp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="363" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="363" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a2c366d438c8cc106d0c2f627ca0c8532" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp.initialize</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>initialize</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="185" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="185" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a75d89b4cf076666087d2376e6d263c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp.containerIp</definition>
        <argsstring>(self)</argsstring>
        <name>containerIp</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="252" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a220a96d23369c300f5ea5ea9984f672b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp.containerIp</definition>
        <argsstring>(self, containerIp)</argsstring>
        <name>containerIp</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>containerIp</type>
          <defname>containerIp</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="256" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="256" bodyend="259"/>
      </memberdef>
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a84c7e6147d7f8879e25c1d310a0b30e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp.containerId</definition>
        <argsstring>(self)</argsstring>
        <name>containerId</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="261" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="261" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a584c9c33acc2ed12e02571c04b06f844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp.handleInterest</definition>
        <argsstring>(self, drop)</argsstring>
        <name>handleInterest</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>drop</type>
          <defname>drop</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="264" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="264" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a0b43fc109e7140231be6669b3a7600f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp.run</definition>
        <argsstring>(self)</argsstring>
        <name>run</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="273" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="273" bodyend="391"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a158eea14bca5d3a95b6dbc91419fb2a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp._get_client</definition>
        <argsstring>(cls)</argsstring>
        <name>_get_client</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="393" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="393" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1abc7136a9f8c76a9b10cb7030987371e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def dlg.apps.dockerapp.DockerApp._kwargs_from_env</definition>
        <argsstring>(cls, ssl_version=None, assert_hostname=False)</argsstring>
        <name>_kwargs_from_env</name>
        <param>
          <type>cls</type>
          <defname>cls</defname>
        </param>
        <param>
          <type>ssl_version</type>
          <defname>ssl_version</defname>
          <defval>None</defval>
        </param>
        <param>
          <type>assert_hostname</type>
          <defname>assert_hostname</defname>
          <defval>False</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Look for parameters to make Docker work under OS X
:param ssl_version:     which SSL version
:param assert_hostname: perform hostname checking
:return:
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="397" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="397" bodyend="407"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>A BarrierAppDROP that represents a process running in a container
hosted by a local docker daemon. Depending on the host system, the docker
daemon might be automatically activated when a client tries to connect to
it via its unix socket (like with systemd) or it needs to be brought up
prior to any client operation (upstart). In any case, if the daemon is
not present, this class will raise exceptions whenever it tries to connect
to the server to perform some operation.

Docker containers are built from docker images, which are pulled to the host
where the docker daemon runs either explicitly (via `docker pull`) or less
visibly (e.g., when running `docker run` using an image that has not been
fetched yet). This DockerApp application will explicitly pull the image at
`initialize` time, meaning that the docker images will become available at
the time the physical graph (which this application is part of) is deployed.
Docker containers also need a command to be run in them, which should be
an available program inside the image.

**Input and output**

The inputs and outputs used by the dockerized application are made available
by mapping host directories and files as &quot;data volumes&quot;. Inputs are bound
using their full path, but outputs are bound only up to their dirnames,
because otherwise they would be created at container creation time by
Docker. For example, the output /a/b/c will produce a binding to /dlg/a/b
inside the docker container, where c will have to be written by the process
running in the container.

Since the command to be run in the container receives most probably as
arguments the paths of its inputs and outputs, and since these might not be
known precisely until runtime, users should use placeholders for them in the
command-line specification. Placeholders for input locations take the form
of &quot;%iX&quot;, where X starts from 0 and refers to the X-th filesystem-related
input. Likewise, output locations are specified as &quot;%oX&quot;. Alternatively,
inputs and outputs can be referred to by their UIDs, in which case the
placeholders will look like &quot;%i[X]&quot; and &quot;%o[X]&quot; respectively, where X is the
UID of the input/output being referenced.

Data volumes are a file-specific feature. For this reason, volumes are setup
for file-system based input/output DROPs only, namely the FileDROP and the
DirectoryContainer types. Other DROP types can instead pass down their
dataURL property via the command-line by using placeholders. Placeholders
for input DROP dataURLs take the form of &quot;%iDataURLX&quot;, where X starts from 0
and refers to the X-th non-filesystem related input. Likewise, output
dataURLs are specified as &quot;%oDataURLX&quot;. Alternatively users can refer to the
dataURL of a specific input or output as &quot;%iDataURL[X]&quot; and &quot;%oDataURL[X]&quot;
respectively, where X is the UID of the input/output being referenced.

Additional volume bindings can be specified via the keyword arguments when
creating the DockerApp. The host file/directories must exist at the moment
of creating the DockerApp; otherwise it will fail to initialize.

**Users**

A docker container usually runs as root by default. One of the major
drawbacks of this is that the output generated by the containerized
application will belong also to the root user of the host system, and not to
the user running the DALiuGE framework. This DockerApp avoids to run containers
as the root user because of this reason. Two parameters, given at
construction time, control this behavior:

* `user`
          If given indicates the user used to run the container. It is
          assumed that if a user is indicated, the user already exists in
          the docker image; otherwise the container will actually fail to
          start. Its default value is `None`, meaning that the container
          will run as the root user.
* `ensureUserAndSwitch`
          If the container is run as the root user, this
          option indicates whether a non-root user with the same UID of the
          user running this process should be: a) searched for, b) created
          if it doesn&apos;t exist, and c) used to run the command inside the
          container. This is achieved by prepending some shell commands to
          the initial user-specified command, which will run as root first,
          but that finally perform the switch within the container process.
          Its default value is `True` if `user` is `None`; `False`
          otherwise.

Using these two options one can thus control the user that will run the
command inside the container.

**Communication between containers**

Although some containerized applications might run on their own, there are
cases where applications need to talk to each other in order to advance
(like in the case of client-server applications, or in the case of MPI
applications). All containers started in the same host (and therefore, all
applications running in them) belong by default to the same network, and
therefore are already visible.

Applications needing to communicate with other applications should be able
to specify the target&apos;s IP in their command-line. Since the IP is not known
until containers are created, this specification is done using the
%containerIp[oid]% placeholder, with &apos;oid&apos; being the OID of the target
DockerApp.

This need to know other DockerApp&apos;s IP imposes a sequential order on the
startup of the containers, since one needs to be started in order to learn
its IP, which is used to start the second. This is handled gracefully by
the DockerApp code, with the condition that `self.handleInterest` is invoked
where necessary. See `self.handleInterest` for more information about this
mechanism.

**TODO**

Processes in containers might not always exit by themselves, and the
containers might need to be manually stopped. This the case for example of
an set of MPI processes, where the master container will run the MPI
program and the slave containers will run an SSH daemon, where the SSH
daemon will not quit automatically once the master process has ended.

Still, we probably will need to differentiate between a forced quit because
of a timeout, and a good quit, and therefore we might impose that processes
running in a container must quit themselves after successfully performing
their task.
</verbatim> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1992">
        <label>dlg.apps.dockerapp.DockerApp</label>
        <link refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp"/>
        <childnode refid="1993" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1993">
        <label>BarrierAppDROP</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1994">
        <label>dlg.apps.dockerapp.DockerApp</label>
        <link refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp"/>
        <childnode refid="1995" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1995">
        <label>BarrierAppDROP</label>
      </node>
    </collaborationgraph>
    <location file="daliuge-runtime/dlg/apps/dockerapp.py" line="67" column="1" bodyfile="daliuge-runtime/dlg/apps/dockerapp.py" bodystart="67" bodyend="407"/>
    <listofallmembers>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a8fc2a7b7f4ec90b9d8caf10d82df8c0b" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_additionalBindings</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a8e149a52f5fe562507d72e284c86ef88" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_command</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a547ef8b3a55decf4d39404f51dedce3f" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_containerId</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a98ac424eed898fb54e53ffb5706c0013" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_containerIp</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a0cd96aff0c7e31c80a69f1590fea5eb4" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_ensureUserAndSwitch</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a22d114ade14985f5e14e504fcaf39ef8" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_exitCode</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a158eea14bca5d3a95b6dbc91419fb2a2" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_get_client</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a08c213fff519d4efe1c07979bb54ad05" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_image</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1abc7136a9f8c76a9b10cb7030987371e2" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_kwargs_from_env</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a5663d0bf493b0e3a1c9518741b9f10c0" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_removeContainer</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a2d02605c7b4dc695ce921629e5d5a0c0" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_user</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a6780aa34c8f9c7445d2c0baa2377f03b" prot="private" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>_waiters</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a84c7e6147d7f8879e25c1d310a0b30e1" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>containerId</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a63b019cbf7ac40c0c45d90bf53b2d10a" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>containerIp</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a75d89b4cf076666087d2376e6d263c76" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>containerIp</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a220a96d23369c300f5ea5ea9984f672b" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>containerIp</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a584c9c33acc2ed12e02571c04b06f844" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>handleInterest</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a2c366d438c8cc106d0c2f627ca0c8532" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>initialize</name></member>
      <member refid="classdlg_1_1apps_1_1dockerapp_1_1DockerApp_1a0b43fc109e7140231be6669b3a7600f4" prot="public" virt="non-virtual"><scope>dlg::apps::dockerapp::DockerApp</scope><name>run</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
