<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="Inspector__test_8js" kind="file" language="Javascript">
    <compoundname>Inspector_test.js</compoundname>
      <sectiondef kind="var">
      <memberdef kind="variable" id="Inspector__test_8js_1ae2475e10618961c050dcba04e8c42331" prot="public" static="no" mutable="no">
        <type>use</type>
        <definition>use strict</definition>
        <argsstring></argsstring>
        <name>strict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-translator/dlg/dropmake/web/Inspector_test.js" line="1" column="1" bodyfile="daliuge-translator/dlg/dropmake/web/Inspector_test.js" bodystart="1" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="Inspector__test_8js_1aa32b5a37ae875775b29d204115c1a23e" prot="public" static="no" mutable="no">
        <type>Inspector prototype</type>
        <definition>Inspector prototype populateDefault</definition>
        <argsstring></argsstring>
        <name>populateDefault</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-translator/dlg/dropmake/web/Inspector_test.js" line="127" column="1" bodyfile="daliuge-translator/dlg/dropmake/web/Inspector_test.js" bodystart="127" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="Inspector__test_8js_1a659cbcf6d8698a204dd09e42c7487197" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>function</type>
        <definition>function Inspector</definition>
        <argsstring>(divid, diagram, options)</argsstring>
        <name>Inspector</name>
        <param>
          <type>divid</type>
          <defname>divid</defname>
        </param>
        <param>
          <type>diagram</type>
          <defname>diagram</defname>
        </param>
        <param>
          <type>options</type>
          <defname>options</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-translator/dlg/dropmake/web/Inspector_test.js" line="29" column="1" bodyfile="daliuge-translator/dlg/dropmake/web/Inspector_test.js" bodystart="29" bodyend="124"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="stringliteral">&quot;use<sp/>strict&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/><sp/>Copyright<sp/>(C)<sp/>1998-2015<sp/>by<sp/>Northwoods<sp/>Software<sp/>Corporation.<sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/><sp/>Inspector<sp/>code</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/><sp/>Two<sp/>classes:<sp/>Inspector<sp/>and<sp/>View</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/><sp/>An<sp/>Inspector<sp/>is<sp/>a<sp/>collection<sp/>of<sp/>Views</highlight></codeline>
<codeline lineno="10"><highlight class="comment"></highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/><sp/>Each<sp/>property<sp/>corresponds<sp/>to<sp/>its<sp/>own<sp/>View.</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/><sp/>Each<sp/>View<sp/>correspondingly<sp/>has<sp/>its<sp/>own<sp/>DOM<sp/>elements.</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/><sp/>Views<sp/>are<sp/>also<sp/>responsible<sp/>for<sp/>populating<sp/>those<sp/>DOM<sp/>elements</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/><sp/>and<sp/>committing<sp/>information<sp/>from<sp/>them,<sp/>when<sp/>requested.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/><sp/>Right<sp/>now<sp/>Views<sp/>have<sp/>three<sp/>essential<sp/>settable<sp/>functions:</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/><sp/><sp/><sp/>initialize<sp/>=<sp/>Creates<sp/>DOM.<sp/>Called<sp/>once.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/><sp/><sp/><sp/>populate<sp/>=<sp/>Fills<sp/>DOM,<sp/>ie<sp/>input.value<sp/>=<sp/>some<sp/>value.<sp/>Called<sp/>each<sp/>time<sp/>the<sp/>Inspector<sp/>asks.</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/><sp/><sp/><sp/>use<sp/>=<sp/>Returns<sp/>a<sp/>value<sp/>or<sp/>values<sp/>from<sp/>the<sp/>View&apos;s<sp/>DOM<sp/>inputs.<sp/>Inspector<sp/>solicits<sp/>this<sp/>when<sp/>it<sp/>wants<sp/>to<sp/>commit<sp/>some<sp/>values.</highlight></codeline>
<codeline lineno="19"><highlight class="comment"></highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/>The<sp/>inspector<sp/>adds<sp/>the<sp/>DOM<sp/>elements<sp/>of<sp/>all<sp/>Views<sp/>to<sp/>its<sp/>master<sp/>div<sp/>(this.div),<sp/>plus<sp/>an<sp/>accept<sp/>button<sp/>(or<sp/>not).</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/>Finally<sp/>the<sp/>inspector<sp/>has<sp/>a<sp/>collection<sp/>of<sp/>objects<sp/>to<sp/>inspect.</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/>For<sp/>now<sp/>this<sp/>is<sp/>only<sp/>ever<sp/>a<sp/>single<sp/>object.</highlight></codeline>
<codeline lineno="24"><highlight class="comment"></highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/><sp/>When<sp/>the<sp/>collection<sp/>changes,<sp/>the<sp/>inspector<sp/>passes<sp/>on<sp/>information</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/><sp/>to<sp/>all<sp/>of<sp/>its<sp/>Views<sp/>so<sp/>that<sp/>they<sp/>may<sp/>re-populate<sp/>their<sp/>inputs.</highlight></codeline>
<codeline lineno="27"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">function</highlight><highlight class="normal"><sp/>Inspector(divid,<sp/>diagram,<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/>this.inspectedProps<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>coll<sp/>is<sp/>a<sp/>single<sp/>object<sp/>for<sp/>now<sp/>TODO<sp/>fix<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>which<sp/>means<sp/>looking<sp/>at<sp/>every<sp/>use<sp/>of<sp/>this.collection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>this.collection<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/>this.tracked<sp/>=<sp/>null;<sp/></highlight><highlight class="comment">//<sp/>map<sp/>of<sp/>all<sp/>tracked<sp/>properties,<sp/>set<sp/>in<sp/>showObjectProperties<sp/>and<sp/>used<sp/>in<sp/>rebuildViews</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/>this.diagram<sp/>=<sp/>diagram;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/>this.acceptButton<sp/>=<sp/>!!options[</highlight><highlight class="stringliteral">&apos;acceptButton&apos;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/>this.resetButton<sp/>=<sp/>!!options[</highlight><highlight class="stringliteral">&apos;resetButton&apos;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/>this.acceptFocus<sp/>=<sp/>!!options[</highlight><highlight class="stringliteral">&apos;acceptFocus&apos;</highlight><highlight class="normal">];</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/>this.inspectPredicate<sp/>=<sp/>options[</highlight><highlight class="stringliteral">&apos;inspectPredicate&apos;</highlight><highlight class="normal">]<sp/>||<sp/>null;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>this.propertyNames<sp/>=<sp/>options[</highlight><highlight class="stringliteral">&apos;propertyNames&apos;</highlight><highlight class="normal">]<sp/>||<sp/>null;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="44"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;div<sp/>id=&quot;divid&quot;<sp/>class=&quot;inspector-container&quot;&gt;</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;select&gt;&lt;/select&gt;</highlight></codeline>
<codeline lineno="46"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;div<sp/>class=&quot;inspector&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline lineno="47"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;div<sp/>class=&quot;inspector-button-container&quot;&gt;&lt;/div&gt;</highlight></codeline>
<codeline lineno="48"><highlight class="comment"><sp/><sp/><sp/><sp/>&lt;/div&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>var<sp/>div<sp/>=<sp/>document.getElementById(divid);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>div.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector-container&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/>var<sp/>chooser<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;select&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>div.appendChild(chooser);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/>var<sp/>mainDiv<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>mainDiv.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>div.appendChild(mainDiv);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>var<sp/>acceptResetDiv<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>acceptResetDiv.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector-button-container&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>div.appendChild(acceptResetDiv);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/>this.div<sp/>=<sp/>mainDiv;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>this.acceptResetDiv<sp/>=<sp/>acceptResetDiv;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>this.chooser<sp/>=<sp/>chooser;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>this.lastIndex<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>var<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/>var<sp/>pred<sp/>=<sp/>this.inspectPredicate;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>diagram.addDiagramListener(</highlight><highlight class="stringliteral">&apos;ChangedSelection&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(e)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>graphObjects<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>selection<sp/>=<sp/>myDiagram.selection.first();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selection<sp/>===<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.toggleVisibility(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.toggleVisibility(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.propertyNames<sp/>!==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.populatePropertyNames(graphObjects,<sp/>pred,<sp/>selection);<sp/></highlight><highlight class="comment">//<sp/>NYI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.populateDefault(graphObjects,<sp/>pred,<sp/>selection);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>chooser.innerHTML<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>graphObjects.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>option<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&apos;option&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>option.value<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>option.text<sp/>=<sp/>graphObjects[i]<sp/>instanceof<sp/>go.GraphObject<sp/>?<sp/>graphObjects[i].toString()<sp/>:<sp/></highlight><highlight class="stringliteral">&apos;Drop&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>chooser.appendChild(option);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>chooser.onchange<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>index<sp/>=<sp/>this.selectedIndex;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.propertyNames<sp/>!==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.change(selection);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.change(graphObjects[index]);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastIndex<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>useLastIndex<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastIndex<sp/>&lt;=<sp/>(graphObjects.length<sp/>-1);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">self</highlight><highlight class="normal">.propertyNames<sp/>!==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.change(selection);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.change(graphObjects[useLastIndex<sp/>?<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastIndex<sp/>:<sp/>0]);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(useLastIndex)<sp/>chooser.value<sp/>=<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.lastIndex;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>index<sp/>was<sp/>from<sp/>the<sp/>lastIndex<sp/>than<sp/>we<sp/>need<sp/>to<sp/>update<sp/>the<sp/>chooser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>accept<sp/>focus<sp/>option<sp/>=<sp/>commit<sp/>when<sp/>clicking<sp/>away<sp/>from<sp/>the<sp/>div:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.acceptFocus)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>div.tabIndex<sp/>=<sp/>3;<sp/></highlight><highlight class="comment">//<sp/>div<sp/>must<sp/>be<sp/>allowed<sp/>focus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>must<sp/>use<sp/>focusout<sp/>instead<sp/>of<sp/>blur<sp/>-<sp/>blur<sp/>does<sp/>not<sp/>bubble,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>clicking<sp/>on<sp/>an<sp/>&lt;input&gt;<sp/>inside<sp/>the<sp/>div<sp/>and<sp/>then<sp/>clicking<sp/>away</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>not<sp/>fire<sp/>an<sp/>event<sp/>with<sp/>blur,<sp/>and<sp/>it<sp/>will<sp/>will<sp/>focusout</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>div.addEventListener(</highlight><highlight class="stringliteral">&apos;focusout&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(e)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.setAllProperties();</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>this.toggleVisibility(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>Inspector<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>selection<sp/>box<sp/>with<sp/>all<sp/>GraphObjects<sp/>inside<sp/>a<sp/>node,<sp/>plus<sp/>its<sp/>part.data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal">Inspector.prototype.populateDefault<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(graphObjects,<sp/>pred,<sp/>selection)<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred<sp/>===<sp/>null<sp/>||<sp/>pred(selection))<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>graphObjects.push(selection);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>var<sp/>recurseDownPanels<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(element)<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(element<sp/>instanceof<sp/>go.Panel)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>elements<sp/>=<sp/>element.elements;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(elements.next())<sp/>{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>val<sp/>=<sp/>elements.value;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred<sp/>===<sp/>null<sp/>||<sp/>pred(val))<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>graphObjects.push(val);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>recurseDownPanels(val);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>recurseDownPanels(selection);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(pred<sp/>===<sp/>null<sp/>||<sp/>pred(selection.data))<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>graphObjects.push(selection.data);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>populate<sp/>based<sp/>on<sp/>this.propertyNames</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal">Inspector.prototype.populatePropertyNames<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(graphObjects,<sp/>pred,<sp/>selection)<sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>graphObjects.push(this.propertyNames);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">Inspector.prototype.change<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(graphObject)<sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>this.inspectedProps<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>this.setCollection(graphObject);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>this.showObjectProperties(graphObject);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">Inspector.prototype.toggleVisibility<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(visible)<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/>this.div.style.display<sp/>=<sp/>visible<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>this.acceptResetDiv.style.display<sp/>=<sp/>visible<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/>this.chooser.style.display<sp/>=<sp/>visible<sp/>?<sp/></highlight><highlight class="stringliteral">&quot;block&quot;</highlight><highlight class="normal"><sp/>:<sp/></highlight><highlight class="stringliteral">&quot;none&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>coll<sp/>=<sp/>collection<sp/>of<sp/>objects<sp/>(JavaScript<sp/>Objects,<sp/>GraphObjects,<sp/>Parts,<sp/>etc)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>assumes<sp/>coll<sp/>is<sp/>a<sp/>single<sp/>object<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">Inspector.prototype.setCollection<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(coll)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>this.collection<sp/>=<sp/>coll;</highlight></codeline>
<codeline lineno="170"><highlight class="normal">}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal">Inspector.prototype.rebuildViews<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>any<sp/>old<sp/>spectrum<sp/>controls<sp/>that<sp/>were<sp/>bound<sp/>to<sp/>old<sp/>inputs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>var<sp/>spectrums<sp/>=<sp/>document.getElementsByClassName(</highlight><highlight class="stringliteral">&quot;sp-container&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(spectrums.length<sp/>!==<sp/>0)<sp/>document.body.removeChild(spectrums[0]);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>var<sp/>div<sp/>=<sp/>this.div;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>div.innerHTML<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>this.acceptResetDiv.innerHTML<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/>var<sp/>trackedList<sp/>=<sp/>Object.keys(this.tracked);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>trackedList.length;<sp/>i++<sp/>)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>section<sp/>=<sp/>Inspector.createSection(trackedList[i]);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>inspectedProps<sp/>=<sp/>this.tracked[trackedList[i]];</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>inspectedProps.length;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>propname<sp/>=<sp/>inspectedProps[j];</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>view<sp/>=<sp/>this.inspectedProps[propname];</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(view.visible<sp/>!==<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>section.appendChild(view.getDOM());</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>coll<sp/>=<sp/>this.collection;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>group<sp/>=<sp/>view.dom;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>label<sp/>=<sp/>group.label<sp/>||<sp/>group.children[0];</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>optionally,<sp/>sanitize<sp/>property<sp/>name<sp/>into<sp/>something<sp/>human<sp/>readable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>camelCaseConverter<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(str)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>words<sp/>=<sp/>str.match(/[A-Za-z0-9][a-z]*/g);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words<sp/>=<sp/>words.filter(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(str)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>the<sp/>checkbox<sp/>is<sp/>clear<sp/>enough<sp/>the<sp/>property<sp/>is<sp/>a<sp/>bool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str<sp/>!==<sp/></highlight><highlight class="stringliteral">&quot;is&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>words.map(</highlight><highlight class="keyword">function</highlight><highlight class="normal">(str)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str.length<sp/>===<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>if<sp/>(str.length<sp/>===<sp/>1)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.toUpperCase();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>str.substring(0,1).toUpperCase()<sp/>+<sp/>str.substring(1);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}).join(</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label.textContent<sp/>=<sp/>propname;<sp/></highlight><highlight class="comment">//camelCaseConverter(propname);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>input<sp/>=<sp/>group.children[1];</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(view.options.readOnly)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>group.children.length;<sp/>k++)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>group.children[k].disabled<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>type<sp/>=<sp/>view.getType();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal"><sp/>||<sp/>type<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal"><sp/>||<sp/>type<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;Margin&quot;</highlight><highlight class="normal"><sp/>||<sp/>type<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal"><sp/>||<sp/>type<sp/>==<sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.originalValue<sp/>=<sp/>view.getter(propname).copy();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>input;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal"><sp/>||<sp/>type<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">)<sp/>input<sp/>=<sp/>group;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>input<sp/>=<sp/>group.children[1];</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.originalValue<sp/>=<sp/>input.value;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>val<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coll<sp/>!==<sp/>null)<sp/>val<sp/>=<sp/>view.getter(propname);</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>view.inferredType<sp/>=<sp/>(typeof<sp/>val);<sp/></highlight><highlight class="comment">//<sp/>number,<sp/>boolean,<sp/>function,<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>===<sp/>undefined)<sp/>val<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.nullCheckBox.checked<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(view.nullCheckBox)<sp/>view.nullCheckBox.checked<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>view.populate(val);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>div.appendChild(section);</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/>var<sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.acceptButton)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/>this.buildButton(</highlight><highlight class="stringliteral">&quot;Accept&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.setAllProperties();</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.rebuildViews();</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.resetButton)<sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>this.buildButton(</highlight><highlight class="stringliteral">&quot;Reset&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(){</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">self</highlight><highlight class="normal">.rebuildViews();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">Inspector.prototype.buildButton<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(text,<sp/>clickFunction)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>var<sp/>viewName<sp/>=<sp/>text<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;View&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">[viewName]<sp/>===<sp/>undefined)<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>button<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>button.type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;button&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>button.value<sp/>=<sp/>text;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>button.addEventListener(</highlight><highlight class="stringliteral">&quot;click&quot;</highlight><highlight class="normal">,<sp/>clickFunction);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>this.viewName<sp/>=<sp/>button;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>this.acceptResetDiv.appendChild(this.viewName);</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal">Inspector.prototype.setAllProperties<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>var<sp/>coll<sp/>=<sp/>this.collection;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(coll<sp/>===<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>var<sp/>diagram<sp/>=<sp/>this.diagram;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(diagram<sp/>===<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>var<sp/>inspectedProps<sp/>=<sp/>this.inspectedProps;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>var<sp/>transactionName<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;set<sp/>all<sp/>properties&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>diagram.startTransaction(transactionName);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>k<sp/>in<sp/>inspectedProps)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>view<sp/>=<sp/>inspectedProps[k];</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(view.setter<sp/>===<sp/>null<sp/>||<sp/>view.options.readOnly)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>set<sp/>values<sp/>that<sp/>have<sp/>not<sp/>changed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>val<sp/>=<sp/>view.isNull()<sp/>?<sp/>null<sp/>:<sp/>view.use(</highlight><highlight class="keyword">this</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(view.originalValue<sp/>===<sp/>val)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>instanceof<sp/>go.Point<sp/>||<sp/>val<sp/>instanceof<sp/>go.Size<sp/>||<sp/>val<sp/>instanceof<sp/>go.Spot<sp/>||</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>instanceof<sp/>go.Rect<sp/>||<sp/>val<sp/>instanceof<sp/>go.Margin)<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(view.originalValue.equals(val))<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>view.setter(diagram,<sp/>view,<sp/>k,<sp/>val);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>diagram.commitTransaction(transactionName);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//alert(diagram.model.toJson());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal">Inspector.prototype.createProperty<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(propname,<sp/>options,<sp/>object)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>propname<sp/>to<sp/>be<sp/>unique,<sp/>create<sp/>it<sp/>if<sp/>it<sp/>does<sp/>not<sp/>exist</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>right<sp/>now<sp/>this<sp/>clobbers<sp/>the<sp/>old<sp/>View<sp/>if<sp/>it<sp/>existed<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>var<sp/>inspectedProps<sp/>=<sp/>this.inspectedProps;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>var<sp/>view<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>View(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>options);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/>inspectedProps[propname]<sp/>=<sp/>view;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>view.name<sp/>=<sp/>propname;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight><highlight class="comment">//<sp/>create<sp/>it<sp/>if<sp/>it<sp/>doesn&apos;t<sp/>exist,<sp/>then<sp/>append</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal">Inspector.prototype.appendProperty<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(propname,<sp/>options,<sp/>object)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/>var<sp/>inspectedProps<sp/>=<sp/>this.inspectedProps;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/>this.createProperty(propname,<sp/>options,<sp/></highlight><highlight class="keywordtype">object</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>inspectedProps[propname].visible<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">Inspector.prototype.hideAllProperties<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/>var<sp/>inspectedProps<sp/>=<sp/>this.inspectedProps;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>propname<sp/>in<sp/>inspectedProps)<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>inspectedProps[propname].visible<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal">}</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Show<sp/>all<sp/>the<sp/>relevant<sp/>properties<sp/>for<sp/>a<sp/>given<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>object<sp/>is<sp/>a<sp/>GoJS<sp/>object<sp/>it<sp/>will<sp/>look<sp/>at<sp/>the<sp/>Type._inspectedProperties<sp/>and<sp/>show<sp/>those</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal">Inspector.prototype.showObjectProperties<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(obj)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/>this.hideAllProperties();</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>===<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>no<sp/>object<sp/>to<sp/>show</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/>this.tracked<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Allow<sp/>arbitrary<sp/>objects<sp/>later,<sp/>or<sp/>objects<sp/>where<sp/>_inspectedProperties<sp/>is<sp/>not<sp/>defined</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>will<sp/>go<sp/>through<sp/>them,<sp/>ie<sp/>Node<sp/>Part<sp/>Panel<sp/>GraphObject<sp/>(in<sp/>that<sp/>order)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>var<sp/>proto<sp/>=<sp/>Object.getPrototypeOf(obj);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//alert(proto.constructor<sp/>===<sp/>Object);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this.propertyNames<sp/>!==<sp/>null)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>given<sp/>list<sp/>of<sp/>property<sp/>names</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>propertyNames<sp/>=<sp/>this.propertyNames;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>node<sp/>=<sp/>this.collection;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>k<sp/>in<sp/>propertyNames)<sp/>{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(go[k]<sp/>!==<sp/>undefined<sp/>&amp;&amp;<sp/>go[k][</highlight><highlight class="stringliteral">&apos;_inspectedProperties&apos;</highlight><highlight class="normal">]<sp/>!==<sp/>undefined)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>Node/Panel/GraphObject/etc,<sp/>populate<sp/>the<sp/>names<sp/>in<sp/>the<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>name<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>section<sp/>=<sp/>Inspector.createSection(name);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name]<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>props<sp/>=<sp/>propertyNames[k];</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>props.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>prop<sp/>=<sp/>props[i];</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>property<sp/>options</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>options<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(options<sp/>===<sp/>null<sp/>&amp;&amp;<sp/>proto<sp/>&amp;&amp;<sp/>proto.constructor<sp/>!==<sp/>Object)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto.constructor._inspectedProperties[prop])<sp/>options<sp/>=<sp/>proto.constructor._inspectedProperties[prop];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>proto<sp/>=<sp/>Object.getPrototypeOf(proto);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name].push(prop);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.appendProperty(prop,<sp/>options,<sp/>obj);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>it<sp/>a<sp/>findObject<sp/>&quot;#name&quot;?<sp/>Test<sp/>each<sp/>and<sp/>populate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>name<sp/>=<sp/>k.substr(1);<sp/></highlight><highlight class="comment">//<sp/>remove<sp/>the<sp/>#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>node.findObject(name);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(obj<sp/>===<sp/>null)<sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>section<sp/>=<sp/>Inspector.createSection(name);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name]<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>props<sp/>=<sp/>propertyNames[k];</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>props.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>prop<sp/>=<sp/>props[i];</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name].push(prop);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.appendProperty(prop,<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>empty<sp/>options<sp/>*/</highlight><highlight class="normal"><sp/>},<sp/>obj);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(proto.constructor<sp/>===<sp/>Object)<sp/>{<sp/></highlight><highlight class="comment">//<sp/>arbitrary<sp/>JS<sp/>Object<sp/>(for<sp/>the<sp/>Part.data)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>name<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;data&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>gok<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;__gohashid&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;loc&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;isGroup&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;group&apos;</highlight><highlight class="normal">:1,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;fromPort&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;toPort&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;points&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;visible&apos;</highlight><highlight class="normal">:1,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;columnDefinitions&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;var_list&apos;</highlight><highlight class="normal">:1};</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//gok[]<sp/>=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>go_readonly<sp/>=<sp/>{</highlight><highlight class="stringliteral">&apos;key&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;category&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;from&apos;</highlight><highlight class="normal">:1,<sp/></highlight><highlight class="stringliteral">&apos;to&apos;</highlight><highlight class="normal">:1};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>section<sp/>=<sp/>Inspector.createSection(name);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>this.tracked[name]<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>prop<sp/>in<sp/>obj)<sp/>{</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop<sp/>in<sp/>gok)<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//alert(prop);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>options<sp/>=<sp/>{<sp/>setter:<sp/>View.defaultDataSetter<sp/>};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="380"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(prop<sp/>===<sp/>&apos;category&apos;)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options[&apos;type&apos;]<sp/>=<sp/>&quot;String&quot;;</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options[&apos;readOnly&apos;]<sp/>=<sp/>true;</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prop<sp/>in<sp/>go_readonly)<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options[</highlight><highlight class="stringliteral">&apos;readOnly&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name].push(prop);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//alert(obj[prop]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//alert(this.collection);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.appendProperty(prop,<sp/>options,<sp/>this.collection);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//this.appendProperty(prop,<sp/>options,<sp/>obj[prop]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">//<sp/>GoJS<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(proto<sp/>&amp;&amp;<sp/>proto.constructor<sp/>!==<sp/>Object)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>props<sp/>=<sp/>proto.constructor._inspectedProperties;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>toString<sp/>often<sp/>produces<sp/>strings<sp/>such<sp/>as:<sp/>Class(&quot;someInfo&quot;)#ID</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>want<sp/>the<sp/>name<sp/>to<sp/>be<sp/>just<sp/>the<sp/>Class.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>name<sp/>=<sp/>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>proto.constructor().toString()).split(</highlight><highlight class="charliteral">&apos;#&apos;</highlight><highlight class="normal">)[0].split(</highlight><highlight class="charliteral">&apos;(&apos;</highlight><highlight class="normal">)[0];</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>section<sp/>=<sp/>Inspector.createSection(name);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name]<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>x<sp/>in<sp/>props)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.tracked[name].push(x);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this.appendProperty(x,<sp/>props[x],<sp/>this.collection);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>proto<sp/>=<sp/>Object.getPrototypeOf(proto);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>this.rebuildViews();</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//<sp/>node,<sp/>part,<sp/>panel,<sp/>graphobject<sp/>properties</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal">Inspector.createSection<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(name)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>var<sp/>div<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>div.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector-section&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>var<sp/>h3<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;h3&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//h3.innerHTML<sp/>=<sp/>name<sp/>+<sp/>&quot;<sp/>Properties&quot;;<sp/>chen.wu</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>h3.innerHTML<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;DROP<sp/>Parameters&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>div.appendChild(h3);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>div;</highlight></codeline>
<codeline lineno="421"><highlight class="normal">}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="keyword">function</highlight><highlight class="normal"><sp/>View(</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>options)<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>options<sp/>=<sp/>options<sp/>||<sp/>{};</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/>this.options<sp/>=<sp/>options;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>this.getter<sp/>=<sp/>options.getter<sp/>||<sp/>View.defaultGetter;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>this.setter<sp/>=<sp/>options.setter<sp/>||<sp/>View.defaultSetter;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>this.inialized<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>this.visible<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>this.dom<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>this.originalValue<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>this.</highlight><highlight class="keywordtype">object</highlight><highlight class="normal"><sp/>=<sp/>object;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal">View.prototype.getDOM<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this.inialized)<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>this.dom<sp/>=<sp/>this.initialize();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>this.inialized<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.dom;</highlight></codeline>
<codeline lineno="446"><highlight class="normal">}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal">View.prototype.getType<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.options.type<sp/>||<sp/>this.inferredType;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal">View.prototype.isNullable<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>object<sp/>was<sp/>specifically<sp/>set<sp/>to<sp/>nullable<sp/>in<sp/>the<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.options.nullable)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>var<sp/>type<sp/>=<sp/>this.getType();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(go[type]<sp/>!==<sp/>undefined)<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!!go[type].nullable;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//<sp/>not<sp/>nullable<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal">}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">View.prototype.isNull<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.isNullable()<sp/>&amp;&amp;<sp/>(this.nullCheckBox<sp/>&amp;&amp;<sp/>this.nullCheckBox.checked);</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>a<sp/>div<sp/>with<sp/>a<sp/>label<sp/>or<sp/>null<sp/>checkbox</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal">View.prototype.makeInspectorGroup<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/>var<sp/>div<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>div.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector-group&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>var<sp/>label<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/>label.textContent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;LABEL&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>label.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;property-name&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/>var<sp/>appendElement<sp/>=<sp/>label;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.isNullable())<sp/>{</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>div.className<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>inspector-nullable&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>span<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;span&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/>span.appendChild(label);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>nullLabel<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>nullText<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;span&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>nullText.textContent<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Null?&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>nullCheckBox<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>nullCheckBox.type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;checkbox&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>nullLabel.appendChild(nullCheckBox);</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>nullLabel.appendChild(nullText);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>span.appendChild(nullLabel);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>appendElement<sp/>=<sp/>span;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>this.nullCheckBox<sp/>=<sp/>nullCheckBox;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>div.appendChild(appendElement);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>div.label<sp/>=<sp/>label;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>div;</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal">View.prototype.nFieldHTMLInit<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(fields)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>var<sp/>div<sp/>=<sp/>this.makeInspectorGroup();</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>var<sp/>colsPerRow<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>var<sp/>inputs<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>var<sp/>row<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>var<sp/>populateRow<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>rowDiv<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>row.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>rowDiv.appendChild(row[i]);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>rowDiv.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;row&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>div.appendChild(rowDiv);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>row<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>fields.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>label<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;label&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>label.textContent<sp/>=<sp/>fields[i];</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>label.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector-n-field-label&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>input<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>input.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;input-short&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>inputs.push(input);</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/>var<sp/>cell<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;div&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;cell&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.appendChild(label);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>cell.appendChild(input);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>row.push(cell);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.length<sp/>%<sp/>colsPerRow<sp/>===<sp/>0)<sp/>populateRow();</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(row.length<sp/>!==<sp/>0)<sp/>populateRow();</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>this.inputs<sp/>=<sp/>inputs;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>div;</highlight></codeline>
<codeline lineno="532"><highlight class="normal">}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal">View.prototype.initialize<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>var<sp/>dom<sp/>=<sp/>this.dom;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>var<sp/>type<sp/>=<sp/>this.getType();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>var<sp/>div<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.makeInspectorGroup();</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>select<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;select&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.appendChild(select);</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Margin&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.nFieldHTMLInit([</highlight><highlight class="stringliteral">&quot;Top&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Right&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Bottom&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Left&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.nFieldHTMLInit([</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.nFieldHTMLInit([</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Width&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.nFieldHTMLInit([</highlight><highlight class="stringliteral">&quot;Width&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Height&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.nFieldHTMLInit([</highlight><highlight class="stringliteral">&quot;X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Y&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>X&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;Offset<sp/>Y&quot;</highlight><highlight class="normal">]);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>inputs<sp/>=<sp/>this.inputs;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>select<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;select&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>spots<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>custom<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;option&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>custom.value<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>custom.text<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;Custom<sp/>Spot&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select.appendChild(custom);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>k<sp/>in<sp/>go.Spot)<sp/>{</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(go.Spot[k]<sp/>instanceof<sp/>go.Spot)<sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>option<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;option&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option.value<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option.text<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>select.appendChild(option);</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select.value<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select.div<sp/>=<sp/>div;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.dropdown<sp/>=<sp/>select;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>view<sp/>=<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select.onchange<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">()<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>selected<sp/>=<sp/>select[select.selectedIndex].text;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(selected<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;Custom<sp/>Spot&quot;</highlight><highlight class="normal">)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>spot<sp/>=<sp/>go.Spot.parse(selected);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.inputs[0].value<sp/>=<sp/>spot.x;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.inputs[1].value<sp/>=<sp/>spot.y;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.inputs[2].value<sp/>=<sp/>spot.offsetX;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>view.inputs[3].value<sp/>=<sp/>spot.offsetY;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.selectIndex<sp/>=<sp/>div.children.length;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.appendChild(select);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.makeInspectorGroup();</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>brushTextField<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>brushTextField.type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.appendChild(brushTextField);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.makeInspectorGroup();</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>input<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;checkbox&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;inspector-boolean-control&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>label<sp/>=<sp/>div.children[0];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>label.className<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;make-inline&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.insertBefore(input,<sp/>label);</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.input<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div<sp/>=<sp/>this.makeInspectorGroup();</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>input<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;input&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.type<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.getType()<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">)<sp/>input.className<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>right-align&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.className<sp/>+=<sp/></highlight><highlight class="stringliteral">&quot;<sp/>input-long&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.appendChild(input);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>div.input<sp/>=<sp/>input;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>div;</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>view<sp/>init</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal">View.prototype.populate<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(val)<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>var<sp/>dom<sp/>=<sp/>this.dom;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/>var<sp/>type<sp/>=<sp/>this.getType();</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>vals<sp/>=<sp/>this.options.enumValues;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>select<sp/>=<sp/>this.dom.children[1];</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select.innerHTML<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(select.length<sp/>===<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>vals.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>option<sp/>=<sp/>document.createElement(</highlight><highlight class="stringliteral">&quot;option&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option.value<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>just<sp/>show<sp/>the<sp/>second<sp/>half<sp/>(&quot;Position&quot;<sp/>instead<sp/>of<sp/>&quot;Panel.Position&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>option.innerHTML<sp/>=<sp/>vals[i].toString().split(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)[1];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>select.appendChild(option);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>select.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(select[i].text<sp/>===<sp/><sp/>val.toString().split(</highlight><highlight class="charliteral">&apos;.&apos;</highlight><highlight class="normal">)[1])<sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>select.value<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Margin&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.nFieldHTMLPopulate([val.top,<sp/>val.left,<sp/>val.bottom,<sp/>val.right]);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.nFieldHTMLPopulate([val.x,<sp/>val.y]);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.nFieldHTMLPopulate([val.x,<sp/>val.y,<sp/>val.width,<sp/>val.height]);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.nFieldHTMLPopulate([val.width,<sp/>val.height]);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>instanceof<sp/>go.Spot)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>to<sp/>see<sp/>if<sp/>spot<sp/>we<sp/>have<sp/>is<sp/>equal<sp/>to<sp/>a<sp/>predefined<sp/>Spot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>predefined<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>k<sp/>in<sp/>go.Spot)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(go.Spot[k]<sp/>instanceof<sp/>go.Spot<sp/>&amp;&amp;<sp/>go.Spot[k].equals(val))<sp/>{</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>predefined<sp/>=<sp/>k;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>select<sp/>=<sp/>dom.dropdown;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(predefined<sp/>!==<sp/>null)<sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>index<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>select.children.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>child<sp/>=<sp/>select.children[i];</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child.text<sp/>===<sp/>predefined)<sp/>{</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>index<sp/>=<sp/>parseInt(child.value);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>select.value<sp/>=<sp/>index;</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeof<sp/>val<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">)<sp/>val<sp/>=<sp/>go.Spot.parse(val);</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>this.nFieldHTMLPopulate([val.x,<sp/>val.y,<sp/>val.offsetX,<sp/>val.offsetY]);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>checkbox<sp/>=<sp/>this.nullCheckBox;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>brushTextField<sp/>=<sp/>dom.children[1];</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">)<sp/>val<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>val<sp/>is<sp/>either<sp/>a<sp/>String<sp/>or<sp/>a<sp/>Brush.<sp/>If<sp/>it&apos;s<sp/>a<sp/>Brush,<sp/>make<sp/>it<sp/>a<sp/>String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>selected<sp/>=<sp/>$(brushTextField);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(typeof<sp/>val<sp/>===<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal"><sp/>||<sp/>val.type<sp/>===<sp/>go.Brush.Solid)<sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>colorString<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>instanceof<sp/>go.Brush)<sp/>colorString<sp/>=<sp/>val.color;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>options<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>replacerClassName:<sp/></highlight><highlight class="stringliteral">&apos;spectrum-control&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>color:<sp/>colorString,</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showAlpha:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showInput:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clickoutFiresChange:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>showButtons:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>preferredFormat:<sp/></highlight><highlight class="stringliteral">&quot;hex&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected.spectrum(options);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>selected.spectrum(</highlight><highlight class="stringliteral">&quot;destroy&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>instanceof<sp/>go.Brush)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>ExtendedBrush.stringify(val);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>brushTextField.value<sp/>=<sp/>val;<sp/></highlight><highlight class="comment">//<sp/>val<sp/>is<sp/>now<sp/>a<sp/>String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>input<sp/>=<sp/>dom.children[0];</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>input.checked<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dom.children[1].value<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>dom.children[1].value<sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>view<sp/>populate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal">View.prototype.nFieldHTMLPopulate<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(arr)<sp/>{</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/>var<sp/>children<sp/>=<sp/>this.inputs;</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>children[i].value<sp/>=<sp/>arr[i];</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="731"><highlight class="normal">}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal">View.prototype.use<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(inspector)<sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>var<sp/>group<sp/>=<sp/>this.dom;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>var<sp/>type<sp/>=<sp/>this.getType();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>var<sp/>val<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type)<sp/>{</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>this.options.enumValues[group.children[1].selectedIndex];</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Margin&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>this.nFieldHTMLUse(4);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Margin(obj[0],<sp/>obj[1],<sp/>obj[2],<sp/>obj[3]);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>this.nFieldHTMLUse(2);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Point(obj[0],<sp/>obj[1]);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>this.nFieldHTMLUse(4);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Rect(obj[0],<sp/>obj[1],<sp/>obj[2],<sp/>obj[3]);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>this.nFieldHTMLUse(2);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Size(obj[0],<sp/>obj[1]);</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>obj<sp/>=<sp/>this.nFieldHTMLUse(4);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>select<sp/>=<sp/>this.dom.children[this.dom.selectIndex];</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(select.selectedIndex<sp/>!==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>spot<sp/>=<sp/>go.Spot.parse(select[select.selectedIndex].text);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>equals<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(a,b)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a<sp/>===<sp/>b<sp/>||<sp/>(isNaN(a)<sp/>&amp;&amp;<sp/>isNaN(b));<sp/>}</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>prefedined<sp/>spots<sp/>have<sp/>NaN<sp/>in<sp/>their<sp/>fields.<sp/>You<sp/>can&apos;t<sp/>pass<sp/>NaN<sp/>into<sp/>the<sp/>normal<sp/>spot<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>instead<sp/>of<sp/>constructing<sp/>a<sp/>Spot,<sp/>try<sp/>to<sp/>see<sp/>if<sp/>it<sp/>equals<sp/>the<sp/>selected<sp/>item<sp/>and<sp/>returned<sp/>the<sp/>prefedined<sp/>spot</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(equals(obj[0],<sp/>spot.x)<sp/>&amp;&amp;<sp/>equals(obj[1],<sp/>spot.y)<sp/>&amp;&amp;<sp/>equals(obj[2],<sp/>spot.offsetX)<sp/>&amp;&amp;<sp/>equals(obj[3],<sp/>spot.offsetY))</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>spot;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>otherwise,<sp/>build<sp/>a<sp/>new<sp/>Spot<sp/>and<sp/>just<sp/>return<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>===<sp/>null)<sp/>val<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Spot(obj[0],<sp/>obj[1],<sp/>obj[2],<sp/>obj[3]);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this.nullCheckBox.checked)<sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>null;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>brushTextField<sp/>=<sp/>group.children[1].value;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>part<sp/>=<sp/>inspector.collection;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>part<sp/>=<sp/>part.part;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>var<sp/>brush<sp/>=<sp/>ExtendedBrush.parse(brushTextField,<sp/>part.measuredBounds.width,<sp/>part.measuredBounds.height);</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>brush;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>group.children[0].checked;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>parseFloat(group.input.value);</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>val<sp/>=<sp/>group.input.value;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="793"><highlight class="normal">}<sp/></highlight><highlight class="comment">//<sp/>end<sp/>view<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">View.prototype.nFieldHTMLUse<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(count)<sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/>var<sp/>obj<sp/>=<sp/>[];</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/>var<sp/>children<sp/>=<sp/>this.inputs;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(var<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>children.length;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/>obj[i]<sp/>=<sp/>parseFloat(children[i].value);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>obj;</highlight></codeline>
<codeline lineno="802"><highlight class="normal">}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="normal">View.defaultGetter<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(propname)<sp/>{</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>var<sp/>val<sp/>=<sp/>this.</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[propname];</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(val<sp/>===<sp/>null)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;(null)&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="808"><highlight class="normal">}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal">View.defaultDataGetter<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(propname)<sp/>{</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this.</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[propname];</highlight></codeline>
<codeline lineno="812"><highlight class="normal">}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal">View.defaultSetter<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(diagram,<sp/>view,<sp/>propname,<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//var<sp/>mytype<sp/>=<sp/>view.getType();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//if<sp/>(mytype<sp/>===<sp/>&quot;number&quot;)<sp/>value<sp/>=<sp/>parseFloat(value);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/>this.</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">[propname]<sp/>=<sp/>value;<sp/></highlight><highlight class="comment">//<sp/>save<sp/>in<sp/>the<sp/>inspector<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="828"><highlight class="comment"><sp/><sp/>if<sp/>(propname<sp/>==<sp/>&apos;clean&apos;)<sp/>{</highlight></codeline>
<codeline lineno="829"><highlight class="comment"><sp/><sp/><sp/><sp/>propname<sp/>=<sp/>&apos;clean_para&apos;;</highlight></codeline>
<codeline lineno="830"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"></highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//alert(this.object.toString()<sp/>+<sp/>&quot;**&quot;<sp/>+<sp/>propname.toString()<sp/>+<sp/>&quot;-&quot;<sp/>+<sp/>value.toString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>diagram.model.setDataProperty(this.</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>propname.toString(),<sp/>value);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//alert(diagram.model.nodeDataArray[0][&quot;clean_para&quot;]);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//diagram.model.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal">}</highlight></codeline>
<codeline lineno="838"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="normal">View.defaultDataSetter<sp/>=<sp/></highlight><highlight class="keyword">function</highlight><highlight class="normal">(diagram,<sp/>view,<sp/>propname,<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>save<sp/>in<sp/>the<sp/>inspector<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="850"><highlight class="comment"><sp/><sp/>if<sp/>(propname<sp/>==<sp/>&apos;clean&apos;)<sp/>{</highlight></codeline>
<codeline lineno="851"><highlight class="comment"><sp/><sp/><sp/><sp/>propname<sp/>=<sp/>&apos;clean_para&apos;;</highlight></codeline>
<codeline lineno="852"><highlight class="comment"><sp/><sp/>}</highlight></codeline>
<codeline lineno="853"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//this.object[propname]<sp/>=<sp/>value;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//alert(propname.toString()<sp/>+<sp/>&quot;:&quot;<sp/>+<sp/>value.toString());</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/>diagram.model.setDataProperty(this.</highlight><highlight class="keywordtype">object</highlight><highlight class="normal">,<sp/>propname,<sp/>value);</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight><highlight class="comment">//<sp/>properties<sp/>are<sp/>either<sp/>null<sp/>or<sp/>an<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight><highlight class="comment">//<sp/>potential<sp/>object<sp/>properties:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>type:<sp/>string<sp/>(&quot;Brush&quot;,<sp/>&quot;Enum&quot;,<sp/>&quot;number&quot;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>enumValues:<sp/>array<sp/>of<sp/>strings<sp/>([&quot;go.GraphObject.Fill,<sp/>go.GraphObject.Uniform&quot;])</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>readOnly:<sp/>boolean<sp/>(false<sp/>by<sp/>default,<sp/>if<sp/>omitted)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>nullable:<sp/>a<sp/>property<sp/>with<sp/>nullable<sp/>set<sp/>to<sp/>true<sp/>means<sp/>that<sp/>it<sp/>can<sp/>be<sp/>null.<sp/>If<sp/>omitted,<sp/>objects<sp/>are<sp/>assumed<sp/>to<sp/>not<sp/>be<sp/>nullable<sp/>unless<sp/>a<sp/>specific<sp/>type<sp/>(ie,<sp/>Brush/Margin/etc)<sp/>permits<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal">go.GraphObject._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;stretch&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.GraphObject.None,<sp/>go.GraphObject.Fill,<sp/>go.GraphObject.Horizontal,<sp/>go.GraphObject.Vertical,<sp/>go.GraphObject.Default],</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.GraphObject.Default</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;name&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;opacity&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>1</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;visible&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;areaBackground&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>null</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;background&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>null</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;position&quot;</highlight><highlight class="normal">:<sp/>{<sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;scale&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>1</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;angle&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>0</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;desiredSize&quot;</highlight><highlight class="normal">:<sp/>{<sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal"><sp/>},</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;measuredBounds&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;naturalBounds&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;portId&quot;</highlight><highlight class="normal"><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/>nullable:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>null</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;minSize&quot;</highlight><highlight class="normal"><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Size(0,<sp/>0)</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;maxSize&quot;</highlight><highlight class="normal"><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Size(Infinity,<sp/>Infinity)</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="923"><highlight class="normal">}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">go.Shape._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;fill&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;stroke&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;strokeWidth&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>1.0</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;strokeCap&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;butt&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;strokeJoin&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;miter&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;strokeMiterLimit&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>10</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="950"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="952"><highlight class="comment"><sp/><sp/>TODO</highlight></codeline>
<codeline lineno="953"><highlight class="comment"><sp/><sp/>&quot;strokeDashArray&quot;:<sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="comment"><sp/><sp/><sp/><sp/>type:<sp/>&quot;Array&quot;,</highlight></codeline>
<codeline lineno="955"><highlight class="comment"><sp/><sp/><sp/><sp/>defaultValue:<sp/>null</highlight></codeline>
<codeline lineno="956"><highlight class="comment"><sp/><sp/>},</highlight></codeline>
<codeline lineno="957"><highlight class="comment"><sp/><sp/>&quot;strokeDashOffset&quot;:<sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="comment"><sp/><sp/><sp/><sp/>type:<sp/>&quot;number&quot;,</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/>defaultValue:<sp/>0</highlight></codeline>
<codeline lineno="960"><highlight class="comment"><sp/><sp/>},</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;figure&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;toArrow&quot;</highlight><highlight class="normal">:<sp/><sp/>{</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;fromArrow&quot;</highlight><highlight class="normal">:<sp/><sp/>{</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;None&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;geometryStretch&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.GraphObject.None,<sp/>go.GraphObject.Fill,<sp/>go.GraphObject.Uniform,<sp/>go.GraphObject.Default],</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.GraphObject.Default</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal">}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal">go.TextBlock._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;font&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;10px<sp/>sans-serif&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;text&quot;</highlight><highlight class="normal">:<sp/>{type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;textAlign&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;String&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;start&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isMultiline&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isUnderline&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isStrikethrough&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;wrap&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.TextBlock.WrapDesiredSize,<sp/>go.TextBlock.WrapFit,<sp/>go.TextBlock.None],</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.TextBlock.WrapDesiredSize</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;overflow&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.TextBlock.OverflowClip,<sp/>go.TextBlock.OverflowEllipsis],</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.TextBlock.OverflowClip</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;stroke&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Brush&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;lineCount&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;editable&quot;</highlight><highlight class="normal">:<sp/>{type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1022"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal">go.Panel._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;type&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.Panel.Position,<sp/>go.Panel.Vertical,<sp/>go.Panel.Horizontal,<sp/>go.Panel.Auto,<sp/>go.Panel.Spot,<sp/>go.Panel.Table,<sp/>go.Panel.Viewbox,</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>go.Panel.Link,<sp/>go.Panel.TableRow,<sp/>go.Panel.TableColumn,<sp/>go.Panel.Grid],</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.Panel.Position</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;padding&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Margin&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Margin()</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;defaultAlignment&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.Spot.Default</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;defaultStretch&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.GraphObject.None,<sp/>go.GraphObject.Fill,<sp/>go.GraphObject.Horizontal,<sp/>go.GraphObject.Vertical,<sp/>go.GraphObject.Default],</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue<sp/>:<sp/>go.GraphObject.Default</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;gridCellSize&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Size&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Size(10,<sp/>10)</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;gridOrigin&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Point()</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal">go.Part._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;location&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;locationSpot&quot;</highlight><highlight class="normal">:<sp/>{type:<sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;resizable&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;rotatable&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isShadowed&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/><sp/>,</highlight></codeline>
<codeline lineno="1072"><highlight class="comment"><sp/><sp/>&quot;locationObjectName&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1073"><highlight class="comment"><sp/><sp/>&quot;selectionObjectName&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1074"><highlight class="comment"><sp/><sp/>&quot;layerName&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1075"><highlight class="comment"><sp/><sp/>&quot;category&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1076"><highlight class="comment"><sp/><sp/>&quot;resizeObjectName&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1077"><highlight class="comment"><sp/><sp/>&quot;rotateObjectName&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1078"><highlight class="comment"><sp/><sp/>&quot;text&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1079"><highlight class="comment"><sp/><sp/>&quot;shadowOffset&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/>&quot;shadowColor&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1081"><highlight class="comment"><sp/><sp/>&quot;shadowBlur&quot;:<sp/>null*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal">go.Node._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isTreeExpanded&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*,</highlight></codeline>
<codeline lineno="1090"><highlight class="comment"><sp/><sp/>&quot;avoidable&quot;:<sp/>null,</highlight></codeline>
<codeline lineno="1091"><highlight class="comment"><sp/><sp/>&quot;avoidableMargin&quot;:<sp/>null*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal">go.Link._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;fromSpot&quot;</highlight><highlight class="normal">:<sp/>{type:<sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;toSpot&quot;</highlight><highlight class="normal">:<sp/>{type:<sp/></highlight><highlight class="stringliteral">&quot;Spot&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;relinkableFrom&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;relinkableTo&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;resegmentable&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>technically<sp/>a<sp/>property<sp/>of<sp/>Part,<sp/>only<sp/>used<sp/>on<sp/>Links</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;reshapable&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;midPoint&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Point&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;midAngle&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isOrthogonal&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isAvoiding&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;corner&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>0</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;curve&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.Link.None,<sp/>go.Link.Bezier,<sp/>go.Link.JumpGap,<sp/>go.Link.JumpOver],</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.Link.None</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;curviness&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>NaN</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;routing&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.Link.Normal,<sp/>go.Link.Orthogonal,<sp/>go.Link.AvoidsNodes],</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.Link.Normal</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;smoothness&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;number&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>0.5</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal">go.Group._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;ungroupable&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;isSubGraphExpanded&quot;</highlight><highlight class="normal">:<sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;boolean&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal">go.Picture._inspectedProperties<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;source&quot;</highlight><highlight class="normal"><sp/>:<sp/>{type:<sp/></highlight><highlight class="stringliteral">&quot;string&quot;</highlight><highlight class="normal">},</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;imageStretch&quot;</highlight><highlight class="normal"><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Enum&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/>enumValues:<sp/>[go.GraphObject.None,<sp/>go.GraphObject.Fill,<sp/>go.GraphObject.Uniform,<sp/>go.GraphObject.UniformToFill],</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/>go.GraphObject.None</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;naturalBounds&quot;</highlight><highlight class="normal"><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>type:<sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>readOnly:<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>},</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/></highlight><highlight class="stringliteral">&quot;sourceRect&quot;</highlight><highlight class="normal"><sp/>:<sp/>{</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>:<sp/></highlight><highlight class="stringliteral">&quot;Rect&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>defaultValue:<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>go.Rect(NaN,<sp/>NaN,<sp/>NaN,<sp/>NaN)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal">go.Brush.nullable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
    </programlisting>
    <location file="daliuge-translator/dlg/dropmake/web/Inspector_test.js"/>
  </compounddef>
</doxygen>
