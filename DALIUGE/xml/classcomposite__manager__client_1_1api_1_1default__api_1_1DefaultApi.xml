<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi" kind="class" language="Python" prot="public">
    <compoundname>composite_manager_client::api::default_api::DefaultApi</compoundname>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">object</basecompoundref>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ab29d3d17cf97246f4c7745230ca643db" prot="public" static="no" mutable="no">
        <type></type>
        <definition>composite_manager_client.api.default_api.DefaultApi::api_client</definition>
        <argsstring></argsstring>
        <name>api_client</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="37" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a667038905f9fc4a0f387b37b1b159efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.__init__</definition>
        <argsstring>(self, api_client=None)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>api_client</type>
          <defname>api_client</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="34" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a7e3aef78c4bdbe9f37e23ab712c142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_cm_node</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>add_cm_node</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_cm_node  # noqa: E501

Add `node` to this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_cm_node(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="39" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="39" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a78d588faf6578de59a46aa2f06b04070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_cm_node_with_http_info</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>add_cm_node_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_cm_node  # noqa: E501

Add `node` to this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_cm_node_with_http_info(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="69" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="69" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa42af69007df4305326ede046d3de2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_graph_parts</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>add_graph_parts</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_graph_parts  # noqa: E501

Appends a physical graph to session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_graph_parts(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param body: The graph content to append
:type body: object
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="166" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="166" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae614d5c9b0c72eaf2997a1d2feae8eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_graph_parts_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>add_graph_parts_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_graph_parts  # noqa: E501

Appends a physical graph to session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_graph_parts_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param body: The graph content to append
:type body: object
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="198" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="198" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d299e04757526e62b5afb445302be59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.cancel_session</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>cancel_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>cancel_session  # noqa: E501

Cancels session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.cancel_session(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="308" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="308" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1b6f12cc4dc42d25a842dc376703e2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.cancel_session_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>cancel_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>cancel_session  # noqa: E501

Cancels session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.cancel_session_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="338" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="338" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a71adf525c55467fdad465b8b54546fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.create_session</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>create_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>create_session  # noqa: E501

Create a new session  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.create_session(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param inline_object:
:type inline_object: InlineObject
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="439" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="439" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a74f5ecbb8e4c46282a2381b107e2a83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.create_session_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>create_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>create_session  # noqa: E501

Create a new session  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.create_session_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param inline_object:
:type inline_object: InlineObject
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="469" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="469" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ad20dc34df163de799f1e00e3451627f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.deploy_session</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>deploy_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>deploy_session  # noqa: E501

Deploys session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.deploy_session(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param completed:
:type completed: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="570" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="570" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10b7cc9e30b3bca3a96ad22f116b1dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.deploy_session_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>deploy_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>deploy_session  # noqa: E501

Deploys session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.deploy_session_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param completed:
:type completed: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="602" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="602" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1297ef4f1333c3737e85c241262cdbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.destroy_session</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>destroy_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>destroy_session  # noqa: E501

Removes session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.destroy_session(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="708" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="708" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9132e9797e7f0d5b398f837af46391e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.destroy_session_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>destroy_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>destroy_session  # noqa: E501

Removes session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.destroy_session_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="738" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="738" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9b9fa7761f53614105963be29ee4c4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_nodes</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_nodes</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the list of nodes covered by this Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_nodes(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: list[str]
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="839" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="839" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa1ba696c1856f1299244ce2a687a8e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_nodes_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_nodes_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the list of nodes covered by this Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_nodes_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="867" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="867" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a22a1a461be2b873b91fa8c92e59626b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_status</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Return the status of the Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_status(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: CompositeManagerStatus
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="959" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="959" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1c34680621be209f1378225cb5ad0a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_status_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Return the status of the Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_status_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(CompositeManagerStatus, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="987" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="987" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7690cd3d4159c4cc95d18f5c80afbdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph  # noqa: E501

Returns the physical graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1079" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1079" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a0113ef73a13b54a0ec393867d91e16da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph  # noqa: E501

Returns the physical graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1109" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1109" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8147802b36b7732a4fde9822dd193380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_size</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_size</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_size  # noqa: E501

Returns the size of the graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_size(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: int
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1210" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1210" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a38b44631945002e8eef46c4e945547ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_size_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_size_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_size  # noqa: E501

Returns the size of the graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_size_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1240" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1240" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d014ad493b64ed8a2c978ae8a3a53ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_status</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_status  # noqa: E501

Returns the status graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_status(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1341" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1341" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a72babbbfd5dabb4d5022b7e1e25c53f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_status_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_status  # noqa: E501

Returns the status graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_status_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1371" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1371" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aca82a70c338eddf2f1119517d2f433ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the physical graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1472" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1472" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10fcdb8eb1fd609f4e7f4c1e3636e99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the physical graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1504" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1504" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5fab26beb6f415500e3a0f5779a395c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph_status</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph_status(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1614" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1614" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae91143b447f6850f777d4849e76d4709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph_status_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph_status_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1646" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1646" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1abf6161fb223231e2ad27ac0e2a956833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_information</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_information</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the main information of session `sessionId` in node `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_information(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: Session
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1756" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1756" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a41fd0f354eab718032de945302789bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_information_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_information_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the main information of session `sessionId` in node `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_information_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(Session, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1788" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1788" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae9f3611f3677414ab4624033363cf104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_status</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status of `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_status(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: int
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1898" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1898" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5519be51d4455bf8e5346c975d697232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_status_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status of `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_status_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="1930" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1930" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1d28f8db8931884411c83819b85b74af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_sessions</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>get_node_sessions</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_node_sessions  # noqa: E501

Get the list of sessions on `node`, managed by this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_sessions(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: OneOfarrayarray
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2040" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2040" bodyend="2069"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a050711a015b0ae1dd1854f9435832c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_sessions_with_http_info</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>get_node_sessions_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_node_sessions  # noqa: E501

Get the list of sessions on `node`, managed by this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_sessions_with_http_info(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(OneOfarrayarray, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2070" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2070" bodyend="2170"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a18e8c39c947caacd41ffcbfed45bb981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_information</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_information</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_information  # noqa: E501

Returns the main information of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_information(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: Session
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2171" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2171" bodyend="2200"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ab6e75645deb723d7c8183b2f5ccfe9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_information_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_information_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_information  # noqa: E501

Returns the main information of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_information_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(Session, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2201" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2201" bodyend="2301"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9a53d910f3ec5d44dbda025c1fea070c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_status</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_status  # noqa: E501

Returns the status of `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_status(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: int
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2302" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2302" bodyend="2331"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7262a19345fe1c2f72d877c3a478b1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_status_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_status  # noqa: E501

Returns the status of `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_status_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2332" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2332" bodyend="2432"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a645bcf50f73300070a63868c93c965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_sessions</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_sessions</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_sessions  # noqa: E501

Get the list of sessions on this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_sessions(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: SessionInformation
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2433" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2433" bodyend="2460"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ac3aed3b89543463ee9ca548988094c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_sessions_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_sessions_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_sessions  # noqa: E501

Get the list of sessions on this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_sessions_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(SessionInformation, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2461" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2461" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a3bfa07c128535f059ece12c98f2d9b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.remove_cm_node</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>remove_cm_node</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>remove_cm_node  # noqa: E501

Remove `node` from this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.remove_cm_node(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2553" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2553" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8b78ba581cd2b085f26089fc082e68d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.remove_cm_node_with_http_info</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>remove_cm_node_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>remove_cm_node  # noqa: E501

Remove `node` from this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.remove_cm_node_with_http_info(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2583" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2583" bodyend="2679"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7feb4f67feddf4930a4701cc976e41c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.stop_manager</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>stop_manager</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>stop_manager  # noqa: E501

Stop the manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.stop_manager(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2680" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2680" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a094d7f031c6818a492f6a32313f0dc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.stop_manager_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>stop_manager_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>stop_manager  # noqa: E501

Stop the manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.stop_manager_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="2708" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2708" bodyend="2799"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a667038905f9fc4a0f387b37b1b159efa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.__init__</definition>
        <argsstring>(self, api_client=None)</argsstring>
        <name>__init__</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>api_client</type>
          <defname>api_client</defname>
          <defval>None</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="34" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="34" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a7e3aef78c4bdbe9f37e23ab712c142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_cm_node</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>add_cm_node</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_cm_node  # noqa: E501

Add `node` to this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_cm_node(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="39" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="39" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a78d588faf6578de59a46aa2f06b04070" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_cm_node_with_http_info</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>add_cm_node_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_cm_node  # noqa: E501

Add `node` to this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_cm_node_with_http_info(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="69" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="69" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa42af69007df4305326ede046d3de2df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_graph_parts</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>add_graph_parts</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_graph_parts  # noqa: E501

Appends a physical graph to session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_graph_parts(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param body: The graph content to append
:type body: object
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="166" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="166" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae614d5c9b0c72eaf2997a1d2feae8eb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.add_graph_parts_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>add_graph_parts_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>add_graph_parts  # noqa: E501

Appends a physical graph to session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.add_graph_parts_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param body: The graph content to append
:type body: object
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="198" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="198" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d299e04757526e62b5afb445302be59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.cancel_session</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>cancel_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>cancel_session  # noqa: E501

Cancels session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.cancel_session(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="308" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="308" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1b6f12cc4dc42d25a842dc376703e2e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.cancel_session_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>cancel_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>cancel_session  # noqa: E501

Cancels session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.cancel_session_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="338" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="338" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a71adf525c55467fdad465b8b54546fb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.create_session</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>create_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>create_session  # noqa: E501

Create a new session  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.create_session(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param inline_object:
:type inline_object: InlineObject
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="439" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="439" bodyend="468"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a74f5ecbb8e4c46282a2381b107e2a83f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.create_session_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>create_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>create_session  # noqa: E501

Create a new session  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.create_session_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param inline_object:
:type inline_object: InlineObject
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="469" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="469" bodyend="569"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ad20dc34df163de799f1e00e3451627f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.deploy_session</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>deploy_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>deploy_session  # noqa: E501

Deploys session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.deploy_session(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param completed:
:type completed: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="570" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="570" bodyend="601"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10b7cc9e30b3bca3a96ad22f116b1dbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.deploy_session_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>deploy_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>deploy_session  # noqa: E501

Deploys session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.deploy_session_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param completed:
:type completed: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="602" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="602" bodyend="707"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1297ef4f1333c3737e85c241262cdbb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.destroy_session</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>destroy_session</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>destroy_session  # noqa: E501

Removes session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.destroy_session(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="708" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="708" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9132e9797e7f0d5b398f837af46391e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.destroy_session_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>destroy_session_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>destroy_session  # noqa: E501

Removes session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.destroy_session_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="738" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="738" bodyend="838"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9b9fa7761f53614105963be29ee4c4ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_nodes</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_nodes</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the list of nodes covered by this Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_nodes(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: list[str]
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="839" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="839" bodyend="866"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa1ba696c1856f1299244ce2a687a8e83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_nodes_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_nodes_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the list of nodes covered by this Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_nodes_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(list[str], status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="867" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="867" bodyend="958"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a22a1a461be2b873b91fa8c92e59626b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_status</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Return the status of the Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_status(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: CompositeManagerStatus
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="959" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="959" bodyend="986"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1c34680621be209f1378225cb5ad0a28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_cm_status_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_cm_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Return the status of the Composite Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_cm_status_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(CompositeManagerStatus, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="987" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="987" bodyend="1078"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7690cd3d4159c4cc95d18f5c80afbdd5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph  # noqa: E501

Returns the physical graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1079" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1079" bodyend="1108"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a0113ef73a13b54a0ec393867d91e16da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph  # noqa: E501

Returns the physical graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1109" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1109" bodyend="1209"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8147802b36b7732a4fde9822dd193380" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_size</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_size</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_size  # noqa: E501

Returns the size of the graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_size(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: int
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1210" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1210" bodyend="1239"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a38b44631945002e8eef46c4e945547ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_size_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_size_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_size  # noqa: E501

Returns the size of the graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_size_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1240" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1240" bodyend="1340"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d014ad493b64ed8a2c978ae8a3a53ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_status</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_status  # noqa: E501

Returns the status graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_status(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1341" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1341" bodyend="1370"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a72babbbfd5dabb4d5022b7e1e25c53f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_graph_status_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_graph_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_graph_status  # noqa: E501

Returns the status graph of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_graph_status_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1371" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1371" bodyend="1471"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aca82a70c338eddf2f1119517d2f433ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the physical graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1472" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1472" bodyend="1503"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10fcdb8eb1fd609f4e7f4c1e3636e99e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the physical graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1504" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1504" bodyend="1613"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5fab26beb6f415500e3a0f5779a395c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph_status</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph_status(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: object
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1614" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1614" bodyend="1645"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae91143b447f6850f777d4849e76d4709" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_graph_status_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_graph_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status graph of session `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_graph_status_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1646" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1646" bodyend="1755"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1abf6161fb223231e2ad27ac0e2a956833" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_information</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_information</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the main information of session `sessionId` in node `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_information(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: Session
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1756" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1756" bodyend="1787"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a41fd0f354eab718032de945302789bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_information_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_information_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the main information of session `sessionId` in node `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_information_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(Session, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1788" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1788" bodyend="1897"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae9f3611f3677414ab4624033363cf104" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_status</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status of `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_status(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: int
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1898" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1898" bodyend="1929"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5519be51d4455bf8e5346c975d697232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_session_status_with_http_info</definition>
        <argsstring>(self, node, session_id, kwargs)</argsstring>
        <name>get_node_session_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>Your GET endpoint  # noqa: E501

Returns the status of `sessionId` in `node`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_session_status_with_http_info(node, session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="1930" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="1930" bodyend="2039"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1d28f8db8931884411c83819b85b74af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_sessions</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>get_node_sessions</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_node_sessions  # noqa: E501

Get the list of sessions on `node`, managed by this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_sessions(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: OneOfarrayarray
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2040" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2040" bodyend="2069"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a050711a015b0ae1dd1854f9435832c52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_node_sessions_with_http_info</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>get_node_sessions_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_node_sessions  # noqa: E501

Get the list of sessions on `node`, managed by this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_node_sessions_with_http_info(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(OneOfarrayarray, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2070" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2070" bodyend="2170"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a18e8c39c947caacd41ffcbfed45bb981" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_information</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_information</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_information  # noqa: E501

Returns the main information of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_information(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: Session
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2171" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2171" bodyend="2200"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ab6e75645deb723d7c8183b2f5ccfe9b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_information_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_information_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_information  # noqa: E501

Returns the main information of session `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_information_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id:  (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(Session, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2201" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2201" bodyend="2301"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9a53d910f3ec5d44dbda025c1fea070c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_status</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_status</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_status  # noqa: E501

Returns the status of `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_status(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: int
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2302" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2302" bodyend="2331"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7262a19345fe1c2f72d877c3a478b1d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_session_status_with_http_info</definition>
        <argsstring>(self, session_id, kwargs)</argsstring>
        <name>get_session_status_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>session_id</type>
          <defname>session_id</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_session_status  # noqa: E501

Returns the status of `sessionId`  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_session_status_with_http_info(session_id, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param session_id: (required)
:type session_id: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(int, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2332" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2332" bodyend="2432"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a645bcf50f73300070a63868c93c965" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_sessions</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_sessions</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_sessions  # noqa: E501

Get the list of sessions on this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_sessions(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: SessionInformation
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2433" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2433" bodyend="2460"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ac3aed3b89543463ee9ca548988094c64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.get_sessions_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>get_sessions_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>get_sessions  # noqa: E501

Get the list of sessions on this Manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.get_sessions_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: tuple(SessionInformation, status_code(int), headers(HTTPHeaderDict))
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2461" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2461" bodyend="2552"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a3bfa07c128535f059ece12c98f2d9b4b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.remove_cm_node</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>remove_cm_node</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>remove_cm_node  # noqa: E501

Remove `node` from this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.remove_cm_node(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2553" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2553" bodyend="2582"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8b78ba581cd2b085f26089fc082e68d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.remove_cm_node_with_http_info</definition>
        <argsstring>(self, node, kwargs)</argsstring>
        <name>remove_cm_node_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>node</type>
          <defname>node</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>remove_cm_node  # noqa: E501

Remove `node` from this Composite Manager&apos;s nodes list  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.remove_cm_node_with_http_info(node, async_req=True)
&gt;&gt;&gt; result = thread.get()

:param node: (required)
:type node: str
:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2583" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2583" bodyend="2679"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7feb4f67feddf4930a4701cc976e41c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.stop_manager</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>stop_manager</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>stop_manager  # noqa: E501

Stop the manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.stop_manager(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2680" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2680" bodyend="2707"/>
      </memberdef>
      <memberdef kind="function" id="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a094d7f031c6818a492f6a32313f0dc02" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def composite_manager_client.api.default_api.DefaultApi.stop_manager_with_http_info</definition>
        <argsstring>(self, kwargs)</argsstring>
        <name>stop_manager_with_http_info</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <param>
          <type>kwargs</type>
          <defname>kwargs</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>stop_manager  # noqa: E501

Stop the manager  # noqa: E501
This method makes a synchronous HTTP request by default. To make an
asynchronous HTTP request, please pass async_req=True

&gt;&gt;&gt; thread = api.stop_manager_with_http_info(async_req=True)
&gt;&gt;&gt; result = thread.get()

:param async_req: Whether to execute the request asynchronously.
:type async_req: bool, optional
:param _return_http_data_only: response data without head status code
                       and headers
:type _return_http_data_only: bool, optional
:param _preload_content: if False, the urllib3.HTTPResponse object will
                 be returned without reading/decoding response
                 data. Default is True.
:type _preload_content: bool, optional
:param _request_timeout: timeout setting for this request. If one
                 number provided, it will be total request
                 timeout. It can also be a pair (tuple) of
                 (connection, read) timeouts.
:param _request_auth: set to override the auth_settings for an a single
              request; this effectively ignores the authentication
              in the spec for a single request.
:type _request_auth: dict, optional
:return: Returns the result object.
 If the method is called asynchronously,
 returns the request thread.
:rtype: None
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" line="2708" column="1" bodyfile="OpenAPI/tests/editable_copies/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="2708" bodyend="2799"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para><verbatim>NOTE: This class is auto generated by OpenAPI Generator
Ref: https://openapi-generator.tech

Do not edit the class manually.
</verbatim> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2340">
        <label>object</label>
      </node>
      <node id="2339">
        <label>composite_manager_client.api.default_api.DefaultApi</label>
        <link refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi"/>
        <childnode refid="2340" relation="public-inheritance">
        </childnode>
        <childnode refid="2340" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2342">
        <label>object</label>
      </node>
      <node id="2341">
        <label>composite_manager_client.api.default_api.DefaultApi</label>
        <link refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi"/>
        <childnode refid="2342" relation="public-inheritance">
        </childnode>
        <childnode refid="2342" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" line="27" column="1" bodyfile="OpenAPI/tests/composite_manager_client/composite_manager_client/api/default_api.py" bodystart="27" bodyend="2799"/>
    <listofallmembers>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a667038905f9fc4a0f387b37b1b159efa" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>__init__</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a667038905f9fc4a0f387b37b1b159efa" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>__init__</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a7e3aef78c4bdbe9f37e23ab712c142" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_cm_node</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a7e3aef78c4bdbe9f37e23ab712c142" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_cm_node</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a78d588faf6578de59a46aa2f06b04070" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_cm_node_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a78d588faf6578de59a46aa2f06b04070" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_cm_node_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa42af69007df4305326ede046d3de2df" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_graph_parts</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa42af69007df4305326ede046d3de2df" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_graph_parts</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae614d5c9b0c72eaf2997a1d2feae8eb5" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_graph_parts_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae614d5c9b0c72eaf2997a1d2feae8eb5" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>add_graph_parts_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ab29d3d17cf97246f4c7745230ca643db" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>api_client</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d299e04757526e62b5afb445302be59" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>cancel_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d299e04757526e62b5afb445302be59" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>cancel_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1b6f12cc4dc42d25a842dc376703e2e8" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>cancel_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1b6f12cc4dc42d25a842dc376703e2e8" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>cancel_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a71adf525c55467fdad465b8b54546fb8" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>create_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a71adf525c55467fdad465b8b54546fb8" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>create_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a74f5ecbb8e4c46282a2381b107e2a83f" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>create_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a74f5ecbb8e4c46282a2381b107e2a83f" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>create_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ad20dc34df163de799f1e00e3451627f7" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>deploy_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ad20dc34df163de799f1e00e3451627f7" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>deploy_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10b7cc9e30b3bca3a96ad22f116b1dbd" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>deploy_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10b7cc9e30b3bca3a96ad22f116b1dbd" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>deploy_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1297ef4f1333c3737e85c241262cdbb1" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>destroy_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1297ef4f1333c3737e85c241262cdbb1" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>destroy_session</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9132e9797e7f0d5b398f837af46391e0" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>destroy_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9132e9797e7f0d5b398f837af46391e0" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>destroy_session_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9b9fa7761f53614105963be29ee4c4ac" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_nodes</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9b9fa7761f53614105963be29ee4c4ac" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_nodes</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa1ba696c1856f1299244ce2a687a8e83" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_nodes_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aa1ba696c1856f1299244ce2a687a8e83" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_nodes_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a22a1a461be2b873b91fa8c92e59626b7" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a22a1a461be2b873b91fa8c92e59626b7" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1c34680621be209f1378225cb5ad0a28" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1c34680621be209f1378225cb5ad0a28" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_cm_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7690cd3d4159c4cc95d18f5c80afbdd5" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7690cd3d4159c4cc95d18f5c80afbdd5" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8147802b36b7732a4fde9822dd193380" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_size</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8147802b36b7732a4fde9822dd193380" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_size</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a38b44631945002e8eef46c4e945547ab" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_size_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a38b44631945002e8eef46c4e945547ab" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_size_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d014ad493b64ed8a2c978ae8a3a53ad" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5d014ad493b64ed8a2c978ae8a3a53ad" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a72babbbfd5dabb4d5022b7e1e25c53f3" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a72babbbfd5dabb4d5022b7e1e25c53f3" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a0113ef73a13b54a0ec393867d91e16da" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a0113ef73a13b54a0ec393867d91e16da" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_graph_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aca82a70c338eddf2f1119517d2f433ab" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1aca82a70c338eddf2f1119517d2f433ab" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5fab26beb6f415500e3a0f5779a395c3" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5fab26beb6f415500e3a0f5779a395c3" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae91143b447f6850f777d4849e76d4709" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae91143b447f6850f777d4849e76d4709" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10fcdb8eb1fd609f4e7f4c1e3636e99e" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a10fcdb8eb1fd609f4e7f4c1e3636e99e" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_graph_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1abf6161fb223231e2ad27ac0e2a956833" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_information</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1abf6161fb223231e2ad27ac0e2a956833" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_information</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a41fd0f354eab718032de945302789bc5" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_information_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a41fd0f354eab718032de945302789bc5" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_information_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae9f3611f3677414ab4624033363cf104" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ae9f3611f3677414ab4624033363cf104" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5519be51d4455bf8e5346c975d697232" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a5519be51d4455bf8e5346c975d697232" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_session_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1d28f8db8931884411c83819b85b74af" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_sessions</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a1d28f8db8931884411c83819b85b74af" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_sessions</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a050711a015b0ae1dd1854f9435832c52" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_sessions_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a050711a015b0ae1dd1854f9435832c52" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_node_sessions_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a18e8c39c947caacd41ffcbfed45bb981" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_information</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a18e8c39c947caacd41ffcbfed45bb981" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_information</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ab6e75645deb723d7c8183b2f5ccfe9b2" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_information_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ab6e75645deb723d7c8183b2f5ccfe9b2" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_information_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9a53d910f3ec5d44dbda025c1fea070c" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a9a53d910f3ec5d44dbda025c1fea070c" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_status</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7262a19345fe1c2f72d877c3a478b1d9" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7262a19345fe1c2f72d877c3a478b1d9" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_session_status_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a645bcf50f73300070a63868c93c965" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_sessions</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8a645bcf50f73300070a63868c93c965" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_sessions</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ac3aed3b89543463ee9ca548988094c64" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_sessions_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1ac3aed3b89543463ee9ca548988094c64" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>get_sessions_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a3bfa07c128535f059ece12c98f2d9b4b" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>remove_cm_node</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a3bfa07c128535f059ece12c98f2d9b4b" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>remove_cm_node</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8b78ba581cd2b085f26089fc082e68d8" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>remove_cm_node_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a8b78ba581cd2b085f26089fc082e68d8" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>remove_cm_node_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7feb4f67feddf4930a4701cc976e41c4" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>stop_manager</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a7feb4f67feddf4930a4701cc976e41c4" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>stop_manager</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a094d7f031c6818a492f6a32313f0dc02" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>stop_manager_with_http_info</name></member>
      <member refid="classcomposite__manager__client_1_1api_1_1default__api_1_1DefaultApi_1a094d7f031c6818a492f6a32313f0dc02" prot="public" virt="non-virtual"><scope>composite_manager_client::api::default_api::DefaultApi</scope><name>stop_manager_with_http_info</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
