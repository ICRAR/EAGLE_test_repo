<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests" kind="class" language="Python" prot="public">
    <compoundname>test::apps::test_bash::StreamingBashAppTests</compoundname>
    <basecompoundref prot="public" virt="non-virtual">TestCase</basecompoundref>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests_1afd12b0c549321f15b864f4113104642d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test.apps.test_bash.StreamingBashAppTests.test_single_pipe</definition>
        <argsstring>(self)</argsstring>
        <name>test_single_pipe</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>A simple test where two bash apps are connected to each other in a
streaming fashion. The data flows through a pipe which is created by
the framework. The data drop in between acts only as a intermediator
to establish the underlying communication channel.

-------------     --------------     -------------     ----------
| BashApp A | --&gt; | InMemory B | --&gt; | BashApp C | --&gt; | File D |
|   echo    |     | &quot;/a/pipe&quot;  |     |    dc     |     |        |
-----*-------     --------------     ------*------     ----------
     |                                     |
     +-------------|named-pipe|------------+

BashApp A writes &quot;5 4 3 2 1&quot; (each on a new line), which is read by cat
and redirected to D.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/test/apps/test_bash.py" line="111" column="1" bodyfile="daliuge-runtime/test/apps/test_bash.py" bodystart="111" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests_1a01a56a91374f15f07ccd90fb73389cc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>def</type>
        <definition>def test.apps.test_bash.StreamingBashAppTests.test_two_simultaneous_pipes</definition>
        <argsstring>(self)</argsstring>
        <name>test_two_simultaneous_pipes</name>
        <param>
          <type>self</type>
          <defname>self</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><verbatim>A more complicated test where three bash applications run at the same
time. The first streams its output to the second one, while the second
one streams *its* output to the third one.

-------------     --------------     -------------     --------------     -------------     ----------
| BashApp A | --&gt; | InMemory B | --&gt; | BashApp C | --&gt; | InMemory D | --&gt; | BashApp E | --&gt; | File F |
|   echo    |     | &quot;/pipe1&quot;   |     |    dc     |     | &quot;/pipe2&quot;   |     |   sort    |     |        |
-----*-------     --------------     ----*--*-----     --------------     -----*-------     ----------
     |                                   |  |                                  |
     +-------------|named-pipe|----------+  +-----------|named-pipe|-----------+

BashApp A writes &quot;5 4 3 2 1&quot; (each on a new line), which is read
by &quot;cat&quot; (BashApp C). The printed results (a copy of the original) are
streamed through D and read by &quot;sort&quot; (BashApp E), which writes the
output to F.
</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="daliuge-runtime/test/apps/test_bash.py" line="152" column="1" bodyfile="daliuge-runtime/test/apps/test_bash.py" bodystart="152" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2899">
        <label>test.apps.test_bash.StreamingBashAppTests</label>
        <link refid="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests"/>
        <childnode refid="2900" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2900">
        <label>TestCase</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2901">
        <label>test.apps.test_bash.StreamingBashAppTests</label>
        <link refid="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests"/>
        <childnode refid="2902" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2902">
        <label>TestCase</label>
      </node>
    </collaborationgraph>
    <location file="daliuge-runtime/test/apps/test_bash.py" line="109" column="1" bodyfile="daliuge-runtime/test/apps/test_bash.py" bodystart="109" bodyend="196"/>
    <listofallmembers>
      <member refid="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests_1afd12b0c549321f15b864f4113104642d" prot="public" virt="non-virtual"><scope>test::apps::test_bash::StreamingBashAppTests</scope><name>test_single_pipe</name></member>
      <member refid="classtest_1_1apps_1_1test__bash_1_1StreamingBashAppTests_1a01a56a91374f15f07ccd90fb73389cc6" prot="public" virt="non-virtual"><scope>test::apps::test_bash::StreamingBashAppTests</scope><name>test_two_simultaneous_pipes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
