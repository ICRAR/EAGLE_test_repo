<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="test__daemon_8py" kind="file" language="Python">
    <compoundname>test_daemon.py</compoundname>
    <innerclass refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon" prot="public">test::manager::test_daemon::TestDaemon</innerclass>
    <innernamespace refid="namespacetest_1_1manager_1_1test__daemon">test::manager::test_daemon</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>ICRAR<sp/>-<sp/>International<sp/>Centre<sp/>for<sp/>Radio<sp/>Astronomy<sp/>Research</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>(c)<sp/>UWA<sp/>-<sp/>The<sp/>University<sp/>of<sp/>Western<sp/>Australia,<sp/>2016</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>Copyright<sp/>by<sp/>UWA<sp/>(in<sp/>the<sp/>framework<sp/>of<sp/>the<sp/>ICRAR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>MA<sp/>02111-1307<sp/><sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>json</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>threading</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>time</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>unittest</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>six.moves<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>http_client<sp/></highlight><highlight class="keyword">as</highlight><highlight class="normal"><sp/>httplib<sp/><sp/></highlight><highlight class="comment">#<sp/>@UnresolvedImport</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>dlg<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>utils,<sp/>restutils</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedlg_1_1manager" kindref="compound">dlg.manager</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>constants</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedlg_1_1manager_1_1client" kindref="compound">dlg.manager.client</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>MasterManagerClient</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/><ref refid="namespacedlg_1_1manager_1_1proc__daemon" kindref="compound">dlg.manager.proc_daemon</ref><sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>DlgDaemon</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal">_TIMEOUT<sp/>=<sp/>10</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon" kindref="compound">TestDaemon</ref>(unittest.TestCase):</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">create_daemon(self,<sp/>*args,<sp/>**kwargs):</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a5aea049d05b4cbd3476103340107048a" kindref="member">_daemon_t</ref><sp/>=<sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a68ad3171a38680a06bc8cd919d7048fa" kindref="member">_daemon</ref><sp/>=<sp/><ref refid="classdlg_1_1manager_1_1proc__daemon_1_1DlgDaemon" kindref="compound">DlgDaemon</ref>(*args,<sp/>**kwargs)</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;noNM&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kwargs<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>kwargs[</highlight><highlight class="stringliteral">&apos;noNM&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(utils.portIsOpen(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>constants.NODE_DEFAULT_REST_PORT,<sp/>_TIMEOUT),<sp/></highlight><highlight class="stringliteral">&apos;The<sp/>NM<sp/>did<sp/>not<sp/>start<sp/>successfully&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&apos;master&apos;</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>kwargs<sp/></highlight><highlight class="keywordflow">and</highlight><highlight class="normal"><sp/>kwargs[</highlight><highlight class="stringliteral">&apos;master&apos;</highlight><highlight class="normal">]:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(utils.portIsOpen(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>constants.MASTER_DEFAULT_REST_PORT,<sp/>_TIMEOUT),<sp/></highlight><highlight class="stringliteral">&apos;The<sp/>MM<sp/>did<sp/>not<sp/>start<sp/>successfully&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a5aea049d05b4cbd3476103340107048a" kindref="member">_daemon_t</ref><sp/>=<sp/>threading.Thread(target=</highlight><highlight class="keyword">lambda</highlight><highlight class="normal">:<sp/>self._daemon.start(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>9000))</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._daemon_t.start()</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Wait<sp/>until<sp/>the<sp/>daemon&apos;s<sp/>server<sp/>has<sp/>started</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>can&apos;t<sp/>simply<sp/>check<sp/>if<sp/>the<sp/>port<sp/>is<sp/>opened,<sp/>because<sp/>the<sp/>server<sp/>binds</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>before<sp/>it<sp/>is<sp/>returned<sp/>to<sp/>us.<sp/>In<sp/>some<sp/>tests<sp/>we<sp/>don&apos;t<sp/>interact<sp/>with<sp/>it,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>and<sp/>therefore<sp/>the<sp/>shutdown<sp/>of<sp/>the<sp/>daemon<sp/>can<sp/>occur<sp/>before<sp/>the<sp/>server</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>is<sp/>even<sp/>returned<sp/>to<sp/>us.<sp/>This<sp/>would<sp/>happen<sp/>because<sp/>portIsOpen<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>succeed<sp/>with<sp/>a<sp/>bound<sp/>server,<sp/>even<sp/>if<sp/>we<sp/>haven&apos;t<sp/>serve_forever()&apos;d<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>yet.<sp/>In<sp/>these<sp/>situations<sp/>shutting<sp/>down<sp/>the<sp/>daemon<sp/>will<sp/>not<sp/>shut<sp/>down</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>http<sp/>server,<sp/>and<sp/>therefore<sp/>the<sp/>test<sp/>will<sp/>fail<sp/>when<sp/>checking<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>the<sp/>self._daemon_t<sp/>is<sp/>not<sp/>alive<sp/>anymore</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>To<sp/>actually<sp/>avoid<sp/>this<sp/>we<sp/>need<sp/>to<sp/>do<sp/>some<sp/>actual<sp/>HTTP<sp/>talk,<sp/>which<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>ensure<sp/>the<sp/>server<sp/>is<sp/>actually<sp/>serving<sp/>requests,<sp/>and<sp/>therefore<sp/>already</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>in<sp/>the<sp/>daemon&apos;s<sp/>hand</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#self.assertTrue(utils.portIsOpen(&apos;localhost&apos;,<sp/>9000,<sp/>_TIMEOUT))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>restutils.RestClient(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>9000,<sp/>10)._GET(</highlight><highlight class="stringliteral">&apos;/anything&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal"><sp/>restutils.RestClientException:</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>We<sp/>don&apos;t<sp/>care<sp/>about<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">pass</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">tearDown(self):</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a5aea049d05b4cbd3476103340107048a" kindref="member">_daemon_t</ref><sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._daemon.stop(_TIMEOUT)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._daemon_t.join(_TIMEOUT)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertFalse(self._daemon_t.is_alive(),<sp/></highlight><highlight class="stringliteral">&quot;Daemon<sp/>running<sp/>thread<sp/>should<sp/>have<sp/>finished<sp/>by<sp/>now&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(utils.portIsClosed(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>9000,<sp/>_TIMEOUT),<sp/></highlight><highlight class="stringliteral">&apos;DALiuGE<sp/>Daemon<sp/>REST<sp/>interface<sp/>should<sp/>be<sp/>off&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unittest.TestCase.tearDown(self)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_nm_starts(self):</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Simplest<sp/>case...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a9fda9781a80f5f089f32b17e140d8213" kindref="member">create_daemon</ref>(master=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>noNM=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>disable_zeroconf=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_mm_starts(self):</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Start<sp/>with<sp/>the<sp/>MM<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a9fda9781a80f5f089f32b17e140d8213" kindref="member">create_daemon</ref>(master=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>noNM=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>disable_zeroconf=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_nothing_starts(self):</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Nothing<sp/>should<sp/>start<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a9fda9781a80f5f089f32b17e140d8213" kindref="member">create_daemon</ref>(master=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>noNM=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>disable_zeroconf=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertFalse(utils.portIsOpen(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>constants.NODE_DEFAULT_REST_PORT,<sp/>0),<sp/></highlight><highlight class="stringliteral">&apos;NM<sp/>started<sp/>but<sp/>it<sp/>should<sp/>not<sp/>have&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertFalse(utils.portIsOpen(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>constants.MASTER_DEFAULT_REST_PORT,<sp/>0),<sp/></highlight><highlight class="stringliteral">&apos;NM<sp/>started<sp/>but<sp/>it<sp/>should<sp/>not<sp/>have&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_start_master_via_rest(self):</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a9fda9781a80f5f089f32b17e140d8213" kindref="member">create_daemon</ref>(master=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>noNM=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>disable_zeroconf=</highlight><highlight class="keyword">True</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>master<sp/>starts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1ad6869e7873a623067341e9f57c969d31" kindref="member">_start</ref>(</highlight><highlight class="stringliteral">&apos;master&apos;</highlight><highlight class="normal">,<sp/>httplib.OK)</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(utils.portIsOpen(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>constants.MASTER_DEFAULT_REST_PORT,<sp/>_TIMEOUT),<sp/></highlight><highlight class="stringliteral">&apos;The<sp/>MM<sp/>did<sp/>not<sp/>start<sp/>successfully&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_zeroconf_discovery(self):</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a9fda9781a80f5f089f32b17e140d8213" kindref="member">create_daemon</ref>(master=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>noNM=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>disable_zeroconf=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Both<sp/>managers<sp/>started<sp/>fine.<sp/>If<sp/>they<sp/>zeroconf<sp/>themselves<sp/>correctly<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>we<sp/>query<sp/>the<sp/>MM<sp/>it<sp/>should<sp/>know<sp/>about<sp/>its<sp/>nodes,<sp/>which<sp/>should<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>one<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes<sp/>=<sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1ac5028260745e4a6ba94bdce77820984c" kindref="member">_get_nodes_from_master</ref>(_TIMEOUT)</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIsNotNone(nodes)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(1,<sp/>len(nodes),<sp/></highlight><highlight class="stringliteral">&quot;MasterManager<sp/>didn&apos;t<sp/>find<sp/>the<sp/>NodeManager<sp/>running<sp/>on<sp/>the<sp/>same<sp/>node&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">test_start_dataisland_via_rest(self):</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1a9fda9781a80f5f089f32b17e140d8213" kindref="member">create_daemon</ref>(master=</highlight><highlight class="keyword">True</highlight><highlight class="normal">,<sp/>noNM=</highlight><highlight class="keyword">False</highlight><highlight class="normal">,<sp/>disable_zeroconf=</highlight><highlight class="keyword">False</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Both<sp/>managers<sp/>started<sp/>fine.<sp/>If<sp/>they<sp/>zeroconf<sp/>themselves<sp/>correctly<sp/>then</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>if<sp/>we<sp/>query<sp/>the<sp/>MM<sp/>it<sp/>should<sp/>know<sp/>about<sp/>its<sp/>nodes,<sp/>which<sp/>should<sp/>have</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>one<sp/>element</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes<sp/>=<sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1ac5028260745e4a6ba94bdce77820984c" kindref="member">_get_nodes_from_master</ref>(_TIMEOUT)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertIsNotNone(nodes)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(1,<sp/>len(nodes),<sp/></highlight><highlight class="stringliteral">&quot;MasterManager<sp/>didn&apos;t<sp/>find<sp/>the<sp/>NodeManager<sp/>running<sp/>on<sp/>the<sp/>same<sp/>node&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Check<sp/>that<sp/>the<sp/>DataIsland<sp/>starts<sp/>with<sp/>the<sp/>given<sp/>nodes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classtest_1_1manager_1_1test__daemon_1_1TestDaemon_1ad6869e7873a623067341e9f57c969d31" kindref="member">_start</ref>(</highlight><highlight class="stringliteral">&apos;dataisland&apos;</highlight><highlight class="normal">,<sp/>httplib.OK,<sp/>{</highlight><highlight class="stringliteral">&apos;nodes&apos;</highlight><highlight class="normal">:<sp/>nodes})</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertTrue(utils.portIsOpen(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>constants.ISLAND_DEFAULT_REST_PORT,<sp/>_TIMEOUT),<sp/></highlight><highlight class="stringliteral">&apos;The<sp/>DIM<sp/>did<sp/>not<sp/>start<sp/>successfully&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_start(self,<sp/>manager_name,<sp/>expected_code,<sp/>payload=None):</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conn<sp/>=<sp/>httplib.HTTPConnection(</highlight><highlight class="stringliteral">&apos;localhost&apos;</highlight><highlight class="normal">,<sp/>9000)</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers<sp/>=<sp/>{}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>payload:</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>payload<sp/>=<sp/>json.dumps(payload)</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>headers[</highlight><highlight class="stringliteral">&apos;Content-Type&apos;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="stringliteral">&apos;application/json&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conn.request(</highlight><highlight class="stringliteral">&apos;POST&apos;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&apos;/managers/%s&apos;</highlight><highlight class="normal"><sp/>%<sp/>(manager_name,),<sp/>body=payload,<sp/>headers=headers)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response<sp/>=<sp/>conn.getresponse()</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.assertEqual(expected_code,<sp/>response.status,<sp/>response.read())</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>response.close()</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>conn.close()</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">_get_nodes_from_master(self,<sp/>timeout):</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mc<sp/>=<sp/>MasterManagerClient()</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeout_time<sp/>=<sp/>time.time()<sp/>+<sp/>timeout</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>time.time()<sp/>&lt;<sp/>timeout_time:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nodes<sp/>=<sp/>mc.nodes()</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>nodes:</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nodes</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.sleep(0.1)</highlight></codeline>
    </programlisting>
    <location file="daliuge-runtime/test/manager/test_daemon.py"/>
  </compounddef>
</doxygen>
