<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="droputils_8py" kind="file" language="Python">
    <compoundname>droputils.py</compoundname>
    <innerclass refid="classdlg_1_1droputils_1_1EvtConsumer" prot="public">dlg::droputils::EvtConsumer</innerclass>
    <innerclass refid="classdlg_1_1droputils_1_1DROPWaiterCtx" prot="public">dlg::droputils::DROPWaiterCtx</innerclass>
    <innerclass refid="classdlg_1_1droputils_1_1DROPFile" prot="public">dlg::droputils::DROPFile</innerclass>
    <innernamespace refid="namespacedlg_1_1droputils">dlg::droputils</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>ICRAR<sp/>-<sp/>International<sp/>Centre<sp/>for<sp/>Radio<sp/>Astronomy<sp/>Research</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>(c)<sp/>UWA<sp/>-<sp/>The<sp/>University<sp/>of<sp/>Western<sp/>Australia,<sp/>2015</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>Copyright<sp/>by<sp/>UWA<sp/>(in<sp/>the<sp/>framework<sp/>of<sp/>the<sp/>ICRAR)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>All<sp/>rights<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>modify<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>License<sp/>as<sp/>published<sp/>by<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>version<sp/>2.1<sp/>of<sp/>the<sp/>License,<sp/>or<sp/>(at<sp/>your<sp/>option)<sp/>any<sp/>later<sp/>version.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>This<sp/>library<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the<sp/>GNU</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>Lesser<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>Lesser<sp/>General<sp/>Public</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>License<sp/>along<sp/>with<sp/>this<sp/>library;<sp/>if<sp/>not,<sp/>write<sp/>to<sp/>the<sp/>Free<sp/>Software</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>Foundation,<sp/>Inc.,<sp/>59<sp/>Temple<sp/>Place,<sp/>Suite<sp/>330,<sp/>Boston,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/>MA<sp/>02111-1307<sp/><sp/>USA</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="23"><highlight class="stringliteral">Utility<sp/>methods<sp/>and<sp/>classes<sp/>to<sp/>be<sp/>used<sp/>when<sp/>interacting<sp/>with<sp/>DROPs</highlight></codeline>
<codeline lineno="24"><highlight class="stringliteral">&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>collections</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>logging</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>re</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>threading</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>traceback</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>six</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.ddap_protocol<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>DROPStates</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.drop<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>AppDROP</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.io<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>IOForURL,<sp/>OpenMode</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">from</highlight><highlight class="normal"><sp/>.<sp/></highlight><highlight class="keyword">import</highlight><highlight class="normal"><sp/>common</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal">logger<sp/>=<sp/>logging.getLogger(__name__)</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Used<sp/>to<sp/>check<sp/>whether<sp/>a<sp/>command<sp/>specifies<sp/>via<sp/>UID<sp/>reference<sp/>the<sp/>path<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">#<sp/>data<sp/>URL<sp/>of<sp/>an<sp/>input<sp/>or<sp/>output</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal">indexed_ipath_pattern<sp/><sp/><sp/><sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;.*%i\[.+\].*&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="45"><highlight class="normal">indexed_opath_pattern<sp/><sp/><sp/><sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;.*%o\[.+\].*&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="46"><highlight class="normal">indexed_idataurl_pattern<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;.*%iDataURL\[.+\].*&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">indexed_odataurl_pattern<sp/>=<sp/>re.compile(</highlight><highlight class="stringliteral">r&quot;.*%oDataURL\[.+\].*&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classdlg_1_1droputils_1_1EvtConsumer" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdlg_1_1droputils_1_1EvtConsumer" kindref="compound">EvtConsumer</ref>(object):</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="51"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Small<sp/>utility<sp/>class<sp/>that<sp/>sets<sp/>the<sp/>internal<sp/>flag<sp/>of<sp/>the<sp/>given<sp/>threading.Event</highlight></codeline>
<codeline lineno="52"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>object<sp/>when<sp/>consuming<sp/>a<sp/>DROP.<sp/>Used<sp/>throughout<sp/>the<sp/>tests<sp/>as<sp/>a<sp/>barrier<sp/>to<sp/>wait</highlight></codeline>
<codeline lineno="53"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>until<sp/>all<sp/>DROPs<sp/>of<sp/>a<sp/>given<sp/>graph<sp/>have<sp/>executed.</highlight></codeline>
<codeline lineno="54"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>evt,<sp/>expected_states=[]):</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1EvtConsumer_1a77abae55000c1729e515e4e9cd0ff2c9" kindref="member">_evt</ref><sp/>=<sp/>evt</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1EvtConsumer_1ace9a1f6f5266957413e466513fad989a" kindref="member">_expected_states</ref><sp/>=<sp/>expected_states<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(DROPStates.COMPLETED,<sp/>DROPStates.ERROR)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">handleEvent(self,<sp/>e):</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>e.status<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1EvtConsumer_1ace9a1f6f5266957413e466513fad989a" kindref="member">_expected_states</ref>:</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._evt.set()</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classdlg_1_1droputils_1_1DROPWaiterCtx" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx" kindref="compound">DROPWaiterCtx</ref>(object):</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="65"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Class<sp/>used<sp/>by<sp/>unit<sp/>tests<sp/>to<sp/>trigger<sp/>the<sp/>execution<sp/>of<sp/>a<sp/>physical<sp/>graph<sp/>and</highlight></codeline>
<codeline lineno="66"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>wait<sp/>until<sp/>the<sp/>given<sp/>set<sp/>of<sp/>DROPs<sp/>have<sp/>reached<sp/>its<sp/>COMPLETED<sp/>status.</highlight></codeline>
<codeline lineno="67"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="68"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>does<sp/>so<sp/>by<sp/>appending<sp/>an<sp/>EvtConsumer<sp/>consumer<sp/>to<sp/>each<sp/>DROP<sp/>before<sp/>they<sp/>are</highlight></codeline>
<codeline lineno="69"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>used<sp/>in<sp/>the<sp/>execution,<sp/>and<sp/>finally<sp/>checking<sp/>that<sp/>the<sp/>events<sp/>have<sp/>been<sp/>set.</highlight></codeline>
<codeline lineno="70"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>It<sp/>should<sp/>be<sp/>used<sp/>like<sp/>this<sp/>inside<sp/>a<sp/>test<sp/>class::</highlight></codeline>
<codeline lineno="71"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="72"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>#<sp/>There<sp/>is<sp/>a<sp/>physical<sp/>graph<sp/>that<sp/>looks<sp/>like:<sp/>a<sp/>-&gt;<sp/>b<sp/>-&gt;<sp/>c</highlight></codeline>
<codeline lineno="73"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/>with<sp/>DROPWaiterCtx(self,<sp/>c):</highlight></codeline>
<codeline lineno="74"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.write(&apos;a&apos;)</highlight></codeline>
<codeline lineno="75"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a.setCompleted()</highlight></codeline>
<codeline lineno="76"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>test,<sp/>drops,<sp/>timeout=1,<sp/>expected_states=[]):</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1aa66b24583b1cdd1acbfb890ca300670f" kindref="member">_drops</ref><sp/>=<sp/>listify(drops)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1acf66ade09e914ad4bf628e0e57a2d24f" kindref="member">_expected_states</ref><sp/>=<sp/>expected_states<sp/></highlight><highlight class="keywordflow">or</highlight><highlight class="normal"><sp/>(DROPStates.COMPLETED,<sp/>DROPStates.ERROR)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1a73f54a869acdc3de89b051cd59179191" kindref="member">_test</ref><sp/>=<sp/>test</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1a182df5c2290dfbd8a5f483aa2016b6fc" kindref="member">_timeout</ref><sp/>=<sp/>timeout</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1a452870c87680089a117ac28c90a5962b" kindref="member">_evts</ref><sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__enter__(self):</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>drop<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1aa66b24583b1cdd1acbfb890ca300670f" kindref="member">_drops</ref>:</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>evt<sp/>=<sp/>threading.Event()</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>drop.subscribe(<ref refid="classdlg_1_1droputils_1_1EvtConsumer" kindref="compound">EvtConsumer</ref>(evt,<sp/>expected_states=self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1acf66ade09e914ad4bf628e0e57a2d24f" kindref="member">_expected_states</ref>),<sp/></highlight><highlight class="stringliteral">&apos;status&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._evts.append(evt)</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__exit__(self,<sp/>typ,<sp/>value,<sp/>tb):</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>typ<sp/></highlight><highlight class="keywordflow">is</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">None</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>traceback.print_tb(tb)</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._test.fail(</highlight><highlight class="stringliteral">&apos;%r&apos;</highlight><highlight class="normal"><sp/>%<sp/>(value,))</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>=<sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1a182df5c2290dfbd8a5f483aa2016b6fc" kindref="member">_timeout</ref></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>evt<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPWaiterCtx_1a452870c87680089a117ac28c90a5962b" kindref="member">_evts</ref>:</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._test.assertTrue(evt.wait(to),<sp/></highlight><highlight class="stringliteral">&quot;Waiting<sp/>for<sp/>DROP<sp/>failed<sp/>with<sp/>timeout<sp/>%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>to)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">allDropContents(drop,<sp/>bufsize=4096):</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="101"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns<sp/>all<sp/>the<sp/>data<sp/>contained<sp/>in<sp/>a<sp/>given<sp/>DROP</highlight></codeline>
<codeline lineno="102"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>six.BytesIO()</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>desc<sp/>=<sp/>drop.open()</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>read<sp/>=<sp/>drop.read</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>read(desc,<sp/>bufsize)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>data:</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf.write(data)</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>drop.close(desc)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buf.getvalue()</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">copyDropContents(source,<sp/>target,<sp/>bufsize=4096):</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&apos;&apos;&apos;</highlight></codeline>
<codeline lineno="117"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Manually<sp/>copies<sp/>data<sp/>from<sp/>one<sp/>DROP<sp/>into<sp/>another,<sp/>in<sp/>bufsize<sp/>steps</highlight></codeline>
<codeline lineno="118"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&apos;&apos;&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>desc<sp/>=<sp/>source.open()</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>read<sp/>=<sp/>source.read</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>read(desc,<sp/>bufsize)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>buf:</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>target.write(buf)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buf<sp/>=<sp/>read(desc,<sp/>bufsize)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>source.close(desc)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getUpstreamObjects(drop):</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="129"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>all<sp/>direct<sp/>&quot;upstream&quot;<sp/>DROPs<sp/>for<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="130"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DROP.<sp/>An<sp/>DROP<sp/>A<sp/>is<sp/>&quot;upstream&quot;<sp/>with<sp/>respect<sp/>to<sp/>DROP<sp/>B<sp/>if</highlight></codeline>
<codeline lineno="131"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>any<sp/>of<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>true:</highlight></codeline>
<codeline lineno="132"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="133"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>is<sp/>a<sp/>producer<sp/>of<sp/>B<sp/>(therefore<sp/>A<sp/>is<sp/>an<sp/>AppDROP)</highlight></codeline>
<codeline lineno="134"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>is<sp/>a<sp/>normal<sp/>or<sp/>streaming<sp/>input<sp/>of<sp/>B<sp/>(and<sp/>B<sp/>is<sp/>therefore<sp/>an<sp/>AppDROP)</highlight></codeline>
<codeline lineno="135"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="136"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>practice<sp/>if<sp/>A<sp/>is<sp/>an<sp/>upstream<sp/>DROP<sp/>of<sp/>B<sp/>means<sp/>that<sp/>it<sp/>must<sp/>be<sp/>moved</highlight></codeline>
<codeline lineno="137"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>to<sp/>the<sp/>COMPLETED<sp/>state<sp/>before<sp/>B<sp/>can<sp/>do<sp/>so.</highlight></codeline>
<codeline lineno="138"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>upObjs<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(drop,<sp/>AppDROP):</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upObjs<sp/>+=<sp/>drop.inputs</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upObjs<sp/>+=<sp/>drop.streamingInputs</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>upObjs<sp/>+=<sp/>drop.producers</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>upObjs</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getDownstreamObjects(drop):</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="149"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>all<sp/>direct<sp/>&quot;downstream&quot;<sp/>DROPs<sp/>for<sp/>the<sp/>given</highlight></codeline>
<codeline lineno="150"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DROP.<sp/>An<sp/>DROP<sp/>A<sp/>is<sp/>&quot;downstream&quot;<sp/>with<sp/>respect<sp/>to<sp/>DROP<sp/>B<sp/>if</highlight></codeline>
<codeline lineno="151"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>any<sp/>of<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>true:</highlight></codeline>
<codeline lineno="152"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>is<sp/>an<sp/>output<sp/>of<sp/>B<sp/>(therefore<sp/>B<sp/>is<sp/>an<sp/>AppDROP)</highlight></codeline>
<codeline lineno="153"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>A<sp/>is<sp/>a<sp/>normal<sp/>or<sp/>streaming<sp/>consumer<sp/>of<sp/>B<sp/>(and<sp/>A<sp/>is<sp/>therefore<sp/>an<sp/>AppDROP)</highlight></codeline>
<codeline lineno="154"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="155"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>In<sp/>practice<sp/>if<sp/>A<sp/>is<sp/>a<sp/>downstream<sp/>DROP<sp/>of<sp/>B<sp/>means<sp/>that<sp/>it<sp/>cannot</highlight></codeline>
<codeline lineno="156"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>advance<sp/>to<sp/>the<sp/>COMPLETED<sp/>state<sp/>until<sp/>B<sp/>does<sp/>so.</highlight></codeline>
<codeline lineno="157"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>downObjs<sp/>=<sp/>[]</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(drop,<sp/>AppDROP):</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downObjs<sp/>+=<sp/>drop.outputs</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downObjs<sp/>+=<sp/>drop.consumers</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>downObjs<sp/>+=<sp/>drop.streamingConsumers</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>downObjs</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">getLeafNodes(nodes):</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="168"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Returns<sp/>a<sp/>list<sp/>of<sp/>all<sp/>the<sp/>&quot;leaf<sp/>nodes&quot;<sp/>of<sp/>the<sp/>graph<sp/>pointed<sp/>by<sp/>`nodes`.</highlight></codeline>
<codeline lineno="169"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>`nodes`<sp/>is<sp/>either<sp/>a<sp/>single<sp/>DROP,<sp/>or<sp/>a<sp/>list<sp/>of<sp/>DROPs.</highlight></codeline>
<codeline lineno="170"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>nodes<sp/>=<sp/>listify(nodes)</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[drop<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>drop,_<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>breadFirstTraverse(nodes)<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>getDownstreamObjects(drop)]</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">depthFirstTraverse(node,<sp/>visited<sp/>=<sp/>[]):</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="176"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Depth-first<sp/>iterator<sp/>for<sp/>a<sp/>DROP<sp/>graph.</highlight></codeline>
<codeline lineno="177"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="178"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>iterator<sp/>yields<sp/>a<sp/>tuple<sp/>where<sp/>the<sp/>first<sp/>item<sp/>is<sp/>the<sp/>node<sp/>being<sp/>visited,</highlight></codeline>
<codeline lineno="179"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>the<sp/>second<sp/>is<sp/>a<sp/>list<sp/>of<sp/>nodes<sp/>that<sp/>will<sp/>be<sp/>visited<sp/>subsequently.</highlight></codeline>
<codeline lineno="180"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Callers<sp/>can<sp/>alter<sp/>this<sp/>list<sp/>in<sp/>order<sp/>to<sp/>remove<sp/>certain<sp/>nodes<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="181"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>graph<sp/>traversal<sp/>process.</highlight></codeline>
<codeline lineno="182"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="183"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>implementation<sp/>is<sp/>recursive.</highlight></codeline>
<codeline lineno="184"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>dependencies<sp/>=<sp/>getDownstreamObjects(node)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>node,<sp/>dependencies</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>visited.append(node)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>drop<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>[d<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>d<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dependencies<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>d<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>visited]:</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>depthFirstTraverse(drop,<sp/>visited):</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>x</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">breadFirstTraverse(toVisit):</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="196"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Breadth-first<sp/>iterator<sp/>for<sp/>a<sp/>DROP<sp/>graph.</highlight></codeline>
<codeline lineno="197"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="198"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>iterator<sp/>yields<sp/>a<sp/>tuple<sp/>where<sp/>the<sp/>first<sp/>item<sp/>is<sp/>the<sp/>node<sp/>being<sp/>visited,</highlight></codeline>
<codeline lineno="199"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>and<sp/>the<sp/>second<sp/>is<sp/>a<sp/>list<sp/>of<sp/>nodes<sp/>that<sp/>will<sp/>be<sp/>visited<sp/>subsequently.</highlight></codeline>
<codeline lineno="200"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Callers<sp/>can<sp/>alter<sp/>this<sp/>list<sp/>in<sp/>order<sp/>to<sp/>remove<sp/>certain<sp/>nodes<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="201"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>graph<sp/>traversal<sp/>process.</highlight></codeline>
<codeline lineno="202"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="203"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>This<sp/>implementation<sp/>is<sp/>non-recursive.</highlight></codeline>
<codeline lineno="204"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>toVisit_list<sp/>=<sp/>listify(toVisit)[:]</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>toVisit<sp/>=<sp/>collections.deque(toVisit_list)</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>visited<sp/>=<sp/>set(toVisit_list)</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>See<sp/>how<sp/>many<sp/>arguments<sp/>we<sp/>should<sp/>used<sp/>when<sp/>calling<sp/>func</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>toVisit:</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Pay<sp/>the<sp/>node<sp/>a<sp/>visit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>toVisit.popleft()</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dependencies<sp/>=<sp/>getDownstreamObjects(node)</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">yield</highlight><highlight class="normal"><sp/>node,<sp/>dependencies</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Enqueue<sp/>its<sp/>dependencies,<sp/>making<sp/>sure<sp/>they<sp/>are<sp/>enqueued<sp/>only<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next_visits<sp/>=<sp/>[n<sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>n<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>dependencies<sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>n<sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>visited]</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited.update(next_visits)</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toVisit<sp/>+=<sp/>next_visits</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">listify(o):</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="225"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>If<sp/>`o`<sp/>is<sp/>already<sp/>a<sp/>list<sp/>return<sp/>it<sp/>as<sp/>is;<sp/>if<sp/>`o`<sp/>is<sp/>a<sp/>tuple<sp/>returns<sp/>a<sp/>list</highlight></codeline>
<codeline lineno="226"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>containing<sp/>the<sp/>elements<sp/>contained<sp/>in<sp/>the<sp/>tuple;<sp/>otherwise<sp/>returns<sp/>a<sp/>list</highlight></codeline>
<codeline lineno="227"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>with<sp/>`o`<sp/>being<sp/>its<sp/>only<sp/>element</highlight></codeline>
<codeline lineno="228"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(o,<sp/>list):</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>o</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>isinstance(o,<sp/>tuple):</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list(o)</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>[o]</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="classdlg_1_1droputils_1_1DROPFile" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classdlg_1_1droputils_1_1DROPFile" kindref="compound">DROPFile</ref>(object):</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="237"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>A<sp/>file-like<sp/>object<sp/>(currently<sp/>only<sp/>supporting<sp/>the<sp/>read()<sp/>operation,<sp/>more<sp/>to</highlight></codeline>
<codeline lineno="238"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>be<sp/>added<sp/>in<sp/>the<sp/>future)<sp/>that<sp/>wraps<sp/>the<sp/>DROP<sp/>given<sp/>at<sp/>construction</highlight></codeline>
<codeline lineno="239"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>time.</highlight></codeline>
<codeline lineno="240"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="241"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Depending<sp/>on<sp/>the<sp/>underlying<sp/>storage<sp/>of<sp/>the<sp/>data<sp/>the<sp/>file-like<sp/>object</highlight></codeline>
<codeline lineno="242"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>returned<sp/>by<sp/>this<sp/>method<sp/>will<sp/>directly<sp/>access<sp/>the<sp/>data<sp/>pointed<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="243"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>DROP<sp/>if<sp/>possible,<sp/>or<sp/>will<sp/>access<sp/>it<sp/>through<sp/>the<sp/>DROP<sp/>methods</highlight></codeline>
<codeline lineno="244"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>instead.</highlight></codeline>
<codeline lineno="245"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="246"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Objects<sp/>of<sp/>this<sp/>class<sp/>will<sp/>automatically<sp/>close<sp/>themselves<sp/>when<sp/>no<sp/>referenced</highlight></codeline>
<codeline lineno="247"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>anymore<sp/>(i.e.,<sp/>when<sp/>__del__<sp/>is<sp/>called),<sp/>but<sp/>users<sp/>should<sp/>still<sp/>try<sp/>to<sp/>invoke</highlight></codeline>
<codeline lineno="248"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>`close()`<sp/>eagerly<sp/>to<sp/>free<sp/>underlying<sp/>resources.</highlight></codeline>
<codeline lineno="249"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="250"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Objects<sp/>of<sp/>this<sp/>class<sp/>can<sp/>also<sp/>be<sp/>used<sp/>in<sp/>a<sp/>`with`<sp/>context.</highlight></codeline>
<codeline lineno="251"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__init__(self,<sp/>drop):</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1aac05771c7cd7b6047435e068b7190334" kindref="member">_drop</ref><sp/>=<sp/>drop</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1ae3b4ba4509159484cb85ad0458ae9299" kindref="member">_io</ref><sp/>=<sp/>IOForURL(drop.dataURL)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">open(self):</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1ae3b4ba4509159484cb85ad0458ae9299" kindref="member">_io</ref>:</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._io.open(OpenMode.OPEN_READ)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>TODO:<sp/>This<sp/>is<sp/>still<sp/>very<sp/>insufficient,<sp/>since<sp/>when<sp/>we<sp/>`open`<sp/>a<sp/>DROP</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>reading<sp/>we<sp/>don&apos;t<sp/>only<sp/>increment<sp/>its<sp/>reference<sp/>count,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>also<sp/>check<sp/>that<sp/>it&apos;s<sp/>in<sp/>a<sp/>proper<sp/>state,<sp/>and<sp/>we<sp/>also</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>fire<sp/>an<sp/>&apos;open&apos;<sp/>event.<sp/>We<sp/>then<sp/>should<sp/>have<sp/>two<sp/>explicitly</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>different<sp/>mechanisms<sp/>to<sp/>open<sp/>a<sp/>DROP,<sp/>one<sp/>actually<sp/>opening<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>underlying<sp/>storage<sp/>and<sp/>the<sp/>other<sp/>not<sp/>doing<sp/>it<sp/>(because<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>it<sp/>here).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>same<sp/>concerns<sp/>are<sp/>valid<sp/>for<sp/>the<sp/>close()<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._drop.incrRefCount()</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1a4d5081184470bd8f174f439099a27815" kindref="member">_fd</ref><sp/>=<sp/>self._drop.open()</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1addf3865ec69144d9da042427174f9939" kindref="member">_isClosed</ref><sp/>=<sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>@property</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">closed(self):</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1addf3865ec69144d9da042427174f9939" kindref="member">_isClosed</ref></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">close(self):</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1addf3865ec69144d9da042427174f9939" kindref="member">_isClosed</ref>:</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1ae3b4ba4509159484cb85ad0458ae9299" kindref="member">_io</ref>:</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._io.close()</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>See<sp/>the<sp/>comment<sp/>above<sp/>regarding<sp/>the<sp/>call<sp/>to<sp/>drop.incrRefCount()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._drop.decrRefCount()</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self._drop.close(self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1a4d5081184470bd8f174f439099a27815" kindref="member">_fd</ref>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1addf3865ec69144d9da042427174f9939" kindref="member">_isClosed</ref><sp/>=<sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">read(self,<sp/>size=4096):</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1ae3b4ba4509159484cb85ad0458ae9299" kindref="member">_io</ref>:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self._io.read(size)</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self._drop.read(self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1a4d5081184470bd8f174f439099a27815" kindref="member">_fd</ref>,<sp/>size)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Support<sp/>for<sp/>the<sp/>`with`<sp/>keyword</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__enter__(self):</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1a2ed5b3c6dbb9e05cad6fe9b035e873a5" kindref="member">open</ref>()</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>self</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__exit__(self,<sp/>typ,<sp/>value,<sp/>traceback):</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1a9334f25bea323886552203f2d49a08d6" kindref="member">close</ref>()</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">__del__(self):</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">not</highlight><highlight class="normal"><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1addf3865ec69144d9da042427174f9939" kindref="member">_isClosed</ref>:</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>self.<ref refid="classdlg_1_1droputils_1_1DROPFile_1a9334f25bea323886552203f2d49a08d6" kindref="member">close</ref>()</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">has_path(x):</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;Returns<sp/>`True`<sp/>if<sp/>`x`<sp/>has<sp/>a<sp/>`path`<sp/>attribute&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>getattr(x,<sp/></highlight><highlight class="stringliteral">&apos;path&apos;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">True</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">except</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">False</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">replace_path_placeholders(cmd,<sp/>inputs,<sp/>outputs):</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="316"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Replaces<sp/>any<sp/>placeholder<sp/>found<sp/>in<sp/>``cmd``<sp/>with<sp/>the<sp/>path<sp/>of<sp/>the<sp/>respective</highlight></codeline>
<codeline lineno="317"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>input<sp/>or<sp/>output<sp/>Drop<sp/>from<sp/>``inputs``<sp/>or<sp/>``outputs``.</highlight></codeline>
<codeline lineno="318"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Placeholders<sp/>have<sp/>the<sp/>different<sp/>formats:</highlight></codeline>
<codeline lineno="319"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="320"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>``%iN``,<sp/>with<sp/>N<sp/>starting<sp/>from<sp/>0,<sp/>indicates<sp/>the<sp/>path<sp/>of<sp/>the<sp/>N-th<sp/>element</highlight></codeline>
<codeline lineno="321"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>the<sp/>``inputs``<sp/>argument;<sp/>likewise<sp/>for<sp/>``%oN``.</highlight></codeline>
<codeline lineno="322"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>``%i[X]``<sp/>indicates<sp/>the<sp/>path<sp/>of<sp/>the<sp/>input<sp/>with<sp/>UID<sp/>``X``;<sp/>likewise<sp/>for</highlight></codeline>
<codeline lineno="323"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>``%o[X]``.</highlight></codeline>
<codeline lineno="324"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.debug(</highlight><highlight class="stringliteral">&apos;Replacing<sp/>cmd<sp/>%s<sp/>with<sp/>placeholders<sp/>with<sp/>I/O<sp/>uids:<sp/>%r,<sp/>%r&apos;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd,<sp/>inputs.keys(),<sp/>outputs.keys())</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(inputs.values()):</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%i%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>(x,)</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pathRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(pathRef,<sp/>i.path)</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,o<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(outputs.values()):</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%o%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>(x)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pathRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(pathRef,<sp/>o.path)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>inputs.items():</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%i[%s]&quot;</highlight><highlight class="normal"><sp/>%<sp/>(uid,)</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pathRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(pathRef,<sp/>i.path)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,<sp/>o<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>outputs.items():</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pathRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%o[%s]&quot;</highlight><highlight class="normal"><sp/>%<sp/>(uid,)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>pathRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(pathRef,<sp/>o.path)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.debug(</highlight><highlight class="stringliteral">&quot;Command<sp/>after<sp/>path<sp/>placeholder<sp/>replacement<sp/>is:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmd</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">def<sp/></highlight><highlight class="normal">replace_dataurl_placeholders(cmd,<sp/>inputs,<sp/>outputs):</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;&quot;&quot;</highlight></codeline>
<codeline lineno="353"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Replaces<sp/>any<sp/>placeholder<sp/>found<sp/>in<sp/>``cmd``<sp/>with<sp/>the<sp/>dataURL<sp/>property<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="354"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>respective<sp/>input<sp/>or<sp/>output<sp/>Drop<sp/>from<sp/>``inputs``<sp/>or<sp/>``outputs``.</highlight></codeline>
<codeline lineno="355"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>Placeholders<sp/>have<sp/>the<sp/>different<sp/>formats:</highlight></codeline>
<codeline lineno="356"><highlight class="stringliteral"></highlight></codeline>
<codeline lineno="357"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>``%iDataURLN``,<sp/>with<sp/>N<sp/>starting<sp/>from<sp/>0,<sp/>indicates<sp/>the<sp/>path<sp/>of<sp/>the<sp/>N-th</highlight></codeline>
<codeline lineno="358"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>element<sp/>from<sp/>the<sp/>``inputs``<sp/>argument;<sp/>likewise<sp/>for<sp/>``%oDataURLN``.</highlight></codeline>
<codeline lineno="359"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>*<sp/>``%iDataURL[X]``<sp/>indicates<sp/>the<sp/>path<sp/>of<sp/>the<sp/>input<sp/>with<sp/>UID<sp/>``X``;<sp/>likewise</highlight></codeline>
<codeline lineno="360"><highlight class="stringliteral"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>``%oDataURL[X]``.</highlight></codeline>
<codeline lineno="361"><highlight class="stringliteral"><sp/><sp/><sp/><sp/>&quot;&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>Inputs/outputs<sp/>that<sp/>are<sp/>not<sp/>FileDROPs<sp/>or<sp/>DirectoryContainers<sp/>can&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>bind<sp/>their<sp/>data<sp/>via<sp/>volumes<sp/>into<sp/>the<sp/>docker<sp/>container.<sp/>Instead<sp/>they</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">#<sp/>communicate<sp/>their<sp/>dataURL<sp/>via<sp/>command-line<sp/>replacement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(inputs.values()):</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataUrlRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%iDataURL%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>(x,)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dataUrlRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(dataUrlRef,<sp/>i.dataURL)</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>x,o<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>enumerate(outputs.values()):</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataUrlRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%oDataURL%d&quot;</highlight><highlight class="normal"><sp/>%<sp/>(x,)</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dataUrlRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(dataUrlRef,<sp/>o.dataURL)</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,i<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>inputs.items():</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataURLRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%iDataURL[%s]&quot;</highlight><highlight class="normal"><sp/>%<sp/>(uid,)</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dataURLRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(dataURLRef,<sp/>i.dataURL)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>uid,o<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>outputs.items():</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataURLRef<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;%%oDataURL[%s]&quot;</highlight><highlight class="normal"><sp/>%<sp/>(uid,)</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>dataURLRef<sp/></highlight><highlight class="keywordflow">in</highlight><highlight class="normal"><sp/>cmd:</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cmd<sp/>=<sp/>cmd.replace(dataUrlRef,<sp/>o.dataURL)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/>logger.debug(</highlight><highlight class="stringliteral">&quot;Command<sp/>after<sp/>data<sp/>URL<sp/>placeholder<sp/>replacement<sp/>is:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>cmd)</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>cmd</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight><highlight class="comment">#<sp/>Easing<sp/>the<sp/>transition<sp/>from<sp/>single-<sp/>to<sp/>multi-package</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">get_leaves<sp/>=<sp/>common.get_leaves</highlight></codeline>
<codeline lineno="391"><highlight class="normal">get_roots<sp/>=<sp/>common.get_roots</highlight></codeline>
    </programlisting>
    <location file="daliuge-runtime/dlg/droputils.py"/>
  </compounddef>
</doxygen>
